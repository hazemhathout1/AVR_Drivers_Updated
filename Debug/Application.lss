
Application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000086  00800060  00003f70  00004004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008000e6  008000e6  0000408a  2**0
                  ALLOC
  3 .stab         00005bc8  00000000  00000000  0000408c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002f03  00000000  00000000  00009c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000cb57  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000cc97  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000ce07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ea50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000f93b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000106e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00010848  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00010ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000112a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__vector_1>
       8:	0c 94 b3 08 	jmp	0x1166	; 0x1166 <__vector_2>
       c:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3e       	cpi	r26, 0xE6	; 230
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ee       	ldi	r26, 0xE6	; 230
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3e       	cpi	r26, 0xEF	; 239
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 94 1b 	call	0x3728	; 0x3728 <main>
      8a:	0c 94 b6 1f 	jmp	0x3f6c	; 0x3f6c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d7 1c 	jmp	0x39ae	; 0x39ae <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e6       	ldi	r26, 0x63	; 99
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f3 1c 	jmp	0x39e6	; 0x39e6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e3 1c 	jmp	0x39c6	; 0x39c6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ff 1c 	jmp	0x39fe	; 0x39fe <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e3 1c 	jmp	0x39c6	; 0x39c6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ff 1c 	jmp	0x39fe	; 0x39fe <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d7 1c 	jmp	0x39ae	; 0x39ae <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e6       	ldi	r24, 0x63	; 99
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f3 1c 	jmp	0x39e6	; 0x39e6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e3 1c 	jmp	0x39c6	; 0x39c6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ff 1c 	jmp	0x39fe	; 0x39fe <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e3 1c 	jmp	0x39c6	; 0x39c6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ff 1c 	jmp	0x39fe	; 0x39fe <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e3 1c 	jmp	0x39c6	; 0x39c6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ff 1c 	jmp	0x39fe	; 0x39fe <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e7 1c 	jmp	0x39ce	; 0x39ce <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 03 1d 	jmp	0x3a06	; 0x3a06 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <interrupt_INTx_init>:
 *
 * @param int_obj
 * @return
 */
STD_ReturnStatus interrupt_INTx_init(const interrupt_INTx_t *int_obj)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <interrupt_INTx_init+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9b 83       	std	Y+3, r25	; 0x03
     b54:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
     b56:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==int_obj)
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	9b 81       	ldd	r25, Y+3	; 0x03
     b5c:	00 97       	sbiw	r24, 0x00	; 0
     b5e:	11 f4       	brne	.+4      	; 0xb64 <interrupt_INTx_init+0x1e>
	{
		ret = E_NOT_OK;
     b60:	19 82       	std	Y+1, r1	; 0x01
     b62:	1e c0       	rjmp	.+60     	; 0xba0 <interrupt_INTx_init+0x5a>
	}
	else
	{
		/*	Disable the External Interrupt*/
		ret = interrupt_INTx_Disable(int_obj);
     b64:	8a 81       	ldd	r24, Y+2	; 0x02
     b66:	9b 81       	ldd	r25, Y+3	; 0x03
     b68:	0e 94 9f 06 	call	0xd3e	; 0xd3e <interrupt_INTx_Disable>
     b6c:	89 83       	std	Y+1, r24	; 0x01
		/*	Clear Interrupt Flag : External interrupt did not occur*/
		ret = interrupt_INTx_Clear_Flag(int_obj);
     b6e:	8a 81       	ldd	r24, Y+2	; 0x02
     b70:	9b 81       	ldd	r25, Y+3	; 0x03
     b72:	0e 94 9b 07 	call	0xf36	; 0xf36 <interrupt_INTx_Clear_Flag>
     b76:	89 83       	std	Y+1, r24	; 0x01
		/*	configure External interrupt edge*/
		ret = interrupt_INTx_Edge_Init(int_obj);
     b78:	8a 81       	ldd	r24, Y+2	; 0x02
     b7a:	9b 81       	ldd	r25, Y+3	; 0x03
     b7c:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <interrupt_INTx_Edge_Init>
     b80:	89 83       	std	Y+1, r24	; 0x01
		/*	configure External interrupt I/O pin*/
		ret = interrupt_INTx_Pin_Init(int_obj);
     b82:	8a 81       	ldd	r24, Y+2	; 0x02
     b84:	9b 81       	ldd	r25, Y+3	; 0x03
     b86:	0e 94 7f 07 	call	0xefe	; 0xefe <interrupt_INTx_Pin_Init>
     b8a:	89 83       	std	Y+1, r24	; 0x01
		/*	configure Default Interrupt Call Back*/
		ret = interrupt_INTx_SetInterruptHandler(int_obj);
     b8c:	8a 81       	ldd	r24, Y+2	; 0x02
     b8e:	9b 81       	ldd	r25, Y+3	; 0x03
     b90:	0e 94 42 08 	call	0x1084	; 0x1084 <interrupt_INTx_SetInterruptHandler>
     b94:	89 83       	std	Y+1, r24	; 0x01
		/*	Enable the External Interrupt*/
		ret = interrupt_INTx_Enable(int_obj);
     b96:	8a 81       	ldd	r24, Y+2	; 0x02
     b98:	9b 81       	ldd	r25, Y+3	; 0x03
     b9a:	0e 94 3d 06 	call	0xc7a	; 0xc7a <interrupt_INTx_Enable>
     b9e:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ba2:	0f 90       	pop	r0
     ba4:	0f 90       	pop	r0
     ba6:	0f 90       	pop	r0
     ba8:	cf 91       	pop	r28
     baa:	df 91       	pop	r29
     bac:	08 95       	ret

00000bae <INT0_ISR>:


void INT0_ISR(void)
{
     bae:	df 93       	push	r29
     bb0:	cf 93       	push	r28
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
	/* Clear flag*/
	EXT_INT0_InterruptFlagClear();
     bb6:	aa e5       	ldi	r26, 0x5A	; 90
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	ea e5       	ldi	r30, 0x5A	; 90
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	80 64       	ori	r24, 0x40	; 64
     bc2:	8c 93       	st	X, r24
	/* Code */

	/*	call back */
	if(INT0_InterruptHandler)
     bc4:	80 91 e6 00 	lds	r24, 0x00E6
     bc8:	90 91 e7 00 	lds	r25, 0x00E7
     bcc:	00 97       	sbiw	r24, 0x00	; 0
     bce:	29 f0       	breq	.+10     	; 0xbda <INT0_ISR+0x2c>
	{
		INT0_InterruptHandler();
     bd0:	e0 91 e6 00 	lds	r30, 0x00E6
     bd4:	f0 91 e7 00 	lds	r31, 0x00E7
     bd8:	09 95       	icall
	}
}
     bda:	cf 91       	pop	r28
     bdc:	df 91       	pop	r29
     bde:	08 95       	ret

00000be0 <INT1_ISR>:


void INT1_ISR(void)
{
     be0:	df 93       	push	r29
     be2:	cf 93       	push	r28
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
	/* Clear flag*/
	EXT_INT1_InterruptFlagClear();
     be8:	aa e5       	ldi	r26, 0x5A	; 90
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	ea e5       	ldi	r30, 0x5A	; 90
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	80 68       	ori	r24, 0x80	; 128
     bf4:	8c 93       	st	X, r24
	/* Code */

	/*	call back */
	if(INT1_InterruptHandler)
     bf6:	80 91 e8 00 	lds	r24, 0x00E8
     bfa:	90 91 e9 00 	lds	r25, 0x00E9
     bfe:	00 97       	sbiw	r24, 0x00	; 0
     c00:	29 f0       	breq	.+10     	; 0xc0c <INT1_ISR+0x2c>
	{
		INT1_InterruptHandler();
     c02:	e0 91 e8 00 	lds	r30, 0x00E8
     c06:	f0 91 e9 00 	lds	r31, 0x00E9
     c0a:	09 95       	icall
	}
}
     c0c:	cf 91       	pop	r28
     c0e:	df 91       	pop	r29
     c10:	08 95       	ret

00000c12 <INT2_ISR>:


void INT2_ISR(void)
{
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	cd b7       	in	r28, 0x3d	; 61
     c18:	de b7       	in	r29, 0x3e	; 62
	/* Clear flag*/
	EXT_INT2_InterruptFlagClear();
     c1a:	aa e5       	ldi	r26, 0x5A	; 90
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	ea e5       	ldi	r30, 0x5A	; 90
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	80 62       	ori	r24, 0x20	; 32
     c26:	8c 93       	st	X, r24
	/* Code */

	/*	call back */
	if(INT2_InterruptHandler)
     c28:	80 91 ea 00 	lds	r24, 0x00EA
     c2c:	90 91 eb 00 	lds	r25, 0x00EB
     c30:	00 97       	sbiw	r24, 0x00	; 0
     c32:	29 f0       	breq	.+10     	; 0xc3e <INT2_ISR+0x2c>
	{
		INT2_InterruptHandler();
     c34:	e0 91 ea 00 	lds	r30, 0x00EA
     c38:	f0 91 eb 00 	lds	r31, 0x00EB
     c3c:	09 95       	icall
	}
}
     c3e:	cf 91       	pop	r28
     c40:	df 91       	pop	r29
     c42:	08 95       	ret

00000c44 <interrupt_INTx_Deinit>:
 *
 * @param int_obj
 * @return
 */
STD_ReturnStatus interrupt_INTx_Deinit(const interrupt_INTx_t *int_obj)
{
     c44:	df 93       	push	r29
     c46:	cf 93       	push	r28
     c48:	00 d0       	rcall	.+0      	; 0xc4a <interrupt_INTx_Deinit+0x6>
     c4a:	0f 92       	push	r0
     c4c:	cd b7       	in	r28, 0x3d	; 61
     c4e:	de b7       	in	r29, 0x3e	; 62
     c50:	9b 83       	std	Y+3, r25	; 0x03
     c52:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
     c54:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==int_obj)
     c56:	8a 81       	ldd	r24, Y+2	; 0x02
     c58:	9b 81       	ldd	r25, Y+3	; 0x03
     c5a:	00 97       	sbiw	r24, 0x00	; 0
     c5c:	11 f4       	brne	.+4      	; 0xc62 <interrupt_INTx_Deinit+0x1e>
	{
		ret = E_NOT_OK;
     c5e:	19 82       	std	Y+1, r1	; 0x01
     c60:	05 c0       	rjmp	.+10     	; 0xc6c <interrupt_INTx_Deinit+0x28>
	}
	else
	{
		ret = interrupt_INTx_Disable(int_obj);
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	9b 81       	ldd	r25, Y+3	; 0x03
     c66:	0e 94 9f 06 	call	0xd3e	; 0xd3e <interrupt_INTx_Disable>
     c6a:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
}
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	cf 91       	pop	r28
     c76:	df 91       	pop	r29
     c78:	08 95       	ret

00000c7a <interrupt_INTx_Enable>:


static STD_ReturnStatus interrupt_INTx_Enable(const interrupt_INTx_t *int_obj)
{
     c7a:	df 93       	push	r29
     c7c:	cf 93       	push	r28
     c7e:	00 d0       	rcall	.+0      	; 0xc80 <interrupt_INTx_Enable+0x6>
     c80:	00 d0       	rcall	.+0      	; 0xc82 <interrupt_INTx_Enable+0x8>
     c82:	0f 92       	push	r0
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
     c88:	9b 83       	std	Y+3, r25	; 0x03
     c8a:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
     c8c:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==int_obj)
     c8e:	8a 81       	ldd	r24, Y+2	; 0x02
     c90:	9b 81       	ldd	r25, Y+3	; 0x03
     c92:	00 97       	sbiw	r24, 0x00	; 0
     c94:	11 f4       	brne	.+4      	; 0xc9a <interrupt_INTx_Enable+0x20>
	{
		ret = E_NOT_OK;
     c96:	19 82       	std	Y+1, r1	; 0x01
     c98:	49 c0       	rjmp	.+146    	; 0xd2c <interrupt_INTx_Enable+0xb2>
	}
	else
	{
		switch(int_obj->source)
     c9a:	ea 81       	ldd	r30, Y+2	; 0x02
     c9c:	fb 81       	ldd	r31, Y+3	; 0x03
     c9e:	84 81       	ldd	r24, Z+4	; 0x04
     ca0:	28 2f       	mov	r18, r24
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	3d 83       	std	Y+5, r19	; 0x05
     ca6:	2c 83       	std	Y+4, r18	; 0x04
     ca8:	8c 81       	ldd	r24, Y+4	; 0x04
     caa:	9d 81       	ldd	r25, Y+5	; 0x05
     cac:	81 30       	cpi	r24, 0x01	; 1
     cae:	91 05       	cpc	r25, r1
     cb0:	d1 f0       	breq	.+52     	; 0xce6 <interrupt_INTx_Enable+0x6c>
     cb2:	2c 81       	ldd	r18, Y+4	; 0x04
     cb4:	3d 81       	ldd	r19, Y+5	; 0x05
     cb6:	22 30       	cpi	r18, 0x02	; 2
     cb8:	31 05       	cpc	r19, r1
     cba:	31 f1       	breq	.+76     	; 0xd08 <interrupt_INTx_Enable+0x8e>
     cbc:	8c 81       	ldd	r24, Y+4	; 0x04
     cbe:	9d 81       	ldd	r25, Y+5	; 0x05
     cc0:	00 97       	sbiw	r24, 0x00	; 0
     cc2:	99 f5       	brne	.+102    	; 0xd2a <interrupt_INTx_Enable+0xb0>
		{
		case INTERRUPT_EXTERNAL_INT0:
			INTERRUPT_GlobalInterruptEnable();
     cc4:	af e5       	ldi	r26, 0x5F	; 95
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	ef e5       	ldi	r30, 0x5F	; 95
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	80 68       	ori	r24, 0x80	; 128
     cd0:	8c 93       	st	X, r24
			EXT_INT0_InterruptEnable();
     cd2:	ab e5       	ldi	r26, 0x5B	; 91
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	eb e5       	ldi	r30, 0x5B	; 91
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	80 64       	ori	r24, 0x40	; 64
     cde:	8c 93       	st	X, r24
			ret = E_OK;
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	89 83       	std	Y+1, r24	; 0x01
     ce4:	23 c0       	rjmp	.+70     	; 0xd2c <interrupt_INTx_Enable+0xb2>
			break;
		case INTERRUPT_EXTERNAL_INT1:
			INTERRUPT_GlobalInterruptEnable();
     ce6:	af e5       	ldi	r26, 0x5F	; 95
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	ef e5       	ldi	r30, 0x5F	; 95
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	80 68       	ori	r24, 0x80	; 128
     cf2:	8c 93       	st	X, r24
			EXT_INT1_InterruptEnable();
     cf4:	ab e5       	ldi	r26, 0x5B	; 91
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	eb e5       	ldi	r30, 0x5B	; 91
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	80 68       	ori	r24, 0x80	; 128
     d00:	8c 93       	st	X, r24
			ret = E_OK;
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	89 83       	std	Y+1, r24	; 0x01
     d06:	12 c0       	rjmp	.+36     	; 0xd2c <interrupt_INTx_Enable+0xb2>
			break;
		case INTERRUPT_EXTERNAL_INT2:
			INTERRUPT_GlobalInterruptEnable();
     d08:	af e5       	ldi	r26, 0x5F	; 95
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	ef e5       	ldi	r30, 0x5F	; 95
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 68       	ori	r24, 0x80	; 128
     d14:	8c 93       	st	X, r24
			EXT_INT2_InterruptEnable();
     d16:	ab e5       	ldi	r26, 0x5B	; 91
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	eb e5       	ldi	r30, 0x5B	; 91
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	80 62       	ori	r24, 0x20	; 32
     d22:	8c 93       	st	X, r24
			ret = E_OK;
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	89 83       	std	Y+1, r24	; 0x01
     d28:	01 c0       	rjmp	.+2      	; 0xd2c <interrupt_INTx_Enable+0xb2>
			break;
		default:ret=E_NOT_OK;
     d2a:	19 82       	std	Y+1, r1	; 0x01
		}

	}
	return ret;
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
}
     d2e:	0f 90       	pop	r0
     d30:	0f 90       	pop	r0
     d32:	0f 90       	pop	r0
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	cf 91       	pop	r28
     d3a:	df 91       	pop	r29
     d3c:	08 95       	ret

00000d3e <interrupt_INTx_Disable>:


static STD_ReturnStatus interrupt_INTx_Disable(const interrupt_INTx_t *int_obj)
{
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	00 d0       	rcall	.+0      	; 0xd44 <interrupt_INTx_Disable+0x6>
     d44:	00 d0       	rcall	.+0      	; 0xd46 <interrupt_INTx_Disable+0x8>
     d46:	0f 92       	push	r0
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
     d4c:	9b 83       	std	Y+3, r25	; 0x03
     d4e:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
     d50:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==int_obj)
     d52:	8a 81       	ldd	r24, Y+2	; 0x02
     d54:	9b 81       	ldd	r25, Y+3	; 0x03
     d56:	00 97       	sbiw	r24, 0x00	; 0
     d58:	11 f4       	brne	.+4      	; 0xd5e <interrupt_INTx_Disable+0x20>
	{
		ret = E_NOT_OK;
     d5a:	19 82       	std	Y+1, r1	; 0x01
     d5c:	34 c0       	rjmp	.+104    	; 0xdc6 <interrupt_INTx_Disable+0x88>
	}
	else
	{
		switch(int_obj->source)
     d5e:	ea 81       	ldd	r30, Y+2	; 0x02
     d60:	fb 81       	ldd	r31, Y+3	; 0x03
     d62:	84 81       	ldd	r24, Z+4	; 0x04
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	3d 83       	std	Y+5, r19	; 0x05
     d6a:	2c 83       	std	Y+4, r18	; 0x04
     d6c:	8c 81       	ldd	r24, Y+4	; 0x04
     d6e:	9d 81       	ldd	r25, Y+5	; 0x05
     d70:	81 30       	cpi	r24, 0x01	; 1
     d72:	91 05       	cpc	r25, r1
     d74:	99 f0       	breq	.+38     	; 0xd9c <interrupt_INTx_Disable+0x5e>
     d76:	2c 81       	ldd	r18, Y+4	; 0x04
     d78:	3d 81       	ldd	r19, Y+5	; 0x05
     d7a:	22 30       	cpi	r18, 0x02	; 2
     d7c:	31 05       	cpc	r19, r1
     d7e:	c1 f0       	breq	.+48     	; 0xdb0 <interrupt_INTx_Disable+0x72>
     d80:	8c 81       	ldd	r24, Y+4	; 0x04
     d82:	9d 81       	ldd	r25, Y+5	; 0x05
     d84:	00 97       	sbiw	r24, 0x00	; 0
     d86:	f1 f4       	brne	.+60     	; 0xdc4 <interrupt_INTx_Disable+0x86>
		{
		case INTERRUPT_EXTERNAL_INT0:
			EXT_INT0_InterruptDisable();
     d88:	ab e5       	ldi	r26, 0x5B	; 91
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	eb e5       	ldi	r30, 0x5B	; 91
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	8f 7b       	andi	r24, 0xBF	; 191
     d94:	8c 93       	st	X, r24
			ret = E_OK;
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	89 83       	std	Y+1, r24	; 0x01
     d9a:	15 c0       	rjmp	.+42     	; 0xdc6 <interrupt_INTx_Disable+0x88>
			break;
		case INTERRUPT_EXTERNAL_INT1:
			EXT_INT1_InterruptDisable();
     d9c:	ab e5       	ldi	r26, 0x5B	; 91
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	eb e5       	ldi	r30, 0x5B	; 91
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	8f 77       	andi	r24, 0x7F	; 127
     da8:	8c 93       	st	X, r24
			ret = E_OK;
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	89 83       	std	Y+1, r24	; 0x01
     dae:	0b c0       	rjmp	.+22     	; 0xdc6 <interrupt_INTx_Disable+0x88>
			break;
		case INTERRUPT_EXTERNAL_INT2:
			EXT_INT2_InterruptDisable();
     db0:	ab e5       	ldi	r26, 0x5B	; 91
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	eb e5       	ldi	r30, 0x5B	; 91
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	8f 7d       	andi	r24, 0xDF	; 223
     dbc:	8c 93       	st	X, r24
			ret = E_OK;
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	89 83       	std	Y+1, r24	; 0x01
     dc2:	01 c0       	rjmp	.+2      	; 0xdc6 <interrupt_INTx_Disable+0x88>
			break;
		default:ret=E_NOT_OK;
     dc4:	19 82       	std	Y+1, r1	; 0x01
		}

	}
	return ret;
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
}
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	cf 91       	pop	r28
     dd4:	df 91       	pop	r29
     dd6:	08 95       	ret

00000dd8 <interrupt_INTx_Edge_Init>:


static STD_ReturnStatus interrupt_INTx_Edge_Init(const interrupt_INTx_t *int_obj)
{
     dd8:	df 93       	push	r29
     dda:	cf 93       	push	r28
     ddc:	00 d0       	rcall	.+0      	; 0xdde <interrupt_INTx_Edge_Init+0x6>
     dde:	00 d0       	rcall	.+0      	; 0xde0 <interrupt_INTx_Edge_Init+0x8>
     de0:	0f 92       	push	r0
     de2:	cd b7       	in	r28, 0x3d	; 61
     de4:	de b7       	in	r29, 0x3e	; 62
     de6:	9b 83       	std	Y+3, r25	; 0x03
     de8:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
     dea:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==int_obj)
     dec:	8a 81       	ldd	r24, Y+2	; 0x02
     dee:	9b 81       	ldd	r25, Y+3	; 0x03
     df0:	00 97       	sbiw	r24, 0x00	; 0
     df2:	11 f4       	brne	.+4      	; 0xdf8 <interrupt_INTx_Edge_Init+0x20>
	{
		ret = E_NOT_OK;
     df4:	19 82       	std	Y+1, r1	; 0x01
     df6:	7a c0       	rjmp	.+244    	; 0xeec <interrupt_INTx_Edge_Init+0x114>
	}
	else
	{
		switch(int_obj->source)
     df8:	ea 81       	ldd	r30, Y+2	; 0x02
     dfa:	fb 81       	ldd	r31, Y+3	; 0x03
     dfc:	84 81       	ldd	r24, Z+4	; 0x04
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	3d 83       	std	Y+5, r19	; 0x05
     e04:	2c 83       	std	Y+4, r18	; 0x04
     e06:	8c 81       	ldd	r24, Y+4	; 0x04
     e08:	9d 81       	ldd	r25, Y+5	; 0x05
     e0a:	81 30       	cpi	r24, 0x01	; 1
     e0c:	91 05       	cpc	r25, r1
     e0e:	71 f1       	breq	.+92     	; 0xe6c <interrupt_INTx_Edge_Init+0x94>
     e10:	2c 81       	ldd	r18, Y+4	; 0x04
     e12:	3d 81       	ldd	r19, Y+5	; 0x05
     e14:	22 30       	cpi	r18, 0x02	; 2
     e16:	31 05       	cpc	r19, r1
     e18:	09 f4       	brne	.+2      	; 0xe1c <interrupt_INTx_Edge_Init+0x44>
     e1a:	4b c0       	rjmp	.+150    	; 0xeb2 <interrupt_INTx_Edge_Init+0xda>
     e1c:	8c 81       	ldd	r24, Y+4	; 0x04
     e1e:	9d 81       	ldd	r25, Y+5	; 0x05
     e20:	00 97       	sbiw	r24, 0x00	; 0
     e22:	09 f0       	breq	.+2      	; 0xe26 <interrupt_INTx_Edge_Init+0x4e>
     e24:	62 c0       	rjmp	.+196    	; 0xeea <interrupt_INTx_Edge_Init+0x112>
				{
				case INTERRUPT_EXTERNAL_INT0:
					if(int_obj->edge==INTERRUPT_FALLING_EDGE){EXT_INT0_FallingEdgeSet(); }
     e26:	ea 81       	ldd	r30, Y+2	; 0x02
     e28:	fb 81       	ldd	r31, Y+3	; 0x03
     e2a:	83 81       	ldd	r24, Z+3	; 0x03
     e2c:	88 23       	and	r24, r24
     e2e:	41 f4       	brne	.+16     	; 0xe40 <interrupt_INTx_Edge_Init+0x68>
     e30:	a5 e5       	ldi	r26, 0x55	; 85
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	e5 e5       	ldi	r30, 0x55	; 85
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	82 60       	ori	r24, 0x02	; 2
     e3c:	8c 93       	st	X, r24
     e3e:	13 c0       	rjmp	.+38     	; 0xe66 <interrupt_INTx_Edge_Init+0x8e>
					else if(int_obj->edge==INTERRUPT_RISING_EDGE){EXT_INT0_RisingEdgeSet();}
     e40:	ea 81       	ldd	r30, Y+2	; 0x02
     e42:	fb 81       	ldd	r31, Y+3	; 0x03
     e44:	83 81       	ldd	r24, Z+3	; 0x03
     e46:	81 30       	cpi	r24, 0x01	; 1
     e48:	71 f4       	brne	.+28     	; 0xe66 <interrupt_INTx_Edge_Init+0x8e>
     e4a:	a5 e5       	ldi	r26, 0x55	; 85
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e5 e5       	ldi	r30, 0x55	; 85
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	81 60       	ori	r24, 0x01	; 1
     e56:	8c 93       	st	X, r24
     e58:	a5 e5       	ldi	r26, 0x55	; 85
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e5 e5       	ldi	r30, 0x55	; 85
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	82 60       	ori	r24, 0x02	; 2
     e64:	8c 93       	st	X, r24
					ret = E_OK;
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	89 83       	std	Y+1, r24	; 0x01
     e6a:	40 c0       	rjmp	.+128    	; 0xeec <interrupt_INTx_Edge_Init+0x114>
					break;
				case INTERRUPT_EXTERNAL_INT1:
					if(int_obj->edge==INTERRUPT_FALLING_EDGE){EXT_INT1_FallingEdgeSet(); }
     e6c:	ea 81       	ldd	r30, Y+2	; 0x02
     e6e:	fb 81       	ldd	r31, Y+3	; 0x03
     e70:	83 81       	ldd	r24, Z+3	; 0x03
     e72:	88 23       	and	r24, r24
     e74:	41 f4       	brne	.+16     	; 0xe86 <interrupt_INTx_Edge_Init+0xae>
     e76:	a5 e5       	ldi	r26, 0x55	; 85
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e5 e5       	ldi	r30, 0x55	; 85
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	88 60       	ori	r24, 0x08	; 8
     e82:	8c 93       	st	X, r24
     e84:	13 c0       	rjmp	.+38     	; 0xeac <interrupt_INTx_Edge_Init+0xd4>
					else if(int_obj->edge==INTERRUPT_RISING_EDGE){EXT_INT1_RisingEdgeSet();}
     e86:	ea 81       	ldd	r30, Y+2	; 0x02
     e88:	fb 81       	ldd	r31, Y+3	; 0x03
     e8a:	83 81       	ldd	r24, Z+3	; 0x03
     e8c:	81 30       	cpi	r24, 0x01	; 1
     e8e:	71 f4       	brne	.+28     	; 0xeac <interrupt_INTx_Edge_Init+0xd4>
     e90:	a5 e5       	ldi	r26, 0x55	; 85
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e5 e5       	ldi	r30, 0x55	; 85
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	84 60       	ori	r24, 0x04	; 4
     e9c:	8c 93       	st	X, r24
     e9e:	a5 e5       	ldi	r26, 0x55	; 85
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e5 e5       	ldi	r30, 0x55	; 85
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	88 60       	ori	r24, 0x08	; 8
     eaa:	8c 93       	st	X, r24
					ret = E_OK;
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	89 83       	std	Y+1, r24	; 0x01
     eb0:	1d c0       	rjmp	.+58     	; 0xeec <interrupt_INTx_Edge_Init+0x114>
					break;
				case INTERRUPT_EXTERNAL_INT2:
					if(int_obj->edge==INTERRUPT_FALLING_EDGE){EXT_INT2_FallingEdgeSet(); }
     eb2:	ea 81       	ldd	r30, Y+2	; 0x02
     eb4:	fb 81       	ldd	r31, Y+3	; 0x03
     eb6:	83 81       	ldd	r24, Z+3	; 0x03
     eb8:	88 23       	and	r24, r24
     eba:	41 f4       	brne	.+16     	; 0xecc <interrupt_INTx_Edge_Init+0xf4>
     ebc:	a4 e5       	ldi	r26, 0x54	; 84
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e4 e5       	ldi	r30, 0x54	; 84
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	8f 7b       	andi	r24, 0xBF	; 191
     ec8:	8c 93       	st	X, r24
     eca:	0c c0       	rjmp	.+24     	; 0xee4 <interrupt_INTx_Edge_Init+0x10c>
					else if(int_obj->edge==INTERRUPT_RISING_EDGE){EXT_INT2_RisingEdgeSet();}
     ecc:	ea 81       	ldd	r30, Y+2	; 0x02
     ece:	fb 81       	ldd	r31, Y+3	; 0x03
     ed0:	83 81       	ldd	r24, Z+3	; 0x03
     ed2:	81 30       	cpi	r24, 0x01	; 1
     ed4:	39 f4       	brne	.+14     	; 0xee4 <interrupt_INTx_Edge_Init+0x10c>
     ed6:	a4 e5       	ldi	r26, 0x54	; 84
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e4 e5       	ldi	r30, 0x54	; 84
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	80 64       	ori	r24, 0x40	; 64
     ee2:	8c 93       	st	X, r24
					ret = E_OK;
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	89 83       	std	Y+1, r24	; 0x01
     ee8:	01 c0       	rjmp	.+2      	; 0xeec <interrupt_INTx_Edge_Init+0x114>
					break;
				default:ret=E_NOT_OK;
     eea:	19 82       	std	Y+1, r1	; 0x01
				}
	}
	return ret;
     eec:	89 81       	ldd	r24, Y+1	; 0x01
}
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <interrupt_INTx_Pin_Init>:

static STD_ReturnStatus interrupt_INTx_Pin_Init(const interrupt_INTx_t *int_obj)
{
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	00 d0       	rcall	.+0      	; 0xf04 <interrupt_INTx_Pin_Init+0x6>
     f04:	0f 92       	push	r0
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	9b 83       	std	Y+3, r25	; 0x03
     f0c:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
     f0e:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==int_obj)
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	9b 81       	ldd	r25, Y+3	; 0x03
     f14:	00 97       	sbiw	r24, 0x00	; 0
     f16:	11 f4       	brne	.+4      	; 0xf1c <interrupt_INTx_Pin_Init+0x1e>
	{
		ret = E_NOT_OK;
     f18:	19 82       	std	Y+1, r1	; 0x01
     f1a:	06 c0       	rjmp	.+12     	; 0xf28 <interrupt_INTx_Pin_Init+0x2a>
	}
	else
	{
		ret = gpio_pin_direction_initialize(&(int_obj->mcu_pin));
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	9b 81       	ldd	r25, Y+3	; 0x03
     f20:	02 96       	adiw	r24, 0x02	; 2
     f22:	0e 94 07 09 	call	0x120e	; 0x120e <gpio_pin_direction_initialize>
     f26:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
     f28:	89 81       	ldd	r24, Y+1	; 0x01
}
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	08 95       	ret

00000f36 <interrupt_INTx_Clear_Flag>:



static STD_ReturnStatus interrupt_INTx_Clear_Flag(const interrupt_INTx_t *int_obj)
{
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <interrupt_INTx_Clear_Flag+0x6>
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <interrupt_INTx_Clear_Flag+0x8>
     f3e:	0f 92       	push	r0
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	9b 83       	std	Y+3, r25	; 0x03
     f46:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
     f48:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==int_obj)
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	9b 81       	ldd	r25, Y+3	; 0x03
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	11 f4       	brne	.+4      	; 0xf56 <interrupt_INTx_Clear_Flag+0x20>
	{
		ret = E_NOT_OK;
     f52:	19 82       	std	Y+1, r1	; 0x01
     f54:	34 c0       	rjmp	.+104    	; 0xfbe <interrupt_INTx_Clear_Flag+0x88>
	}
	else
	{
		switch(int_obj->source)
     f56:	ea 81       	ldd	r30, Y+2	; 0x02
     f58:	fb 81       	ldd	r31, Y+3	; 0x03
     f5a:	84 81       	ldd	r24, Z+4	; 0x04
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	3d 83       	std	Y+5, r19	; 0x05
     f62:	2c 83       	std	Y+4, r18	; 0x04
     f64:	8c 81       	ldd	r24, Y+4	; 0x04
     f66:	9d 81       	ldd	r25, Y+5	; 0x05
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	91 05       	cpc	r25, r1
     f6c:	99 f0       	breq	.+38     	; 0xf94 <interrupt_INTx_Clear_Flag+0x5e>
     f6e:	2c 81       	ldd	r18, Y+4	; 0x04
     f70:	3d 81       	ldd	r19, Y+5	; 0x05
     f72:	22 30       	cpi	r18, 0x02	; 2
     f74:	31 05       	cpc	r19, r1
     f76:	c1 f0       	breq	.+48     	; 0xfa8 <interrupt_INTx_Clear_Flag+0x72>
     f78:	8c 81       	ldd	r24, Y+4	; 0x04
     f7a:	9d 81       	ldd	r25, Y+5	; 0x05
     f7c:	00 97       	sbiw	r24, 0x00	; 0
     f7e:	f1 f4       	brne	.+60     	; 0xfbc <interrupt_INTx_Clear_Flag+0x86>
				{
				case INTERRUPT_EXTERNAL_INT0:
					EXT_INT0_InterruptFlagClear();
     f80:	aa e5       	ldi	r26, 0x5A	; 90
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	ea e5       	ldi	r30, 0x5A	; 90
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	80 64       	ori	r24, 0x40	; 64
     f8c:	8c 93       	st	X, r24
					ret = E_OK;
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	89 83       	std	Y+1, r24	; 0x01
     f92:	15 c0       	rjmp	.+42     	; 0xfbe <interrupt_INTx_Clear_Flag+0x88>
					break;
				case INTERRUPT_EXTERNAL_INT1:
					EXT_INT1_InterruptFlagClear();
     f94:	aa e5       	ldi	r26, 0x5A	; 90
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	ea e5       	ldi	r30, 0x5A	; 90
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	80 68       	ori	r24, 0x80	; 128
     fa0:	8c 93       	st	X, r24
					ret = E_OK;
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	89 83       	std	Y+1, r24	; 0x01
     fa6:	0b c0       	rjmp	.+22     	; 0xfbe <interrupt_INTx_Clear_Flag+0x88>
					break;
				case INTERRUPT_EXTERNAL_INT2:
					EXT_INT2_InterruptFlagClear();
     fa8:	aa e5       	ldi	r26, 0x5A	; 90
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	ea e5       	ldi	r30, 0x5A	; 90
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	80 62       	ori	r24, 0x20	; 32
     fb4:	8c 93       	st	X, r24
					ret = E_OK;
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	89 83       	std	Y+1, r24	; 0x01
     fba:	01 c0       	rjmp	.+2      	; 0xfbe <interrupt_INTx_Clear_Flag+0x88>
					break;
				default:ret=E_NOT_OK;
     fbc:	19 82       	std	Y+1, r1	; 0x01
				}
	}
	return ret;
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
}
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	cf 91       	pop	r28
     fcc:	df 91       	pop	r29
     fce:	08 95       	ret

00000fd0 <INT0_SetInterruptHandler>:




static STD_ReturnStatus INT0_SetInterruptHandler(void(*InterruptHandler)(void))
{
     fd0:	df 93       	push	r29
     fd2:	cf 93       	push	r28
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <INT0_SetInterruptHandler+0x6>
     fd6:	0f 92       	push	r0
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	9b 83       	std	Y+3, r25	; 0x03
     fde:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
     fe0:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==InterruptHandler)
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	9b 81       	ldd	r25, Y+3	; 0x03
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	11 f4       	brne	.+4      	; 0xfee <INT0_SetInterruptHandler+0x1e>
	{
		ret = E_NOT_OK;
     fea:	19 82       	std	Y+1, r1	; 0x01
     fec:	08 c0       	rjmp	.+16     	; 0xffe <INT0_SetInterruptHandler+0x2e>
	}
	else
	{
		INT0_InterruptHandler = InterruptHandler;//hena hakhaly el address bta3 el func in app yeb2a shaylo el INT0_InterruptHandler
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	9b 81       	ldd	r25, Y+3	; 0x03
     ff2:	90 93 e7 00 	sts	0x00E7, r25
     ff6:	80 93 e6 00 	sts	0x00E6, r24
		//keda 3amalat callback be hes en function fel application layer a2dar astakhdemha dlw2ty fel MCAL layer
		ret = E_OK;
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	08 95       	ret

0000100c <INT1_SetInterruptHandler>:
static STD_ReturnStatus INT1_SetInterruptHandler(void(*InterruptHandler)(void))
{
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	00 d0       	rcall	.+0      	; 0x1012 <INT1_SetInterruptHandler+0x6>
    1012:	0f 92       	push	r0
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	9b 83       	std	Y+3, r25	; 0x03
    101a:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
    101c:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==InterruptHandler)
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	9b 81       	ldd	r25, Y+3	; 0x03
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	11 f4       	brne	.+4      	; 0x102a <INT1_SetInterruptHandler+0x1e>
	{
		ret = E_NOT_OK;
    1026:	19 82       	std	Y+1, r1	; 0x01
    1028:	08 c0       	rjmp	.+16     	; 0x103a <INT1_SetInterruptHandler+0x2e>
	}
	else
	{
		INT1_InterruptHandler = InterruptHandler;//hena hakhaly el address bta3 el func in app yeb2a shaylo el INT0_InterruptHandler
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	9b 81       	ldd	r25, Y+3	; 0x03
    102e:	90 93 e9 00 	sts	0x00E9, r25
    1032:	80 93 e8 00 	sts	0x00E8, r24
		//keda 3amalat callback be hes en function fel application layer a2dar astakhdemha dlw2ty fel MCAL layer
		ret = E_OK;
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    103a:	89 81       	ldd	r24, Y+1	; 0x01
}
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	cf 91       	pop	r28
    1044:	df 91       	pop	r29
    1046:	08 95       	ret

00001048 <INT2_SetInterruptHandler>:
static STD_ReturnStatus INT2_SetInterruptHandler(void(*InterruptHandler)(void))
{
    1048:	df 93       	push	r29
    104a:	cf 93       	push	r28
    104c:	00 d0       	rcall	.+0      	; 0x104e <INT2_SetInterruptHandler+0x6>
    104e:	0f 92       	push	r0
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
    1054:	9b 83       	std	Y+3, r25	; 0x03
    1056:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
    1058:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==InterruptHandler)
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	9b 81       	ldd	r25, Y+3	; 0x03
    105e:	00 97       	sbiw	r24, 0x00	; 0
    1060:	11 f4       	brne	.+4      	; 0x1066 <INT2_SetInterruptHandler+0x1e>
	{
		ret = E_NOT_OK;
    1062:	19 82       	std	Y+1, r1	; 0x01
    1064:	08 c0       	rjmp	.+16     	; 0x1076 <INT2_SetInterruptHandler+0x2e>
	}
	else
	{
		INT2_InterruptHandler = InterruptHandler;//hena hakhaly el address bta3 el func in app yeb2a shaylo el INT0_InterruptHandler
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	9b 81       	ldd	r25, Y+3	; 0x03
    106a:	90 93 eb 00 	sts	0x00EB, r25
    106e:	80 93 ea 00 	sts	0x00EA, r24
		//keda 3amalat callback be hes en function fel application layer a2dar astakhdemha dlw2ty fel MCAL layer
		ret = E_OK;
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    1076:	89 81       	ldd	r24, Y+1	; 0x01
}
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	cf 91       	pop	r28
    1080:	df 91       	pop	r29
    1082:	08 95       	ret

00001084 <interrupt_INTx_SetInterruptHandler>:
static STD_ReturnStatus interrupt_INTx_SetInterruptHandler(const interrupt_INTx_t *int_obj)
{
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	00 d0       	rcall	.+0      	; 0x108a <interrupt_INTx_SetInterruptHandler+0x6>
    108a:	00 d0       	rcall	.+0      	; 0x108c <interrupt_INTx_SetInterruptHandler+0x8>
    108c:	0f 92       	push	r0
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	9b 83       	std	Y+3, r25	; 0x03
    1094:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
    1096:	19 82       	std	Y+1, r1	; 0x01
		if(NULL==int_obj)
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	9b 81       	ldd	r25, Y+3	; 0x03
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	11 f4       	brne	.+4      	; 0x10a4 <interrupt_INTx_SetInterruptHandler+0x20>
		{
			ret = E_NOT_OK;
    10a0:	19 82       	std	Y+1, r1	; 0x01
    10a2:	2e c0       	rjmp	.+92     	; 0x1100 <interrupt_INTx_SetInterruptHandler+0x7c>
		}
		else
		{
			switch(int_obj->source)
    10a4:	ea 81       	ldd	r30, Y+2	; 0x02
    10a6:	fb 81       	ldd	r31, Y+3	; 0x03
    10a8:	84 81       	ldd	r24, Z+4	; 0x04
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	3d 83       	std	Y+5, r19	; 0x05
    10b0:	2c 83       	std	Y+4, r18	; 0x04
    10b2:	8c 81       	ldd	r24, Y+4	; 0x04
    10b4:	9d 81       	ldd	r25, Y+5	; 0x05
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	91 05       	cpc	r25, r1
    10ba:	89 f0       	breq	.+34     	; 0x10de <interrupt_INTx_SetInterruptHandler+0x5a>
    10bc:	2c 81       	ldd	r18, Y+4	; 0x04
    10be:	3d 81       	ldd	r19, Y+5	; 0x05
    10c0:	22 30       	cpi	r18, 0x02	; 2
    10c2:	31 05       	cpc	r19, r1
    10c4:	a1 f0       	breq	.+40     	; 0x10ee <interrupt_INTx_SetInterruptHandler+0x6a>
    10c6:	8c 81       	ldd	r24, Y+4	; 0x04
    10c8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ca:	00 97       	sbiw	r24, 0x00	; 0
    10cc:	c1 f4       	brne	.+48     	; 0x10fe <interrupt_INTx_SetInterruptHandler+0x7a>
			{
			case INTERRUPT_EXTERNAL_INT0:
				ret = INT0_SetInterruptHandler(int_obj->EXT_INTERRUPTHANDLER);//hena ana ba3at el address bta3 el function bta3 el application
    10ce:	ea 81       	ldd	r30, Y+2	; 0x02
    10d0:	fb 81       	ldd	r31, Y+3	; 0x03
    10d2:	80 81       	ld	r24, Z
    10d4:	91 81       	ldd	r25, Z+1	; 0x01
    10d6:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <INT0_SetInterruptHandler>
    10da:	89 83       	std	Y+1, r24	; 0x01
    10dc:	11 c0       	rjmp	.+34     	; 0x1100 <interrupt_INTx_SetInterruptHandler+0x7c>
				break;
			case INTERRUPT_EXTERNAL_INT1:
				ret = INT1_SetInterruptHandler(int_obj->EXT_INTERRUPTHANDLER);
    10de:	ea 81       	ldd	r30, Y+2	; 0x02
    10e0:	fb 81       	ldd	r31, Y+3	; 0x03
    10e2:	80 81       	ld	r24, Z
    10e4:	91 81       	ldd	r25, Z+1	; 0x01
    10e6:	0e 94 06 08 	call	0x100c	; 0x100c <INT1_SetInterruptHandler>
    10ea:	89 83       	std	Y+1, r24	; 0x01
    10ec:	09 c0       	rjmp	.+18     	; 0x1100 <interrupt_INTx_SetInterruptHandler+0x7c>
				break;
			case INTERRUPT_EXTERNAL_INT2:
				ret = INT2_SetInterruptHandler(int_obj->EXT_INTERRUPTHANDLER);
    10ee:	ea 81       	ldd	r30, Y+2	; 0x02
    10f0:	fb 81       	ldd	r31, Y+3	; 0x03
    10f2:	80 81       	ld	r24, Z
    10f4:	91 81       	ldd	r25, Z+1	; 0x01
    10f6:	0e 94 24 08 	call	0x1048	; 0x1048 <INT2_SetInterruptHandler>
    10fa:	89 83       	std	Y+1, r24	; 0x01
    10fc:	01 c0       	rjmp	.+2      	; 0x1100 <interrupt_INTx_SetInterruptHandler+0x7c>
				break;
			default:ret=E_NOT_OK;
    10fe:	19 82       	std	Y+1, r1	; 0x01
			}

		}
		return ret;
    1100:	89 81       	ldd	r24, Y+1	; 0x01
}
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	08 95       	ret

00001112 <__vector_1>:
#include "../Interrupt/mcal_interrupt_manager.h"



ISR(INT0_vect)
{
    1112:	1f 92       	push	r1
    1114:	0f 92       	push	r0
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	0f 92       	push	r0
    111a:	11 24       	eor	r1, r1
    111c:	2f 93       	push	r18
    111e:	3f 93       	push	r19
    1120:	4f 93       	push	r20
    1122:	5f 93       	push	r21
    1124:	6f 93       	push	r22
    1126:	7f 93       	push	r23
    1128:	8f 93       	push	r24
    112a:	9f 93       	push	r25
    112c:	af 93       	push	r26
    112e:	bf 93       	push	r27
    1130:	ef 93       	push	r30
    1132:	ff 93       	push	r31
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
	INT0_ISR();
    113c:	0e 94 d7 05 	call	0xbae	; 0xbae <INT0_ISR>
}
    1140:	cf 91       	pop	r28
    1142:	df 91       	pop	r29
    1144:	ff 91       	pop	r31
    1146:	ef 91       	pop	r30
    1148:	bf 91       	pop	r27
    114a:	af 91       	pop	r26
    114c:	9f 91       	pop	r25
    114e:	8f 91       	pop	r24
    1150:	7f 91       	pop	r23
    1152:	6f 91       	pop	r22
    1154:	5f 91       	pop	r21
    1156:	4f 91       	pop	r20
    1158:	3f 91       	pop	r19
    115a:	2f 91       	pop	r18
    115c:	0f 90       	pop	r0
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	0f 90       	pop	r0
    1162:	1f 90       	pop	r1
    1164:	18 95       	reti

00001166 <__vector_2>:


ISR(INT1_vect)
{
    1166:	1f 92       	push	r1
    1168:	0f 92       	push	r0
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	0f 92       	push	r0
    116e:	11 24       	eor	r1, r1
    1170:	2f 93       	push	r18
    1172:	3f 93       	push	r19
    1174:	4f 93       	push	r20
    1176:	5f 93       	push	r21
    1178:	6f 93       	push	r22
    117a:	7f 93       	push	r23
    117c:	8f 93       	push	r24
    117e:	9f 93       	push	r25
    1180:	af 93       	push	r26
    1182:	bf 93       	push	r27
    1184:	ef 93       	push	r30
    1186:	ff 93       	push	r31
    1188:	df 93       	push	r29
    118a:	cf 93       	push	r28
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
	INT1_ISR();
    1190:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <INT1_ISR>
}
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	ff 91       	pop	r31
    119a:	ef 91       	pop	r30
    119c:	bf 91       	pop	r27
    119e:	af 91       	pop	r26
    11a0:	9f 91       	pop	r25
    11a2:	8f 91       	pop	r24
    11a4:	7f 91       	pop	r23
    11a6:	6f 91       	pop	r22
    11a8:	5f 91       	pop	r21
    11aa:	4f 91       	pop	r20
    11ac:	3f 91       	pop	r19
    11ae:	2f 91       	pop	r18
    11b0:	0f 90       	pop	r0
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	0f 90       	pop	r0
    11b6:	1f 90       	pop	r1
    11b8:	18 95       	reti

000011ba <__vector_3>:

ISR(INT2_vect)
{
    11ba:	1f 92       	push	r1
    11bc:	0f 92       	push	r0
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	0f 92       	push	r0
    11c2:	11 24       	eor	r1, r1
    11c4:	2f 93       	push	r18
    11c6:	3f 93       	push	r19
    11c8:	4f 93       	push	r20
    11ca:	5f 93       	push	r21
    11cc:	6f 93       	push	r22
    11ce:	7f 93       	push	r23
    11d0:	8f 93       	push	r24
    11d2:	9f 93       	push	r25
    11d4:	af 93       	push	r26
    11d6:	bf 93       	push	r27
    11d8:	ef 93       	push	r30
    11da:	ff 93       	push	r31
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
	INT2_ISR();
    11e4:	0e 94 09 06 	call	0xc12	; 0xc12 <INT2_ISR>
}
    11e8:	cf 91       	pop	r28
    11ea:	df 91       	pop	r29
    11ec:	ff 91       	pop	r31
    11ee:	ef 91       	pop	r30
    11f0:	bf 91       	pop	r27
    11f2:	af 91       	pop	r26
    11f4:	9f 91       	pop	r25
    11f6:	8f 91       	pop	r24
    11f8:	7f 91       	pop	r23
    11fa:	6f 91       	pop	r22
    11fc:	5f 91       	pop	r21
    11fe:	4f 91       	pop	r20
    1200:	3f 91       	pop	r19
    1202:	2f 91       	pop	r18
    1204:	0f 90       	pop	r0
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	0f 90       	pop	r0
    120a:	1f 90       	pop	r1
    120c:	18 95       	reti

0000120e <gpio_pin_direction_initialize>:
/***
 *
 * @param _pin_config
 * @return
 */
STD_ReturnStatus gpio_pin_direction_initialize(const Pin_Config_t *_pin_config){
    120e:	df 93       	push	r29
    1210:	cf 93       	push	r28
    1212:	00 d0       	rcall	.+0      	; 0x1214 <gpio_pin_direction_initialize+0x6>
    1214:	00 d0       	rcall	.+0      	; 0x1216 <gpio_pin_direction_initialize+0x8>
    1216:	0f 92       	push	r0
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
    121c:	9b 83       	std	Y+3, r25	; 0x03
    121e:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret=E_OK;
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==_pin_config||_pin_config->pin > PORT_PIN_MAX_NUMBER-1)
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	9b 81       	ldd	r25, Y+3	; 0x03
    1228:	00 97       	sbiw	r24, 0x00	; 0
    122a:	59 f0       	breq	.+22     	; 0x1242 <gpio_pin_direction_initialize+0x34>
    122c:	ea 81       	ldd	r30, Y+2	; 0x02
    122e:	fb 81       	ldd	r31, Y+3	; 0x03
    1230:	80 81       	ld	r24, Z
    1232:	86 95       	lsr	r24
    1234:	86 95       	lsr	r24
    1236:	87 70       	andi	r24, 0x07	; 7
    1238:	88 2f       	mov	r24, r24
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	88 30       	cpi	r24, 0x08	; 8
    123e:	91 05       	cpc	r25, r1
    1240:	14 f0       	brlt	.+4      	; 0x1246 <gpio_pin_direction_initialize+0x38>
	{
		ret=E_NOT_OK;
    1242:	19 82       	std	Y+1, r1	; 0x01
    1244:	75 c0       	rjmp	.+234    	; 0x1330 <gpio_pin_direction_initialize+0x122>
	}
	else
	{
		switch(_pin_config->direction)
    1246:	ea 81       	ldd	r30, Y+2	; 0x02
    1248:	fb 81       	ldd	r31, Y+3	; 0x03
    124a:	80 81       	ld	r24, Z
    124c:	82 95       	swap	r24
    124e:	86 95       	lsr	r24
    1250:	87 70       	andi	r24, 0x07	; 7
    1252:	81 70       	andi	r24, 0x01	; 1
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	3d 83       	std	Y+5, r19	; 0x05
    125a:	2c 83       	std	Y+4, r18	; 0x04
    125c:	8c 81       	ldd	r24, Y+4	; 0x04
    125e:	9d 81       	ldd	r25, Y+5	; 0x05
    1260:	00 97       	sbiw	r24, 0x00	; 0
    1262:	b1 f1       	breq	.+108    	; 0x12d0 <gpio_pin_direction_initialize+0xc2>
    1264:	2c 81       	ldd	r18, Y+4	; 0x04
    1266:	3d 81       	ldd	r19, Y+5	; 0x05
    1268:	21 30       	cpi	r18, 0x01	; 1
    126a:	31 05       	cpc	r19, r1
    126c:	09 f0       	breq	.+2      	; 0x1270 <gpio_pin_direction_initialize+0x62>
    126e:	60 c0       	rjmp	.+192    	; 0x1330 <gpio_pin_direction_initialize+0x122>
		{
		case DIRECTION_OUTPUT:		SET_BIT(*DDR_register[_pin_config->port],_pin_config->pin);break;
    1270:	ea 81       	ldd	r30, Y+2	; 0x02
    1272:	fb 81       	ldd	r31, Y+3	; 0x03
    1274:	80 81       	ld	r24, Z
    1276:	83 70       	andi	r24, 0x03	; 3
    1278:	88 2f       	mov	r24, r24
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	fc 01       	movw	r30, r24
    1282:	e5 59       	subi	r30, 0x95	; 149
    1284:	ff 4f       	sbci	r31, 0xFF	; 255
    1286:	a0 81       	ld	r26, Z
    1288:	b1 81       	ldd	r27, Z+1	; 0x01
    128a:	ea 81       	ldd	r30, Y+2	; 0x02
    128c:	fb 81       	ldd	r31, Y+3	; 0x03
    128e:	80 81       	ld	r24, Z
    1290:	83 70       	andi	r24, 0x03	; 3
    1292:	88 2f       	mov	r24, r24
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	fc 01       	movw	r30, r24
    129c:	e5 59       	subi	r30, 0x95	; 149
    129e:	ff 4f       	sbci	r31, 0xFF	; 255
    12a0:	01 90       	ld	r0, Z+
    12a2:	f0 81       	ld	r31, Z
    12a4:	e0 2d       	mov	r30, r0
    12a6:	80 81       	ld	r24, Z
    12a8:	48 2f       	mov	r20, r24
    12aa:	ea 81       	ldd	r30, Y+2	; 0x02
    12ac:	fb 81       	ldd	r31, Y+3	; 0x03
    12ae:	80 81       	ld	r24, Z
    12b0:	86 95       	lsr	r24
    12b2:	86 95       	lsr	r24
    12b4:	87 70       	andi	r24, 0x07	; 7
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	02 2e       	mov	r0, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <gpio_pin_direction_initialize+0xb8>
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	0a 94       	dec	r0
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <gpio_pin_direction_initialize+0xb4>
    12ca:	84 2b       	or	r24, r20
    12cc:	8c 93       	st	X, r24
    12ce:	30 c0       	rjmp	.+96     	; 0x1330 <gpio_pin_direction_initialize+0x122>
		case DIRECTION_INPUT: 		CLR_BIT(*DDR_register[_pin_config->port],_pin_config->pin);break;
    12d0:	ea 81       	ldd	r30, Y+2	; 0x02
    12d2:	fb 81       	ldd	r31, Y+3	; 0x03
    12d4:	80 81       	ld	r24, Z
    12d6:	83 70       	andi	r24, 0x03	; 3
    12d8:	88 2f       	mov	r24, r24
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	fc 01       	movw	r30, r24
    12e2:	e5 59       	subi	r30, 0x95	; 149
    12e4:	ff 4f       	sbci	r31, 0xFF	; 255
    12e6:	a0 81       	ld	r26, Z
    12e8:	b1 81       	ldd	r27, Z+1	; 0x01
    12ea:	ea 81       	ldd	r30, Y+2	; 0x02
    12ec:	fb 81       	ldd	r31, Y+3	; 0x03
    12ee:	80 81       	ld	r24, Z
    12f0:	83 70       	andi	r24, 0x03	; 3
    12f2:	88 2f       	mov	r24, r24
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	fc 01       	movw	r30, r24
    12fc:	e5 59       	subi	r30, 0x95	; 149
    12fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1300:	01 90       	ld	r0, Z+
    1302:	f0 81       	ld	r31, Z
    1304:	e0 2d       	mov	r30, r0
    1306:	80 81       	ld	r24, Z
    1308:	48 2f       	mov	r20, r24
    130a:	ea 81       	ldd	r30, Y+2	; 0x02
    130c:	fb 81       	ldd	r31, Y+3	; 0x03
    130e:	80 81       	ld	r24, Z
    1310:	86 95       	lsr	r24
    1312:	86 95       	lsr	r24
    1314:	87 70       	andi	r24, 0x07	; 7
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	02 2e       	mov	r0, r18
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <gpio_pin_direction_initialize+0x118>
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	0a 94       	dec	r0
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <gpio_pin_direction_initialize+0x114>
    132a:	80 95       	com	r24
    132c:	84 23       	and	r24, r20
    132e:	8c 93       	st	X, r24
		}
	}
	return ret;
    1330:	89 81       	ldd	r24, Y+1	; 0x01
}
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	cf 91       	pop	r28
    133e:	df 91       	pop	r29
    1340:	08 95       	ret

00001342 <gpio_pin_get_direction_status>:
 * @param _pin_config
 * @param direction_status
 * @return
 */
STD_ReturnStatus gpio_pin_get_direction_status(const Pin_Config_t *_pin_config,direction_t *direction_status)
{
    1342:	df 93       	push	r29
    1344:	cf 93       	push	r28
    1346:	00 d0       	rcall	.+0      	; 0x1348 <gpio_pin_get_direction_status+0x6>
    1348:	00 d0       	rcall	.+0      	; 0x134a <gpio_pin_get_direction_status+0x8>
    134a:	0f 92       	push	r0
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    1350:	9b 83       	std	Y+3, r25	; 0x03
    1352:	8a 83       	std	Y+2, r24	; 0x02
    1354:	7d 83       	std	Y+5, r23	; 0x05
    1356:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret=E_OK;
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	89 83       	std	Y+1, r24	; 0x01
		if(NULL==_pin_config || NULL==direction_status ||_pin_config->pin > PORT_PIN_MAX_NUMBER-1)
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	9b 81       	ldd	r25, Y+3	; 0x03
    1360:	00 97       	sbiw	r24, 0x00	; 0
    1362:	79 f0       	breq	.+30     	; 0x1382 <gpio_pin_get_direction_status+0x40>
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	9d 81       	ldd	r25, Y+5	; 0x05
    1368:	00 97       	sbiw	r24, 0x00	; 0
    136a:	59 f0       	breq	.+22     	; 0x1382 <gpio_pin_get_direction_status+0x40>
    136c:	ea 81       	ldd	r30, Y+2	; 0x02
    136e:	fb 81       	ldd	r31, Y+3	; 0x03
    1370:	80 81       	ld	r24, Z
    1372:	86 95       	lsr	r24
    1374:	86 95       	lsr	r24
    1376:	87 70       	andi	r24, 0x07	; 7
    1378:	88 2f       	mov	r24, r24
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	88 30       	cpi	r24, 0x08	; 8
    137e:	91 05       	cpc	r25, r1
    1380:	14 f0       	brlt	.+4      	; 0x1386 <gpio_pin_get_direction_status+0x44>
		{
			ret=E_NOT_OK;
    1382:	19 82       	std	Y+1, r1	; 0x01
    1384:	27 c0       	rjmp	.+78     	; 0x13d4 <gpio_pin_get_direction_status+0x92>
		}
		else
		{
			*direction_status=READ_BIT(*DDR_register[_pin_config->direction],_pin_config->pin);
    1386:	ea 81       	ldd	r30, Y+2	; 0x02
    1388:	fb 81       	ldd	r31, Y+3	; 0x03
    138a:	80 81       	ld	r24, Z
    138c:	82 95       	swap	r24
    138e:	86 95       	lsr	r24
    1390:	87 70       	andi	r24, 0x07	; 7
    1392:	81 70       	andi	r24, 0x01	; 1
    1394:	88 2f       	mov	r24, r24
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	fc 01       	movw	r30, r24
    139e:	e5 59       	subi	r30, 0x95	; 149
    13a0:	ff 4f       	sbci	r31, 0xFF	; 255
    13a2:	01 90       	ld	r0, Z+
    13a4:	f0 81       	ld	r31, Z
    13a6:	e0 2d       	mov	r30, r0
    13a8:	80 81       	ld	r24, Z
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	ea 81       	ldd	r30, Y+2	; 0x02
    13b0:	fb 81       	ldd	r31, Y+3	; 0x03
    13b2:	80 81       	ld	r24, Z
    13b4:	86 95       	lsr	r24
    13b6:	86 95       	lsr	r24
    13b8:	87 70       	andi	r24, 0x07	; 7
    13ba:	88 2f       	mov	r24, r24
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	a9 01       	movw	r20, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <gpio_pin_get_direction_status+0x84>
    13c2:	55 95       	asr	r21
    13c4:	47 95       	ror	r20
    13c6:	8a 95       	dec	r24
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <gpio_pin_get_direction_status+0x80>
    13ca:	ca 01       	movw	r24, r20
    13cc:	81 70       	andi	r24, 0x01	; 1
    13ce:	ec 81       	ldd	r30, Y+4	; 0x04
    13d0:	fd 81       	ldd	r31, Y+5	; 0x05
    13d2:	80 83       	st	Z, r24
		}
		return ret;
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	08 95       	ret

000013e6 <gpio_pin_write_logic>:
 * @param _pin_config
 * @param logic
 * @return
 */
STD_ReturnStatus gpio_pin_write_logic(const Pin_Config_t *_pin_config,Logic_t logic)
{
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <gpio_pin_write_logic+0x6>
    13ec:	00 d0       	rcall	.+0      	; 0x13ee <gpio_pin_write_logic+0x8>
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <gpio_pin_write_logic+0xa>
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	9b 83       	std	Y+3, r25	; 0x03
    13f6:	8a 83       	std	Y+2, r24	; 0x02
    13f8:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret=E_OK;
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	89 83       	std	Y+1, r24	; 0x01
		if(NULL==_pin_config||_pin_config->pin > PORT_PIN_MAX_NUMBER-1)
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	9b 81       	ldd	r25, Y+3	; 0x03
    1402:	00 97       	sbiw	r24, 0x00	; 0
    1404:	59 f0       	breq	.+22     	; 0x141c <gpio_pin_write_logic+0x36>
    1406:	ea 81       	ldd	r30, Y+2	; 0x02
    1408:	fb 81       	ldd	r31, Y+3	; 0x03
    140a:	80 81       	ld	r24, Z
    140c:	86 95       	lsr	r24
    140e:	86 95       	lsr	r24
    1410:	87 70       	andi	r24, 0x07	; 7
    1412:	88 2f       	mov	r24, r24
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	88 30       	cpi	r24, 0x08	; 8
    1418:	91 05       	cpc	r25, r1
    141a:	14 f0       	brlt	.+4      	; 0x1420 <gpio_pin_write_logic+0x3a>
		{
			ret=E_NOT_OK;
    141c:	19 82       	std	Y+1, r1	; 0x01
    141e:	6f c0       	rjmp	.+222    	; 0x14fe <gpio_pin_write_logic+0x118>
		}
		else
		{
			switch(logic)
    1420:	8c 81       	ldd	r24, Y+4	; 0x04
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	3e 83       	std	Y+6, r19	; 0x06
    1428:	2d 83       	std	Y+5, r18	; 0x05
    142a:	8d 81       	ldd	r24, Y+5	; 0x05
    142c:	9e 81       	ldd	r25, Y+6	; 0x06
    142e:	00 97       	sbiw	r24, 0x00	; 0
    1430:	b1 f1       	breq	.+108    	; 0x149e <gpio_pin_write_logic+0xb8>
    1432:	2d 81       	ldd	r18, Y+5	; 0x05
    1434:	3e 81       	ldd	r19, Y+6	; 0x06
    1436:	21 30       	cpi	r18, 0x01	; 1
    1438:	31 05       	cpc	r19, r1
    143a:	09 f0       	breq	.+2      	; 0x143e <gpio_pin_write_logic+0x58>
    143c:	60 c0       	rjmp	.+192    	; 0x14fe <gpio_pin_write_logic+0x118>
			{
			case GPIO_HIGH:			SET_BIT(*PORT_register[_pin_config->port],_pin_config->pin);break;
    143e:	ea 81       	ldd	r30, Y+2	; 0x02
    1440:	fb 81       	ldd	r31, Y+3	; 0x03
    1442:	80 81       	ld	r24, Z
    1444:	83 70       	andi	r24, 0x03	; 3
    1446:	88 2f       	mov	r24, r24
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	88 0f       	add	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	fc 01       	movw	r30, r24
    1450:	ed 58       	subi	r30, 0x8D	; 141
    1452:	ff 4f       	sbci	r31, 0xFF	; 255
    1454:	a0 81       	ld	r26, Z
    1456:	b1 81       	ldd	r27, Z+1	; 0x01
    1458:	ea 81       	ldd	r30, Y+2	; 0x02
    145a:	fb 81       	ldd	r31, Y+3	; 0x03
    145c:	80 81       	ld	r24, Z
    145e:	83 70       	andi	r24, 0x03	; 3
    1460:	88 2f       	mov	r24, r24
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	fc 01       	movw	r30, r24
    146a:	ed 58       	subi	r30, 0x8D	; 141
    146c:	ff 4f       	sbci	r31, 0xFF	; 255
    146e:	01 90       	ld	r0, Z+
    1470:	f0 81       	ld	r31, Z
    1472:	e0 2d       	mov	r30, r0
    1474:	80 81       	ld	r24, Z
    1476:	48 2f       	mov	r20, r24
    1478:	ea 81       	ldd	r30, Y+2	; 0x02
    147a:	fb 81       	ldd	r31, Y+3	; 0x03
    147c:	80 81       	ld	r24, Z
    147e:	86 95       	lsr	r24
    1480:	86 95       	lsr	r24
    1482:	87 70       	andi	r24, 0x07	; 7
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	02 2e       	mov	r0, r18
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <gpio_pin_write_logic+0xae>
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	0a 94       	dec	r0
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <gpio_pin_write_logic+0xaa>
    1498:	84 2b       	or	r24, r20
    149a:	8c 93       	st	X, r24
    149c:	30 c0       	rjmp	.+96     	; 0x14fe <gpio_pin_write_logic+0x118>
			case GPIO_LOW:			CLR_BIT(*PORT_register[_pin_config->port],_pin_config->pin);break;
    149e:	ea 81       	ldd	r30, Y+2	; 0x02
    14a0:	fb 81       	ldd	r31, Y+3	; 0x03
    14a2:	80 81       	ld	r24, Z
    14a4:	83 70       	andi	r24, 0x03	; 3
    14a6:	88 2f       	mov	r24, r24
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	fc 01       	movw	r30, r24
    14b0:	ed 58       	subi	r30, 0x8D	; 141
    14b2:	ff 4f       	sbci	r31, 0xFF	; 255
    14b4:	a0 81       	ld	r26, Z
    14b6:	b1 81       	ldd	r27, Z+1	; 0x01
    14b8:	ea 81       	ldd	r30, Y+2	; 0x02
    14ba:	fb 81       	ldd	r31, Y+3	; 0x03
    14bc:	80 81       	ld	r24, Z
    14be:	83 70       	andi	r24, 0x03	; 3
    14c0:	88 2f       	mov	r24, r24
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	fc 01       	movw	r30, r24
    14ca:	ed 58       	subi	r30, 0x8D	; 141
    14cc:	ff 4f       	sbci	r31, 0xFF	; 255
    14ce:	01 90       	ld	r0, Z+
    14d0:	f0 81       	ld	r31, Z
    14d2:	e0 2d       	mov	r30, r0
    14d4:	80 81       	ld	r24, Z
    14d6:	48 2f       	mov	r20, r24
    14d8:	ea 81       	ldd	r30, Y+2	; 0x02
    14da:	fb 81       	ldd	r31, Y+3	; 0x03
    14dc:	80 81       	ld	r24, Z
    14de:	86 95       	lsr	r24
    14e0:	86 95       	lsr	r24
    14e2:	87 70       	andi	r24, 0x07	; 7
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	02 2e       	mov	r0, r18
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <gpio_pin_write_logic+0x10e>
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	0a 94       	dec	r0
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <gpio_pin_write_logic+0x10a>
    14f8:	80 95       	com	r24
    14fa:	84 23       	and	r24, r20
    14fc:	8c 93       	st	X, r24
			}
		}
		return ret;
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1500:	26 96       	adiw	r28, 0x06	; 6
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	de bf       	out	0x3e, r29	; 62
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	cd bf       	out	0x3d, r28	; 61
    150c:	cf 91       	pop	r28
    150e:	df 91       	pop	r29
    1510:	08 95       	ret

00001512 <gpio_pin_read_logic>:
 * @param _pin_config
 * @param logic
 * @return
 */
STD_ReturnStatus gpio_pin_read_logic(const Pin_Config_t *_pin_config,Logic_t *logic)
{
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	00 d0       	rcall	.+0      	; 0x1518 <gpio_pin_read_logic+0x6>
    1518:	00 d0       	rcall	.+0      	; 0x151a <gpio_pin_read_logic+0x8>
    151a:	0f 92       	push	r0
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	9b 83       	std	Y+3, r25	; 0x03
    1522:	8a 83       	std	Y+2, r24	; 0x02
    1524:	7d 83       	std	Y+5, r23	; 0x05
    1526:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret=E_OK;
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	89 83       	std	Y+1, r24	; 0x01
		if(NULL==_pin_config|| NULL== logic||_pin_config->pin > PORT_PIN_MAX_NUMBER-1)
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	9b 81       	ldd	r25, Y+3	; 0x03
    1530:	00 97       	sbiw	r24, 0x00	; 0
    1532:	79 f0       	breq	.+30     	; 0x1552 <gpio_pin_read_logic+0x40>
    1534:	8c 81       	ldd	r24, Y+4	; 0x04
    1536:	9d 81       	ldd	r25, Y+5	; 0x05
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	59 f0       	breq	.+22     	; 0x1552 <gpio_pin_read_logic+0x40>
    153c:	ea 81       	ldd	r30, Y+2	; 0x02
    153e:	fb 81       	ldd	r31, Y+3	; 0x03
    1540:	80 81       	ld	r24, Z
    1542:	86 95       	lsr	r24
    1544:	86 95       	lsr	r24
    1546:	87 70       	andi	r24, 0x07	; 7
    1548:	88 2f       	mov	r24, r24
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	88 30       	cpi	r24, 0x08	; 8
    154e:	91 05       	cpc	r25, r1
    1550:	14 f0       	brlt	.+4      	; 0x1556 <gpio_pin_read_logic+0x44>
		{
			ret=E_NOT_OK;
    1552:	19 82       	std	Y+1, r1	; 0x01
    1554:	24 c0       	rjmp	.+72     	; 0x159e <gpio_pin_read_logic+0x8c>
		}
		else
		{
			*logic=READ_BIT(*PIN_register[_pin_config->port],_pin_config->pin);
    1556:	ea 81       	ldd	r30, Y+2	; 0x02
    1558:	fb 81       	ldd	r31, Y+3	; 0x03
    155a:	80 81       	ld	r24, Z
    155c:	83 70       	andi	r24, 0x03	; 3
    155e:	88 2f       	mov	r24, r24
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	fc 01       	movw	r30, r24
    1568:	e5 58       	subi	r30, 0x85	; 133
    156a:	ff 4f       	sbci	r31, 0xFF	; 255
    156c:	01 90       	ld	r0, Z+
    156e:	f0 81       	ld	r31, Z
    1570:	e0 2d       	mov	r30, r0
    1572:	80 81       	ld	r24, Z
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	ea 81       	ldd	r30, Y+2	; 0x02
    157a:	fb 81       	ldd	r31, Y+3	; 0x03
    157c:	80 81       	ld	r24, Z
    157e:	86 95       	lsr	r24
    1580:	86 95       	lsr	r24
    1582:	87 70       	andi	r24, 0x07	; 7
    1584:	88 2f       	mov	r24, r24
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	a9 01       	movw	r20, r18
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <gpio_pin_read_logic+0x7e>
    158c:	55 95       	asr	r21
    158e:	47 95       	ror	r20
    1590:	8a 95       	dec	r24
    1592:	e2 f7       	brpl	.-8      	; 0x158c <gpio_pin_read_logic+0x7a>
    1594:	ca 01       	movw	r24, r20
    1596:	81 70       	andi	r24, 0x01	; 1
    1598:	ec 81       	ldd	r30, Y+4	; 0x04
    159a:	fd 81       	ldd	r31, Y+5	; 0x05
    159c:	80 83       	st	Z, r24
		}
		return ret;
    159e:	89 81       	ldd	r24, Y+1	; 0x01
}
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	cf 91       	pop	r28
    15ac:	df 91       	pop	r29
    15ae:	08 95       	ret

000015b0 <gpio_pin_toggle_logic>:
 *
 * @param _pin_config
 * @return
 */
STD_ReturnStatus gpio_pin_toggle_logic(const Pin_Config_t *_pin_config)
{
    15b0:	df 93       	push	r29
    15b2:	cf 93       	push	r28
    15b4:	00 d0       	rcall	.+0      	; 0x15b6 <gpio_pin_toggle_logic+0x6>
    15b6:	0f 92       	push	r0
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	9b 83       	std	Y+3, r25	; 0x03
    15be:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret=E_OK;
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	89 83       	std	Y+1, r24	; 0x01
		if(NULL==_pin_config||_pin_config->pin > PORT_PIN_MAX_NUMBER-1)
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	9b 81       	ldd	r25, Y+3	; 0x03
    15c8:	00 97       	sbiw	r24, 0x00	; 0
    15ca:	59 f0       	breq	.+22     	; 0x15e2 <gpio_pin_toggle_logic+0x32>
    15cc:	ea 81       	ldd	r30, Y+2	; 0x02
    15ce:	fb 81       	ldd	r31, Y+3	; 0x03
    15d0:	80 81       	ld	r24, Z
    15d2:	86 95       	lsr	r24
    15d4:	86 95       	lsr	r24
    15d6:	87 70       	andi	r24, 0x07	; 7
    15d8:	88 2f       	mov	r24, r24
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	88 30       	cpi	r24, 0x08	; 8
    15de:	91 05       	cpc	r25, r1
    15e0:	14 f0       	brlt	.+4      	; 0x15e6 <gpio_pin_toggle_logic+0x36>
		{
			ret=E_NOT_OK;
    15e2:	19 82       	std	Y+1, r1	; 0x01
    15e4:	2f c0       	rjmp	.+94     	; 0x1644 <gpio_pin_toggle_logic+0x94>
		}
		else
		{
			TOGGLE_BIT(*PORT_register[_pin_config->port],_pin_config->pin);
    15e6:	ea 81       	ldd	r30, Y+2	; 0x02
    15e8:	fb 81       	ldd	r31, Y+3	; 0x03
    15ea:	80 81       	ld	r24, Z
    15ec:	83 70       	andi	r24, 0x03	; 3
    15ee:	88 2f       	mov	r24, r24
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	88 0f       	add	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	fc 01       	movw	r30, r24
    15f8:	ed 58       	subi	r30, 0x8D	; 141
    15fa:	ff 4f       	sbci	r31, 0xFF	; 255
    15fc:	a0 81       	ld	r26, Z
    15fe:	b1 81       	ldd	r27, Z+1	; 0x01
    1600:	ea 81       	ldd	r30, Y+2	; 0x02
    1602:	fb 81       	ldd	r31, Y+3	; 0x03
    1604:	80 81       	ld	r24, Z
    1606:	83 70       	andi	r24, 0x03	; 3
    1608:	88 2f       	mov	r24, r24
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	88 0f       	add	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	fc 01       	movw	r30, r24
    1612:	ed 58       	subi	r30, 0x8D	; 141
    1614:	ff 4f       	sbci	r31, 0xFF	; 255
    1616:	01 90       	ld	r0, Z+
    1618:	f0 81       	ld	r31, Z
    161a:	e0 2d       	mov	r30, r0
    161c:	80 81       	ld	r24, Z
    161e:	48 2f       	mov	r20, r24
    1620:	ea 81       	ldd	r30, Y+2	; 0x02
    1622:	fb 81       	ldd	r31, Y+3	; 0x03
    1624:	80 81       	ld	r24, Z
    1626:	86 95       	lsr	r24
    1628:	86 95       	lsr	r24
    162a:	87 70       	andi	r24, 0x07	; 7
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	02 2e       	mov	r0, r18
    1636:	02 c0       	rjmp	.+4      	; 0x163c <gpio_pin_toggle_logic+0x8c>
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	0a 94       	dec	r0
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <gpio_pin_toggle_logic+0x88>
    1640:	84 27       	eor	r24, r20
    1642:	8c 93       	st	X, r24
		}
		return ret;
    1644:	89 81       	ldd	r24, Y+1	; 0x01
}
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	cf 91       	pop	r28
    164e:	df 91       	pop	r29
    1650:	08 95       	ret

00001652 <gpio_pin_initialize>:
 *
 * @param _pin_config
 * @return
 */
STD_ReturnStatus gpio_pin_initialize(const Pin_Config_t *_pin_config)
{
    1652:	df 93       	push	r29
    1654:	cf 93       	push	r28
    1656:	00 d0       	rcall	.+0      	; 0x1658 <gpio_pin_initialize+0x6>
    1658:	0f 92       	push	r0
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    165e:	9b 83       	std	Y+3, r25	; 0x03
    1660:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_OK;
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==_pin_config)
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	9b 81       	ldd	r25, Y+3	; 0x03
    166a:	00 97       	sbiw	r24, 0x00	; 0
    166c:	11 f4       	brne	.+4      	; 0x1672 <gpio_pin_initialize+0x20>
	{
		ret=E_NOT_OK;
    166e:	19 82       	std	Y+1, r1	; 0x01
    1670:	14 c0       	rjmp	.+40     	; 0x169a <gpio_pin_initialize+0x48>
	}
	else
	{
		ret= gpio_pin_direction_initialize(_pin_config);
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	9b 81       	ldd	r25, Y+3	; 0x03
    1676:	0e 94 07 09 	call	0x120e	; 0x120e <gpio_pin_direction_initialize>
    167a:	89 83       	std	Y+1, r24	; 0x01
		ret= gpio_pin_write_logic(_pin_config,_pin_config->logic);
    167c:	ea 81       	ldd	r30, Y+2	; 0x02
    167e:	fb 81       	ldd	r31, Y+3	; 0x03
    1680:	80 81       	ld	r24, Z
    1682:	82 95       	swap	r24
    1684:	86 95       	lsr	r24
    1686:	86 95       	lsr	r24
    1688:	83 70       	andi	r24, 0x03	; 3
    168a:	81 70       	andi	r24, 0x01	; 1
    168c:	28 2f       	mov	r18, r24
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	9b 81       	ldd	r25, Y+3	; 0x03
    1692:	62 2f       	mov	r22, r18
    1694:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
    1698:	89 83       	std	Y+1, r24	; 0x01
	}

	return ret;
    169a:	89 81       	ldd	r24, Y+1	; 0x01
}
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	cf 91       	pop	r28
    16a4:	df 91       	pop	r29
    16a6:	08 95       	ret

000016a8 <gpio_port_direction_initialize>:
 * @param port
 * @param direction
 * @return
 */
STD_ReturnStatus gpio_port_direction_initialize(port_index_t port,uint8 direction)
{
    16a8:	df 93       	push	r29
    16aa:	cf 93       	push	r28
    16ac:	00 d0       	rcall	.+0      	; 0x16ae <gpio_port_direction_initialize+0x6>
    16ae:	0f 92       	push	r0
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
    16b4:	8a 83       	std	Y+2, r24	; 0x02
    16b6:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnStatus ret=E_OK;
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	89 83       	std	Y+1, r24	; 0x01
	if(port>PORT_MAX_NUMBER-1)
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	84 30       	cpi	r24, 0x04	; 4
    16c0:	10 f0       	brcs	.+4      	; 0x16c6 <gpio_port_direction_initialize+0x1e>
	{
		ret=E_NOT_OK;
    16c2:	19 82       	std	Y+1, r1	; 0x01
    16c4:	0d c0       	rjmp	.+26     	; 0x16e0 <gpio_port_direction_initialize+0x38>
	}
	else
	{
		*DDR_register[port]=direction;
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	88 2f       	mov	r24, r24
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	fc 01       	movw	r30, r24
    16d2:	e5 59       	subi	r30, 0x95	; 149
    16d4:	ff 4f       	sbci	r31, 0xFF	; 255
    16d6:	01 90       	ld	r0, Z+
    16d8:	f0 81       	ld	r31, Z
    16da:	e0 2d       	mov	r30, r0
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	80 83       	st	Z, r24
	}

	return ret;
    16e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	08 95       	ret

000016ee <gpio_port_get_direction_status>:
STD_ReturnStatus gpio_port_get_direction_status(port_index_t port,uint8 *direction_status)
{
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	00 d0       	rcall	.+0      	; 0x16f4 <gpio_port_get_direction_status+0x6>
    16f4:	00 d0       	rcall	.+0      	; 0x16f6 <gpio_port_get_direction_status+0x8>
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
    16fa:	8a 83       	std	Y+2, r24	; 0x02
    16fc:	7c 83       	std	Y+4, r23	; 0x04
    16fe:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnStatus ret=E_OK;
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==direction_status && port>PORT_MAX_NUMBER-1)
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	9c 81       	ldd	r25, Y+4	; 0x04
    1708:	00 97       	sbiw	r24, 0x00	; 0
    170a:	29 f4       	brne	.+10     	; 0x1716 <gpio_port_get_direction_status+0x28>
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	84 30       	cpi	r24, 0x04	; 4
    1710:	10 f0       	brcs	.+4      	; 0x1716 <gpio_port_get_direction_status+0x28>
	{
		ret=E_NOT_OK;
    1712:	19 82       	std	Y+1, r1	; 0x01
    1714:	0f c0       	rjmp	.+30     	; 0x1734 <gpio_port_get_direction_status+0x46>
	}
	else
	{
		*direction_status=*DDR_register[port];
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	88 2f       	mov	r24, r24
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	fc 01       	movw	r30, r24
    1722:	e5 59       	subi	r30, 0x95	; 149
    1724:	ff 4f       	sbci	r31, 0xFF	; 255
    1726:	01 90       	ld	r0, Z+
    1728:	f0 81       	ld	r31, Z
    172a:	e0 2d       	mov	r30, r0
    172c:	80 81       	ld	r24, Z
    172e:	eb 81       	ldd	r30, Y+3	; 0x03
    1730:	fc 81       	ldd	r31, Y+4	; 0x04
    1732:	80 83       	st	Z, r24
	}

	return ret;
    1734:	89 81       	ldd	r24, Y+1	; 0x01
}
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	cf 91       	pop	r28
    1740:	df 91       	pop	r29
    1742:	08 95       	ret

00001744 <gpio_port_write_logic>:
 * @param port
 * @param logic
 * @return
 */
STD_ReturnStatus gpio_port_write_logic(port_index_t port,uint8 logic)
{
    1744:	df 93       	push	r29
    1746:	cf 93       	push	r28
    1748:	00 d0       	rcall	.+0      	; 0x174a <gpio_port_write_logic+0x6>
    174a:	0f 92       	push	r0
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
    1750:	8a 83       	std	Y+2, r24	; 0x02
    1752:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnStatus ret=E_OK;
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	89 83       	std	Y+1, r24	; 0x01
	if(port>PORT_MAX_NUMBER-1)
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	84 30       	cpi	r24, 0x04	; 4
    175c:	10 f0       	brcs	.+4      	; 0x1762 <gpio_port_write_logic+0x1e>
		{
			ret=E_NOT_OK;
    175e:	19 82       	std	Y+1, r1	; 0x01
    1760:	0d c0       	rjmp	.+26     	; 0x177c <gpio_port_write_logic+0x38>
		}
		else
		{
			*PORT_register[port]=logic;
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	88 2f       	mov	r24, r24
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	88 0f       	add	r24, r24
    176a:	99 1f       	adc	r25, r25
    176c:	fc 01       	movw	r30, r24
    176e:	ed 58       	subi	r30, 0x8D	; 141
    1770:	ff 4f       	sbci	r31, 0xFF	; 255
    1772:	01 90       	ld	r0, Z+
    1774:	f0 81       	ld	r31, Z
    1776:	e0 2d       	mov	r30, r0
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	80 83       	st	Z, r24
		}

	return ret;
    177c:	89 81       	ldd	r24, Y+1	; 0x01
}
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <gpio_port_read_logic>:
STD_ReturnStatus gpio_port_read_logic(port_index_t port,Logic_t *logic)
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	00 d0       	rcall	.+0      	; 0x1790 <gpio_port_read_logic+0x6>
    1790:	00 d0       	rcall	.+0      	; 0x1792 <gpio_port_read_logic+0x8>
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    1796:	8a 83       	std	Y+2, r24	; 0x02
    1798:	7c 83       	std	Y+4, r23	; 0x04
    179a:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnStatus ret=E_OK;
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==logic && port>PORT_MAX_NUMBER-1)
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	9c 81       	ldd	r25, Y+4	; 0x04
    17a4:	00 97       	sbiw	r24, 0x00	; 0
    17a6:	29 f4       	brne	.+10     	; 0x17b2 <gpio_port_read_logic+0x28>
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	84 30       	cpi	r24, 0x04	; 4
    17ac:	10 f0       	brcs	.+4      	; 0x17b2 <gpio_port_read_logic+0x28>
	{
		ret=E_NOT_OK;
    17ae:	19 82       	std	Y+1, r1	; 0x01
    17b0:	0f c0       	rjmp	.+30     	; 0x17d0 <gpio_port_read_logic+0x46>
	}
	else
	{
		*logic=*PORT_register[port];
    17b2:	8a 81       	ldd	r24, Y+2	; 0x02
    17b4:	88 2f       	mov	r24, r24
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	88 0f       	add	r24, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	fc 01       	movw	r30, r24
    17be:	ed 58       	subi	r30, 0x8D	; 141
    17c0:	ff 4f       	sbci	r31, 0xFF	; 255
    17c2:	01 90       	ld	r0, Z+
    17c4:	f0 81       	ld	r31, Z
    17c6:	e0 2d       	mov	r30, r0
    17c8:	80 81       	ld	r24, Z
    17ca:	eb 81       	ldd	r30, Y+3	; 0x03
    17cc:	fc 81       	ldd	r31, Y+4	; 0x04
    17ce:	80 83       	st	Z, r24
	}

	return ret;
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	cf 91       	pop	r28
    17dc:	df 91       	pop	r29
    17de:	08 95       	ret

000017e0 <gpio_port_toggle_logic>:
 *
 * @param port
 * @return
 */
STD_ReturnStatus gpio_port_toggle_logic(port_index_t port)
{
    17e0:	df 93       	push	r29
    17e2:	cf 93       	push	r28
    17e4:	00 d0       	rcall	.+0      	; 0x17e6 <gpio_port_toggle_logic+0x6>
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret=E_OK;
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	89 83       	std	Y+1, r24	; 0x01
	if(port>PORT_MAX_NUMBER-1)
    17f0:	8a 81       	ldd	r24, Y+2	; 0x02
    17f2:	84 30       	cpi	r24, 0x04	; 4
    17f4:	10 f0       	brcs	.+4      	; 0x17fa <gpio_port_toggle_logic+0x1a>
	{
		ret=E_NOT_OK;
    17f6:	19 82       	std	Y+1, r1	; 0x01
    17f8:	18 c0       	rjmp	.+48     	; 0x182a <gpio_port_toggle_logic+0x4a>
	}
	else
	{
		*PORT_register[port]^=0xff;
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	88 2f       	mov	r24, r24
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	88 0f       	add	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	fc 01       	movw	r30, r24
    1806:	ed 58       	subi	r30, 0x8D	; 141
    1808:	ff 4f       	sbci	r31, 0xFF	; 255
    180a:	a0 81       	ld	r26, Z
    180c:	b1 81       	ldd	r27, Z+1	; 0x01
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	88 2f       	mov	r24, r24
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	fc 01       	movw	r30, r24
    181a:	ed 58       	subi	r30, 0x8D	; 141
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	01 90       	ld	r0, Z+
    1820:	f0 81       	ld	r31, Z
    1822:	e0 2d       	mov	r30, r0
    1824:	80 81       	ld	r24, Z
    1826:	80 95       	com	r24
    1828:	8c 93       	st	X, r24
	}


	return ret;
    182a:	89 81       	ldd	r24, Y+1	; 0x01
}
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <relay_initialize>:
 *      Author: hazem
 */
#include "ECU_RELAY.h"

STD_ReturnStatus relay_initialize(const relay_t *_relay)
{
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	00 d0       	rcall	.+0      	; 0x183c <relay_initialize+0x6>
    183c:	00 d0       	rcall	.+0      	; 0x183e <relay_initialize+0x8>
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	9c 83       	std	Y+4, r25	; 0x04
    1844:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret = E_OK;
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == _relay)
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	9c 81       	ldd	r25, Y+4	; 0x04
    184e:	00 97       	sbiw	r24, 0x00	; 0
    1850:	11 f4       	brne	.+4      	; 0x1856 <relay_initialize+0x20>
	{
		ret = E_NOT_OK;
    1852:	19 82       	std	Y+1, r1	; 0x01
    1854:	34 c0       	rjmp	.+104    	; 0x18be <relay_initialize+0x88>
		Pin_Config_t pin_obj={
				.port= _relay->relay_port,
				.pin=_relay->relay_pin,
				.direction=DIRECTION_OUTPUT,
				.logic=_relay->relay_status
		};
    1856:	eb 81       	ldd	r30, Y+3	; 0x03
    1858:	fc 81       	ldd	r31, Y+4	; 0x04
    185a:	80 81       	ld	r24, Z
    185c:	8f 70       	andi	r24, 0x0F	; 15
    185e:	28 2f       	mov	r18, r24
    1860:	23 70       	andi	r18, 0x03	; 3
    1862:	eb 81       	ldd	r30, Y+3	; 0x03
    1864:	fc 81       	ldd	r31, Y+4	; 0x04
    1866:	80 81       	ld	r24, Z
    1868:	98 2f       	mov	r25, r24
    186a:	92 95       	swap	r25
    186c:	9f 70       	andi	r25, 0x0F	; 15
    186e:	97 70       	andi	r25, 0x07	; 7
    1870:	eb 81       	ldd	r30, Y+3	; 0x03
    1872:	fc 81       	ldd	r31, Y+4	; 0x04
    1874:	80 81       	ld	r24, Z
    1876:	38 2f       	mov	r19, r24
    1878:	33 1f       	adc	r19, r19
    187a:	33 27       	eor	r19, r19
    187c:	33 1f       	adc	r19, r19
    187e:	23 70       	andi	r18, 0x03	; 3
    1880:	8a 81       	ldd	r24, Y+2	; 0x02
    1882:	8c 7f       	andi	r24, 0xFC	; 252
    1884:	82 2b       	or	r24, r18
    1886:	8a 83       	std	Y+2, r24	; 0x02
    1888:	89 2f       	mov	r24, r25
    188a:	87 70       	andi	r24, 0x07	; 7
    188c:	98 2f       	mov	r25, r24
    188e:	99 0f       	add	r25, r25
    1890:	99 0f       	add	r25, r25
    1892:	8a 81       	ldd	r24, Y+2	; 0x02
    1894:	83 7e       	andi	r24, 0xE3	; 227
    1896:	89 2b       	or	r24, r25
    1898:	8a 83       	std	Y+2, r24	; 0x02
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	80 62       	ori	r24, 0x20	; 32
    189e:	8a 83       	std	Y+2, r24	; 0x02
    18a0:	83 2f       	mov	r24, r19
    18a2:	81 70       	andi	r24, 0x01	; 1
    18a4:	98 2f       	mov	r25, r24
    18a6:	92 95       	swap	r25
    18a8:	99 0f       	add	r25, r25
    18aa:	99 0f       	add	r25, r25
    18ac:	90 7c       	andi	r25, 0xC0	; 192
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	8f 7b       	andi	r24, 0xBF	; 191
    18b2:	89 2b       	or	r24, r25
    18b4:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_initialize(&pin_obj);
    18b6:	ce 01       	movw	r24, r28
    18b8:	02 96       	adiw	r24, 0x02	; 2
    18ba:	0e 94 29 0b 	call	0x1652	; 0x1652 <gpio_pin_initialize>
	}

	return ret;
    18be:	89 81       	ldd	r24, Y+1	; 0x01
}
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	cf 91       	pop	r28
    18ca:	df 91       	pop	r29
    18cc:	08 95       	ret

000018ce <relay_turn_on>:



STD_ReturnStatus relay_turn_on(const relay_t *_relay)
{
    18ce:	df 93       	push	r29
    18d0:	cf 93       	push	r28
    18d2:	00 d0       	rcall	.+0      	; 0x18d4 <relay_turn_on+0x6>
    18d4:	00 d0       	rcall	.+0      	; 0x18d6 <relay_turn_on+0x8>
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
    18da:	9c 83       	std	Y+4, r25	; 0x04
    18dc:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret = E_OK;
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == _relay)
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	9c 81       	ldd	r25, Y+4	; 0x04
    18e6:	00 97       	sbiw	r24, 0x00	; 0
    18e8:	11 f4       	brne	.+4      	; 0x18ee <relay_turn_on+0x20>
	{
		ret = E_NOT_OK;
    18ea:	19 82       	std	Y+1, r1	; 0x01
    18ec:	35 c0       	rjmp	.+106    	; 0x1958 <relay_turn_on+0x8a>
		Pin_Config_t pin_obj={
				.port= _relay->relay_port,
				.pin=_relay->relay_pin,
				.direction=DIRECTION_OUTPUT,
				.logic=_relay->relay_status
		};
    18ee:	eb 81       	ldd	r30, Y+3	; 0x03
    18f0:	fc 81       	ldd	r31, Y+4	; 0x04
    18f2:	80 81       	ld	r24, Z
    18f4:	8f 70       	andi	r24, 0x0F	; 15
    18f6:	28 2f       	mov	r18, r24
    18f8:	23 70       	andi	r18, 0x03	; 3
    18fa:	eb 81       	ldd	r30, Y+3	; 0x03
    18fc:	fc 81       	ldd	r31, Y+4	; 0x04
    18fe:	80 81       	ld	r24, Z
    1900:	98 2f       	mov	r25, r24
    1902:	92 95       	swap	r25
    1904:	9f 70       	andi	r25, 0x0F	; 15
    1906:	97 70       	andi	r25, 0x07	; 7
    1908:	eb 81       	ldd	r30, Y+3	; 0x03
    190a:	fc 81       	ldd	r31, Y+4	; 0x04
    190c:	80 81       	ld	r24, Z
    190e:	38 2f       	mov	r19, r24
    1910:	33 1f       	adc	r19, r19
    1912:	33 27       	eor	r19, r19
    1914:	33 1f       	adc	r19, r19
    1916:	23 70       	andi	r18, 0x03	; 3
    1918:	8a 81       	ldd	r24, Y+2	; 0x02
    191a:	8c 7f       	andi	r24, 0xFC	; 252
    191c:	82 2b       	or	r24, r18
    191e:	8a 83       	std	Y+2, r24	; 0x02
    1920:	89 2f       	mov	r24, r25
    1922:	87 70       	andi	r24, 0x07	; 7
    1924:	98 2f       	mov	r25, r24
    1926:	99 0f       	add	r25, r25
    1928:	99 0f       	add	r25, r25
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	83 7e       	andi	r24, 0xE3	; 227
    192e:	89 2b       	or	r24, r25
    1930:	8a 83       	std	Y+2, r24	; 0x02
    1932:	8a 81       	ldd	r24, Y+2	; 0x02
    1934:	80 62       	ori	r24, 0x20	; 32
    1936:	8a 83       	std	Y+2, r24	; 0x02
    1938:	83 2f       	mov	r24, r19
    193a:	81 70       	andi	r24, 0x01	; 1
    193c:	98 2f       	mov	r25, r24
    193e:	92 95       	swap	r25
    1940:	99 0f       	add	r25, r25
    1942:	99 0f       	add	r25, r25
    1944:	90 7c       	andi	r25, 0xC0	; 192
    1946:	8a 81       	ldd	r24, Y+2	; 0x02
    1948:	8f 7b       	andi	r24, 0xBF	; 191
    194a:	89 2b       	or	r24, r25
    194c:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_write_logic(&pin_obj,GPIO_HIGH);
    194e:	ce 01       	movw	r24, r28
    1950:	02 96       	adiw	r24, 0x02	; 2
    1952:	61 e0       	ldi	r22, 0x01	; 1
    1954:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
	}


	return ret;
    1958:	89 81       	ldd	r24, Y+1	; 0x01
}
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	cf 91       	pop	r28
    1964:	df 91       	pop	r29
    1966:	08 95       	ret

00001968 <relay_turn_off>:
STD_ReturnStatus relay_turn_off(const relay_t *_relay)
{
    1968:	df 93       	push	r29
    196a:	cf 93       	push	r28
    196c:	00 d0       	rcall	.+0      	; 0x196e <relay_turn_off+0x6>
    196e:	00 d0       	rcall	.+0      	; 0x1970 <relay_turn_off+0x8>
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
    1974:	9c 83       	std	Y+4, r25	; 0x04
    1976:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret = E_OK;
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == _relay)
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	9c 81       	ldd	r25, Y+4	; 0x04
    1980:	00 97       	sbiw	r24, 0x00	; 0
    1982:	11 f4       	brne	.+4      	; 0x1988 <relay_turn_off+0x20>
	{
		ret = E_NOT_OK;
    1984:	19 82       	std	Y+1, r1	; 0x01
    1986:	35 c0       	rjmp	.+106    	; 0x19f2 <relay_turn_off+0x8a>
		Pin_Config_t pin_obj={
				.port= _relay->relay_port,
				.pin=_relay->relay_pin,
				.direction=DIRECTION_OUTPUT,
				.logic=_relay->relay_status
		};
    1988:	eb 81       	ldd	r30, Y+3	; 0x03
    198a:	fc 81       	ldd	r31, Y+4	; 0x04
    198c:	80 81       	ld	r24, Z
    198e:	8f 70       	andi	r24, 0x0F	; 15
    1990:	28 2f       	mov	r18, r24
    1992:	23 70       	andi	r18, 0x03	; 3
    1994:	eb 81       	ldd	r30, Y+3	; 0x03
    1996:	fc 81       	ldd	r31, Y+4	; 0x04
    1998:	80 81       	ld	r24, Z
    199a:	98 2f       	mov	r25, r24
    199c:	92 95       	swap	r25
    199e:	9f 70       	andi	r25, 0x0F	; 15
    19a0:	97 70       	andi	r25, 0x07	; 7
    19a2:	eb 81       	ldd	r30, Y+3	; 0x03
    19a4:	fc 81       	ldd	r31, Y+4	; 0x04
    19a6:	80 81       	ld	r24, Z
    19a8:	38 2f       	mov	r19, r24
    19aa:	33 1f       	adc	r19, r19
    19ac:	33 27       	eor	r19, r19
    19ae:	33 1f       	adc	r19, r19
    19b0:	23 70       	andi	r18, 0x03	; 3
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	8c 7f       	andi	r24, 0xFC	; 252
    19b6:	82 2b       	or	r24, r18
    19b8:	8a 83       	std	Y+2, r24	; 0x02
    19ba:	89 2f       	mov	r24, r25
    19bc:	87 70       	andi	r24, 0x07	; 7
    19be:	98 2f       	mov	r25, r24
    19c0:	99 0f       	add	r25, r25
    19c2:	99 0f       	add	r25, r25
    19c4:	8a 81       	ldd	r24, Y+2	; 0x02
    19c6:	83 7e       	andi	r24, 0xE3	; 227
    19c8:	89 2b       	or	r24, r25
    19ca:	8a 83       	std	Y+2, r24	; 0x02
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	80 62       	ori	r24, 0x20	; 32
    19d0:	8a 83       	std	Y+2, r24	; 0x02
    19d2:	83 2f       	mov	r24, r19
    19d4:	81 70       	andi	r24, 0x01	; 1
    19d6:	98 2f       	mov	r25, r24
    19d8:	92 95       	swap	r25
    19da:	99 0f       	add	r25, r25
    19dc:	99 0f       	add	r25, r25
    19de:	90 7c       	andi	r25, 0xC0	; 192
    19e0:	8a 81       	ldd	r24, Y+2	; 0x02
    19e2:	8f 7b       	andi	r24, 0xBF	; 191
    19e4:	89 2b       	or	r24, r25
    19e6:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_write_logic(&pin_obj,GPIO_LOW);
    19e8:	ce 01       	movw	r24, r28
    19ea:	02 96       	adiw	r24, 0x02	; 2
    19ec:	60 e0       	ldi	r22, 0x00	; 0
    19ee:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
	}


	return ret;
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    19f4:	0f 90       	pop	r0
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	cf 91       	pop	r28
    19fe:	df 91       	pop	r29
    1a00:	08 95       	ret

00001a02 <relay_toggle>:




STD_ReturnStatus relay_toggle(const relay_t *_relay)
{
    1a02:	df 93       	push	r29
    1a04:	cf 93       	push	r28
    1a06:	00 d0       	rcall	.+0      	; 0x1a08 <relay_toggle+0x6>
    1a08:	00 d0       	rcall	.+0      	; 0x1a0a <relay_toggle+0x8>
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
    1a0e:	9c 83       	std	Y+4, r25	; 0x04
    1a10:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret = E_OK;
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == _relay)
    1a16:	8b 81       	ldd	r24, Y+3	; 0x03
    1a18:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1a:	00 97       	sbiw	r24, 0x00	; 0
    1a1c:	11 f4       	brne	.+4      	; 0x1a22 <relay_toggle+0x20>
	{
		ret = E_NOT_OK;
    1a1e:	19 82       	std	Y+1, r1	; 0x01
    1a20:	34 c0       	rjmp	.+104    	; 0x1a8a <relay_toggle+0x88>
		Pin_Config_t pin_obj={
				.port= _relay->relay_port,
				.pin=_relay->relay_pin,
				.direction=DIRECTION_OUTPUT,
				.logic=_relay->relay_status
		};
    1a22:	eb 81       	ldd	r30, Y+3	; 0x03
    1a24:	fc 81       	ldd	r31, Y+4	; 0x04
    1a26:	80 81       	ld	r24, Z
    1a28:	8f 70       	andi	r24, 0x0F	; 15
    1a2a:	28 2f       	mov	r18, r24
    1a2c:	23 70       	andi	r18, 0x03	; 3
    1a2e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a30:	fc 81       	ldd	r31, Y+4	; 0x04
    1a32:	80 81       	ld	r24, Z
    1a34:	98 2f       	mov	r25, r24
    1a36:	92 95       	swap	r25
    1a38:	9f 70       	andi	r25, 0x0F	; 15
    1a3a:	97 70       	andi	r25, 0x07	; 7
    1a3c:	eb 81       	ldd	r30, Y+3	; 0x03
    1a3e:	fc 81       	ldd	r31, Y+4	; 0x04
    1a40:	80 81       	ld	r24, Z
    1a42:	38 2f       	mov	r19, r24
    1a44:	33 1f       	adc	r19, r19
    1a46:	33 27       	eor	r19, r19
    1a48:	33 1f       	adc	r19, r19
    1a4a:	23 70       	andi	r18, 0x03	; 3
    1a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4e:	8c 7f       	andi	r24, 0xFC	; 252
    1a50:	82 2b       	or	r24, r18
    1a52:	8a 83       	std	Y+2, r24	; 0x02
    1a54:	89 2f       	mov	r24, r25
    1a56:	87 70       	andi	r24, 0x07	; 7
    1a58:	98 2f       	mov	r25, r24
    1a5a:	99 0f       	add	r25, r25
    1a5c:	99 0f       	add	r25, r25
    1a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a60:	83 7e       	andi	r24, 0xE3	; 227
    1a62:	89 2b       	or	r24, r25
    1a64:	8a 83       	std	Y+2, r24	; 0x02
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	80 62       	ori	r24, 0x20	; 32
    1a6a:	8a 83       	std	Y+2, r24	; 0x02
    1a6c:	83 2f       	mov	r24, r19
    1a6e:	81 70       	andi	r24, 0x01	; 1
    1a70:	98 2f       	mov	r25, r24
    1a72:	92 95       	swap	r25
    1a74:	99 0f       	add	r25, r25
    1a76:	99 0f       	add	r25, r25
    1a78:	90 7c       	andi	r25, 0xC0	; 192
    1a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7c:	8f 7b       	andi	r24, 0xBF	; 191
    1a7e:	89 2b       	or	r24, r25
    1a80:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_toggle_logic(&pin_obj);
    1a82:	ce 01       	movw	r24, r28
    1a84:	02 96       	adiw	r24, 0x02	; 2
    1a86:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <gpio_pin_toggle_logic>
	}


	return ret;
    1a8a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	08 95       	ret

00001a9a <button_initialize>:
 *
 * @param btn
 * @return
 */
STD_ReturnStatus button_initialize(const button_t *btn)
{
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	00 d0       	rcall	.+0      	; 0x1aa0 <button_initialize+0x6>
    1aa0:	0f 92       	push	r0
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	9b 83       	std	Y+3, r25	; 0x03
    1aa8:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret=E_OK;
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==btn)
    1aae:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ab2:	00 97       	sbiw	r24, 0x00	; 0
    1ab4:	11 f4       	brne	.+4      	; 0x1aba <button_initialize+0x20>
	{
		ret = E_NOT_OK;
    1ab6:	19 82       	std	Y+1, r1	; 0x01
    1ab8:	05 c0       	rjmp	.+10     	; 0x1ac4 <button_initialize+0x2a>
	}
	else
	{
		ret = gpio_pin_direction_initialize(&(btn->button_pin));
    1aba:	8a 81       	ldd	r24, Y+2	; 0x02
    1abc:	9b 81       	ldd	r25, Y+3	; 0x03
    1abe:	0e 94 07 09 	call	0x120e	; 0x120e <gpio_pin_direction_initialize>
    1ac2:	89 83       	std	Y+1, r24	; 0x01
	}


	return ret;
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
    1acc:	cf 91       	pop	r28
    1ace:	df 91       	pop	r29
    1ad0:	08 95       	ret

00001ad2 <button_read_state>:
 * @param btn
 * @param btn_state
 * @return
 */
STD_ReturnStatus button_read_state(const button_t *btn,button_status_t *btn_state)
{
    1ad2:	df 93       	push	r29
    1ad4:	cf 93       	push	r28
    1ad6:	00 d0       	rcall	.+0      	; 0x1ad8 <button_read_state+0x6>
    1ad8:	00 d0       	rcall	.+0      	; 0x1ada <button_read_state+0x8>
    1ada:	00 d0       	rcall	.+0      	; 0x1adc <button_read_state+0xa>
    1adc:	cd b7       	in	r28, 0x3d	; 61
    1ade:	de b7       	in	r29, 0x3e	; 62
    1ae0:	9c 83       	std	Y+4, r25	; 0x04
    1ae2:	8b 83       	std	Y+3, r24	; 0x03
    1ae4:	7e 83       	std	Y+6, r23	; 0x06
    1ae6:	6d 83       	std	Y+5, r22	; 0x05
	STD_ReturnStatus ret=E_NOT_OK;
    1ae8:	19 82       	std	Y+1, r1	; 0x01
	Logic_t pin_logic_status=GPIO_LOW;
    1aea:	1a 82       	std	Y+2, r1	; 0x02
	if((NULL==btn)||(NULL==btn_state))
    1aec:	8b 81       	ldd	r24, Y+3	; 0x03
    1aee:	9c 81       	ldd	r25, Y+4	; 0x04
    1af0:	00 97       	sbiw	r24, 0x00	; 0
    1af2:	21 f0       	breq	.+8      	; 0x1afc <button_read_state+0x2a>
    1af4:	8d 81       	ldd	r24, Y+5	; 0x05
    1af6:	9e 81       	ldd	r25, Y+6	; 0x06
    1af8:	00 97       	sbiw	r24, 0x00	; 0
    1afa:	11 f4       	brne	.+4      	; 0x1b00 <button_read_state+0x2e>
	{
		ret = E_NOT_OK;
    1afc:	19 82       	std	Y+1, r1	; 0x01
    1afe:	2b c0       	rjmp	.+86     	; 0x1b56 <button_read_state+0x84>
	}
	else
	{
		gpio_pin_read_logic(&(btn->button_pin),&pin_logic_status);
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	9c 81       	ldd	r25, Y+4	; 0x04
    1b04:	9e 01       	movw	r18, r28
    1b06:	2e 5f       	subi	r18, 0xFE	; 254
    1b08:	3f 4f       	sbci	r19, 0xFF	; 255
    1b0a:	b9 01       	movw	r22, r18
    1b0c:	0e 94 89 0a 	call	0x1512	; 0x1512 <gpio_pin_read_logic>
		if(BUTTON_ACTIVE_HIGH == btn->button_connection)
    1b10:	eb 81       	ldd	r30, Y+3	; 0x03
    1b12:	fc 81       	ldd	r31, Y+4	; 0x04
    1b14:	82 81       	ldd	r24, Z+2	; 0x02
    1b16:	88 23       	and	r24, r24
    1b18:	61 f4       	brne	.+24     	; 0x1b32 <button_read_state+0x60>
		{
			if(GPIO_HIGH==pin_logic_status)
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	81 30       	cpi	r24, 0x01	; 1
    1b1e:	21 f4       	brne	.+8      	; 0x1b28 <button_read_state+0x56>
			{
				*btn_state=BUTTON_PRESSED;
    1b20:	ed 81       	ldd	r30, Y+5	; 0x05
    1b22:	fe 81       	ldd	r31, Y+6	; 0x06
    1b24:	10 82       	st	Z, r1
    1b26:	15 c0       	rjmp	.+42     	; 0x1b52 <button_read_state+0x80>
			}
			else
			{
				*btn_state=BUTTON_RELEASED;
    1b28:	ed 81       	ldd	r30, Y+5	; 0x05
    1b2a:	fe 81       	ldd	r31, Y+6	; 0x06
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	80 83       	st	Z, r24
    1b30:	10 c0       	rjmp	.+32     	; 0x1b52 <button_read_state+0x80>
			}
		}
		else if(BUTTON_ACTIVE_LOW == btn->button_connection)
    1b32:	eb 81       	ldd	r30, Y+3	; 0x03
    1b34:	fc 81       	ldd	r31, Y+4	; 0x04
    1b36:	82 81       	ldd	r24, Z+2	; 0x02
    1b38:	81 30       	cpi	r24, 0x01	; 1
    1b3a:	59 f4       	brne	.+22     	; 0x1b52 <button_read_state+0x80>
		{
			if(GPIO_LOW==pin_logic_status)
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	88 23       	and	r24, r24
    1b40:	21 f4       	brne	.+8      	; 0x1b4a <button_read_state+0x78>
			{
				*btn_state=BUTTON_PRESSED;
    1b42:	ed 81       	ldd	r30, Y+5	; 0x05
    1b44:	fe 81       	ldd	r31, Y+6	; 0x06
    1b46:	10 82       	st	Z, r1
    1b48:	04 c0       	rjmp	.+8      	; 0x1b52 <button_read_state+0x80>
			}
			else
			{
				*btn_state=BUTTON_RELEASED;
    1b4a:	ed 81       	ldd	r30, Y+5	; 0x05
    1b4c:	fe 81       	ldd	r31, Y+6	; 0x06
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	80 83       	st	Z, r24
			}
		}
		ret = E_OK;
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	89 83       	std	Y+1, r24	; 0x01
	}


	return ret;
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b58:	26 96       	adiw	r28, 0x06	; 6
    1b5a:	0f b6       	in	r0, 0x3f	; 63
    1b5c:	f8 94       	cli
    1b5e:	de bf       	out	0x3e, r29	; 62
    1b60:	0f be       	out	0x3f, r0	; 63
    1b62:	cd bf       	out	0x3d, r28	; 61
    1b64:	cf 91       	pop	r28
    1b66:	df 91       	pop	r29
    1b68:	08 95       	ret

00001b6a <led_initialize>:
 *
 * @param led
 * @return
 */
STD_ReturnStatus led_initialize(const led_t *led)
{
    1b6a:	df 93       	push	r29
    1b6c:	cf 93       	push	r28
    1b6e:	00 d0       	rcall	.+0      	; 0x1b70 <led_initialize+0x6>
    1b70:	00 d0       	rcall	.+0      	; 0x1b72 <led_initialize+0x8>
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
    1b76:	9c 83       	std	Y+4, r25	; 0x04
    1b78:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret=E_OK;
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==led)
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	9c 81       	ldd	r25, Y+4	; 0x04
    1b82:	00 97       	sbiw	r24, 0x00	; 0
    1b84:	11 f4       	brne	.+4      	; 0x1b8a <led_initialize+0x20>
	{
		ret= E_NOT_OK;
    1b86:	19 82       	std	Y+1, r1	; 0x01
    1b88:	37 c0       	rjmp	.+110    	; 0x1bf8 <led_initialize+0x8e>
	}
	else
	{
		Pin_Config_t pin_obj={.port=led->port_name,.pin=led->pin,.direction=DIRECTION_OUTPUT,.logic=led->led_status};
    1b8a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b8c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b8e:	80 81       	ld	r24, Z
    1b90:	87 70       	andi	r24, 0x07	; 7
    1b92:	28 2f       	mov	r18, r24
    1b94:	23 70       	andi	r18, 0x03	; 3
    1b96:	eb 81       	ldd	r30, Y+3	; 0x03
    1b98:	fc 81       	ldd	r31, Y+4	; 0x04
    1b9a:	80 81       	ld	r24, Z
    1b9c:	98 2f       	mov	r25, r24
    1b9e:	96 95       	lsr	r25
    1ba0:	96 95       	lsr	r25
    1ba2:	96 95       	lsr	r25
    1ba4:	97 70       	andi	r25, 0x07	; 7
    1ba6:	eb 81       	ldd	r30, Y+3	; 0x03
    1ba8:	fc 81       	ldd	r31, Y+4	; 0x04
    1baa:	80 81       	ld	r24, Z
    1bac:	38 2f       	mov	r19, r24
    1bae:	32 95       	swap	r19
    1bb0:	36 95       	lsr	r19
    1bb2:	36 95       	lsr	r19
    1bb4:	33 70       	andi	r19, 0x03	; 3
    1bb6:	31 70       	andi	r19, 0x01	; 1
    1bb8:	23 70       	andi	r18, 0x03	; 3
    1bba:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbc:	8c 7f       	andi	r24, 0xFC	; 252
    1bbe:	82 2b       	or	r24, r18
    1bc0:	8a 83       	std	Y+2, r24	; 0x02
    1bc2:	89 2f       	mov	r24, r25
    1bc4:	87 70       	andi	r24, 0x07	; 7
    1bc6:	98 2f       	mov	r25, r24
    1bc8:	99 0f       	add	r25, r25
    1bca:	99 0f       	add	r25, r25
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	83 7e       	andi	r24, 0xE3	; 227
    1bd0:	89 2b       	or	r24, r25
    1bd2:	8a 83       	std	Y+2, r24	; 0x02
    1bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd6:	80 62       	ori	r24, 0x20	; 32
    1bd8:	8a 83       	std	Y+2, r24	; 0x02
    1bda:	83 2f       	mov	r24, r19
    1bdc:	81 70       	andi	r24, 0x01	; 1
    1bde:	98 2f       	mov	r25, r24
    1be0:	92 95       	swap	r25
    1be2:	99 0f       	add	r25, r25
    1be4:	99 0f       	add	r25, r25
    1be6:	90 7c       	andi	r25, 0xC0	; 192
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	8f 7b       	andi	r24, 0xBF	; 191
    1bec:	89 2b       	or	r24, r25
    1bee:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_initialize(&pin_obj);
    1bf0:	ce 01       	movw	r24, r28
    1bf2:	02 96       	adiw	r24, 0x02	; 2
    1bf4:	0e 94 29 0b 	call	0x1652	; 0x1652 <gpio_pin_initialize>
	}

	return ret;
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	08 95       	ret

00001c08 <led_turn_on>:
 *
 * @param led
 * @return
 */
STD_ReturnStatus led_turn_on(const led_t *led)
{
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	00 d0       	rcall	.+0      	; 0x1c0e <led_turn_on+0x6>
    1c0e:	00 d0       	rcall	.+0      	; 0x1c10 <led_turn_on+0x8>
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
    1c14:	9c 83       	std	Y+4, r25	; 0x04
    1c16:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret=E_OK;
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==led)
    1c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c20:	00 97       	sbiw	r24, 0x00	; 0
    1c22:	11 f4       	brne	.+4      	; 0x1c28 <led_turn_on+0x20>
	{
		ret= E_NOT_OK;
    1c24:	19 82       	std	Y+1, r1	; 0x01
    1c26:	38 c0       	rjmp	.+112    	; 0x1c98 <led_turn_on+0x90>
	}
	else
	{
		Pin_Config_t pin_obj={.port=led->port_name,.pin=led->pin,.direction=DIRECTION_OUTPUT,.logic=led->led_status};
    1c28:	eb 81       	ldd	r30, Y+3	; 0x03
    1c2a:	fc 81       	ldd	r31, Y+4	; 0x04
    1c2c:	80 81       	ld	r24, Z
    1c2e:	87 70       	andi	r24, 0x07	; 7
    1c30:	28 2f       	mov	r18, r24
    1c32:	23 70       	andi	r18, 0x03	; 3
    1c34:	eb 81       	ldd	r30, Y+3	; 0x03
    1c36:	fc 81       	ldd	r31, Y+4	; 0x04
    1c38:	80 81       	ld	r24, Z
    1c3a:	98 2f       	mov	r25, r24
    1c3c:	96 95       	lsr	r25
    1c3e:	96 95       	lsr	r25
    1c40:	96 95       	lsr	r25
    1c42:	97 70       	andi	r25, 0x07	; 7
    1c44:	eb 81       	ldd	r30, Y+3	; 0x03
    1c46:	fc 81       	ldd	r31, Y+4	; 0x04
    1c48:	80 81       	ld	r24, Z
    1c4a:	38 2f       	mov	r19, r24
    1c4c:	32 95       	swap	r19
    1c4e:	36 95       	lsr	r19
    1c50:	36 95       	lsr	r19
    1c52:	33 70       	andi	r19, 0x03	; 3
    1c54:	31 70       	andi	r19, 0x01	; 1
    1c56:	23 70       	andi	r18, 0x03	; 3
    1c58:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5a:	8c 7f       	andi	r24, 0xFC	; 252
    1c5c:	82 2b       	or	r24, r18
    1c5e:	8a 83       	std	Y+2, r24	; 0x02
    1c60:	89 2f       	mov	r24, r25
    1c62:	87 70       	andi	r24, 0x07	; 7
    1c64:	98 2f       	mov	r25, r24
    1c66:	99 0f       	add	r25, r25
    1c68:	99 0f       	add	r25, r25
    1c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6c:	83 7e       	andi	r24, 0xE3	; 227
    1c6e:	89 2b       	or	r24, r25
    1c70:	8a 83       	std	Y+2, r24	; 0x02
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	80 62       	ori	r24, 0x20	; 32
    1c76:	8a 83       	std	Y+2, r24	; 0x02
    1c78:	83 2f       	mov	r24, r19
    1c7a:	81 70       	andi	r24, 0x01	; 1
    1c7c:	98 2f       	mov	r25, r24
    1c7e:	92 95       	swap	r25
    1c80:	99 0f       	add	r25, r25
    1c82:	99 0f       	add	r25, r25
    1c84:	90 7c       	andi	r25, 0xC0	; 192
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	8f 7b       	andi	r24, 0xBF	; 191
    1c8a:	89 2b       	or	r24, r25
    1c8c:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_write_logic(&pin_obj,GPIO_HIGH);
    1c8e:	ce 01       	movw	r24, r28
    1c90:	02 96       	adiw	r24, 0x02	; 2
    1c92:	61 e0       	ldi	r22, 0x01	; 1
    1c94:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
	}

	return ret;
    1c98:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	cf 91       	pop	r28
    1ca4:	df 91       	pop	r29
    1ca6:	08 95       	ret

00001ca8 <led_turn_off>:
 *
 * @param led
 * @return
 */
STD_ReturnStatus led_turn_off(const led_t *led)
{
    1ca8:	df 93       	push	r29
    1caa:	cf 93       	push	r28
    1cac:	00 d0       	rcall	.+0      	; 0x1cae <led_turn_off+0x6>
    1cae:	00 d0       	rcall	.+0      	; 0x1cb0 <led_turn_off+0x8>
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
    1cb4:	9c 83       	std	Y+4, r25	; 0x04
    1cb6:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret=E_OK;
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==led)
    1cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc0:	00 97       	sbiw	r24, 0x00	; 0
    1cc2:	11 f4       	brne	.+4      	; 0x1cc8 <led_turn_off+0x20>
	{
		ret= E_NOT_OK;
    1cc4:	19 82       	std	Y+1, r1	; 0x01
    1cc6:	38 c0       	rjmp	.+112    	; 0x1d38 <led_turn_off+0x90>
	}
	else
	{
		Pin_Config_t pin_obj={.port=led->port_name,.pin=led->pin,.direction=DIRECTION_OUTPUT,.logic=led->led_status};
    1cc8:	eb 81       	ldd	r30, Y+3	; 0x03
    1cca:	fc 81       	ldd	r31, Y+4	; 0x04
    1ccc:	80 81       	ld	r24, Z
    1cce:	87 70       	andi	r24, 0x07	; 7
    1cd0:	28 2f       	mov	r18, r24
    1cd2:	23 70       	andi	r18, 0x03	; 3
    1cd4:	eb 81       	ldd	r30, Y+3	; 0x03
    1cd6:	fc 81       	ldd	r31, Y+4	; 0x04
    1cd8:	80 81       	ld	r24, Z
    1cda:	98 2f       	mov	r25, r24
    1cdc:	96 95       	lsr	r25
    1cde:	96 95       	lsr	r25
    1ce0:	96 95       	lsr	r25
    1ce2:	97 70       	andi	r25, 0x07	; 7
    1ce4:	eb 81       	ldd	r30, Y+3	; 0x03
    1ce6:	fc 81       	ldd	r31, Y+4	; 0x04
    1ce8:	80 81       	ld	r24, Z
    1cea:	38 2f       	mov	r19, r24
    1cec:	32 95       	swap	r19
    1cee:	36 95       	lsr	r19
    1cf0:	36 95       	lsr	r19
    1cf2:	33 70       	andi	r19, 0x03	; 3
    1cf4:	31 70       	andi	r19, 0x01	; 1
    1cf6:	23 70       	andi	r18, 0x03	; 3
    1cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfa:	8c 7f       	andi	r24, 0xFC	; 252
    1cfc:	82 2b       	or	r24, r18
    1cfe:	8a 83       	std	Y+2, r24	; 0x02
    1d00:	89 2f       	mov	r24, r25
    1d02:	87 70       	andi	r24, 0x07	; 7
    1d04:	98 2f       	mov	r25, r24
    1d06:	99 0f       	add	r25, r25
    1d08:	99 0f       	add	r25, r25
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	83 7e       	andi	r24, 0xE3	; 227
    1d0e:	89 2b       	or	r24, r25
    1d10:	8a 83       	std	Y+2, r24	; 0x02
    1d12:	8a 81       	ldd	r24, Y+2	; 0x02
    1d14:	80 62       	ori	r24, 0x20	; 32
    1d16:	8a 83       	std	Y+2, r24	; 0x02
    1d18:	83 2f       	mov	r24, r19
    1d1a:	81 70       	andi	r24, 0x01	; 1
    1d1c:	98 2f       	mov	r25, r24
    1d1e:	92 95       	swap	r25
    1d20:	99 0f       	add	r25, r25
    1d22:	99 0f       	add	r25, r25
    1d24:	90 7c       	andi	r25, 0xC0	; 192
    1d26:	8a 81       	ldd	r24, Y+2	; 0x02
    1d28:	8f 7b       	andi	r24, 0xBF	; 191
    1d2a:	89 2b       	or	r24, r25
    1d2c:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_write_logic(&pin_obj,GPIO_LOW);
    1d2e:	ce 01       	movw	r24, r28
    1d30:	02 96       	adiw	r24, 0x02	; 2
    1d32:	60 e0       	ldi	r22, 0x00	; 0
    1d34:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
	}

	return ret;
    1d38:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d3a:	0f 90       	pop	r0
    1d3c:	0f 90       	pop	r0
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	08 95       	ret

00001d48 <led_turn_toggle>:
 *
 * @param led
 * @return
 */
STD_ReturnStatus led_turn_toggle(const led_t *led)
{
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	00 d0       	rcall	.+0      	; 0x1d4e <led_turn_toggle+0x6>
    1d4e:	00 d0       	rcall	.+0      	; 0x1d50 <led_turn_toggle+0x8>
    1d50:	cd b7       	in	r28, 0x3d	; 61
    1d52:	de b7       	in	r29, 0x3e	; 62
    1d54:	9c 83       	std	Y+4, r25	; 0x04
    1d56:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret=E_OK;
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==led)
    1d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d60:	00 97       	sbiw	r24, 0x00	; 0
    1d62:	11 f4       	brne	.+4      	; 0x1d68 <led_turn_toggle+0x20>
	{
		ret= E_NOT_OK;
    1d64:	19 82       	std	Y+1, r1	; 0x01
    1d66:	37 c0       	rjmp	.+110    	; 0x1dd6 <led_turn_toggle+0x8e>
	}
	else
	{
		Pin_Config_t pin_obj={.port=led->port_name,.pin=led->pin,.direction=DIRECTION_OUTPUT,.logic=led->led_status};
    1d68:	eb 81       	ldd	r30, Y+3	; 0x03
    1d6a:	fc 81       	ldd	r31, Y+4	; 0x04
    1d6c:	80 81       	ld	r24, Z
    1d6e:	87 70       	andi	r24, 0x07	; 7
    1d70:	28 2f       	mov	r18, r24
    1d72:	23 70       	andi	r18, 0x03	; 3
    1d74:	eb 81       	ldd	r30, Y+3	; 0x03
    1d76:	fc 81       	ldd	r31, Y+4	; 0x04
    1d78:	80 81       	ld	r24, Z
    1d7a:	98 2f       	mov	r25, r24
    1d7c:	96 95       	lsr	r25
    1d7e:	96 95       	lsr	r25
    1d80:	96 95       	lsr	r25
    1d82:	97 70       	andi	r25, 0x07	; 7
    1d84:	eb 81       	ldd	r30, Y+3	; 0x03
    1d86:	fc 81       	ldd	r31, Y+4	; 0x04
    1d88:	80 81       	ld	r24, Z
    1d8a:	38 2f       	mov	r19, r24
    1d8c:	32 95       	swap	r19
    1d8e:	36 95       	lsr	r19
    1d90:	36 95       	lsr	r19
    1d92:	33 70       	andi	r19, 0x03	; 3
    1d94:	31 70       	andi	r19, 0x01	; 1
    1d96:	23 70       	andi	r18, 0x03	; 3
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	8c 7f       	andi	r24, 0xFC	; 252
    1d9c:	82 2b       	or	r24, r18
    1d9e:	8a 83       	std	Y+2, r24	; 0x02
    1da0:	89 2f       	mov	r24, r25
    1da2:	87 70       	andi	r24, 0x07	; 7
    1da4:	98 2f       	mov	r25, r24
    1da6:	99 0f       	add	r25, r25
    1da8:	99 0f       	add	r25, r25
    1daa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dac:	83 7e       	andi	r24, 0xE3	; 227
    1dae:	89 2b       	or	r24, r25
    1db0:	8a 83       	std	Y+2, r24	; 0x02
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	80 62       	ori	r24, 0x20	; 32
    1db6:	8a 83       	std	Y+2, r24	; 0x02
    1db8:	83 2f       	mov	r24, r19
    1dba:	81 70       	andi	r24, 0x01	; 1
    1dbc:	98 2f       	mov	r25, r24
    1dbe:	92 95       	swap	r25
    1dc0:	99 0f       	add	r25, r25
    1dc2:	99 0f       	add	r25, r25
    1dc4:	90 7c       	andi	r25, 0xC0	; 192
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	8f 7b       	andi	r24, 0xBF	; 191
    1dca:	89 2b       	or	r24, r25
    1dcc:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_toggle_logic(&pin_obj);
    1dce:	ce 01       	movw	r24, r28
    1dd0:	02 96       	adiw	r24, 0x02	; 2
    1dd2:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <gpio_pin_toggle_logic>
	}

	return ret;
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	cf 91       	pop	r28
    1de2:	df 91       	pop	r29
    1de4:	08 95       	ret

00001de6 <lcd_4bit_initialize>:




STD_ReturnStatus lcd_4bit_initialize(const chr_lcd_4bit_t *lcd)
{
    1de6:	df 93       	push	r29
    1de8:	cf 93       	push	r28
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	a0 97       	sbiw	r28, 0x20	; 32
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	f8 94       	cli
    1df4:	de bf       	out	0x3e, r29	; 62
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	cd bf       	out	0x3d, r28	; 61
    1dfa:	98 a3       	std	Y+32, r25	; 0x20
    1dfc:	8f 8f       	std	Y+31, r24	; 0x1f
	STD_ReturnStatus ret = E_OK;
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 l_data_pins_counter = ZERO_INIT;
    1e02:	1d 8e       	std	Y+29, r1	; 0x1d
	if(NULL==lcd)
    1e04:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e06:	98 a1       	ldd	r25, Y+32	; 0x20
    1e08:	00 97       	sbiw	r24, 0x00	; 0
    1e0a:	11 f4       	brne	.+4      	; 0x1e10 <lcd_4bit_initialize+0x2a>
	{
		ret = E_NOT_OK;
    1e0c:	1e 8e       	std	Y+30, r1	; 0x1e
    1e0e:	3c c1       	rjmp	.+632    	; 0x2088 <lcd_4bit_initialize+0x2a2>
	}
	else
	{
		ret = gpio_pin_initialize(&(lcd->lcd_rs));
    1e10:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e12:	98 a1       	ldd	r25, Y+32	; 0x20
    1e14:	0e 94 29 0b 	call	0x1652	; 0x1652 <gpio_pin_initialize>
    1e18:	8e 8f       	std	Y+30, r24	; 0x1e
		ret = gpio_pin_initialize(&(lcd->lcd_en));
    1e1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e1c:	98 a1       	ldd	r25, Y+32	; 0x20
    1e1e:	01 96       	adiw	r24, 0x01	; 1
    1e20:	0e 94 29 0b 	call	0x1652	; 0x1652 <gpio_pin_initialize>
    1e24:	8e 8f       	std	Y+30, r24	; 0x1e
		for(l_data_pins_counter=ZERO_INIT;l_data_pins_counter<4;l_data_pins_counter++)
    1e26:	1d 8e       	std	Y+29, r1	; 0x1d
    1e28:	10 c0       	rjmp	.+32     	; 0x1e4a <lcd_4bit_initialize+0x64>
		{
			ret = gpio_pin_initialize(&(lcd->lcd_data[l_data_pins_counter]));
    1e2a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e2c:	98 a1       	ldd	r25, Y+32	; 0x20
    1e2e:	9c 01       	movw	r18, r24
    1e30:	2e 5f       	subi	r18, 0xFE	; 254
    1e32:	3f 4f       	sbci	r19, 0xFF	; 255
    1e34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e36:	88 2f       	mov	r24, r24
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	82 0f       	add	r24, r18
    1e3c:	93 1f       	adc	r25, r19
    1e3e:	0e 94 29 0b 	call	0x1652	; 0x1652 <gpio_pin_initialize>
    1e42:	8e 8f       	std	Y+30, r24	; 0x1e
	}
	else
	{
		ret = gpio_pin_initialize(&(lcd->lcd_rs));
		ret = gpio_pin_initialize(&(lcd->lcd_en));
		for(l_data_pins_counter=ZERO_INIT;l_data_pins_counter<4;l_data_pins_counter++)
    1e44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e46:	8f 5f       	subi	r24, 0xFF	; 255
    1e48:	8d 8f       	std	Y+29, r24	; 0x1d
    1e4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e4c:	84 30       	cpi	r24, 0x04	; 4
    1e4e:	68 f3       	brcs	.-38     	; 0x1e2a <lcd_4bit_initialize+0x44>
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	a0 e2       	ldi	r26, 0x20	; 32
    1e56:	b2 e4       	ldi	r27, 0x42	; 66
    1e58:	89 8f       	std	Y+25, r24	; 0x19
    1e5a:	9a 8f       	std	Y+26, r25	; 0x1a
    1e5c:	ab 8f       	std	Y+27, r26	; 0x1b
    1e5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e60:	69 8d       	ldd	r22, Y+25	; 0x19
    1e62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	4a ef       	ldi	r20, 0xFA	; 250
    1e6e:	54 e4       	ldi	r21, 0x44	; 68
    1e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	8d 8b       	std	Y+21, r24	; 0x15
    1e7a:	9e 8b       	std	Y+22, r25	; 0x16
    1e7c:	af 8b       	std	Y+23, r26	; 0x17
    1e7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e80:	6d 89       	ldd	r22, Y+21	; 0x15
    1e82:	7e 89       	ldd	r23, Y+22	; 0x16
    1e84:	8f 89       	ldd	r24, Y+23	; 0x17
    1e86:	98 8d       	ldd	r25, Y+24	; 0x18
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e8       	ldi	r20, 0x80	; 128
    1e8e:	5f e3       	ldi	r21, 0x3F	; 63
    1e90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e94:	88 23       	and	r24, r24
    1e96:	2c f4       	brge	.+10     	; 0x1ea2 <lcd_4bit_initialize+0xbc>
		__ticks = 1;
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	9c 8b       	std	Y+20, r25	; 0x14
    1e9e:	8b 8b       	std	Y+19, r24	; 0x13
    1ea0:	3f c0       	rjmp	.+126    	; 0x1f20 <lcd_4bit_initialize+0x13a>
	else if (__tmp > 65535)
    1ea2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ea4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ea6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea8:	98 8d       	ldd	r25, Y+24	; 0x18
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	3f ef       	ldi	r19, 0xFF	; 255
    1eae:	4f e7       	ldi	r20, 0x7F	; 127
    1eb0:	57 e4       	ldi	r21, 0x47	; 71
    1eb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eb6:	18 16       	cp	r1, r24
    1eb8:	4c f5       	brge	.+82     	; 0x1f0c <lcd_4bit_initialize+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eba:	69 8d       	ldd	r22, Y+25	; 0x19
    1ebc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ebe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ec0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	40 e2       	ldi	r20, 0x20	; 32
    1ec8:	51 e4       	ldi	r21, 0x41	; 65
    1eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ece:	dc 01       	movw	r26, r24
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	bc 01       	movw	r22, r24
    1ed4:	cd 01       	movw	r24, r26
    1ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	9c 8b       	std	Y+20, r25	; 0x14
    1ee0:	8b 8b       	std	Y+19, r24	; 0x13
    1ee2:	0f c0       	rjmp	.+30     	; 0x1f02 <lcd_4bit_initialize+0x11c>
    1ee4:	88 ec       	ldi	r24, 0xC8	; 200
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	9a 8b       	std	Y+18, r25	; 0x12
    1eea:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1eec:	89 89       	ldd	r24, Y+17	; 0x11
    1eee:	9a 89       	ldd	r25, Y+18	; 0x12
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	f1 f7       	brne	.-4      	; 0x1ef0 <lcd_4bit_initialize+0x10a>
    1ef4:	9a 8b       	std	Y+18, r25	; 0x12
    1ef6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef8:	8b 89       	ldd	r24, Y+19	; 0x13
    1efa:	9c 89       	ldd	r25, Y+20	; 0x14
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	9c 8b       	std	Y+20, r25	; 0x14
    1f00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f02:	8b 89       	ldd	r24, Y+19	; 0x13
    1f04:	9c 89       	ldd	r25, Y+20	; 0x14
    1f06:	00 97       	sbiw	r24, 0x00	; 0
    1f08:	69 f7       	brne	.-38     	; 0x1ee4 <lcd_4bit_initialize+0xfe>
    1f0a:	14 c0       	rjmp	.+40     	; 0x1f34 <lcd_4bit_initialize+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f10:	8f 89       	ldd	r24, Y+23	; 0x17
    1f12:	98 8d       	ldd	r25, Y+24	; 0x18
    1f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	9c 8b       	std	Y+20, r25	; 0x14
    1f1e:	8b 8b       	std	Y+19, r24	; 0x13
    1f20:	8b 89       	ldd	r24, Y+19	; 0x13
    1f22:	9c 89       	ldd	r25, Y+20	; 0x14
    1f24:	98 8b       	std	Y+16, r25	; 0x10
    1f26:	8f 87       	std	Y+15, r24	; 0x0f
    1f28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f2a:	98 89       	ldd	r25, Y+16	; 0x10
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	f1 f7       	brne	.-4      	; 0x1f2c <lcd_4bit_initialize+0x146>
    1f30:	98 8b       	std	Y+16, r25	; 0x10
    1f32:	8f 87       	std	Y+15, r24	; 0x0f
//		_delay_ms(3);
//		ret = lcd_4bit_send_command(lcd,0x00);
//		ret = lcd_4bit_send_command(lcd,0x40);
//		_delay_ms(2);
//		ret = lcd_4bit_send_command(lcd,0x80);
	    lcd_send_4bits(lcd, 0x03);  // Send 0x03 command (Function Set - 8-bit mode)
    1f34:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f36:	98 a1       	ldd	r25, Y+32	; 0x20
    1f38:	63 e0       	ldi	r22, 0x03	; 3
    1f3a:	0e 94 db 16 	call	0x2db6	; 0x2db6 <lcd_send_4bits>
	    lcd_4bit_send_enable(lcd);
    1f3e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f40:	98 a1       	ldd	r25, Y+32	; 0x20
    1f42:	0e 94 28 17 	call	0x2e50	; 0x2e50 <lcd_4bit_send_enable>

	    // Delay for at least 4.1ms or follow the LCD module datasheet recommendations

	    lcd_send_4bits(lcd, 0x03);  // Send 0x03 command (Function Set - 8-bit mode)
    1f46:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f48:	98 a1       	ldd	r25, Y+32	; 0x20
    1f4a:	63 e0       	ldi	r22, 0x03	; 3
    1f4c:	0e 94 db 16 	call	0x2db6	; 0x2db6 <lcd_send_4bits>
	    lcd_4bit_send_enable(lcd);
    1f50:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f52:	98 a1       	ldd	r25, Y+32	; 0x20
    1f54:	0e 94 28 17 	call	0x2e50	; 0x2e50 <lcd_4bit_send_enable>

	    // Delay for at least 100μs or follow the LCD module datasheet recommendations

	    lcd_send_4bits(lcd, 0x03);  // Send 0x03 command (Function Set - 8-bit mode)
    1f58:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f5a:	98 a1       	ldd	r25, Y+32	; 0x20
    1f5c:	63 e0       	ldi	r22, 0x03	; 3
    1f5e:	0e 94 db 16 	call	0x2db6	; 0x2db6 <lcd_send_4bits>
	    lcd_4bit_send_enable(lcd);
    1f62:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f64:	98 a1       	ldd	r25, Y+32	; 0x20
    1f66:	0e 94 28 17 	call	0x2e50	; 0x2e50 <lcd_4bit_send_enable>

	    // Switch to 4-bit mode
	    lcd_send_4bits(lcd, 0x02);  // Send 0x02 command (Function Set - 4-bit mode)
    1f6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f6c:	98 a1       	ldd	r25, Y+32	; 0x20
    1f6e:	62 e0       	ldi	r22, 0x02	; 2
    1f70:	0e 94 db 16 	call	0x2db6	; 0x2db6 <lcd_send_4bits>
	    lcd_4bit_send_enable(lcd);
    1f74:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f76:	98 a1       	ldd	r25, Y+32	; 0x20
    1f78:	0e 94 28 17 	call	0x2e50	; 0x2e50 <lcd_4bit_send_enable>

	    // Configure the LCD module
	    lcd_4bit_send_command(lcd, 0x28);  // 0x28 command (Function Set - 4-bit mode, 2 lines, 5x8 dots)
    1f7c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f7e:	98 a1       	ldd	r25, Y+32	; 0x20
    1f80:	68 e2       	ldi	r22, 0x28	; 40
    1f82:	0e 94 4e 10 	call	0x209c	; 0x209c <lcd_4bit_send_command>
	    lcd_4bit_send_command(lcd, 0x0C);  // 0x0C command (Display On/Off - Display on, Cursor off, Blink off)
    1f86:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f88:	98 a1       	ldd	r25, Y+32	; 0x20
    1f8a:	6c e0       	ldi	r22, 0x0C	; 12
    1f8c:	0e 94 4e 10 	call	0x209c	; 0x209c <lcd_4bit_send_command>
	    lcd_4bit_send_command(lcd, 0x06);  // 0x06 command (Entry Mode Set - Increment cursor, No display shift)
    1f90:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f92:	98 a1       	ldd	r25, Y+32	; 0x20
    1f94:	66 e0       	ldi	r22, 0x06	; 6
    1f96:	0e 94 4e 10 	call	0x209c	; 0x209c <lcd_4bit_send_command>
	    lcd_4bit_send_command(lcd, 0x01);  // 0x01 command (Clear Display)
    1f9a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f9c:	98 a1       	ldd	r25, Y+32	; 0x20
    1f9e:	61 e0       	ldi	r22, 0x01	; 1
    1fa0:	0e 94 4e 10 	call	0x209c	; 0x209c <lcd_4bit_send_command>
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	a0 e4       	ldi	r26, 0x40	; 64
    1faa:	b0 e4       	ldi	r27, 0x40	; 64
    1fac:	8b 87       	std	Y+11, r24	; 0x0b
    1fae:	9c 87       	std	Y+12, r25	; 0x0c
    1fb0:	ad 87       	std	Y+13, r26	; 0x0d
    1fb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	4a ef       	ldi	r20, 0xFA	; 250
    1fc2:	54 e4       	ldi	r21, 0x44	; 68
    1fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	8f 83       	std	Y+7, r24	; 0x07
    1fce:	98 87       	std	Y+8, r25	; 0x08
    1fd0:	a9 87       	std	Y+9, r26	; 0x09
    1fd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd6:	78 85       	ldd	r23, Y+8	; 0x08
    1fd8:	89 85       	ldd	r24, Y+9	; 0x09
    1fda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	40 e8       	ldi	r20, 0x80	; 128
    1fe2:	5f e3       	ldi	r21, 0x3F	; 63
    1fe4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fe8:	88 23       	and	r24, r24
    1fea:	2c f4       	brge	.+10     	; 0x1ff6 <lcd_4bit_initialize+0x210>
		__ticks = 1;
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	9e 83       	std	Y+6, r25	; 0x06
    1ff2:	8d 83       	std	Y+5, r24	; 0x05
    1ff4:	3f c0       	rjmp	.+126    	; 0x2074 <lcd_4bit_initialize+0x28e>
	else if (__tmp > 65535)
    1ff6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff8:	78 85       	ldd	r23, Y+8	; 0x08
    1ffa:	89 85       	ldd	r24, Y+9	; 0x09
    1ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	3f ef       	ldi	r19, 0xFF	; 255
    2002:	4f e7       	ldi	r20, 0x7F	; 127
    2004:	57 e4       	ldi	r21, 0x47	; 71
    2006:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    200a:	18 16       	cp	r1, r24
    200c:	4c f5       	brge	.+82     	; 0x2060 <lcd_4bit_initialize+0x27a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2010:	7c 85       	ldd	r23, Y+12	; 0x0c
    2012:	8d 85       	ldd	r24, Y+13	; 0x0d
    2014:	9e 85       	ldd	r25, Y+14	; 0x0e
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	40 e2       	ldi	r20, 0x20	; 32
    201c:	51 e4       	ldi	r21, 0x41	; 65
    201e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	bc 01       	movw	r22, r24
    2028:	cd 01       	movw	r24, r26
    202a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	9e 83       	std	Y+6, r25	; 0x06
    2034:	8d 83       	std	Y+5, r24	; 0x05
    2036:	0f c0       	rjmp	.+30     	; 0x2056 <lcd_4bit_initialize+0x270>
    2038:	88 ec       	ldi	r24, 0xC8	; 200
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	9c 83       	std	Y+4, r25	; 0x04
    203e:	8b 83       	std	Y+3, r24	; 0x03
    2040:	8b 81       	ldd	r24, Y+3	; 0x03
    2042:	9c 81       	ldd	r25, Y+4	; 0x04
    2044:	01 97       	sbiw	r24, 0x01	; 1
    2046:	f1 f7       	brne	.-4      	; 0x2044 <lcd_4bit_initialize+0x25e>
    2048:	9c 83       	std	Y+4, r25	; 0x04
    204a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    204c:	8d 81       	ldd	r24, Y+5	; 0x05
    204e:	9e 81       	ldd	r25, Y+6	; 0x06
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	9e 83       	std	Y+6, r25	; 0x06
    2054:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2056:	8d 81       	ldd	r24, Y+5	; 0x05
    2058:	9e 81       	ldd	r25, Y+6	; 0x06
    205a:	00 97       	sbiw	r24, 0x00	; 0
    205c:	69 f7       	brne	.-38     	; 0x2038 <lcd_4bit_initialize+0x252>
    205e:	14 c0       	rjmp	.+40     	; 0x2088 <lcd_4bit_initialize+0x2a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2060:	6f 81       	ldd	r22, Y+7	; 0x07
    2062:	78 85       	ldd	r23, Y+8	; 0x08
    2064:	89 85       	ldd	r24, Y+9	; 0x09
    2066:	9a 85       	ldd	r25, Y+10	; 0x0a
    2068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	9e 83       	std	Y+6, r25	; 0x06
    2072:	8d 83       	std	Y+5, r24	; 0x05
    2074:	8d 81       	ldd	r24, Y+5	; 0x05
    2076:	9e 81       	ldd	r25, Y+6	; 0x06
    2078:	9a 83       	std	Y+2, r25	; 0x02
    207a:	89 83       	std	Y+1, r24	; 0x01
    207c:	89 81       	ldd	r24, Y+1	; 0x01
    207e:	9a 81       	ldd	r25, Y+2	; 0x02
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	f1 f7       	brne	.-4      	; 0x2080 <lcd_4bit_initialize+0x29a>
    2084:	9a 83       	std	Y+2, r25	; 0x02
    2086:	89 83       	std	Y+1, r24	; 0x01

	    // Delay for at least 1.5ms or follow the LCD module datasheet recommendations
	    _delay_ms(3);
	    // LCD module is now initialized and ready to use
	}
	return ret;
    2088:	8e 8d       	ldd	r24, Y+30	; 0x1e
}
    208a:	a0 96       	adiw	r28, 0x20	; 32
    208c:	0f b6       	in	r0, 0x3f	; 63
    208e:	f8 94       	cli
    2090:	de bf       	out	0x3e, r29	; 62
    2092:	0f be       	out	0x3f, r0	; 63
    2094:	cd bf       	out	0x3d, r28	; 61
    2096:	cf 91       	pop	r28
    2098:	df 91       	pop	r29
    209a:	08 95       	ret

0000209c <lcd_4bit_send_command>:


STD_ReturnStatus lcd_4bit_send_command(const chr_lcd_4bit_t *lcd,uint8 command)
{
    209c:	df 93       	push	r29
    209e:	cf 93       	push	r28
    20a0:	00 d0       	rcall	.+0      	; 0x20a2 <lcd_4bit_send_command+0x6>
    20a2:	00 d0       	rcall	.+0      	; 0x20a4 <lcd_4bit_send_command+0x8>
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
    20a8:	9b 83       	std	Y+3, r25	; 0x03
    20aa:	8a 83       	std	Y+2, r24	; 0x02
    20ac:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_OK;
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==lcd)
    20b2:	8a 81       	ldd	r24, Y+2	; 0x02
    20b4:	9b 81       	ldd	r25, Y+3	; 0x03
    20b6:	00 97       	sbiw	r24, 0x00	; 0
    20b8:	11 f4       	brne	.+4      	; 0x20be <lcd_4bit_send_command+0x22>
	{
		ret = E_NOT_OK;
    20ba:	19 82       	std	Y+1, r1	; 0x01
    20bc:	20 c0       	rjmp	.+64     	; 0x20fe <lcd_4bit_send_command+0x62>
	}
	else
	{
		ret = gpio_pin_write_logic(&(lcd->lcd_rs),GPIO_LOW);
    20be:	8a 81       	ldd	r24, Y+2	; 0x02
    20c0:	9b 81       	ldd	r25, Y+3	; 0x03
    20c2:	60 e0       	ldi	r22, 0x00	; 0
    20c4:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
    20c8:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_send_4bits(lcd,command>>4);
    20ca:	8c 81       	ldd	r24, Y+4	; 0x04
    20cc:	28 2f       	mov	r18, r24
    20ce:	22 95       	swap	r18
    20d0:	2f 70       	andi	r18, 0x0F	; 15
    20d2:	8a 81       	ldd	r24, Y+2	; 0x02
    20d4:	9b 81       	ldd	r25, Y+3	; 0x03
    20d6:	62 2f       	mov	r22, r18
    20d8:	0e 94 db 16 	call	0x2db6	; 0x2db6 <lcd_send_4bits>
    20dc:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_4bit_send_enable(lcd);
    20de:	8a 81       	ldd	r24, Y+2	; 0x02
    20e0:	9b 81       	ldd	r25, Y+3	; 0x03
    20e2:	0e 94 28 17 	call	0x2e50	; 0x2e50 <lcd_4bit_send_enable>
    20e6:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_send_4bits(lcd,command);
    20e8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ea:	9b 81       	ldd	r25, Y+3	; 0x03
    20ec:	6c 81       	ldd	r22, Y+4	; 0x04
    20ee:	0e 94 db 16 	call	0x2db6	; 0x2db6 <lcd_send_4bits>
    20f2:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_4bit_send_enable(lcd);
    20f4:	8a 81       	ldd	r24, Y+2	; 0x02
    20f6:	9b 81       	ldd	r25, Y+3	; 0x03
    20f8:	0e 94 28 17 	call	0x2e50	; 0x2e50 <lcd_4bit_send_enable>
    20fc:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    20fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2100:	0f 90       	pop	r0
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	08 95       	ret

0000210e <lcd_4bit_send_char_data>:


STD_ReturnStatus lcd_4bit_send_char_data(const chr_lcd_4bit_t *lcd,uint8 data)
{
    210e:	df 93       	push	r29
    2110:	cf 93       	push	r28
    2112:	00 d0       	rcall	.+0      	; 0x2114 <lcd_4bit_send_char_data+0x6>
    2114:	00 d0       	rcall	.+0      	; 0x2116 <lcd_4bit_send_char_data+0x8>
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
    211a:	9b 83       	std	Y+3, r25	; 0x03
    211c:	8a 83       	std	Y+2, r24	; 0x02
    211e:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_OK;
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==lcd)
    2124:	8a 81       	ldd	r24, Y+2	; 0x02
    2126:	9b 81       	ldd	r25, Y+3	; 0x03
    2128:	00 97       	sbiw	r24, 0x00	; 0
    212a:	11 f4       	brne	.+4      	; 0x2130 <lcd_4bit_send_char_data+0x22>
	{
		ret = E_NOT_OK;
    212c:	19 82       	std	Y+1, r1	; 0x01
    212e:	20 c0       	rjmp	.+64     	; 0x2170 <lcd_4bit_send_char_data+0x62>
	}
	else
	{
		ret = gpio_pin_write_logic(&(lcd->lcd_rs),GPIO_HIGH);
    2130:	8a 81       	ldd	r24, Y+2	; 0x02
    2132:	9b 81       	ldd	r25, Y+3	; 0x03
    2134:	61 e0       	ldi	r22, 0x01	; 1
    2136:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
    213a:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_send_4bits(lcd,data>>4);
    213c:	8c 81       	ldd	r24, Y+4	; 0x04
    213e:	28 2f       	mov	r18, r24
    2140:	22 95       	swap	r18
    2142:	2f 70       	andi	r18, 0x0F	; 15
    2144:	8a 81       	ldd	r24, Y+2	; 0x02
    2146:	9b 81       	ldd	r25, Y+3	; 0x03
    2148:	62 2f       	mov	r22, r18
    214a:	0e 94 db 16 	call	0x2db6	; 0x2db6 <lcd_send_4bits>
    214e:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_4bit_send_enable(lcd);
    2150:	8a 81       	ldd	r24, Y+2	; 0x02
    2152:	9b 81       	ldd	r25, Y+3	; 0x03
    2154:	0e 94 28 17 	call	0x2e50	; 0x2e50 <lcd_4bit_send_enable>
    2158:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_send_4bits(lcd,data);
    215a:	8a 81       	ldd	r24, Y+2	; 0x02
    215c:	9b 81       	ldd	r25, Y+3	; 0x03
    215e:	6c 81       	ldd	r22, Y+4	; 0x04
    2160:	0e 94 db 16 	call	0x2db6	; 0x2db6 <lcd_send_4bits>
    2164:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_4bit_send_enable(lcd);
    2166:	8a 81       	ldd	r24, Y+2	; 0x02
    2168:	9b 81       	ldd	r25, Y+3	; 0x03
    216a:	0e 94 28 17 	call	0x2e50	; 0x2e50 <lcd_4bit_send_enable>
    216e:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    2170:	89 81       	ldd	r24, Y+1	; 0x01
}
    2172:	0f 90       	pop	r0
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	cf 91       	pop	r28
    217c:	df 91       	pop	r29
    217e:	08 95       	ret

00002180 <lcd_4bit_send_char_data_pos>:


STD_ReturnStatus lcd_4bit_send_char_data_pos(const chr_lcd_4bit_t *lcd,uint8 row,uint8 column,uint8 data)
{
    2180:	df 93       	push	r29
    2182:	cf 93       	push	r28
    2184:	00 d0       	rcall	.+0      	; 0x2186 <lcd_4bit_send_char_data_pos+0x6>
    2186:	00 d0       	rcall	.+0      	; 0x2188 <lcd_4bit_send_char_data_pos+0x8>
    2188:	00 d0       	rcall	.+0      	; 0x218a <lcd_4bit_send_char_data_pos+0xa>
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
    218e:	9b 83       	std	Y+3, r25	; 0x03
    2190:	8a 83       	std	Y+2, r24	; 0x02
    2192:	6c 83       	std	Y+4, r22	; 0x04
    2194:	4d 83       	std	Y+5, r20	; 0x05
    2196:	2e 83       	std	Y+6, r18	; 0x06
	STD_ReturnStatus ret = E_OK;
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==lcd)
    219c:	8a 81       	ldd	r24, Y+2	; 0x02
    219e:	9b 81       	ldd	r25, Y+3	; 0x03
    21a0:	00 97       	sbiw	r24, 0x00	; 0
    21a2:	11 f4       	brne	.+4      	; 0x21a8 <lcd_4bit_send_char_data_pos+0x28>
	{
		ret = E_NOT_OK;
    21a4:	19 82       	std	Y+1, r1	; 0x01
    21a6:	0b c0       	rjmp	.+22     	; 0x21be <lcd_4bit_send_char_data_pos+0x3e>
	}
	else
	{
		lcd_4bit_set_cursor(lcd,row,column);
    21a8:	8a 81       	ldd	r24, Y+2	; 0x02
    21aa:	9b 81       	ldd	r25, Y+3	; 0x03
    21ac:	6c 81       	ldd	r22, Y+4	; 0x04
    21ae:	4d 81       	ldd	r20, Y+5	; 0x05
    21b0:	0e 94 98 18 	call	0x3130	; 0x3130 <lcd_4bit_set_cursor>
		lcd_4bit_send_char_data(lcd,data);
    21b4:	8a 81       	ldd	r24, Y+2	; 0x02
    21b6:	9b 81       	ldd	r25, Y+3	; 0x03
    21b8:	6e 81       	ldd	r22, Y+6	; 0x06
    21ba:	0e 94 87 10 	call	0x210e	; 0x210e <lcd_4bit_send_char_data>
	}
	return ret;
    21be:	89 81       	ldd	r24, Y+1	; 0x01
}
    21c0:	26 96       	adiw	r28, 0x06	; 6
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	f8 94       	cli
    21c6:	de bf       	out	0x3e, r29	; 62
    21c8:	0f be       	out	0x3f, r0	; 63
    21ca:	cd bf       	out	0x3d, r28	; 61
    21cc:	cf 91       	pop	r28
    21ce:	df 91       	pop	r29
    21d0:	08 95       	ret

000021d2 <lcd_4bit_send_string>:


STD_ReturnStatus lcd_4bit_send_string(const chr_lcd_4bit_t *lcd,uint8* str)
{
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	00 d0       	rcall	.+0      	; 0x21d8 <lcd_4bit_send_string+0x6>
    21d8:	00 d0       	rcall	.+0      	; 0x21da <lcd_4bit_send_string+0x8>
    21da:	0f 92       	push	r0
    21dc:	cd b7       	in	r28, 0x3d	; 61
    21de:	de b7       	in	r29, 0x3e	; 62
    21e0:	9b 83       	std	Y+3, r25	; 0x03
    21e2:	8a 83       	std	Y+2, r24	; 0x02
    21e4:	7d 83       	std	Y+5, r23	; 0x05
    21e6:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_OK;
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	89 83       	std	Y+1, r24	; 0x01
	if((NULL==lcd)||(NULL==str))
    21ec:	8a 81       	ldd	r24, Y+2	; 0x02
    21ee:	9b 81       	ldd	r25, Y+3	; 0x03
    21f0:	00 97       	sbiw	r24, 0x00	; 0
    21f2:	21 f0       	breq	.+8      	; 0x21fc <lcd_4bit_send_string+0x2a>
    21f4:	8c 81       	ldd	r24, Y+4	; 0x04
    21f6:	9d 81       	ldd	r25, Y+5	; 0x05
    21f8:	00 97       	sbiw	r24, 0x00	; 0
    21fa:	81 f4       	brne	.+32     	; 0x221c <lcd_4bit_send_string+0x4a>
	{
		ret = E_NOT_OK;
    21fc:	19 82       	std	Y+1, r1	; 0x01
    21fe:	13 c0       	rjmp	.+38     	; 0x2226 <lcd_4bit_send_string+0x54>
	}
	else
	{
		while(*str)
		{
			ret = lcd_4bit_send_char_data(lcd,*str++);
    2200:	ec 81       	ldd	r30, Y+4	; 0x04
    2202:	fd 81       	ldd	r31, Y+5	; 0x05
    2204:	20 81       	ld	r18, Z
    2206:	8c 81       	ldd	r24, Y+4	; 0x04
    2208:	9d 81       	ldd	r25, Y+5	; 0x05
    220a:	01 96       	adiw	r24, 0x01	; 1
    220c:	9d 83       	std	Y+5, r25	; 0x05
    220e:	8c 83       	std	Y+4, r24	; 0x04
    2210:	8a 81       	ldd	r24, Y+2	; 0x02
    2212:	9b 81       	ldd	r25, Y+3	; 0x03
    2214:	62 2f       	mov	r22, r18
    2216:	0e 94 87 10 	call	0x210e	; 0x210e <lcd_4bit_send_char_data>
    221a:	89 83       	std	Y+1, r24	; 0x01
	{
		ret = E_NOT_OK;
	}
	else
	{
		while(*str)
    221c:	ec 81       	ldd	r30, Y+4	; 0x04
    221e:	fd 81       	ldd	r31, Y+5	; 0x05
    2220:	80 81       	ld	r24, Z
    2222:	88 23       	and	r24, r24
    2224:	69 f7       	brne	.-38     	; 0x2200 <lcd_4bit_send_string+0x2e>
		{
			ret = lcd_4bit_send_char_data(lcd,*str++);
		}
	}
	return ret;
    2226:	89 81       	ldd	r24, Y+1	; 0x01
}
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
    222c:	0f 90       	pop	r0
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	cf 91       	pop	r28
    2234:	df 91       	pop	r29
    2236:	08 95       	ret

00002238 <lcd_4bit_send_string_pos>:


STD_ReturnStatus lcd_4bit_send_string_pos(const chr_lcd_4bit_t *lcd,uint8 row,uint8 column,uint8* str){
    2238:	df 93       	push	r29
    223a:	cf 93       	push	r28
    223c:	cd b7       	in	r28, 0x3d	; 61
    223e:	de b7       	in	r29, 0x3e	; 62
    2240:	27 97       	sbiw	r28, 0x07	; 7
    2242:	0f b6       	in	r0, 0x3f	; 63
    2244:	f8 94       	cli
    2246:	de bf       	out	0x3e, r29	; 62
    2248:	0f be       	out	0x3f, r0	; 63
    224a:	cd bf       	out	0x3d, r28	; 61
    224c:	9b 83       	std	Y+3, r25	; 0x03
    224e:	8a 83       	std	Y+2, r24	; 0x02
    2250:	6c 83       	std	Y+4, r22	; 0x04
    2252:	4d 83       	std	Y+5, r20	; 0x05
    2254:	3f 83       	std	Y+7, r19	; 0x07
    2256:	2e 83       	std	Y+6, r18	; 0x06

	STD_ReturnStatus ret = E_OK;
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	89 83       	std	Y+1, r24	; 0x01
	if((NULL==lcd)||(NULL==str))
    225c:	8a 81       	ldd	r24, Y+2	; 0x02
    225e:	9b 81       	ldd	r25, Y+3	; 0x03
    2260:	00 97       	sbiw	r24, 0x00	; 0
    2262:	21 f0       	breq	.+8      	; 0x226c <lcd_4bit_send_string_pos+0x34>
    2264:	8e 81       	ldd	r24, Y+6	; 0x06
    2266:	9f 81       	ldd	r25, Y+7	; 0x07
    2268:	00 97       	sbiw	r24, 0x00	; 0
    226a:	11 f4       	brne	.+4      	; 0x2270 <lcd_4bit_send_string_pos+0x38>
	{
		ret = E_NOT_OK;
    226c:	19 82       	std	Y+1, r1	; 0x01
    226e:	1b c0       	rjmp	.+54     	; 0x22a6 <lcd_4bit_send_string_pos+0x6e>
	}
	else
	{
		ret = lcd_4bit_set_cursor(lcd,row,column);
    2270:	8a 81       	ldd	r24, Y+2	; 0x02
    2272:	9b 81       	ldd	r25, Y+3	; 0x03
    2274:	6c 81       	ldd	r22, Y+4	; 0x04
    2276:	4d 81       	ldd	r20, Y+5	; 0x05
    2278:	0e 94 98 18 	call	0x3130	; 0x3130 <lcd_4bit_set_cursor>
    227c:	89 83       	std	Y+1, r24	; 0x01
    227e:	0e c0       	rjmp	.+28     	; 0x229c <lcd_4bit_send_string_pos+0x64>
		while(*str)
		{
			ret = lcd_4bit_send_char_data(lcd,*str++);
    2280:	ee 81       	ldd	r30, Y+6	; 0x06
    2282:	ff 81       	ldd	r31, Y+7	; 0x07
    2284:	20 81       	ld	r18, Z
    2286:	8e 81       	ldd	r24, Y+6	; 0x06
    2288:	9f 81       	ldd	r25, Y+7	; 0x07
    228a:	01 96       	adiw	r24, 0x01	; 1
    228c:	9f 83       	std	Y+7, r25	; 0x07
    228e:	8e 83       	std	Y+6, r24	; 0x06
    2290:	8a 81       	ldd	r24, Y+2	; 0x02
    2292:	9b 81       	ldd	r25, Y+3	; 0x03
    2294:	62 2f       	mov	r22, r18
    2296:	0e 94 87 10 	call	0x210e	; 0x210e <lcd_4bit_send_char_data>
    229a:	89 83       	std	Y+1, r24	; 0x01
		ret = E_NOT_OK;
	}
	else
	{
		ret = lcd_4bit_set_cursor(lcd,row,column);
		while(*str)
    229c:	ee 81       	ldd	r30, Y+6	; 0x06
    229e:	ff 81       	ldd	r31, Y+7	; 0x07
    22a0:	80 81       	ld	r24, Z
    22a2:	88 23       	and	r24, r24
    22a4:	69 f7       	brne	.-38     	; 0x2280 <lcd_4bit_send_string_pos+0x48>
		{
			ret = lcd_4bit_send_char_data(lcd,*str++);
		}
	}
	return ret;
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    22a8:	27 96       	adiw	r28, 0x07	; 7
    22aa:	0f b6       	in	r0, 0x3f	; 63
    22ac:	f8 94       	cli
    22ae:	de bf       	out	0x3e, r29	; 62
    22b0:	0f be       	out	0x3f, r0	; 63
    22b2:	cd bf       	out	0x3d, r28	; 61
    22b4:	cf 91       	pop	r28
    22b6:	df 91       	pop	r29
    22b8:	08 95       	ret

000022ba <lcd_4bit_send_custom_char>:


STD_ReturnStatus lcd_4bit_send_custom_char(const chr_lcd_4bit_t *lcd,uint8 row,uint8 column,uint8 _char[],uint8 mem_pos)
{
    22ba:	0f 93       	push	r16
    22bc:	df 93       	push	r29
    22be:	cf 93       	push	r28
    22c0:	cd b7       	in	r28, 0x3d	; 61
    22c2:	de b7       	in	r29, 0x3e	; 62
    22c4:	29 97       	sbiw	r28, 0x09	; 9
    22c6:	0f b6       	in	r0, 0x3f	; 63
    22c8:	f8 94       	cli
    22ca:	de bf       	out	0x3e, r29	; 62
    22cc:	0f be       	out	0x3f, r0	; 63
    22ce:	cd bf       	out	0x3d, r28	; 61
    22d0:	9c 83       	std	Y+4, r25	; 0x04
    22d2:	8b 83       	std	Y+3, r24	; 0x03
    22d4:	6d 83       	std	Y+5, r22	; 0x05
    22d6:	4e 83       	std	Y+6, r20	; 0x06
    22d8:	38 87       	std	Y+8, r19	; 0x08
    22da:	2f 83       	std	Y+7, r18	; 0x07
    22dc:	09 87       	std	Y+9, r16	; 0x09
	STD_ReturnStatus ret = E_OK;
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 lcd_counter = ZERO_INIT;
    22e2:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==lcd)
    22e4:	8b 81       	ldd	r24, Y+3	; 0x03
    22e6:	9c 81       	ldd	r25, Y+4	; 0x04
    22e8:	00 97       	sbiw	r24, 0x00	; 0
    22ea:	11 f4       	brne	.+4      	; 0x22f0 <lcd_4bit_send_custom_char+0x36>
	{
		ret = E_NOT_OK;
    22ec:	1a 82       	std	Y+2, r1	; 0x02
    22ee:	30 c0       	rjmp	.+96     	; 0x2350 <lcd_4bit_send_custom_char+0x96>
	}
	else
	{
		ret =  lcd_4bit_send_command(lcd,_LCD_CGRAM_START+(mem_pos*8));//mem_pos is the position addres oin cgram(1~8)
    22f0:	89 85       	ldd	r24, Y+9	; 0x09
    22f2:	88 2f       	mov	r24, r24
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	08 96       	adiw	r24, 0x08	; 8
    22f8:	88 0f       	add	r24, r24
    22fa:	99 1f       	adc	r25, r25
    22fc:	88 0f       	add	r24, r24
    22fe:	99 1f       	adc	r25, r25
    2300:	88 0f       	add	r24, r24
    2302:	99 1f       	adc	r25, r25
    2304:	28 2f       	mov	r18, r24
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	9c 81       	ldd	r25, Y+4	; 0x04
    230a:	62 2f       	mov	r22, r18
    230c:	0e 94 4e 10 	call	0x209c	; 0x209c <lcd_4bit_send_command>
    2310:	8a 83       	std	Y+2, r24	; 0x02
		for(lcd_counter=ZERO_INIT;lcd_counter<=7;++lcd_counter)
    2312:	19 82       	std	Y+1, r1	; 0x01
    2314:	12 c0       	rjmp	.+36     	; 0x233a <lcd_4bit_send_custom_char+0x80>
		{
			ret = lcd_4bit_send_char_data(lcd,_char[lcd_counter]);
    2316:	89 81       	ldd	r24, Y+1	; 0x01
    2318:	28 2f       	mov	r18, r24
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	8f 81       	ldd	r24, Y+7	; 0x07
    231e:	98 85       	ldd	r25, Y+8	; 0x08
    2320:	fc 01       	movw	r30, r24
    2322:	e2 0f       	add	r30, r18
    2324:	f3 1f       	adc	r31, r19
    2326:	20 81       	ld	r18, Z
    2328:	8b 81       	ldd	r24, Y+3	; 0x03
    232a:	9c 81       	ldd	r25, Y+4	; 0x04
    232c:	62 2f       	mov	r22, r18
    232e:	0e 94 87 10 	call	0x210e	; 0x210e <lcd_4bit_send_char_data>
    2332:	8a 83       	std	Y+2, r24	; 0x02
		ret = E_NOT_OK;
	}
	else
	{
		ret =  lcd_4bit_send_command(lcd,_LCD_CGRAM_START+(mem_pos*8));//mem_pos is the position addres oin cgram(1~8)
		for(lcd_counter=ZERO_INIT;lcd_counter<=7;++lcd_counter)
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	8f 5f       	subi	r24, 0xFF	; 255
    2338:	89 83       	std	Y+1, r24	; 0x01
    233a:	89 81       	ldd	r24, Y+1	; 0x01
    233c:	88 30       	cpi	r24, 0x08	; 8
    233e:	58 f3       	brcs	.-42     	; 0x2316 <lcd_4bit_send_custom_char+0x5c>
		{
			ret = lcd_4bit_send_char_data(lcd,_char[lcd_counter]);
		}
		ret = lcd_4bit_send_char_data_pos(lcd,row,column,mem_pos);
    2340:	8b 81       	ldd	r24, Y+3	; 0x03
    2342:	9c 81       	ldd	r25, Y+4	; 0x04
    2344:	6d 81       	ldd	r22, Y+5	; 0x05
    2346:	4e 81       	ldd	r20, Y+6	; 0x06
    2348:	29 85       	ldd	r18, Y+9	; 0x09
    234a:	0e 94 c0 10 	call	0x2180	; 0x2180 <lcd_4bit_send_char_data_pos>
    234e:	8a 83       	std	Y+2, r24	; 0x02
	}
	return ret;
    2350:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2352:	29 96       	adiw	r28, 0x09	; 9
    2354:	0f b6       	in	r0, 0x3f	; 63
    2356:	f8 94       	cli
    2358:	de bf       	out	0x3e, r29	; 62
    235a:	0f be       	out	0x3f, r0	; 63
    235c:	cd bf       	out	0x3d, r28	; 61
    235e:	cf 91       	pop	r28
    2360:	df 91       	pop	r29
    2362:	0f 91       	pop	r16
    2364:	08 95       	ret

00002366 <lcd_4bit_send_int>:

STD_ReturnStatus lcd_4bit_send_int(const chr_lcd_4bit_t *lcd,uint8 Num)
{
    2366:	df 93       	push	r29
    2368:	cf 93       	push	r28
    236a:	00 d0       	rcall	.+0      	; 0x236c <lcd_4bit_send_int+0x6>
    236c:	00 d0       	rcall	.+0      	; 0x236e <lcd_4bit_send_int+0x8>
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
    2372:	9a 83       	std	Y+2, r25	; 0x02
    2374:	89 83       	std	Y+1, r24	; 0x01
    2376:	6b 83       	std	Y+3, r22	; 0x03
	if(Num!=0)
    2378:	8b 81       	ldd	r24, Y+3	; 0x03
    237a:	88 23       	and	r24, r24
    237c:	c1 f0       	breq	.+48     	; 0x23ae <lcd_4bit_send_int+0x48>
	{
		lcd_4bit_send_int(lcd,Num/10);
    237e:	8b 81       	ldd	r24, Y+3	; 0x03
    2380:	9a e0       	ldi	r25, 0x0A	; 10
    2382:	69 2f       	mov	r22, r25
    2384:	0e 94 b7 1c 	call	0x396e	; 0x396e <__udivmodqi4>
    2388:	28 2f       	mov	r18, r24
    238a:	89 81       	ldd	r24, Y+1	; 0x01
    238c:	9a 81       	ldd	r25, Y+2	; 0x02
    238e:	62 2f       	mov	r22, r18
    2390:	0e 94 b3 11 	call	0x2366	; 0x2366 <lcd_4bit_send_int>
		lcd_4bit_send_char_data(lcd,(Num%10)+48);
    2394:	8b 81       	ldd	r24, Y+3	; 0x03
    2396:	9a e0       	ldi	r25, 0x0A	; 10
    2398:	69 2f       	mov	r22, r25
    239a:	0e 94 b7 1c 	call	0x396e	; 0x396e <__udivmodqi4>
    239e:	89 2f       	mov	r24, r25
    23a0:	28 2f       	mov	r18, r24
    23a2:	20 5d       	subi	r18, 0xD0	; 208
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	9a 81       	ldd	r25, Y+2	; 0x02
    23a8:	62 2f       	mov	r22, r18
    23aa:	0e 94 87 10 	call	0x210e	; 0x210e <lcd_4bit_send_char_data>
	}
}
    23ae:	0f 90       	pop	r0
    23b0:	0f 90       	pop	r0
    23b2:	0f 90       	pop	r0
    23b4:	0f 90       	pop	r0
    23b6:	cf 91       	pop	r28
    23b8:	df 91       	pop	r29
    23ba:	08 95       	ret

000023bc <lcd_4bit_send_int_pos>:

STD_ReturnStatus lcd_4bit_send_int_pos(const chr_lcd_4bit_t *lcd,uint8 row,uint8 column,uint32 Num)
{
    23bc:	df 93       	push	r29
    23be:	cf 93       	push	r28
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
    23c4:	27 97       	sbiw	r28, 0x07	; 7
    23c6:	0f b6       	in	r0, 0x3f	; 63
    23c8:	f8 94       	cli
    23ca:	de bf       	out	0x3e, r29	; 62
    23cc:	0f be       	out	0x3f, r0	; 63
    23ce:	cd bf       	out	0x3d, r28	; 61
    23d0:	9a 83       	std	Y+2, r25	; 0x02
    23d2:	89 83       	std	Y+1, r24	; 0x01
    23d4:	6b 83       	std	Y+3, r22	; 0x03
    23d6:	4c 83       	std	Y+4, r20	; 0x04
    23d8:	3e 83       	std	Y+6, r19	; 0x06
    23da:	2d 83       	std	Y+5, r18	; 0x05
	lcd_4bit_set_cursor(lcd,row,column);
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
    23de:	9a 81       	ldd	r25, Y+2	; 0x02
    23e0:	6b 81       	ldd	r22, Y+3	; 0x03
    23e2:	4c 81       	ldd	r20, Y+4	; 0x04
    23e4:	0e 94 98 18 	call	0x3130	; 0x3130 <lcd_4bit_set_cursor>
	if(Num!=0)
    23e8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ea:	9e 81       	ldd	r25, Y+6	; 0x06
    23ec:	00 97       	sbiw	r24, 0x00	; 0
    23ee:	e1 f0       	breq	.+56     	; 0x2428 <lcd_4bit_send_int_pos+0x6c>
	{
		lcd_4bit_send_int(lcd,Num/10);
    23f0:	8d 81       	ldd	r24, Y+5	; 0x05
    23f2:	9e 81       	ldd	r25, Y+6	; 0x06
    23f4:	2a e0       	ldi	r18, 0x0A	; 10
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	b9 01       	movw	r22, r18
    23fa:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__udivmodhi4>
    23fe:	cb 01       	movw	r24, r22
    2400:	28 2f       	mov	r18, r24
    2402:	89 81       	ldd	r24, Y+1	; 0x01
    2404:	9a 81       	ldd	r25, Y+2	; 0x02
    2406:	62 2f       	mov	r22, r18
    2408:	0e 94 b3 11 	call	0x2366	; 0x2366 <lcd_4bit_send_int>
		lcd_4bit_send_char_data(lcd,(Num%10)+48);
    240c:	8d 81       	ldd	r24, Y+5	; 0x05
    240e:	9e 81       	ldd	r25, Y+6	; 0x06
    2410:	2a e0       	ldi	r18, 0x0A	; 10
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	b9 01       	movw	r22, r18
    2416:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__udivmodhi4>
    241a:	28 2f       	mov	r18, r24
    241c:	20 5d       	subi	r18, 0xD0	; 208
    241e:	89 81       	ldd	r24, Y+1	; 0x01
    2420:	9a 81       	ldd	r25, Y+2	; 0x02
    2422:	62 2f       	mov	r22, r18
    2424:	0e 94 87 10 	call	0x210e	; 0x210e <lcd_4bit_send_char_data>
	}
}
    2428:	27 96       	adiw	r28, 0x07	; 7
    242a:	0f b6       	in	r0, 0x3f	; 63
    242c:	f8 94       	cli
    242e:	de bf       	out	0x3e, r29	; 62
    2430:	0f be       	out	0x3f, r0	; 63
    2432:	cd bf       	out	0x3d, r28	; 61
    2434:	cf 91       	pop	r28
    2436:	df 91       	pop	r29
    2438:	08 95       	ret

0000243a <lcd_8bit_initialize>:
STD_ReturnStatus lcd_8bit_initialize(const chr_lcd_8bit_t *lcd)
{
    243a:	df 93       	push	r29
    243c:	cf 93       	push	r28
    243e:	cd b7       	in	r28, 0x3d	; 61
    2440:	de b7       	in	r29, 0x3e	; 62
    2442:	ec 97       	sbiw	r28, 0x3c	; 60
    2444:	0f b6       	in	r0, 0x3f	; 63
    2446:	f8 94       	cli
    2448:	de bf       	out	0x3e, r29	; 62
    244a:	0f be       	out	0x3f, r0	; 63
    244c:	cd bf       	out	0x3d, r28	; 61
    244e:	9c af       	std	Y+60, r25	; 0x3c
    2450:	8b af       	std	Y+59, r24	; 0x3b
	STD_ReturnStatus ret = E_OK;
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	8a af       	std	Y+58, r24	; 0x3a
	uint8 l_data_pins_counter = ZERO_INIT;
    2456:	19 ae       	std	Y+57, r1	; 0x39
	if(NULL==lcd)
    2458:	8b ad       	ldd	r24, Y+59	; 0x3b
    245a:	9c ad       	ldd	r25, Y+60	; 0x3c
    245c:	00 97       	sbiw	r24, 0x00	; 0
    245e:	11 f4       	brne	.+4      	; 0x2464 <lcd_8bit_initialize+0x2a>
	{
		ret = E_NOT_OK;
    2460:	1a ae       	std	Y+58, r1	; 0x3a
    2462:	ff c1       	rjmp	.+1022   	; 0x2862 <lcd_8bit_initialize+0x428>
	}
	else
	{
		ret = gpio_pin_initialize(&(lcd->lcd_rs));
    2464:	8b ad       	ldd	r24, Y+59	; 0x3b
    2466:	9c ad       	ldd	r25, Y+60	; 0x3c
    2468:	0e 94 29 0b 	call	0x1652	; 0x1652 <gpio_pin_initialize>
    246c:	8a af       	std	Y+58, r24	; 0x3a
		ret = gpio_pin_initialize(&(lcd->lcd_en));
    246e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2470:	9c ad       	ldd	r25, Y+60	; 0x3c
    2472:	01 96       	adiw	r24, 0x01	; 1
    2474:	0e 94 29 0b 	call	0x1652	; 0x1652 <gpio_pin_initialize>
    2478:	8a af       	std	Y+58, r24	; 0x3a
		for(l_data_pins_counter=0;l_data_pins_counter<8;l_data_pins_counter++)
    247a:	19 ae       	std	Y+57, r1	; 0x39
    247c:	0f c0       	rjmp	.+30     	; 0x249c <lcd_8bit_initialize+0x62>
		{
			gpio_pin_initialize(&(lcd->lcd_data[l_data_pins_counter]));
    247e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2480:	9c ad       	ldd	r25, Y+60	; 0x3c
    2482:	9c 01       	movw	r18, r24
    2484:	2e 5f       	subi	r18, 0xFE	; 254
    2486:	3f 4f       	sbci	r19, 0xFF	; 255
    2488:	89 ad       	ldd	r24, Y+57	; 0x39
    248a:	88 2f       	mov	r24, r24
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	82 0f       	add	r24, r18
    2490:	93 1f       	adc	r25, r19
    2492:	0e 94 29 0b 	call	0x1652	; 0x1652 <gpio_pin_initialize>
	}
	else
	{
		ret = gpio_pin_initialize(&(lcd->lcd_rs));
		ret = gpio_pin_initialize(&(lcd->lcd_en));
		for(l_data_pins_counter=0;l_data_pins_counter<8;l_data_pins_counter++)
    2496:	89 ad       	ldd	r24, Y+57	; 0x39
    2498:	8f 5f       	subi	r24, 0xFF	; 255
    249a:	89 af       	std	Y+57, r24	; 0x39
    249c:	89 ad       	ldd	r24, Y+57	; 0x39
    249e:	88 30       	cpi	r24, 0x08	; 8
    24a0:	70 f3       	brcs	.-36     	; 0x247e <lcd_8bit_initialize+0x44>
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	a0 e2       	ldi	r26, 0x20	; 32
    24a8:	b2 e4       	ldi	r27, 0x42	; 66
    24aa:	8d ab       	std	Y+53, r24	; 0x35
    24ac:	9e ab       	std	Y+54, r25	; 0x36
    24ae:	af ab       	std	Y+55, r26	; 0x37
    24b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b2:	6d a9       	ldd	r22, Y+53	; 0x35
    24b4:	7e a9       	ldd	r23, Y+54	; 0x36
    24b6:	8f a9       	ldd	r24, Y+55	; 0x37
    24b8:	98 ad       	ldd	r25, Y+56	; 0x38
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	4a ef       	ldi	r20, 0xFA	; 250
    24c0:	54 e4       	ldi	r21, 0x44	; 68
    24c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	89 ab       	std	Y+49, r24	; 0x31
    24cc:	9a ab       	std	Y+50, r25	; 0x32
    24ce:	ab ab       	std	Y+51, r26	; 0x33
    24d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24d2:	69 a9       	ldd	r22, Y+49	; 0x31
    24d4:	7a a9       	ldd	r23, Y+50	; 0x32
    24d6:	8b a9       	ldd	r24, Y+51	; 0x33
    24d8:	9c a9       	ldd	r25, Y+52	; 0x34
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	40 e8       	ldi	r20, 0x80	; 128
    24e0:	5f e3       	ldi	r21, 0x3F	; 63
    24e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24e6:	88 23       	and	r24, r24
    24e8:	2c f4       	brge	.+10     	; 0x24f4 <lcd_8bit_initialize+0xba>
		__ticks = 1;
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	98 ab       	std	Y+48, r25	; 0x30
    24f0:	8f a7       	std	Y+47, r24	; 0x2f
    24f2:	3f c0       	rjmp	.+126    	; 0x2572 <lcd_8bit_initialize+0x138>
	else if (__tmp > 65535)
    24f4:	69 a9       	ldd	r22, Y+49	; 0x31
    24f6:	7a a9       	ldd	r23, Y+50	; 0x32
    24f8:	8b a9       	ldd	r24, Y+51	; 0x33
    24fa:	9c a9       	ldd	r25, Y+52	; 0x34
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	3f ef       	ldi	r19, 0xFF	; 255
    2500:	4f e7       	ldi	r20, 0x7F	; 127
    2502:	57 e4       	ldi	r21, 0x47	; 71
    2504:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2508:	18 16       	cp	r1, r24
    250a:	4c f5       	brge	.+82     	; 0x255e <lcd_8bit_initialize+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    250c:	6d a9       	ldd	r22, Y+53	; 0x35
    250e:	7e a9       	ldd	r23, Y+54	; 0x36
    2510:	8f a9       	ldd	r24, Y+55	; 0x37
    2512:	98 ad       	ldd	r25, Y+56	; 0x38
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	40 e2       	ldi	r20, 0x20	; 32
    251a:	51 e4       	ldi	r21, 0x41	; 65
    251c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	bc 01       	movw	r22, r24
    2526:	cd 01       	movw	r24, r26
    2528:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	98 ab       	std	Y+48, r25	; 0x30
    2532:	8f a7       	std	Y+47, r24	; 0x2f
    2534:	0f c0       	rjmp	.+30     	; 0x2554 <lcd_8bit_initialize+0x11a>
    2536:	88 ec       	ldi	r24, 0xC8	; 200
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	9e a7       	std	Y+46, r25	; 0x2e
    253c:	8d a7       	std	Y+45, r24	; 0x2d
    253e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2540:	9e a5       	ldd	r25, Y+46	; 0x2e
    2542:	01 97       	sbiw	r24, 0x01	; 1
    2544:	f1 f7       	brne	.-4      	; 0x2542 <lcd_8bit_initialize+0x108>
    2546:	9e a7       	std	Y+46, r25	; 0x2e
    2548:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254a:	8f a5       	ldd	r24, Y+47	; 0x2f
    254c:	98 a9       	ldd	r25, Y+48	; 0x30
    254e:	01 97       	sbiw	r24, 0x01	; 1
    2550:	98 ab       	std	Y+48, r25	; 0x30
    2552:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2554:	8f a5       	ldd	r24, Y+47	; 0x2f
    2556:	98 a9       	ldd	r25, Y+48	; 0x30
    2558:	00 97       	sbiw	r24, 0x00	; 0
    255a:	69 f7       	brne	.-38     	; 0x2536 <lcd_8bit_initialize+0xfc>
    255c:	14 c0       	rjmp	.+40     	; 0x2586 <lcd_8bit_initialize+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    255e:	69 a9       	ldd	r22, Y+49	; 0x31
    2560:	7a a9       	ldd	r23, Y+50	; 0x32
    2562:	8b a9       	ldd	r24, Y+51	; 0x33
    2564:	9c a9       	ldd	r25, Y+52	; 0x34
    2566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	98 ab       	std	Y+48, r25	; 0x30
    2570:	8f a7       	std	Y+47, r24	; 0x2f
    2572:	8f a5       	ldd	r24, Y+47	; 0x2f
    2574:	98 a9       	ldd	r25, Y+48	; 0x30
    2576:	9c a7       	std	Y+44, r25	; 0x2c
    2578:	8b a7       	std	Y+43, r24	; 0x2b
    257a:	8b a5       	ldd	r24, Y+43	; 0x2b
    257c:	9c a5       	ldd	r25, Y+44	; 0x2c
    257e:	01 97       	sbiw	r24, 0x01	; 1
    2580:	f1 f7       	brne	.-4      	; 0x257e <lcd_8bit_initialize+0x144>
    2582:	9c a7       	std	Y+44, r25	; 0x2c
    2584:	8b a7       	std	Y+43, r24	; 0x2b
		{
			gpio_pin_initialize(&(lcd->lcd_data[l_data_pins_counter]));
		}
		_delay_ms(40);
		ret = lcd_8bit_send_command(lcd,0x38);
    2586:	8b ad       	ldd	r24, Y+59	; 0x3b
    2588:	9c ad       	ldd	r25, Y+60	; 0x3c
    258a:	68 e3       	ldi	r22, 0x38	; 56
    258c:	0e 94 3b 14 	call	0x2876	; 0x2876 <lcd_8bit_send_command>
    2590:	8a af       	std	Y+58, r24	; 0x3a
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	a0 e8       	ldi	r26, 0x80	; 128
    2598:	bf e3       	ldi	r27, 0x3F	; 63
    259a:	8f a3       	std	Y+39, r24	; 0x27
    259c:	98 a7       	std	Y+40, r25	; 0x28
    259e:	a9 a7       	std	Y+41, r26	; 0x29
    25a0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a2:	6f a1       	ldd	r22, Y+39	; 0x27
    25a4:	78 a5       	ldd	r23, Y+40	; 0x28
    25a6:	89 a5       	ldd	r24, Y+41	; 0x29
    25a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	4a ef       	ldi	r20, 0xFA	; 250
    25b0:	54 e4       	ldi	r21, 0x44	; 68
    25b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	8b a3       	std	Y+35, r24	; 0x23
    25bc:	9c a3       	std	Y+36, r25	; 0x24
    25be:	ad a3       	std	Y+37, r26	; 0x25
    25c0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25c2:	6b a1       	ldd	r22, Y+35	; 0x23
    25c4:	7c a1       	ldd	r23, Y+36	; 0x24
    25c6:	8d a1       	ldd	r24, Y+37	; 0x25
    25c8:	9e a1       	ldd	r25, Y+38	; 0x26
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e8       	ldi	r20, 0x80	; 128
    25d0:	5f e3       	ldi	r21, 0x3F	; 63
    25d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25d6:	88 23       	and	r24, r24
    25d8:	2c f4       	brge	.+10     	; 0x25e4 <lcd_8bit_initialize+0x1aa>
		__ticks = 1;
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	9a a3       	std	Y+34, r25	; 0x22
    25e0:	89 a3       	std	Y+33, r24	; 0x21
    25e2:	3f c0       	rjmp	.+126    	; 0x2662 <lcd_8bit_initialize+0x228>
	else if (__tmp > 65535)
    25e4:	6b a1       	ldd	r22, Y+35	; 0x23
    25e6:	7c a1       	ldd	r23, Y+36	; 0x24
    25e8:	8d a1       	ldd	r24, Y+37	; 0x25
    25ea:	9e a1       	ldd	r25, Y+38	; 0x26
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	3f ef       	ldi	r19, 0xFF	; 255
    25f0:	4f e7       	ldi	r20, 0x7F	; 127
    25f2:	57 e4       	ldi	r21, 0x47	; 71
    25f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25f8:	18 16       	cp	r1, r24
    25fa:	4c f5       	brge	.+82     	; 0x264e <lcd_8bit_initialize+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25fc:	6f a1       	ldd	r22, Y+39	; 0x27
    25fe:	78 a5       	ldd	r23, Y+40	; 0x28
    2600:	89 a5       	ldd	r24, Y+41	; 0x29
    2602:	9a a5       	ldd	r25, Y+42	; 0x2a
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	40 e2       	ldi	r20, 0x20	; 32
    260a:	51 e4       	ldi	r21, 0x41	; 65
    260c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	bc 01       	movw	r22, r24
    2616:	cd 01       	movw	r24, r26
    2618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	9a a3       	std	Y+34, r25	; 0x22
    2622:	89 a3       	std	Y+33, r24	; 0x21
    2624:	0f c0       	rjmp	.+30     	; 0x2644 <lcd_8bit_initialize+0x20a>
    2626:	88 ec       	ldi	r24, 0xC8	; 200
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	98 a3       	std	Y+32, r25	; 0x20
    262c:	8f 8f       	std	Y+31, r24	; 0x1f
    262e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2630:	98 a1       	ldd	r25, Y+32	; 0x20
    2632:	01 97       	sbiw	r24, 0x01	; 1
    2634:	f1 f7       	brne	.-4      	; 0x2632 <lcd_8bit_initialize+0x1f8>
    2636:	98 a3       	std	Y+32, r25	; 0x20
    2638:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    263a:	89 a1       	ldd	r24, Y+33	; 0x21
    263c:	9a a1       	ldd	r25, Y+34	; 0x22
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	9a a3       	std	Y+34, r25	; 0x22
    2642:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2644:	89 a1       	ldd	r24, Y+33	; 0x21
    2646:	9a a1       	ldd	r25, Y+34	; 0x22
    2648:	00 97       	sbiw	r24, 0x00	; 0
    264a:	69 f7       	brne	.-38     	; 0x2626 <lcd_8bit_initialize+0x1ec>
    264c:	14 c0       	rjmp	.+40     	; 0x2676 <lcd_8bit_initialize+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    264e:	6b a1       	ldd	r22, Y+35	; 0x23
    2650:	7c a1       	ldd	r23, Y+36	; 0x24
    2652:	8d a1       	ldd	r24, Y+37	; 0x25
    2654:	9e a1       	ldd	r25, Y+38	; 0x26
    2656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	9a a3       	std	Y+34, r25	; 0x22
    2660:	89 a3       	std	Y+33, r24	; 0x21
    2662:	89 a1       	ldd	r24, Y+33	; 0x21
    2664:	9a a1       	ldd	r25, Y+34	; 0x22
    2666:	9e 8f       	std	Y+30, r25	; 0x1e
    2668:	8d 8f       	std	Y+29, r24	; 0x1d
    266a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    266c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    266e:	01 97       	sbiw	r24, 0x01	; 1
    2670:	f1 f7       	brne	.-4      	; 0x266e <lcd_8bit_initialize+0x234>
    2672:	9e 8f       	std	Y+30, r25	; 0x1e
    2674:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		ret = lcd_8bit_send_command(lcd,0x0C);
    2676:	8b ad       	ldd	r24, Y+59	; 0x3b
    2678:	9c ad       	ldd	r25, Y+60	; 0x3c
    267a:	6c e0       	ldi	r22, 0x0C	; 12
    267c:	0e 94 3b 14 	call	0x2876	; 0x2876 <lcd_8bit_send_command>
    2680:	8a af       	std	Y+58, r24	; 0x3a
    2682:	80 e0       	ldi	r24, 0x00	; 0
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	a0 e0       	ldi	r26, 0x00	; 0
    2688:	b0 e4       	ldi	r27, 0x40	; 64
    268a:	89 8f       	std	Y+25, r24	; 0x19
    268c:	9a 8f       	std	Y+26, r25	; 0x1a
    268e:	ab 8f       	std	Y+27, r26	; 0x1b
    2690:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2692:	69 8d       	ldd	r22, Y+25	; 0x19
    2694:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2696:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2698:	9c 8d       	ldd	r25, Y+28	; 0x1c
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	4a ef       	ldi	r20, 0xFA	; 250
    26a0:	54 e4       	ldi	r21, 0x44	; 68
    26a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	8d 8b       	std	Y+21, r24	; 0x15
    26ac:	9e 8b       	std	Y+22, r25	; 0x16
    26ae:	af 8b       	std	Y+23, r26	; 0x17
    26b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26b2:	6d 89       	ldd	r22, Y+21	; 0x15
    26b4:	7e 89       	ldd	r23, Y+22	; 0x16
    26b6:	8f 89       	ldd	r24, Y+23	; 0x17
    26b8:	98 8d       	ldd	r25, Y+24	; 0x18
    26ba:	20 e0       	ldi	r18, 0x00	; 0
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	40 e8       	ldi	r20, 0x80	; 128
    26c0:	5f e3       	ldi	r21, 0x3F	; 63
    26c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26c6:	88 23       	and	r24, r24
    26c8:	2c f4       	brge	.+10     	; 0x26d4 <lcd_8bit_initialize+0x29a>
		__ticks = 1;
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	9c 8b       	std	Y+20, r25	; 0x14
    26d0:	8b 8b       	std	Y+19, r24	; 0x13
    26d2:	3f c0       	rjmp	.+126    	; 0x2752 <lcd_8bit_initialize+0x318>
	else if (__tmp > 65535)
    26d4:	6d 89       	ldd	r22, Y+21	; 0x15
    26d6:	7e 89       	ldd	r23, Y+22	; 0x16
    26d8:	8f 89       	ldd	r24, Y+23	; 0x17
    26da:	98 8d       	ldd	r25, Y+24	; 0x18
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	3f ef       	ldi	r19, 0xFF	; 255
    26e0:	4f e7       	ldi	r20, 0x7F	; 127
    26e2:	57 e4       	ldi	r21, 0x47	; 71
    26e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26e8:	18 16       	cp	r1, r24
    26ea:	4c f5       	brge	.+82     	; 0x273e <lcd_8bit_initialize+0x304>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ec:	69 8d       	ldd	r22, Y+25	; 0x19
    26ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	40 e2       	ldi	r20, 0x20	; 32
    26fa:	51 e4       	ldi	r21, 0x41	; 65
    26fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2700:	dc 01       	movw	r26, r24
    2702:	cb 01       	movw	r24, r22
    2704:	bc 01       	movw	r22, r24
    2706:	cd 01       	movw	r24, r26
    2708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	9c 8b       	std	Y+20, r25	; 0x14
    2712:	8b 8b       	std	Y+19, r24	; 0x13
    2714:	0f c0       	rjmp	.+30     	; 0x2734 <lcd_8bit_initialize+0x2fa>
    2716:	88 ec       	ldi	r24, 0xC8	; 200
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	9a 8b       	std	Y+18, r25	; 0x12
    271c:	89 8b       	std	Y+17, r24	; 0x11
    271e:	89 89       	ldd	r24, Y+17	; 0x11
    2720:	9a 89       	ldd	r25, Y+18	; 0x12
    2722:	01 97       	sbiw	r24, 0x01	; 1
    2724:	f1 f7       	brne	.-4      	; 0x2722 <lcd_8bit_initialize+0x2e8>
    2726:	9a 8b       	std	Y+18, r25	; 0x12
    2728:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    272a:	8b 89       	ldd	r24, Y+19	; 0x13
    272c:	9c 89       	ldd	r25, Y+20	; 0x14
    272e:	01 97       	sbiw	r24, 0x01	; 1
    2730:	9c 8b       	std	Y+20, r25	; 0x14
    2732:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2734:	8b 89       	ldd	r24, Y+19	; 0x13
    2736:	9c 89       	ldd	r25, Y+20	; 0x14
    2738:	00 97       	sbiw	r24, 0x00	; 0
    273a:	69 f7       	brne	.-38     	; 0x2716 <lcd_8bit_initialize+0x2dc>
    273c:	14 c0       	rjmp	.+40     	; 0x2766 <lcd_8bit_initialize+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    273e:	6d 89       	ldd	r22, Y+21	; 0x15
    2740:	7e 89       	ldd	r23, Y+22	; 0x16
    2742:	8f 89       	ldd	r24, Y+23	; 0x17
    2744:	98 8d       	ldd	r25, Y+24	; 0x18
    2746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	9c 8b       	std	Y+20, r25	; 0x14
    2750:	8b 8b       	std	Y+19, r24	; 0x13
    2752:	8b 89       	ldd	r24, Y+19	; 0x13
    2754:	9c 89       	ldd	r25, Y+20	; 0x14
    2756:	98 8b       	std	Y+16, r25	; 0x10
    2758:	8f 87       	std	Y+15, r24	; 0x0f
    275a:	8f 85       	ldd	r24, Y+15	; 0x0f
    275c:	98 89       	ldd	r25, Y+16	; 0x10
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	f1 f7       	brne	.-4      	; 0x275e <lcd_8bit_initialize+0x324>
    2762:	98 8b       	std	Y+16, r25	; 0x10
    2764:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		//ret = lcd_8bit_send_command(lcd,_LCD_8BIT_MODE_2_LINE);
		ret = lcd_8bit_send_command(lcd, _LCD_CLEAR);
    2766:	8b ad       	ldd	r24, Y+59	; 0x3b
    2768:	9c ad       	ldd	r25, Y+60	; 0x3c
    276a:	61 e0       	ldi	r22, 0x01	; 1
    276c:	0e 94 3b 14 	call	0x2876	; 0x2876 <lcd_8bit_send_command>
    2770:	8a af       	std	Y+58, r24	; 0x3a
    2772:	80 e0       	ldi	r24, 0x00	; 0
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	a0 e0       	ldi	r26, 0x00	; 0
    2778:	b0 e4       	ldi	r27, 0x40	; 64
    277a:	8b 87       	std	Y+11, r24	; 0x0b
    277c:	9c 87       	std	Y+12, r25	; 0x0c
    277e:	ad 87       	std	Y+13, r26	; 0x0d
    2780:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2782:	6b 85       	ldd	r22, Y+11	; 0x0b
    2784:	7c 85       	ldd	r23, Y+12	; 0x0c
    2786:	8d 85       	ldd	r24, Y+13	; 0x0d
    2788:	9e 85       	ldd	r25, Y+14	; 0x0e
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	4a ef       	ldi	r20, 0xFA	; 250
    2790:	54 e4       	ldi	r21, 0x44	; 68
    2792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2796:	dc 01       	movw	r26, r24
    2798:	cb 01       	movw	r24, r22
    279a:	8f 83       	std	Y+7, r24	; 0x07
    279c:	98 87       	std	Y+8, r25	; 0x08
    279e:	a9 87       	std	Y+9, r26	; 0x09
    27a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27a2:	6f 81       	ldd	r22, Y+7	; 0x07
    27a4:	78 85       	ldd	r23, Y+8	; 0x08
    27a6:	89 85       	ldd	r24, Y+9	; 0x09
    27a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27aa:	20 e0       	ldi	r18, 0x00	; 0
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	40 e8       	ldi	r20, 0x80	; 128
    27b0:	5f e3       	ldi	r21, 0x3F	; 63
    27b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27b6:	88 23       	and	r24, r24
    27b8:	2c f4       	brge	.+10     	; 0x27c4 <lcd_8bit_initialize+0x38a>
		__ticks = 1;
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	9e 83       	std	Y+6, r25	; 0x06
    27c0:	8d 83       	std	Y+5, r24	; 0x05
    27c2:	3f c0       	rjmp	.+126    	; 0x2842 <lcd_8bit_initialize+0x408>
	else if (__tmp > 65535)
    27c4:	6f 81       	ldd	r22, Y+7	; 0x07
    27c6:	78 85       	ldd	r23, Y+8	; 0x08
    27c8:	89 85       	ldd	r24, Y+9	; 0x09
    27ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	3f ef       	ldi	r19, 0xFF	; 255
    27d0:	4f e7       	ldi	r20, 0x7F	; 127
    27d2:	57 e4       	ldi	r21, 0x47	; 71
    27d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27d8:	18 16       	cp	r1, r24
    27da:	4c f5       	brge	.+82     	; 0x282e <lcd_8bit_initialize+0x3f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    27de:	7c 85       	ldd	r23, Y+12	; 0x0c
    27e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	40 e2       	ldi	r20, 0x20	; 32
    27ea:	51 e4       	ldi	r21, 0x41	; 65
    27ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f0:	dc 01       	movw	r26, r24
    27f2:	cb 01       	movw	r24, r22
    27f4:	bc 01       	movw	r22, r24
    27f6:	cd 01       	movw	r24, r26
    27f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	9e 83       	std	Y+6, r25	; 0x06
    2802:	8d 83       	std	Y+5, r24	; 0x05
    2804:	0f c0       	rjmp	.+30     	; 0x2824 <lcd_8bit_initialize+0x3ea>
    2806:	88 ec       	ldi	r24, 0xC8	; 200
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	9c 83       	std	Y+4, r25	; 0x04
    280c:	8b 83       	std	Y+3, r24	; 0x03
    280e:	8b 81       	ldd	r24, Y+3	; 0x03
    2810:	9c 81       	ldd	r25, Y+4	; 0x04
    2812:	01 97       	sbiw	r24, 0x01	; 1
    2814:	f1 f7       	brne	.-4      	; 0x2812 <lcd_8bit_initialize+0x3d8>
    2816:	9c 83       	std	Y+4, r25	; 0x04
    2818:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    281a:	8d 81       	ldd	r24, Y+5	; 0x05
    281c:	9e 81       	ldd	r25, Y+6	; 0x06
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	9e 83       	std	Y+6, r25	; 0x06
    2822:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2824:	8d 81       	ldd	r24, Y+5	; 0x05
    2826:	9e 81       	ldd	r25, Y+6	; 0x06
    2828:	00 97       	sbiw	r24, 0x00	; 0
    282a:	69 f7       	brne	.-38     	; 0x2806 <lcd_8bit_initialize+0x3cc>
    282c:	14 c0       	rjmp	.+40     	; 0x2856 <lcd_8bit_initialize+0x41c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    282e:	6f 81       	ldd	r22, Y+7	; 0x07
    2830:	78 85       	ldd	r23, Y+8	; 0x08
    2832:	89 85       	ldd	r24, Y+9	; 0x09
    2834:	9a 85       	ldd	r25, Y+10	; 0x0a
    2836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	9e 83       	std	Y+6, r25	; 0x06
    2840:	8d 83       	std	Y+5, r24	; 0x05
    2842:	8d 81       	ldd	r24, Y+5	; 0x05
    2844:	9e 81       	ldd	r25, Y+6	; 0x06
    2846:	9a 83       	std	Y+2, r25	; 0x02
    2848:	89 83       	std	Y+1, r24	; 0x01
    284a:	89 81       	ldd	r24, Y+1	; 0x01
    284c:	9a 81       	ldd	r25, Y+2	; 0x02
    284e:	01 97       	sbiw	r24, 0x01	; 1
    2850:	f1 f7       	brne	.-4      	; 0x284e <lcd_8bit_initialize+0x414>
    2852:	9a 83       	std	Y+2, r25	; 0x02
    2854:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		//ret = lcd_8bit_send_command(lcd, _LCD_RETURN_HOME);
		//ret = lcd_8bit_send_command(lcd, _LCD_ENTRY_MODE);
		//ret = lcd_8bit_send_command(lcd, _LCD_CURSER_OFF_DISPLAY_ON);
		//ret = lcd_8bit_send_command(lcd,_LCD_8BIT_MODE_2_LINE);
		ret = lcd_8bit_send_command(lcd,0x80);
    2856:	8b ad       	ldd	r24, Y+59	; 0x3b
    2858:	9c ad       	ldd	r25, Y+60	; 0x3c
    285a:	60 e8       	ldi	r22, 0x80	; 128
    285c:	0e 94 3b 14 	call	0x2876	; 0x2876 <lcd_8bit_send_command>
    2860:	8a af       	std	Y+58, r24	; 0x3a
		//ret = lcd_8bit_send_command(lcd,0x04);
	}
	return ret;
    2862:	8a ad       	ldd	r24, Y+58	; 0x3a
}
    2864:	ec 96       	adiw	r28, 0x3c	; 60
    2866:	0f b6       	in	r0, 0x3f	; 63
    2868:	f8 94       	cli
    286a:	de bf       	out	0x3e, r29	; 62
    286c:	0f be       	out	0x3f, r0	; 63
    286e:	cd bf       	out	0x3d, r28	; 61
    2870:	cf 91       	pop	r28
    2872:	df 91       	pop	r29
    2874:	08 95       	ret

00002876 <lcd_8bit_send_command>:
STD_ReturnStatus lcd_8bit_send_command(const chr_lcd_8bit_t *lcd,uint8 command)
{
    2876:	df 93       	push	r29
    2878:	cf 93       	push	r28
    287a:	00 d0       	rcall	.+0      	; 0x287c <lcd_8bit_send_command+0x6>
    287c:	00 d0       	rcall	.+0      	; 0x287e <lcd_8bit_send_command+0x8>
    287e:	0f 92       	push	r0
    2880:	cd b7       	in	r28, 0x3d	; 61
    2882:	de b7       	in	r29, 0x3e	; 62
    2884:	9c 83       	std	Y+4, r25	; 0x04
    2886:	8b 83       	std	Y+3, r24	; 0x03
    2888:	6d 83       	std	Y+5, r22	; 0x05
	STD_ReturnStatus ret = E_OK;
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 l_pin_counter=ZERO_INIT;
    288e:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==lcd)
    2890:	8b 81       	ldd	r24, Y+3	; 0x03
    2892:	9c 81       	ldd	r25, Y+4	; 0x04
    2894:	00 97       	sbiw	r24, 0x00	; 0
    2896:	11 f4       	brne	.+4      	; 0x289c <lcd_8bit_send_command+0x26>
	{
		ret = E_NOT_OK;
    2898:	1a 82       	std	Y+2, r1	; 0x02
    289a:	32 c0       	rjmp	.+100    	; 0x2900 <lcd_8bit_send_command+0x8a>
	}
	else
	{
		ret = gpio_pin_write_logic(&(lcd->lcd_rs),GPIO_LOW);
    289c:	8b 81       	ldd	r24, Y+3	; 0x03
    289e:	9c 81       	ldd	r25, Y+4	; 0x04
    28a0:	60 e0       	ldi	r22, 0x00	; 0
    28a2:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
    28a6:	8a 83       	std	Y+2, r24	; 0x02
		for(l_pin_counter=0;l_pin_counter<8;++l_pin_counter)
    28a8:	19 82       	std	Y+1, r1	; 0x01
    28aa:	22 c0       	rjmp	.+68     	; 0x28f0 <lcd_8bit_send_command+0x7a>
		{
			ret = gpio_pin_write_logic(&(lcd->lcd_data[l_pin_counter]), (command>>l_pin_counter) & (uint8)0x01);
    28ac:	8b 81       	ldd	r24, Y+3	; 0x03
    28ae:	9c 81       	ldd	r25, Y+4	; 0x04
    28b0:	9c 01       	movw	r18, r24
    28b2:	2e 5f       	subi	r18, 0xFE	; 254
    28b4:	3f 4f       	sbci	r19, 0xFF	; 255
    28b6:	89 81       	ldd	r24, Y+1	; 0x01
    28b8:	88 2f       	mov	r24, r24
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	a9 01       	movw	r20, r18
    28be:	48 0f       	add	r20, r24
    28c0:	59 1f       	adc	r21, r25
    28c2:	8d 81       	ldd	r24, Y+5	; 0x05
    28c4:	28 2f       	mov	r18, r24
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	89 81       	ldd	r24, Y+1	; 0x01
    28ca:	88 2f       	mov	r24, r24
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	b9 01       	movw	r22, r18
    28d0:	02 c0       	rjmp	.+4      	; 0x28d6 <lcd_8bit_send_command+0x60>
    28d2:	75 95       	asr	r23
    28d4:	67 95       	ror	r22
    28d6:	8a 95       	dec	r24
    28d8:	e2 f7       	brpl	.-8      	; 0x28d2 <lcd_8bit_send_command+0x5c>
    28da:	cb 01       	movw	r24, r22
    28dc:	28 2f       	mov	r18, r24
    28de:	21 70       	andi	r18, 0x01	; 1
    28e0:	ca 01       	movw	r24, r20
    28e2:	62 2f       	mov	r22, r18
    28e4:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
    28e8:	8a 83       	std	Y+2, r24	; 0x02
		ret = E_NOT_OK;
	}
	else
	{
		ret = gpio_pin_write_logic(&(lcd->lcd_rs),GPIO_LOW);
		for(l_pin_counter=0;l_pin_counter<8;++l_pin_counter)
    28ea:	89 81       	ldd	r24, Y+1	; 0x01
    28ec:	8f 5f       	subi	r24, 0xFF	; 255
    28ee:	89 83       	std	Y+1, r24	; 0x01
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	88 30       	cpi	r24, 0x08	; 8
    28f4:	d8 f2       	brcs	.-74     	; 0x28ac <lcd_8bit_send_command+0x36>
		{
			ret = gpio_pin_write_logic(&(lcd->lcd_data[l_pin_counter]), (command>>l_pin_counter) & (uint8)0x01);
		}
		ret = lcd_8bit_send_enable(lcd);
    28f6:	8b 81       	ldd	r24, Y+3	; 0x03
    28f8:	9c 81       	ldd	r25, Y+4	; 0x04
    28fa:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <lcd_8bit_send_enable>
    28fe:	8a 83       	std	Y+2, r24	; 0x02
	}
	return ret;
    2900:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2902:	0f 90       	pop	r0
    2904:	0f 90       	pop	r0
    2906:	0f 90       	pop	r0
    2908:	0f 90       	pop	r0
    290a:	0f 90       	pop	r0
    290c:	cf 91       	pop	r28
    290e:	df 91       	pop	r29
    2910:	08 95       	ret

00002912 <lcd_8bit_send_char_data>:
STD_ReturnStatus lcd_8bit_send_char_data(const chr_lcd_8bit_t *lcd,uint8 data)
{
    2912:	df 93       	push	r29
    2914:	cf 93       	push	r28
    2916:	00 d0       	rcall	.+0      	; 0x2918 <lcd_8bit_send_char_data+0x6>
    2918:	00 d0       	rcall	.+0      	; 0x291a <lcd_8bit_send_char_data+0x8>
    291a:	0f 92       	push	r0
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
    2920:	9c 83       	std	Y+4, r25	; 0x04
    2922:	8b 83       	std	Y+3, r24	; 0x03
    2924:	6d 83       	std	Y+5, r22	; 0x05
	STD_ReturnStatus ret = E_OK;
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	8a 83       	std	Y+2, r24	; 0x02
	uint8 l_pin_counter=ZERO_INIT;
    292a:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==lcd)
    292c:	8b 81       	ldd	r24, Y+3	; 0x03
    292e:	9c 81       	ldd	r25, Y+4	; 0x04
    2930:	00 97       	sbiw	r24, 0x00	; 0
    2932:	11 f4       	brne	.+4      	; 0x2938 <lcd_8bit_send_char_data+0x26>
	{
		ret = E_NOT_OK;
    2934:	1a 82       	std	Y+2, r1	; 0x02
    2936:	32 c0       	rjmp	.+100    	; 0x299c <lcd_8bit_send_char_data+0x8a>
	}
	else
	{
		ret = gpio_pin_write_logic(&(lcd->lcd_rs),GPIO_HIGH);
    2938:	8b 81       	ldd	r24, Y+3	; 0x03
    293a:	9c 81       	ldd	r25, Y+4	; 0x04
    293c:	61 e0       	ldi	r22, 0x01	; 1
    293e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
    2942:	8a 83       	std	Y+2, r24	; 0x02
		for(l_pin_counter=ZERO_INIT;l_pin_counter<8;++l_pin_counter)
    2944:	19 82       	std	Y+1, r1	; 0x01
    2946:	22 c0       	rjmp	.+68     	; 0x298c <lcd_8bit_send_char_data+0x7a>
		{
			ret = gpio_pin_write_logic(&(lcd->lcd_data[l_pin_counter]), (data>>l_pin_counter) & (uint8)0x01);
    2948:	8b 81       	ldd	r24, Y+3	; 0x03
    294a:	9c 81       	ldd	r25, Y+4	; 0x04
    294c:	9c 01       	movw	r18, r24
    294e:	2e 5f       	subi	r18, 0xFE	; 254
    2950:	3f 4f       	sbci	r19, 0xFF	; 255
    2952:	89 81       	ldd	r24, Y+1	; 0x01
    2954:	88 2f       	mov	r24, r24
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	a9 01       	movw	r20, r18
    295a:	48 0f       	add	r20, r24
    295c:	59 1f       	adc	r21, r25
    295e:	8d 81       	ldd	r24, Y+5	; 0x05
    2960:	28 2f       	mov	r18, r24
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	89 81       	ldd	r24, Y+1	; 0x01
    2966:	88 2f       	mov	r24, r24
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	b9 01       	movw	r22, r18
    296c:	02 c0       	rjmp	.+4      	; 0x2972 <lcd_8bit_send_char_data+0x60>
    296e:	75 95       	asr	r23
    2970:	67 95       	ror	r22
    2972:	8a 95       	dec	r24
    2974:	e2 f7       	brpl	.-8      	; 0x296e <lcd_8bit_send_char_data+0x5c>
    2976:	cb 01       	movw	r24, r22
    2978:	28 2f       	mov	r18, r24
    297a:	21 70       	andi	r18, 0x01	; 1
    297c:	ca 01       	movw	r24, r20
    297e:	62 2f       	mov	r22, r18
    2980:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
    2984:	8a 83       	std	Y+2, r24	; 0x02
		ret = E_NOT_OK;
	}
	else
	{
		ret = gpio_pin_write_logic(&(lcd->lcd_rs),GPIO_HIGH);
		for(l_pin_counter=ZERO_INIT;l_pin_counter<8;++l_pin_counter)
    2986:	89 81       	ldd	r24, Y+1	; 0x01
    2988:	8f 5f       	subi	r24, 0xFF	; 255
    298a:	89 83       	std	Y+1, r24	; 0x01
    298c:	89 81       	ldd	r24, Y+1	; 0x01
    298e:	88 30       	cpi	r24, 0x08	; 8
    2990:	d8 f2       	brcs	.-74     	; 0x2948 <lcd_8bit_send_char_data+0x36>
		{
			ret = gpio_pin_write_logic(&(lcd->lcd_data[l_pin_counter]), (data>>l_pin_counter) & (uint8)0x01);
		}
		ret = lcd_8bit_send_enable(lcd);
    2992:	8b 81       	ldd	r24, Y+3	; 0x03
    2994:	9c 81       	ldd	r25, Y+4	; 0x04
    2996:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <lcd_8bit_send_enable>
    299a:	8a 83       	std	Y+2, r24	; 0x02
	}
	return ret;
    299c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    299e:	0f 90       	pop	r0
    29a0:	0f 90       	pop	r0
    29a2:	0f 90       	pop	r0
    29a4:	0f 90       	pop	r0
    29a6:	0f 90       	pop	r0
    29a8:	cf 91       	pop	r28
    29aa:	df 91       	pop	r29
    29ac:	08 95       	ret

000029ae <lcd_8bit_send_char_data_pos>:


STD_ReturnStatus lcd_8bit_send_char_data_pos(const chr_lcd_8bit_t *lcd,uint8 row,uint8 column,uint8 data)
{
    29ae:	df 93       	push	r29
    29b0:	cf 93       	push	r28
    29b2:	00 d0       	rcall	.+0      	; 0x29b4 <lcd_8bit_send_char_data_pos+0x6>
    29b4:	00 d0       	rcall	.+0      	; 0x29b6 <lcd_8bit_send_char_data_pos+0x8>
    29b6:	00 d0       	rcall	.+0      	; 0x29b8 <lcd_8bit_send_char_data_pos+0xa>
    29b8:	cd b7       	in	r28, 0x3d	; 61
    29ba:	de b7       	in	r29, 0x3e	; 62
    29bc:	9b 83       	std	Y+3, r25	; 0x03
    29be:	8a 83       	std	Y+2, r24	; 0x02
    29c0:	6c 83       	std	Y+4, r22	; 0x04
    29c2:	4d 83       	std	Y+5, r20	; 0x05
    29c4:	2e 83       	std	Y+6, r18	; 0x06
	STD_ReturnStatus ret = E_OK;
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==lcd)
    29ca:	8a 81       	ldd	r24, Y+2	; 0x02
    29cc:	9b 81       	ldd	r25, Y+3	; 0x03
    29ce:	00 97       	sbiw	r24, 0x00	; 0
    29d0:	11 f4       	brne	.+4      	; 0x29d6 <lcd_8bit_send_char_data_pos+0x28>
	{
		ret = E_NOT_OK;
    29d2:	19 82       	std	Y+1, r1	; 0x01
    29d4:	0c c0       	rjmp	.+24     	; 0x29ee <lcd_8bit_send_char_data_pos+0x40>
	}
	else
	{
		lcd_8bit_set_cursor(lcd,row,column);
    29d6:	8a 81       	ldd	r24, Y+2	; 0x02
    29d8:	9b 81       	ldd	r25, Y+3	; 0x03
    29da:	6c 81       	ldd	r22, Y+4	; 0x04
    29dc:	4d 81       	ldd	r20, Y+5	; 0x05
    29de:	0e 94 58 18 	call	0x30b0	; 0x30b0 <lcd_8bit_set_cursor>
		ret = lcd_8bit_send_char_data(lcd,data);
    29e2:	8a 81       	ldd	r24, Y+2	; 0x02
    29e4:	9b 81       	ldd	r25, Y+3	; 0x03
    29e6:	6e 81       	ldd	r22, Y+6	; 0x06
    29e8:	0e 94 89 14 	call	0x2912	; 0x2912 <lcd_8bit_send_char_data>
    29ec:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    29ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    29f0:	26 96       	adiw	r28, 0x06	; 6
    29f2:	0f b6       	in	r0, 0x3f	; 63
    29f4:	f8 94       	cli
    29f6:	de bf       	out	0x3e, r29	; 62
    29f8:	0f be       	out	0x3f, r0	; 63
    29fa:	cd bf       	out	0x3d, r28	; 61
    29fc:	cf 91       	pop	r28
    29fe:	df 91       	pop	r29
    2a00:	08 95       	ret

00002a02 <lcd_8bit_send_string>:
STD_ReturnStatus lcd_8bit_send_string(const chr_lcd_8bit_t *lcd,uint8* str)
{
    2a02:	df 93       	push	r29
    2a04:	cf 93       	push	r28
    2a06:	00 d0       	rcall	.+0      	; 0x2a08 <lcd_8bit_send_string+0x6>
    2a08:	00 d0       	rcall	.+0      	; 0x2a0a <lcd_8bit_send_string+0x8>
    2a0a:	0f 92       	push	r0
    2a0c:	cd b7       	in	r28, 0x3d	; 61
    2a0e:	de b7       	in	r29, 0x3e	; 62
    2a10:	9b 83       	std	Y+3, r25	; 0x03
    2a12:	8a 83       	std	Y+2, r24	; 0x02
    2a14:	7d 83       	std	Y+5, r23	; 0x05
    2a16:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_OK;
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	89 83       	std	Y+1, r24	; 0x01
	if((NULL==lcd)||(NULL==str))
    2a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a20:	00 97       	sbiw	r24, 0x00	; 0
    2a22:	21 f0       	breq	.+8      	; 0x2a2c <lcd_8bit_send_string+0x2a>
    2a24:	8c 81       	ldd	r24, Y+4	; 0x04
    2a26:	9d 81       	ldd	r25, Y+5	; 0x05
    2a28:	00 97       	sbiw	r24, 0x00	; 0
    2a2a:	81 f4       	brne	.+32     	; 0x2a4c <lcd_8bit_send_string+0x4a>
	{
		ret = E_NOT_OK;
    2a2c:	19 82       	std	Y+1, r1	; 0x01
    2a2e:	13 c0       	rjmp	.+38     	; 0x2a56 <lcd_8bit_send_string+0x54>
	}
	else
	{
		while(*str)
		{
			ret = lcd_8bit_send_char_data(lcd,*str++);
    2a30:	ec 81       	ldd	r30, Y+4	; 0x04
    2a32:	fd 81       	ldd	r31, Y+5	; 0x05
    2a34:	20 81       	ld	r18, Z
    2a36:	8c 81       	ldd	r24, Y+4	; 0x04
    2a38:	9d 81       	ldd	r25, Y+5	; 0x05
    2a3a:	01 96       	adiw	r24, 0x01	; 1
    2a3c:	9d 83       	std	Y+5, r25	; 0x05
    2a3e:	8c 83       	std	Y+4, r24	; 0x04
    2a40:	8a 81       	ldd	r24, Y+2	; 0x02
    2a42:	9b 81       	ldd	r25, Y+3	; 0x03
    2a44:	62 2f       	mov	r22, r18
    2a46:	0e 94 89 14 	call	0x2912	; 0x2912 <lcd_8bit_send_char_data>
    2a4a:	89 83       	std	Y+1, r24	; 0x01
	{
		ret = E_NOT_OK;
	}
	else
	{
		while(*str)
    2a4c:	ec 81       	ldd	r30, Y+4	; 0x04
    2a4e:	fd 81       	ldd	r31, Y+5	; 0x05
    2a50:	80 81       	ld	r24, Z
    2a52:	88 23       	and	r24, r24
    2a54:	69 f7       	brne	.-38     	; 0x2a30 <lcd_8bit_send_string+0x2e>
		{
			ret = lcd_8bit_send_char_data(lcd,*str++);
		}
	}
	return ret;
    2a56:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a58:	0f 90       	pop	r0
    2a5a:	0f 90       	pop	r0
    2a5c:	0f 90       	pop	r0
    2a5e:	0f 90       	pop	r0
    2a60:	0f 90       	pop	r0
    2a62:	cf 91       	pop	r28
    2a64:	df 91       	pop	r29
    2a66:	08 95       	ret

00002a68 <lcd_8bit_send_string_pos>:
STD_ReturnStatus lcd_8bit_send_string_pos(const chr_lcd_8bit_t *lcd,uint8 row,uint8 column,uint8* str)
{
    2a68:	df 93       	push	r29
    2a6a:	cf 93       	push	r28
    2a6c:	cd b7       	in	r28, 0x3d	; 61
    2a6e:	de b7       	in	r29, 0x3e	; 62
    2a70:	27 97       	sbiw	r28, 0x07	; 7
    2a72:	0f b6       	in	r0, 0x3f	; 63
    2a74:	f8 94       	cli
    2a76:	de bf       	out	0x3e, r29	; 62
    2a78:	0f be       	out	0x3f, r0	; 63
    2a7a:	cd bf       	out	0x3d, r28	; 61
    2a7c:	9b 83       	std	Y+3, r25	; 0x03
    2a7e:	8a 83       	std	Y+2, r24	; 0x02
    2a80:	6c 83       	std	Y+4, r22	; 0x04
    2a82:	4d 83       	std	Y+5, r20	; 0x05
    2a84:	3f 83       	std	Y+7, r19	; 0x07
    2a86:	2e 83       	std	Y+6, r18	; 0x06
	STD_ReturnStatus ret = E_OK;
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	89 83       	std	Y+1, r24	; 0x01
	if((NULL==lcd)||(NULL==str))
    2a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a90:	00 97       	sbiw	r24, 0x00	; 0
    2a92:	21 f0       	breq	.+8      	; 0x2a9c <lcd_8bit_send_string_pos+0x34>
    2a94:	8e 81       	ldd	r24, Y+6	; 0x06
    2a96:	9f 81       	ldd	r25, Y+7	; 0x07
    2a98:	00 97       	sbiw	r24, 0x00	; 0
    2a9a:	11 f4       	brne	.+4      	; 0x2aa0 <lcd_8bit_send_string_pos+0x38>
	{
		ret = E_NOT_OK;
    2a9c:	19 82       	std	Y+1, r1	; 0x01
    2a9e:	1b c0       	rjmp	.+54     	; 0x2ad6 <lcd_8bit_send_string_pos+0x6e>
	}
	else
	{
		ret = lcd_8bit_set_cursor(lcd,row,column);
    2aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa2:	9b 81       	ldd	r25, Y+3	; 0x03
    2aa4:	6c 81       	ldd	r22, Y+4	; 0x04
    2aa6:	4d 81       	ldd	r20, Y+5	; 0x05
    2aa8:	0e 94 58 18 	call	0x30b0	; 0x30b0 <lcd_8bit_set_cursor>
    2aac:	89 83       	std	Y+1, r24	; 0x01
    2aae:	0e c0       	rjmp	.+28     	; 0x2acc <lcd_8bit_send_string_pos+0x64>
		while(*str)
		{
			ret = lcd_8bit_send_char_data(lcd,*str++);
    2ab0:	ee 81       	ldd	r30, Y+6	; 0x06
    2ab2:	ff 81       	ldd	r31, Y+7	; 0x07
    2ab4:	20 81       	ld	r18, Z
    2ab6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ab8:	9f 81       	ldd	r25, Y+7	; 0x07
    2aba:	01 96       	adiw	r24, 0x01	; 1
    2abc:	9f 83       	std	Y+7, r25	; 0x07
    2abe:	8e 83       	std	Y+6, r24	; 0x06
    2ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ac4:	62 2f       	mov	r22, r18
    2ac6:	0e 94 89 14 	call	0x2912	; 0x2912 <lcd_8bit_send_char_data>
    2aca:	89 83       	std	Y+1, r24	; 0x01
		ret = E_NOT_OK;
	}
	else
	{
		ret = lcd_8bit_set_cursor(lcd,row,column);
		while(*str)
    2acc:	ee 81       	ldd	r30, Y+6	; 0x06
    2ace:	ff 81       	ldd	r31, Y+7	; 0x07
    2ad0:	80 81       	ld	r24, Z
    2ad2:	88 23       	and	r24, r24
    2ad4:	69 f7       	brne	.-38     	; 0x2ab0 <lcd_8bit_send_string_pos+0x48>
		{
			ret = lcd_8bit_send_char_data(lcd,*str++);
		}
	}
	return ret;
    2ad6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ad8:	27 96       	adiw	r28, 0x07	; 7
    2ada:	0f b6       	in	r0, 0x3f	; 63
    2adc:	f8 94       	cli
    2ade:	de bf       	out	0x3e, r29	; 62
    2ae0:	0f be       	out	0x3f, r0	; 63
    2ae2:	cd bf       	out	0x3d, r28	; 61
    2ae4:	cf 91       	pop	r28
    2ae6:	df 91       	pop	r29
    2ae8:	08 95       	ret

00002aea <lcd_8bit_send_custom_char>:
STD_ReturnStatus lcd_8bit_send_custom_char(const chr_lcd_8bit_t *lcd,uint8 row,uint8 column,uint8 _char[],uint8 mem_pos)
{
    2aea:	0f 93       	push	r16
    2aec:	df 93       	push	r29
    2aee:	cf 93       	push	r28
    2af0:	cd b7       	in	r28, 0x3d	; 61
    2af2:	de b7       	in	r29, 0x3e	; 62
    2af4:	29 97       	sbiw	r28, 0x09	; 9
    2af6:	0f b6       	in	r0, 0x3f	; 63
    2af8:	f8 94       	cli
    2afa:	de bf       	out	0x3e, r29	; 62
    2afc:	0f be       	out	0x3f, r0	; 63
    2afe:	cd bf       	out	0x3d, r28	; 61
    2b00:	9c 83       	std	Y+4, r25	; 0x04
    2b02:	8b 83       	std	Y+3, r24	; 0x03
    2b04:	6d 83       	std	Y+5, r22	; 0x05
    2b06:	4e 83       	std	Y+6, r20	; 0x06
    2b08:	38 87       	std	Y+8, r19	; 0x08
    2b0a:	2f 83       	std	Y+7, r18	; 0x07
    2b0c:	09 87       	std	Y+9, r16	; 0x09
	STD_ReturnStatus ret = E_OK;
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	8a 83       	std	Y+2, r24	; 0x02
	uint8 lcd_counter = ZERO_INIT;
    2b12:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==lcd)
    2b14:	8b 81       	ldd	r24, Y+3	; 0x03
    2b16:	9c 81       	ldd	r25, Y+4	; 0x04
    2b18:	00 97       	sbiw	r24, 0x00	; 0
    2b1a:	11 f4       	brne	.+4      	; 0x2b20 <lcd_8bit_send_custom_char+0x36>
	{
		ret = E_NOT_OK;
    2b1c:	1a 82       	std	Y+2, r1	; 0x02
    2b1e:	30 c0       	rjmp	.+96     	; 0x2b80 <lcd_8bit_send_custom_char+0x96>
	}
	else
	{
		ret =  lcd_8bit_send_command(lcd,_LCD_CGRAM_START+(mem_pos*8));//mem_pos is the position addres oin cgram(1~8)
    2b20:	89 85       	ldd	r24, Y+9	; 0x09
    2b22:	88 2f       	mov	r24, r24
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	08 96       	adiw	r24, 0x08	; 8
    2b28:	88 0f       	add	r24, r24
    2b2a:	99 1f       	adc	r25, r25
    2b2c:	88 0f       	add	r24, r24
    2b2e:	99 1f       	adc	r25, r25
    2b30:	88 0f       	add	r24, r24
    2b32:	99 1f       	adc	r25, r25
    2b34:	28 2f       	mov	r18, r24
    2b36:	8b 81       	ldd	r24, Y+3	; 0x03
    2b38:	9c 81       	ldd	r25, Y+4	; 0x04
    2b3a:	62 2f       	mov	r22, r18
    2b3c:	0e 94 3b 14 	call	0x2876	; 0x2876 <lcd_8bit_send_command>
    2b40:	8a 83       	std	Y+2, r24	; 0x02
		for(lcd_counter=ZERO_INIT;lcd_counter<=7;++lcd_counter)
    2b42:	19 82       	std	Y+1, r1	; 0x01
    2b44:	12 c0       	rjmp	.+36     	; 0x2b6a <lcd_8bit_send_custom_char+0x80>
		{
			ret = lcd_8bit_send_char_data(lcd,_char[lcd_counter]);
    2b46:	89 81       	ldd	r24, Y+1	; 0x01
    2b48:	28 2f       	mov	r18, r24
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	8f 81       	ldd	r24, Y+7	; 0x07
    2b4e:	98 85       	ldd	r25, Y+8	; 0x08
    2b50:	fc 01       	movw	r30, r24
    2b52:	e2 0f       	add	r30, r18
    2b54:	f3 1f       	adc	r31, r19
    2b56:	20 81       	ld	r18, Z
    2b58:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b5c:	62 2f       	mov	r22, r18
    2b5e:	0e 94 89 14 	call	0x2912	; 0x2912 <lcd_8bit_send_char_data>
    2b62:	8a 83       	std	Y+2, r24	; 0x02
		ret = E_NOT_OK;
	}
	else
	{
		ret =  lcd_8bit_send_command(lcd,_LCD_CGRAM_START+(mem_pos*8));//mem_pos is the position addres oin cgram(1~8)
		for(lcd_counter=ZERO_INIT;lcd_counter<=7;++lcd_counter)
    2b64:	89 81       	ldd	r24, Y+1	; 0x01
    2b66:	8f 5f       	subi	r24, 0xFF	; 255
    2b68:	89 83       	std	Y+1, r24	; 0x01
    2b6a:	89 81       	ldd	r24, Y+1	; 0x01
    2b6c:	88 30       	cpi	r24, 0x08	; 8
    2b6e:	58 f3       	brcs	.-42     	; 0x2b46 <lcd_8bit_send_custom_char+0x5c>
		{
			ret = lcd_8bit_send_char_data(lcd,_char[lcd_counter]);
		}
		ret = lcd_8bit_send_char_data_pos(lcd,row,column,mem_pos);
    2b70:	8b 81       	ldd	r24, Y+3	; 0x03
    2b72:	9c 81       	ldd	r25, Y+4	; 0x04
    2b74:	6d 81       	ldd	r22, Y+5	; 0x05
    2b76:	4e 81       	ldd	r20, Y+6	; 0x06
    2b78:	29 85       	ldd	r18, Y+9	; 0x09
    2b7a:	0e 94 d7 14 	call	0x29ae	; 0x29ae <lcd_8bit_send_char_data_pos>
    2b7e:	8a 83       	std	Y+2, r24	; 0x02
	}
	return ret;
    2b80:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2b82:	29 96       	adiw	r28, 0x09	; 9
    2b84:	0f b6       	in	r0, 0x3f	; 63
    2b86:	f8 94       	cli
    2b88:	de bf       	out	0x3e, r29	; 62
    2b8a:	0f be       	out	0x3f, r0	; 63
    2b8c:	cd bf       	out	0x3d, r28	; 61
    2b8e:	cf 91       	pop	r28
    2b90:	df 91       	pop	r29
    2b92:	0f 91       	pop	r16
    2b94:	08 95       	ret

00002b96 <convert_byte_to_string>:


STD_ReturnStatus convert_byte_to_string(uint8 value,uint8 *str)
{
    2b96:	df 93       	push	r29
    2b98:	cf 93       	push	r28
    2b9a:	00 d0       	rcall	.+0      	; 0x2b9c <convert_byte_to_string+0x6>
    2b9c:	00 d0       	rcall	.+0      	; 0x2b9e <convert_byte_to_string+0x8>
    2b9e:	cd b7       	in	r28, 0x3d	; 61
    2ba0:	de b7       	in	r29, 0x3e	; 62
    2ba2:	8a 83       	std	Y+2, r24	; 0x02
    2ba4:	7c 83       	std	Y+4, r23	; 0x04
    2ba6:	6b 83       	std	Y+3, r22	; 0x03
	//since max of 8bits is 255 then we need 3 digits plus null terminator
	STD_ReturnStatus ret = E_OK;
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	89 83       	std	Y+1, r24	; 0x01
	if(str==NULL)
    2bac:	8b 81       	ldd	r24, Y+3	; 0x03
    2bae:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb0:	00 97       	sbiw	r24, 0x00	; 0
    2bb2:	11 f4       	brne	.+4      	; 0x2bb8 <convert_byte_to_string+0x22>
	{
		ret = E_NOT_OK;
    2bb4:	19 82       	std	Y+1, r1	; 0x01
    2bb6:	25 c0       	rjmp	.+74     	; 0x2c02 <convert_byte_to_string+0x6c>
	}
	else
	{
		memset(str,'\n',4);
    2bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bba:	9c 81       	ldd	r25, Y+4	; 0x04
    2bbc:	6a e0       	ldi	r22, 0x0A	; 10
    2bbe:	70 e0       	ldi	r23, 0x00	; 0
    2bc0:	44 e0       	ldi	r20, 0x04	; 4
    2bc2:	50 e0       	ldi	r21, 0x00	; 0
    2bc4:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <memset>
		sprintf(str,"%i",value);
    2bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bca:	28 2f       	mov	r18, r24
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	00 d0       	rcall	.+0      	; 0x2bd0 <convert_byte_to_string+0x3a>
    2bd0:	00 d0       	rcall	.+0      	; 0x2bd2 <convert_byte_to_string+0x3c>
    2bd2:	00 d0       	rcall	.+0      	; 0x2bd4 <convert_byte_to_string+0x3e>
    2bd4:	ed b7       	in	r30, 0x3d	; 61
    2bd6:	fe b7       	in	r31, 0x3e	; 62
    2bd8:	31 96       	adiw	r30, 0x01	; 1
    2bda:	8b 81       	ldd	r24, Y+3	; 0x03
    2bdc:	9c 81       	ldd	r25, Y+4	; 0x04
    2bde:	91 83       	std	Z+1, r25	; 0x01
    2be0:	80 83       	st	Z, r24
    2be2:	80 e6       	ldi	r24, 0x60	; 96
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	93 83       	std	Z+3, r25	; 0x03
    2be8:	82 83       	std	Z+2, r24	; 0x02
    2bea:	35 83       	std	Z+5, r19	; 0x05
    2bec:	24 83       	std	Z+4, r18	; 0x04
    2bee:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <sprintf>
    2bf2:	8d b7       	in	r24, 0x3d	; 61
    2bf4:	9e b7       	in	r25, 0x3e	; 62
    2bf6:	06 96       	adiw	r24, 0x06	; 6
    2bf8:	0f b6       	in	r0, 0x3f	; 63
    2bfa:	f8 94       	cli
    2bfc:	9e bf       	out	0x3e, r25	; 62
    2bfe:	0f be       	out	0x3f, r0	; 63
    2c00:	8d bf       	out	0x3d, r24	; 61
	}
	return ret;
    2c02:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c04:	0f 90       	pop	r0
    2c06:	0f 90       	pop	r0
    2c08:	0f 90       	pop	r0
    2c0a:	0f 90       	pop	r0
    2c0c:	cf 91       	pop	r28
    2c0e:	df 91       	pop	r29
    2c10:	08 95       	ret

00002c12 <convert_string_to_byte>:
STD_ReturnStatus convert_string_to_byte(uint8 *value,uint8 *str)
{
    2c12:	df 93       	push	r29
    2c14:	cf 93       	push	r28
    2c16:	00 d0       	rcall	.+0      	; 0x2c18 <convert_string_to_byte+0x6>
    2c18:	00 d0       	rcall	.+0      	; 0x2c1a <convert_string_to_byte+0x8>
    2c1a:	00 d0       	rcall	.+0      	; 0x2c1c <convert_string_to_byte+0xa>
    2c1c:	cd b7       	in	r28, 0x3d	; 61
    2c1e:	de b7       	in	r29, 0x3e	; 62
    2c20:	9c 83       	std	Y+4, r25	; 0x04
    2c22:	8b 83       	std	Y+3, r24	; 0x03
    2c24:	7e 83       	std	Y+6, r23	; 0x06
    2c26:	6d 83       	std	Y+5, r22	; 0x05
	STD_ReturnStatus ret = E_OK;
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	8a 83       	std	Y+2, r24	; 0x02
	if(str==NULL||NULL==value)
    2c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c30:	00 97       	sbiw	r24, 0x00	; 0
    2c32:	21 f0       	breq	.+8      	; 0x2c3c <convert_string_to_byte+0x2a>
    2c34:	8b 81       	ldd	r24, Y+3	; 0x03
    2c36:	9c 81       	ldd	r25, Y+4	; 0x04
    2c38:	00 97       	sbiw	r24, 0x00	; 0
    2c3a:	11 f4       	brne	.+4      	; 0x2c40 <convert_string_to_byte+0x2e>
	{
		ret = E_NOT_OK;
    2c3c:	1a 82       	std	Y+2, r1	; 0x02
    2c3e:	31 c0       	rjmp	.+98     	; 0x2ca2 <convert_string_to_byte+0x90>
	}
	else
	{
		*value=0;
    2c40:	eb 81       	ldd	r30, Y+3	; 0x03
    2c42:	fc 81       	ldd	r31, Y+4	; 0x04
    2c44:	10 82       	st	Z, r1
	    for (uint8 i = 0; str[i] != '\0'; i++) {
    2c46:	19 82       	std	Y+1, r1	; 0x01
    2c48:	21 c0       	rjmp	.+66     	; 0x2c8c <convert_string_to_byte+0x7a>
	        *value = *value* 10 + (str[i] - 48);
    2c4a:	eb 81       	ldd	r30, Y+3	; 0x03
    2c4c:	fc 81       	ldd	r31, Y+4	; 0x04
    2c4e:	80 81       	ld	r24, Z
    2c50:	88 2f       	mov	r24, r24
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	9c 01       	movw	r18, r24
    2c56:	22 0f       	add	r18, r18
    2c58:	33 1f       	adc	r19, r19
    2c5a:	c9 01       	movw	r24, r18
    2c5c:	88 0f       	add	r24, r24
    2c5e:	99 1f       	adc	r25, r25
    2c60:	88 0f       	add	r24, r24
    2c62:	99 1f       	adc	r25, r25
    2c64:	82 0f       	add	r24, r18
    2c66:	93 1f       	adc	r25, r19
    2c68:	48 2f       	mov	r20, r24
    2c6a:	89 81       	ldd	r24, Y+1	; 0x01
    2c6c:	28 2f       	mov	r18, r24
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	8d 81       	ldd	r24, Y+5	; 0x05
    2c72:	9e 81       	ldd	r25, Y+6	; 0x06
    2c74:	fc 01       	movw	r30, r24
    2c76:	e2 0f       	add	r30, r18
    2c78:	f3 1f       	adc	r31, r19
    2c7a:	80 81       	ld	r24, Z
    2c7c:	84 0f       	add	r24, r20
    2c7e:	80 53       	subi	r24, 0x30	; 48
    2c80:	eb 81       	ldd	r30, Y+3	; 0x03
    2c82:	fc 81       	ldd	r31, Y+4	; 0x04
    2c84:	80 83       	st	Z, r24
		ret = E_NOT_OK;
	}
	else
	{
		*value=0;
	    for (uint8 i = 0; str[i] != '\0'; i++) {
    2c86:	89 81       	ldd	r24, Y+1	; 0x01
    2c88:	8f 5f       	subi	r24, 0xFF	; 255
    2c8a:	89 83       	std	Y+1, r24	; 0x01
    2c8c:	89 81       	ldd	r24, Y+1	; 0x01
    2c8e:	28 2f       	mov	r18, r24
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	8d 81       	ldd	r24, Y+5	; 0x05
    2c94:	9e 81       	ldd	r25, Y+6	; 0x06
    2c96:	fc 01       	movw	r30, r24
    2c98:	e2 0f       	add	r30, r18
    2c9a:	f3 1f       	adc	r31, r19
    2c9c:	80 81       	ld	r24, Z
    2c9e:	88 23       	and	r24, r24
    2ca0:	a1 f6       	brne	.-88     	; 0x2c4a <convert_string_to_byte+0x38>
	        *value = *value* 10 + (str[i] - 48);
	    }
	}
	return ret;
    2ca2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2ca4:	26 96       	adiw	r28, 0x06	; 6
    2ca6:	0f b6       	in	r0, 0x3f	; 63
    2ca8:	f8 94       	cli
    2caa:	de bf       	out	0x3e, r29	; 62
    2cac:	0f be       	out	0x3f, r0	; 63
    2cae:	cd bf       	out	0x3d, r28	; 61
    2cb0:	cf 91       	pop	r28
    2cb2:	df 91       	pop	r29
    2cb4:	08 95       	ret

00002cb6 <convert_short_to_string>:


STD_ReturnStatus convert_short_to_string(uint16 value,uint8 *str)
{
    2cb6:	df 93       	push	r29
    2cb8:	cf 93       	push	r28
    2cba:	00 d0       	rcall	.+0      	; 0x2cbc <convert_short_to_string+0x6>
    2cbc:	00 d0       	rcall	.+0      	; 0x2cbe <convert_short_to_string+0x8>
    2cbe:	0f 92       	push	r0
    2cc0:	cd b7       	in	r28, 0x3d	; 61
    2cc2:	de b7       	in	r29, 0x3e	; 62
    2cc4:	9b 83       	std	Y+3, r25	; 0x03
    2cc6:	8a 83       	std	Y+2, r24	; 0x02
    2cc8:	7d 83       	std	Y+5, r23	; 0x05
    2cca:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_OK;
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	89 83       	std	Y+1, r24	; 0x01
	if(str==NULL)
    2cd0:	8c 81       	ldd	r24, Y+4	; 0x04
    2cd2:	9d 81       	ldd	r25, Y+5	; 0x05
    2cd4:	00 97       	sbiw	r24, 0x00	; 0
    2cd6:	11 f4       	brne	.+4      	; 0x2cdc <convert_short_to_string+0x26>
	{
		ret = E_NOT_OK;
    2cd8:	19 82       	std	Y+1, r1	; 0x01
    2cda:	24 c0       	rjmp	.+72     	; 0x2d24 <convert_short_to_string+0x6e>
	}
	else
	{
		memset(str,'\n',6);
    2cdc:	8c 81       	ldd	r24, Y+4	; 0x04
    2cde:	9d 81       	ldd	r25, Y+5	; 0x05
    2ce0:	6a e0       	ldi	r22, 0x0A	; 10
    2ce2:	70 e0       	ldi	r23, 0x00	; 0
    2ce4:	46 e0       	ldi	r20, 0x06	; 6
    2ce6:	50 e0       	ldi	r21, 0x00	; 0
    2ce8:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <memset>
		sprintf(str,"%i",value);
    2cec:	00 d0       	rcall	.+0      	; 0x2cee <convert_short_to_string+0x38>
    2cee:	00 d0       	rcall	.+0      	; 0x2cf0 <convert_short_to_string+0x3a>
    2cf0:	00 d0       	rcall	.+0      	; 0x2cf2 <convert_short_to_string+0x3c>
    2cf2:	ed b7       	in	r30, 0x3d	; 61
    2cf4:	fe b7       	in	r31, 0x3e	; 62
    2cf6:	31 96       	adiw	r30, 0x01	; 1
    2cf8:	8c 81       	ldd	r24, Y+4	; 0x04
    2cfa:	9d 81       	ldd	r25, Y+5	; 0x05
    2cfc:	91 83       	std	Z+1, r25	; 0x01
    2cfe:	80 83       	st	Z, r24
    2d00:	80 e6       	ldi	r24, 0x60	; 96
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	93 83       	std	Z+3, r25	; 0x03
    2d06:	82 83       	std	Z+2, r24	; 0x02
    2d08:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d0c:	95 83       	std	Z+5, r25	; 0x05
    2d0e:	84 83       	std	Z+4, r24	; 0x04
    2d10:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <sprintf>
    2d14:	8d b7       	in	r24, 0x3d	; 61
    2d16:	9e b7       	in	r25, 0x3e	; 62
    2d18:	06 96       	adiw	r24, 0x06	; 6
    2d1a:	0f b6       	in	r0, 0x3f	; 63
    2d1c:	f8 94       	cli
    2d1e:	9e bf       	out	0x3e, r25	; 62
    2d20:	0f be       	out	0x3f, r0	; 63
    2d22:	8d bf       	out	0x3d, r24	; 61
	}
	return ret;
    2d24:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d26:	0f 90       	pop	r0
    2d28:	0f 90       	pop	r0
    2d2a:	0f 90       	pop	r0
    2d2c:	0f 90       	pop	r0
    2d2e:	0f 90       	pop	r0
    2d30:	cf 91       	pop	r28
    2d32:	df 91       	pop	r29
    2d34:	08 95       	ret

00002d36 <convert_int_to_string>:
STD_ReturnStatus convert_int_to_string(uint32 value,uint8 *str)
{
    2d36:	df 93       	push	r29
    2d38:	cf 93       	push	r28
    2d3a:	00 d0       	rcall	.+0      	; 0x2d3c <convert_int_to_string+0x6>
    2d3c:	00 d0       	rcall	.+0      	; 0x2d3e <convert_int_to_string+0x8>
    2d3e:	0f 92       	push	r0
    2d40:	cd b7       	in	r28, 0x3d	; 61
    2d42:	de b7       	in	r29, 0x3e	; 62
    2d44:	9b 83       	std	Y+3, r25	; 0x03
    2d46:	8a 83       	std	Y+2, r24	; 0x02
    2d48:	7d 83       	std	Y+5, r23	; 0x05
    2d4a:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_OK;
    2d4c:	81 e0       	ldi	r24, 0x01	; 1
    2d4e:	89 83       	std	Y+1, r24	; 0x01
	if(str==NULL)
    2d50:	8c 81       	ldd	r24, Y+4	; 0x04
    2d52:	9d 81       	ldd	r25, Y+5	; 0x05
    2d54:	00 97       	sbiw	r24, 0x00	; 0
    2d56:	11 f4       	brne	.+4      	; 0x2d5c <convert_int_to_string+0x26>
	{
		ret = E_NOT_OK;
    2d58:	19 82       	std	Y+1, r1	; 0x01
    2d5a:	24 c0       	rjmp	.+72     	; 0x2da4 <convert_int_to_string+0x6e>
	}
	else
	{
		memset(str,'\n',11);
    2d5c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d5e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d60:	6a e0       	ldi	r22, 0x0A	; 10
    2d62:	70 e0       	ldi	r23, 0x00	; 0
    2d64:	4b e0       	ldi	r20, 0x0B	; 11
    2d66:	50 e0       	ldi	r21, 0x00	; 0
    2d68:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <memset>
		sprintf(str,"%i",value);
    2d6c:	00 d0       	rcall	.+0      	; 0x2d6e <convert_int_to_string+0x38>
    2d6e:	00 d0       	rcall	.+0      	; 0x2d70 <convert_int_to_string+0x3a>
    2d70:	00 d0       	rcall	.+0      	; 0x2d72 <convert_int_to_string+0x3c>
    2d72:	ed b7       	in	r30, 0x3d	; 61
    2d74:	fe b7       	in	r31, 0x3e	; 62
    2d76:	31 96       	adiw	r30, 0x01	; 1
    2d78:	8c 81       	ldd	r24, Y+4	; 0x04
    2d7a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d7c:	91 83       	std	Z+1, r25	; 0x01
    2d7e:	80 83       	st	Z, r24
    2d80:	80 e6       	ldi	r24, 0x60	; 96
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	93 83       	std	Z+3, r25	; 0x03
    2d86:	82 83       	std	Z+2, r24	; 0x02
    2d88:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d8c:	95 83       	std	Z+5, r25	; 0x05
    2d8e:	84 83       	std	Z+4, r24	; 0x04
    2d90:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <sprintf>
    2d94:	8d b7       	in	r24, 0x3d	; 61
    2d96:	9e b7       	in	r25, 0x3e	; 62
    2d98:	06 96       	adiw	r24, 0x06	; 6
    2d9a:	0f b6       	in	r0, 0x3f	; 63
    2d9c:	f8 94       	cli
    2d9e:	9e bf       	out	0x3e, r25	; 62
    2da0:	0f be       	out	0x3f, r0	; 63
    2da2:	8d bf       	out	0x3d, r24	; 61
	}
	return ret;
    2da4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2da6:	0f 90       	pop	r0
    2da8:	0f 90       	pop	r0
    2daa:	0f 90       	pop	r0
    2dac:	0f 90       	pop	r0
    2dae:	0f 90       	pop	r0
    2db0:	cf 91       	pop	r28
    2db2:	df 91       	pop	r29
    2db4:	08 95       	ret

00002db6 <lcd_send_4bits>:

static STD_ReturnStatus lcd_send_4bits(const chr_lcd_4bit_t *lcd,uint8 _data_command)
{
    2db6:	df 93       	push	r29
    2db8:	cf 93       	push	r28
    2dba:	00 d0       	rcall	.+0      	; 0x2dbc <lcd_send_4bits+0x6>
    2dbc:	00 d0       	rcall	.+0      	; 0x2dbe <lcd_send_4bits+0x8>
    2dbe:	cd b7       	in	r28, 0x3d	; 61
    2dc0:	de b7       	in	r29, 0x3e	; 62
    2dc2:	9b 83       	std	Y+3, r25	; 0x03
    2dc4:	8a 83       	std	Y+2, r24	; 0x02
    2dc6:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_OK;
    2dc8:	81 e0       	ldi	r24, 0x01	; 1
    2dca:	89 83       	std	Y+1, r24	; 0x01
	ret = gpio_pin_write_logic(&(lcd->lcd_data[0]), (_data_command >> 0) & (uint8)0x01);
    2dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dce:	9b 81       	ldd	r25, Y+3	; 0x03
    2dd0:	9c 01       	movw	r18, r24
    2dd2:	2e 5f       	subi	r18, 0xFE	; 254
    2dd4:	3f 4f       	sbci	r19, 0xFF	; 255
    2dd6:	8c 81       	ldd	r24, Y+4	; 0x04
    2dd8:	48 2f       	mov	r20, r24
    2dda:	41 70       	andi	r20, 0x01	; 1
    2ddc:	c9 01       	movw	r24, r18
    2dde:	64 2f       	mov	r22, r20
    2de0:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
    2de4:	89 83       	std	Y+1, r24	; 0x01
	ret = gpio_pin_write_logic(&(lcd->lcd_data[1]), (_data_command >> 1) & (uint8)0x01);
    2de6:	8a 81       	ldd	r24, Y+2	; 0x02
    2de8:	9b 81       	ldd	r25, Y+3	; 0x03
    2dea:	9c 01       	movw	r18, r24
    2dec:	2d 5f       	subi	r18, 0xFD	; 253
    2dee:	3f 4f       	sbci	r19, 0xFF	; 255
    2df0:	8c 81       	ldd	r24, Y+4	; 0x04
    2df2:	86 95       	lsr	r24
    2df4:	48 2f       	mov	r20, r24
    2df6:	41 70       	andi	r20, 0x01	; 1
    2df8:	c9 01       	movw	r24, r18
    2dfa:	64 2f       	mov	r22, r20
    2dfc:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
    2e00:	89 83       	std	Y+1, r24	; 0x01
	ret = gpio_pin_write_logic(&(lcd->lcd_data[2]), (_data_command >> 2) & (uint8)0x01);
    2e02:	8a 81       	ldd	r24, Y+2	; 0x02
    2e04:	9b 81       	ldd	r25, Y+3	; 0x03
    2e06:	9c 01       	movw	r18, r24
    2e08:	2c 5f       	subi	r18, 0xFC	; 252
    2e0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e0e:	86 95       	lsr	r24
    2e10:	86 95       	lsr	r24
    2e12:	48 2f       	mov	r20, r24
    2e14:	41 70       	andi	r20, 0x01	; 1
    2e16:	c9 01       	movw	r24, r18
    2e18:	64 2f       	mov	r22, r20
    2e1a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
    2e1e:	89 83       	std	Y+1, r24	; 0x01
	ret = gpio_pin_write_logic(&(lcd->lcd_data[3]), (_data_command >> 3) & (uint8)0x01);
    2e20:	8a 81       	ldd	r24, Y+2	; 0x02
    2e22:	9b 81       	ldd	r25, Y+3	; 0x03
    2e24:	9c 01       	movw	r18, r24
    2e26:	2b 5f       	subi	r18, 0xFB	; 251
    2e28:	3f 4f       	sbci	r19, 0xFF	; 255
    2e2a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e2c:	86 95       	lsr	r24
    2e2e:	86 95       	lsr	r24
    2e30:	86 95       	lsr	r24
    2e32:	48 2f       	mov	r20, r24
    2e34:	41 70       	andi	r20, 0x01	; 1
    2e36:	c9 01       	movw	r24, r18
    2e38:	64 2f       	mov	r22, r20
    2e3a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
    2e3e:	89 83       	std	Y+1, r24	; 0x01
	return ret;
    2e40:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e42:	0f 90       	pop	r0
    2e44:	0f 90       	pop	r0
    2e46:	0f 90       	pop	r0
    2e48:	0f 90       	pop	r0
    2e4a:	cf 91       	pop	r28
    2e4c:	df 91       	pop	r29
    2e4e:	08 95       	ret

00002e50 <lcd_4bit_send_enable>:

static STD_ReturnStatus lcd_4bit_send_enable(const chr_lcd_4bit_t *lcd)
{
    2e50:	df 93       	push	r29
    2e52:	cf 93       	push	r28
    2e54:	cd b7       	in	r28, 0x3d	; 61
    2e56:	de b7       	in	r29, 0x3e	; 62
    2e58:	61 97       	sbiw	r28, 0x11	; 17
    2e5a:	0f b6       	in	r0, 0x3f	; 63
    2e5c:	f8 94       	cli
    2e5e:	de bf       	out	0x3e, r29	; 62
    2e60:	0f be       	out	0x3f, r0	; 63
    2e62:	cd bf       	out	0x3d, r28	; 61
    2e64:	99 8b       	std	Y+17, r25	; 0x11
    2e66:	88 8b       	std	Y+16, r24	; 0x10
	STD_ReturnStatus ret = E_OK;
    2e68:	81 e0       	ldi	r24, 0x01	; 1
    2e6a:	8f 87       	std	Y+15, r24	; 0x0f
	ret = gpio_pin_write_logic(&(lcd->lcd_en),GPIO_HIGH);
    2e6c:	88 89       	ldd	r24, Y+16	; 0x10
    2e6e:	99 89       	ldd	r25, Y+17	; 0x11
    2e70:	01 96       	adiw	r24, 0x01	; 1
    2e72:	61 e0       	ldi	r22, 0x01	; 1
    2e74:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
    2e78:	8f 87       	std	Y+15, r24	; 0x0f
    2e7a:	80 e0       	ldi	r24, 0x00	; 0
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	a0 ea       	ldi	r26, 0xA0	; 160
    2e80:	b0 e4       	ldi	r27, 0x40	; 64
    2e82:	8b 87       	std	Y+11, r24	; 0x0b
    2e84:	9c 87       	std	Y+12, r25	; 0x0c
    2e86:	ad 87       	std	Y+13, r26	; 0x0d
    2e88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e90:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	4a ef       	ldi	r20, 0xFA	; 250
    2e98:	54 e4       	ldi	r21, 0x44	; 68
    2e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	8f 83       	std	Y+7, r24	; 0x07
    2ea4:	98 87       	std	Y+8, r25	; 0x08
    2ea6:	a9 87       	std	Y+9, r26	; 0x09
    2ea8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eaa:	6f 81       	ldd	r22, Y+7	; 0x07
    2eac:	78 85       	ldd	r23, Y+8	; 0x08
    2eae:	89 85       	ldd	r24, Y+9	; 0x09
    2eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb2:	20 e0       	ldi	r18, 0x00	; 0
    2eb4:	30 e0       	ldi	r19, 0x00	; 0
    2eb6:	40 e8       	ldi	r20, 0x80	; 128
    2eb8:	5f e3       	ldi	r21, 0x3F	; 63
    2eba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ebe:	88 23       	and	r24, r24
    2ec0:	2c f4       	brge	.+10     	; 0x2ecc <lcd_4bit_send_enable+0x7c>
		__ticks = 1;
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	9e 83       	std	Y+6, r25	; 0x06
    2ec8:	8d 83       	std	Y+5, r24	; 0x05
    2eca:	3f c0       	rjmp	.+126    	; 0x2f4a <lcd_4bit_send_enable+0xfa>
	else if (__tmp > 65535)
    2ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ece:	78 85       	ldd	r23, Y+8	; 0x08
    2ed0:	89 85       	ldd	r24, Y+9	; 0x09
    2ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	3f ef       	ldi	r19, 0xFF	; 255
    2ed8:	4f e7       	ldi	r20, 0x7F	; 127
    2eda:	57 e4       	ldi	r21, 0x47	; 71
    2edc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ee0:	18 16       	cp	r1, r24
    2ee2:	4c f5       	brge	.+82     	; 0x2f36 <lcd_4bit_send_enable+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ee4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ee6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ee8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	40 e2       	ldi	r20, 0x20	; 32
    2ef2:	51 e4       	ldi	r21, 0x41	; 65
    2ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	bc 01       	movw	r22, r24
    2efe:	cd 01       	movw	r24, r26
    2f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f04:	dc 01       	movw	r26, r24
    2f06:	cb 01       	movw	r24, r22
    2f08:	9e 83       	std	Y+6, r25	; 0x06
    2f0a:	8d 83       	std	Y+5, r24	; 0x05
    2f0c:	0f c0       	rjmp	.+30     	; 0x2f2c <lcd_4bit_send_enable+0xdc>
    2f0e:	88 ec       	ldi	r24, 0xC8	; 200
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	9c 83       	std	Y+4, r25	; 0x04
    2f14:	8b 83       	std	Y+3, r24	; 0x03
    2f16:	8b 81       	ldd	r24, Y+3	; 0x03
    2f18:	9c 81       	ldd	r25, Y+4	; 0x04
    2f1a:	01 97       	sbiw	r24, 0x01	; 1
    2f1c:	f1 f7       	brne	.-4      	; 0x2f1a <lcd_4bit_send_enable+0xca>
    2f1e:	9c 83       	std	Y+4, r25	; 0x04
    2f20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f22:	8d 81       	ldd	r24, Y+5	; 0x05
    2f24:	9e 81       	ldd	r25, Y+6	; 0x06
    2f26:	01 97       	sbiw	r24, 0x01	; 1
    2f28:	9e 83       	std	Y+6, r25	; 0x06
    2f2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f30:	00 97       	sbiw	r24, 0x00	; 0
    2f32:	69 f7       	brne	.-38     	; 0x2f0e <lcd_4bit_send_enable+0xbe>
    2f34:	14 c0       	rjmp	.+40     	; 0x2f5e <lcd_4bit_send_enable+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f36:	6f 81       	ldd	r22, Y+7	; 0x07
    2f38:	78 85       	ldd	r23, Y+8	; 0x08
    2f3a:	89 85       	ldd	r24, Y+9	; 0x09
    2f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f42:	dc 01       	movw	r26, r24
    2f44:	cb 01       	movw	r24, r22
    2f46:	9e 83       	std	Y+6, r25	; 0x06
    2f48:	8d 83       	std	Y+5, r24	; 0x05
    2f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f4e:	9a 83       	std	Y+2, r25	; 0x02
    2f50:	89 83       	std	Y+1, r24	; 0x01
    2f52:	89 81       	ldd	r24, Y+1	; 0x01
    2f54:	9a 81       	ldd	r25, Y+2	; 0x02
    2f56:	01 97       	sbiw	r24, 0x01	; 1
    2f58:	f1 f7       	brne	.-4      	; 0x2f56 <lcd_4bit_send_enable+0x106>
    2f5a:	9a 83       	std	Y+2, r25	; 0x02
    2f5c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	ret = gpio_pin_write_logic(&(lcd->lcd_en),GPIO_LOW);
    2f5e:	88 89       	ldd	r24, Y+16	; 0x10
    2f60:	99 89       	ldd	r25, Y+17	; 0x11
    2f62:	01 96       	adiw	r24, 0x01	; 1
    2f64:	60 e0       	ldi	r22, 0x00	; 0
    2f66:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
    2f6a:	8f 87       	std	Y+15, r24	; 0x0f
	return ret;
    2f6c:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2f6e:	61 96       	adiw	r28, 0x11	; 17
    2f70:	0f b6       	in	r0, 0x3f	; 63
    2f72:	f8 94       	cli
    2f74:	de bf       	out	0x3e, r29	; 62
    2f76:	0f be       	out	0x3f, r0	; 63
    2f78:	cd bf       	out	0x3d, r28	; 61
    2f7a:	cf 91       	pop	r28
    2f7c:	df 91       	pop	r29
    2f7e:	08 95       	ret

00002f80 <lcd_8bit_send_enable>:


static STD_ReturnStatus lcd_8bit_send_enable(const chr_lcd_8bit_t *lcd)
{
    2f80:	df 93       	push	r29
    2f82:	cf 93       	push	r28
    2f84:	cd b7       	in	r28, 0x3d	; 61
    2f86:	de b7       	in	r29, 0x3e	; 62
    2f88:	61 97       	sbiw	r28, 0x11	; 17
    2f8a:	0f b6       	in	r0, 0x3f	; 63
    2f8c:	f8 94       	cli
    2f8e:	de bf       	out	0x3e, r29	; 62
    2f90:	0f be       	out	0x3f, r0	; 63
    2f92:	cd bf       	out	0x3d, r28	; 61
    2f94:	99 8b       	std	Y+17, r25	; 0x11
    2f96:	88 8b       	std	Y+16, r24	; 0x10
	STD_ReturnStatus ret = E_OK;
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	8f 87       	std	Y+15, r24	; 0x0f
	ret = gpio_pin_write_logic(&(lcd->lcd_en),GPIO_HIGH);
    2f9c:	88 89       	ldd	r24, Y+16	; 0x10
    2f9e:	99 89       	ldd	r25, Y+17	; 0x11
    2fa0:	01 96       	adiw	r24, 0x01	; 1
    2fa2:	61 e0       	ldi	r22, 0x01	; 1
    2fa4:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
    2fa8:	8f 87       	std	Y+15, r24	; 0x0f
    2faa:	80 e0       	ldi	r24, 0x00	; 0
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	a0 ea       	ldi	r26, 0xA0	; 160
    2fb0:	b0 e4       	ldi	r27, 0x40	; 64
    2fb2:	8b 87       	std	Y+11, r24	; 0x0b
    2fb4:	9c 87       	std	Y+12, r25	; 0x0c
    2fb6:	ad 87       	std	Y+13, r26	; 0x0d
    2fb8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fba:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fc2:	20 e0       	ldi	r18, 0x00	; 0
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	4a ef       	ldi	r20, 0xFA	; 250
    2fc8:	54 e4       	ldi	r21, 0x44	; 68
    2fca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	8f 83       	std	Y+7, r24	; 0x07
    2fd4:	98 87       	std	Y+8, r25	; 0x08
    2fd6:	a9 87       	std	Y+9, r26	; 0x09
    2fd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fda:	6f 81       	ldd	r22, Y+7	; 0x07
    2fdc:	78 85       	ldd	r23, Y+8	; 0x08
    2fde:	89 85       	ldd	r24, Y+9	; 0x09
    2fe0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	40 e8       	ldi	r20, 0x80	; 128
    2fe8:	5f e3       	ldi	r21, 0x3F	; 63
    2fea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fee:	88 23       	and	r24, r24
    2ff0:	2c f4       	brge	.+10     	; 0x2ffc <lcd_8bit_send_enable+0x7c>
		__ticks = 1;
    2ff2:	81 e0       	ldi	r24, 0x01	; 1
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	9e 83       	std	Y+6, r25	; 0x06
    2ff8:	8d 83       	std	Y+5, r24	; 0x05
    2ffa:	3f c0       	rjmp	.+126    	; 0x307a <lcd_8bit_send_enable+0xfa>
	else if (__tmp > 65535)
    2ffc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ffe:	78 85       	ldd	r23, Y+8	; 0x08
    3000:	89 85       	ldd	r24, Y+9	; 0x09
    3002:	9a 85       	ldd	r25, Y+10	; 0x0a
    3004:	20 e0       	ldi	r18, 0x00	; 0
    3006:	3f ef       	ldi	r19, 0xFF	; 255
    3008:	4f e7       	ldi	r20, 0x7F	; 127
    300a:	57 e4       	ldi	r21, 0x47	; 71
    300c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3010:	18 16       	cp	r1, r24
    3012:	4c f5       	brge	.+82     	; 0x3066 <lcd_8bit_send_enable+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3014:	6b 85       	ldd	r22, Y+11	; 0x0b
    3016:	7c 85       	ldd	r23, Y+12	; 0x0c
    3018:	8d 85       	ldd	r24, Y+13	; 0x0d
    301a:	9e 85       	ldd	r25, Y+14	; 0x0e
    301c:	20 e0       	ldi	r18, 0x00	; 0
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	40 e2       	ldi	r20, 0x20	; 32
    3022:	51 e4       	ldi	r21, 0x41	; 65
    3024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3028:	dc 01       	movw	r26, r24
    302a:	cb 01       	movw	r24, r22
    302c:	bc 01       	movw	r22, r24
    302e:	cd 01       	movw	r24, r26
    3030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3034:	dc 01       	movw	r26, r24
    3036:	cb 01       	movw	r24, r22
    3038:	9e 83       	std	Y+6, r25	; 0x06
    303a:	8d 83       	std	Y+5, r24	; 0x05
    303c:	0f c0       	rjmp	.+30     	; 0x305c <lcd_8bit_send_enable+0xdc>
    303e:	88 ec       	ldi	r24, 0xC8	; 200
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	9c 83       	std	Y+4, r25	; 0x04
    3044:	8b 83       	std	Y+3, r24	; 0x03
    3046:	8b 81       	ldd	r24, Y+3	; 0x03
    3048:	9c 81       	ldd	r25, Y+4	; 0x04
    304a:	01 97       	sbiw	r24, 0x01	; 1
    304c:	f1 f7       	brne	.-4      	; 0x304a <lcd_8bit_send_enable+0xca>
    304e:	9c 83       	std	Y+4, r25	; 0x04
    3050:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3052:	8d 81       	ldd	r24, Y+5	; 0x05
    3054:	9e 81       	ldd	r25, Y+6	; 0x06
    3056:	01 97       	sbiw	r24, 0x01	; 1
    3058:	9e 83       	std	Y+6, r25	; 0x06
    305a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    305c:	8d 81       	ldd	r24, Y+5	; 0x05
    305e:	9e 81       	ldd	r25, Y+6	; 0x06
    3060:	00 97       	sbiw	r24, 0x00	; 0
    3062:	69 f7       	brne	.-38     	; 0x303e <lcd_8bit_send_enable+0xbe>
    3064:	14 c0       	rjmp	.+40     	; 0x308e <lcd_8bit_send_enable+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3066:	6f 81       	ldd	r22, Y+7	; 0x07
    3068:	78 85       	ldd	r23, Y+8	; 0x08
    306a:	89 85       	ldd	r24, Y+9	; 0x09
    306c:	9a 85       	ldd	r25, Y+10	; 0x0a
    306e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3072:	dc 01       	movw	r26, r24
    3074:	cb 01       	movw	r24, r22
    3076:	9e 83       	std	Y+6, r25	; 0x06
    3078:	8d 83       	std	Y+5, r24	; 0x05
    307a:	8d 81       	ldd	r24, Y+5	; 0x05
    307c:	9e 81       	ldd	r25, Y+6	; 0x06
    307e:	9a 83       	std	Y+2, r25	; 0x02
    3080:	89 83       	std	Y+1, r24	; 0x01
    3082:	89 81       	ldd	r24, Y+1	; 0x01
    3084:	9a 81       	ldd	r25, Y+2	; 0x02
    3086:	01 97       	sbiw	r24, 0x01	; 1
    3088:	f1 f7       	brne	.-4      	; 0x3086 <lcd_8bit_send_enable+0x106>
    308a:	9a 83       	std	Y+2, r25	; 0x02
    308c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	ret = gpio_pin_write_logic(&(lcd->lcd_en),GPIO_LOW);
    308e:	88 89       	ldd	r24, Y+16	; 0x10
    3090:	99 89       	ldd	r25, Y+17	; 0x11
    3092:	01 96       	adiw	r24, 0x01	; 1
    3094:	60 e0       	ldi	r22, 0x00	; 0
    3096:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
    309a:	8f 87       	std	Y+15, r24	; 0x0f
	return ret;
    309c:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    309e:	61 96       	adiw	r28, 0x11	; 17
    30a0:	0f b6       	in	r0, 0x3f	; 63
    30a2:	f8 94       	cli
    30a4:	de bf       	out	0x3e, r29	; 62
    30a6:	0f be       	out	0x3f, r0	; 63
    30a8:	cd bf       	out	0x3d, r28	; 61
    30aa:	cf 91       	pop	r28
    30ac:	df 91       	pop	r29
    30ae:	08 95       	ret

000030b0 <lcd_8bit_set_cursor>:

static STD_ReturnStatus lcd_8bit_set_cursor(const chr_lcd_8bit_t *lcd,uint8 row,uint8 column)
{
    30b0:	df 93       	push	r29
    30b2:	cf 93       	push	r28
    30b4:	cd b7       	in	r28, 0x3d	; 61
    30b6:	de b7       	in	r29, 0x3e	; 62
    30b8:	27 97       	sbiw	r28, 0x07	; 7
    30ba:	0f b6       	in	r0, 0x3f	; 63
    30bc:	f8 94       	cli
    30be:	de bf       	out	0x3e, r29	; 62
    30c0:	0f be       	out	0x3f, r0	; 63
    30c2:	cd bf       	out	0x3d, r28	; 61
    30c4:	9b 83       	std	Y+3, r25	; 0x03
    30c6:	8a 83       	std	Y+2, r24	; 0x02
    30c8:	6c 83       	std	Y+4, r22	; 0x04
    30ca:	4d 83       	std	Y+5, r20	; 0x05
	STD_ReturnStatus ret = E_OK;
    30cc:	81 e0       	ldi	r24, 0x01	; 1
    30ce:	89 83       	std	Y+1, r24	; 0x01
	column--;
    30d0:	8d 81       	ldd	r24, Y+5	; 0x05
    30d2:	81 50       	subi	r24, 0x01	; 1
    30d4:	8d 83       	std	Y+5, r24	; 0x05
	switch(row)
    30d6:	8c 81       	ldd	r24, Y+4	; 0x04
    30d8:	28 2f       	mov	r18, r24
    30da:	30 e0       	ldi	r19, 0x00	; 0
    30dc:	3f 83       	std	Y+7, r19	; 0x07
    30de:	2e 83       	std	Y+6, r18	; 0x06
    30e0:	8e 81       	ldd	r24, Y+6	; 0x06
    30e2:	9f 81       	ldd	r25, Y+7	; 0x07
    30e4:	81 30       	cpi	r24, 0x01	; 1
    30e6:	91 05       	cpc	r25, r1
    30e8:	31 f0       	breq	.+12     	; 0x30f6 <lcd_8bit_set_cursor+0x46>
    30ea:	2e 81       	ldd	r18, Y+6	; 0x06
    30ec:	3f 81       	ldd	r19, Y+7	; 0x07
    30ee:	22 30       	cpi	r18, 0x02	; 2
    30f0:	31 05       	cpc	r19, r1
    30f2:	59 f0       	breq	.+22     	; 0x310a <lcd_8bit_set_cursor+0x5a>
    30f4:	13 c0       	rjmp	.+38     	; 0x311c <lcd_8bit_set_cursor+0x6c>
	{
	case ROW1 : ret = lcd_8bit_send_command(lcd,0x80+column);break;
    30f6:	8d 81       	ldd	r24, Y+5	; 0x05
    30f8:	28 2f       	mov	r18, r24
    30fa:	20 58       	subi	r18, 0x80	; 128
    30fc:	8a 81       	ldd	r24, Y+2	; 0x02
    30fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3100:	62 2f       	mov	r22, r18
    3102:	0e 94 3b 14 	call	0x2876	; 0x2876 <lcd_8bit_send_command>
    3106:	89 83       	std	Y+1, r24	; 0x01
    3108:	09 c0       	rjmp	.+18     	; 0x311c <lcd_8bit_set_cursor+0x6c>
	case ROW2 : ret = lcd_8bit_send_command(lcd,0xC0+column);break;
    310a:	8d 81       	ldd	r24, Y+5	; 0x05
    310c:	28 2f       	mov	r18, r24
    310e:	20 54       	subi	r18, 0x40	; 64
    3110:	8a 81       	ldd	r24, Y+2	; 0x02
    3112:	9b 81       	ldd	r25, Y+3	; 0x03
    3114:	62 2f       	mov	r22, r18
    3116:	0e 94 3b 14 	call	0x2876	; 0x2876 <lcd_8bit_send_command>
    311a:	89 83       	std	Y+1, r24	; 0x01
	default : ;
	}
	return ret;
    311c:	89 81       	ldd	r24, Y+1	; 0x01
}
    311e:	27 96       	adiw	r28, 0x07	; 7
    3120:	0f b6       	in	r0, 0x3f	; 63
    3122:	f8 94       	cli
    3124:	de bf       	out	0x3e, r29	; 62
    3126:	0f be       	out	0x3f, r0	; 63
    3128:	cd bf       	out	0x3d, r28	; 61
    312a:	cf 91       	pop	r28
    312c:	df 91       	pop	r29
    312e:	08 95       	ret

00003130 <lcd_4bit_set_cursor>:
static STD_ReturnStatus lcd_4bit_set_cursor(const chr_lcd_4bit_t *lcd,uint8 row,uint8 column)
{
    3130:	df 93       	push	r29
    3132:	cf 93       	push	r28
    3134:	cd b7       	in	r28, 0x3d	; 61
    3136:	de b7       	in	r29, 0x3e	; 62
    3138:	27 97       	sbiw	r28, 0x07	; 7
    313a:	0f b6       	in	r0, 0x3f	; 63
    313c:	f8 94       	cli
    313e:	de bf       	out	0x3e, r29	; 62
    3140:	0f be       	out	0x3f, r0	; 63
    3142:	cd bf       	out	0x3d, r28	; 61
    3144:	9b 83       	std	Y+3, r25	; 0x03
    3146:	8a 83       	std	Y+2, r24	; 0x02
    3148:	6c 83       	std	Y+4, r22	; 0x04
    314a:	4d 83       	std	Y+5, r20	; 0x05
	STD_ReturnStatus ret = E_OK;
    314c:	81 e0       	ldi	r24, 0x01	; 1
    314e:	89 83       	std	Y+1, r24	; 0x01
	column--;
    3150:	8d 81       	ldd	r24, Y+5	; 0x05
    3152:	81 50       	subi	r24, 0x01	; 1
    3154:	8d 83       	std	Y+5, r24	; 0x05
	switch(row)
    3156:	8c 81       	ldd	r24, Y+4	; 0x04
    3158:	28 2f       	mov	r18, r24
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	3f 83       	std	Y+7, r19	; 0x07
    315e:	2e 83       	std	Y+6, r18	; 0x06
    3160:	8e 81       	ldd	r24, Y+6	; 0x06
    3162:	9f 81       	ldd	r25, Y+7	; 0x07
    3164:	81 30       	cpi	r24, 0x01	; 1
    3166:	91 05       	cpc	r25, r1
    3168:	31 f0       	breq	.+12     	; 0x3176 <lcd_4bit_set_cursor+0x46>
    316a:	2e 81       	ldd	r18, Y+6	; 0x06
    316c:	3f 81       	ldd	r19, Y+7	; 0x07
    316e:	22 30       	cpi	r18, 0x02	; 2
    3170:	31 05       	cpc	r19, r1
    3172:	59 f0       	breq	.+22     	; 0x318a <lcd_4bit_set_cursor+0x5a>
    3174:	13 c0       	rjmp	.+38     	; 0x319c <lcd_4bit_set_cursor+0x6c>
	{
	case ROW1 : ret = lcd_4bit_send_command(lcd,0x80+column);break;
    3176:	8d 81       	ldd	r24, Y+5	; 0x05
    3178:	28 2f       	mov	r18, r24
    317a:	20 58       	subi	r18, 0x80	; 128
    317c:	8a 81       	ldd	r24, Y+2	; 0x02
    317e:	9b 81       	ldd	r25, Y+3	; 0x03
    3180:	62 2f       	mov	r22, r18
    3182:	0e 94 4e 10 	call	0x209c	; 0x209c <lcd_4bit_send_command>
    3186:	89 83       	std	Y+1, r24	; 0x01
    3188:	09 c0       	rjmp	.+18     	; 0x319c <lcd_4bit_set_cursor+0x6c>
	case ROW2 : ret = lcd_4bit_send_command(lcd,0xC0+column);break;
    318a:	8d 81       	ldd	r24, Y+5	; 0x05
    318c:	28 2f       	mov	r18, r24
    318e:	20 54       	subi	r18, 0x40	; 64
    3190:	8a 81       	ldd	r24, Y+2	; 0x02
    3192:	9b 81       	ldd	r25, Y+3	; 0x03
    3194:	62 2f       	mov	r22, r18
    3196:	0e 94 4e 10 	call	0x209c	; 0x209c <lcd_4bit_send_command>
    319a:	89 83       	std	Y+1, r24	; 0x01
	default : ;
	}
	return ret;
    319c:	89 81       	ldd	r24, Y+1	; 0x01
}
    319e:	27 96       	adiw	r28, 0x07	; 7
    31a0:	0f b6       	in	r0, 0x3f	; 63
    31a2:	f8 94       	cli
    31a4:	de bf       	out	0x3e, r29	; 62
    31a6:	0f be       	out	0x3f, r0	; 63
    31a8:	cd bf       	out	0x3d, r28	; 61
    31aa:	cf 91       	pop	r28
    31ac:	df 91       	pop	r29
    31ae:	08 95       	ret

000031b0 <keypad_initialize>:
 *
 * @param _keypad_obj
 * @return
 */
STD_ReturnStatus keypad_initialize(const keypad_t *_keypad_obj)
{
    31b0:	df 93       	push	r29
    31b2:	cf 93       	push	r28
    31b4:	00 d0       	rcall	.+0      	; 0x31b6 <keypad_initialize+0x6>
    31b6:	00 d0       	rcall	.+0      	; 0x31b8 <keypad_initialize+0x8>
    31b8:	0f 92       	push	r0
    31ba:	cd b7       	in	r28, 0x3d	; 61
    31bc:	de b7       	in	r29, 0x3e	; 62
    31be:	9d 83       	std	Y+5, r25	; 0x05
    31c0:	8c 83       	std	Y+4, r24	; 0x04
	STD_ReturnStatus ret = E_OK;
    31c2:	81 e0       	ldi	r24, 0x01	; 1
    31c4:	8b 83       	std	Y+3, r24	; 0x03
	uint8 rows_counter=ZERO_INIT,columns_counter=ZERO_INIT;
    31c6:	1a 82       	std	Y+2, r1	; 0x02
    31c8:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==_keypad_obj)
    31ca:	8c 81       	ldd	r24, Y+4	; 0x04
    31cc:	9d 81       	ldd	r25, Y+5	; 0x05
    31ce:	00 97       	sbiw	r24, 0x00	; 0
    31d0:	11 f4       	brne	.+4      	; 0x31d6 <keypad_initialize+0x26>
	{
		ret = E_NOT_OK;
    31d2:	1b 82       	std	Y+3, r1	; 0x03
    31d4:	27 c0       	rjmp	.+78     	; 0x3224 <keypad_initialize+0x74>
	}
	else
	{
		for(rows_counter=ZERO_INIT;rows_counter<ECU_KEYPAD_ROWS;rows_counter++)
    31d6:	1a 82       	std	Y+2, r1	; 0x02
    31d8:	0d c0       	rjmp	.+26     	; 0x31f4 <keypad_initialize+0x44>
		{
			ret = gpio_pin_initialize(&(_keypad_obj->keypad_row_pins[rows_counter]));
    31da:	2c 81       	ldd	r18, Y+4	; 0x04
    31dc:	3d 81       	ldd	r19, Y+5	; 0x05
    31de:	8a 81       	ldd	r24, Y+2	; 0x02
    31e0:	88 2f       	mov	r24, r24
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	82 0f       	add	r24, r18
    31e6:	93 1f       	adc	r25, r19
    31e8:	0e 94 29 0b 	call	0x1652	; 0x1652 <gpio_pin_initialize>
    31ec:	8b 83       	std	Y+3, r24	; 0x03
	{
		ret = E_NOT_OK;
	}
	else
	{
		for(rows_counter=ZERO_INIT;rows_counter<ECU_KEYPAD_ROWS;rows_counter++)
    31ee:	8a 81       	ldd	r24, Y+2	; 0x02
    31f0:	8f 5f       	subi	r24, 0xFF	; 255
    31f2:	8a 83       	std	Y+2, r24	; 0x02
    31f4:	8a 81       	ldd	r24, Y+2	; 0x02
    31f6:	84 30       	cpi	r24, 0x04	; 4
    31f8:	80 f3       	brcs	.-32     	; 0x31da <keypad_initialize+0x2a>
		{
			ret = gpio_pin_initialize(&(_keypad_obj->keypad_row_pins[rows_counter]));
		}

		for(columns_counter=ZERO_INIT;columns_counter<ECU_KEYPAD_COLUMNS;columns_counter++)
    31fa:	19 82       	std	Y+1, r1	; 0x01
    31fc:	10 c0       	rjmp	.+32     	; 0x321e <keypad_initialize+0x6e>
		{
			ret = gpio_pin_direction_initialize(&(_keypad_obj->keypad_columns_pins[columns_counter]));
    31fe:	8c 81       	ldd	r24, Y+4	; 0x04
    3200:	9d 81       	ldd	r25, Y+5	; 0x05
    3202:	9c 01       	movw	r18, r24
    3204:	2c 5f       	subi	r18, 0xFC	; 252
    3206:	3f 4f       	sbci	r19, 0xFF	; 255
    3208:	89 81       	ldd	r24, Y+1	; 0x01
    320a:	88 2f       	mov	r24, r24
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	82 0f       	add	r24, r18
    3210:	93 1f       	adc	r25, r19
    3212:	0e 94 07 09 	call	0x120e	; 0x120e <gpio_pin_direction_initialize>
    3216:	8b 83       	std	Y+3, r24	; 0x03
		for(rows_counter=ZERO_INIT;rows_counter<ECU_KEYPAD_ROWS;rows_counter++)
		{
			ret = gpio_pin_initialize(&(_keypad_obj->keypad_row_pins[rows_counter]));
		}

		for(columns_counter=ZERO_INIT;columns_counter<ECU_KEYPAD_COLUMNS;columns_counter++)
    3218:	89 81       	ldd	r24, Y+1	; 0x01
    321a:	8f 5f       	subi	r24, 0xFF	; 255
    321c:	89 83       	std	Y+1, r24	; 0x01
    321e:	89 81       	ldd	r24, Y+1	; 0x01
    3220:	84 30       	cpi	r24, 0x04	; 4
    3222:	68 f3       	brcs	.-38     	; 0x31fe <keypad_initialize+0x4e>
		{
			ret = gpio_pin_direction_initialize(&(_keypad_obj->keypad_columns_pins[columns_counter]));
		}
	}
	return ret;
    3224:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3226:	0f 90       	pop	r0
    3228:	0f 90       	pop	r0
    322a:	0f 90       	pop	r0
    322c:	0f 90       	pop	r0
    322e:	0f 90       	pop	r0
    3230:	cf 91       	pop	r28
    3232:	df 91       	pop	r29
    3234:	08 95       	ret

00003236 <keypad_get_value>:
 * @param _keypad_obj
 * @param value
 * @return
 */
STD_ReturnStatus keypad_get_value(const keypad_t *_keypad_obj,uint8 *value,uint8 *Key_pressed)
{
    3236:	df 93       	push	r29
    3238:	cf 93       	push	r28
    323a:	cd b7       	in	r28, 0x3d	; 61
    323c:	de b7       	in	r29, 0x3e	; 62
    323e:	69 97       	sbiw	r28, 0x19	; 25
    3240:	0f b6       	in	r0, 0x3f	; 63
    3242:	f8 94       	cli
    3244:	de bf       	out	0x3e, r29	; 62
    3246:	0f be       	out	0x3f, r0	; 63
    3248:	cd bf       	out	0x3d, r28	; 61
    324a:	9d 8b       	std	Y+21, r25	; 0x15
    324c:	8c 8b       	std	Y+20, r24	; 0x14
    324e:	7f 8b       	std	Y+23, r23	; 0x17
    3250:	6e 8b       	std	Y+22, r22	; 0x16
    3252:	59 8f       	std	Y+25, r21	; 0x19
    3254:	48 8f       	std	Y+24, r20	; 0x18
	STD_ReturnStatus ret = E_NOT_OK;
    3256:	1a 8a       	std	Y+18, r1	; 0x12
	*Key_pressed=KEY_NOT_PRESSED;
    3258:	e8 8d       	ldd	r30, Y+24	; 0x18
    325a:	f9 8d       	ldd	r31, Y+25	; 0x19
    325c:	10 82       	st	Z, r1
	uint8 l_rows_counter=ZERO_INIT,l_columns_counter=ZERO_INIT,l_counter=ZERO_INIT;
    325e:	19 8a       	std	Y+17, r1	; 0x11
    3260:	18 8a       	std	Y+16, r1	; 0x10
    3262:	1f 86       	std	Y+15, r1	; 0x0f
	uint8 column_logic=ZERO_INIT;
    3264:	1b 8a       	std	Y+19, r1	; 0x13
	if((NULL==_keypad_obj)||(NULL==value))
    3266:	8c 89       	ldd	r24, Y+20	; 0x14
    3268:	9d 89       	ldd	r25, Y+21	; 0x15
    326a:	00 97       	sbiw	r24, 0x00	; 0
    326c:	21 f0       	breq	.+8      	; 0x3276 <keypad_get_value+0x40>
    326e:	8e 89       	ldd	r24, Y+22	; 0x16
    3270:	9f 89       	ldd	r25, Y+23	; 0x17
    3272:	00 97       	sbiw	r24, 0x00	; 0
    3274:	11 f4       	brne	.+4      	; 0x327a <keypad_get_value+0x44>
	{
		ret = E_NOT_OK;
    3276:	1a 8a       	std	Y+18, r1	; 0x12
    3278:	cf c0       	rjmp	.+414    	; 0x3418 <keypad_get_value+0x1e2>
	}
	else
	{
		for(l_rows_counter=ZERO_INIT;l_rows_counter<ECU_KEYPAD_ROWS;l_rows_counter++)
    327a:	19 8a       	std	Y+17, r1	; 0x11
    327c:	c7 c0       	rjmp	.+398    	; 0x340c <keypad_get_value+0x1d6>
		{
			//3ayzen nekhaly kol el rows 3aleha zero volt ela awel wahd bas 3shan ne-check 3aleh
			//fa el awel hankhaly kol el kolo zero ba3daha nekhaly 5volt 3ala R1 w hakaza
			for(l_counter=ZERO_INIT;l_counter<ECU_KEYPAD_ROWS;l_counter++){
    327e:	1f 86       	std	Y+15, r1	; 0x0f
    3280:	0e c0       	rjmp	.+28     	; 0x329e <keypad_get_value+0x68>
						ret = gpio_pin_write_logic(&(_keypad_obj->keypad_row_pins[l_counter]),GPIO_LOW);
    3282:	2c 89       	ldd	r18, Y+20	; 0x14
    3284:	3d 89       	ldd	r19, Y+21	; 0x15
    3286:	8f 85       	ldd	r24, Y+15	; 0x0f
    3288:	88 2f       	mov	r24, r24
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	82 0f       	add	r24, r18
    328e:	93 1f       	adc	r25, r19
    3290:	60 e0       	ldi	r22, 0x00	; 0
    3292:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
    3296:	8a 8b       	std	Y+18, r24	; 0x12
	{
		for(l_rows_counter=ZERO_INIT;l_rows_counter<ECU_KEYPAD_ROWS;l_rows_counter++)
		{
			//3ayzen nekhaly kol el rows 3aleha zero volt ela awel wahd bas 3shan ne-check 3aleh
			//fa el awel hankhaly kol el kolo zero ba3daha nekhaly 5volt 3ala R1 w hakaza
			for(l_counter=ZERO_INIT;l_counter<ECU_KEYPAD_ROWS;l_counter++){
    3298:	8f 85       	ldd	r24, Y+15	; 0x0f
    329a:	8f 5f       	subi	r24, 0xFF	; 255
    329c:	8f 87       	std	Y+15, r24	; 0x0f
    329e:	8f 85       	ldd	r24, Y+15	; 0x0f
    32a0:	84 30       	cpi	r24, 0x04	; 4
    32a2:	78 f3       	brcs	.-34     	; 0x3282 <keypad_get_value+0x4c>
						ret = gpio_pin_write_logic(&(_keypad_obj->keypad_row_pins[l_counter]),GPIO_LOW);
					}
			//ba3d ma khalet kolo zero, hakhaly wahd wahd be 5 volt bel tarteeb 3shan keda akhat l_rows_counter fel loop el bara
			ret = gpio_pin_write_logic(&(_keypad_obj->keypad_row_pins[l_rows_counter]),GPIO_HIGH);
    32a4:	2c 89       	ldd	r18, Y+20	; 0x14
    32a6:	3d 89       	ldd	r19, Y+21	; 0x15
    32a8:	89 89       	ldd	r24, Y+17	; 0x11
    32aa:	88 2f       	mov	r24, r24
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	82 0f       	add	r24, r18
    32b0:	93 1f       	adc	r25, r19
    32b2:	61 e0       	ldi	r22, 0x01	; 1
    32b4:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
    32b8:	8a 8b       	std	Y+18, r24	; 0x12
    32ba:	80 e0       	ldi	r24, 0x00	; 0
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	a0 e8       	ldi	r26, 0x80	; 128
    32c0:	bf e3       	ldi	r27, 0x3F	; 63
    32c2:	8b 87       	std	Y+11, r24	; 0x0b
    32c4:	9c 87       	std	Y+12, r25	; 0x0c
    32c6:	ad 87       	std	Y+13, r26	; 0x0d
    32c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    32cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    32ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    32d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    32d2:	20 e0       	ldi	r18, 0x00	; 0
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	4a ef       	ldi	r20, 0xFA	; 250
    32d8:	54 e4       	ldi	r21, 0x44	; 68
    32da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32de:	dc 01       	movw	r26, r24
    32e0:	cb 01       	movw	r24, r22
    32e2:	8f 83       	std	Y+7, r24	; 0x07
    32e4:	98 87       	std	Y+8, r25	; 0x08
    32e6:	a9 87       	std	Y+9, r26	; 0x09
    32e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32ea:	6f 81       	ldd	r22, Y+7	; 0x07
    32ec:	78 85       	ldd	r23, Y+8	; 0x08
    32ee:	89 85       	ldd	r24, Y+9	; 0x09
    32f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    32f2:	20 e0       	ldi	r18, 0x00	; 0
    32f4:	30 e0       	ldi	r19, 0x00	; 0
    32f6:	40 e8       	ldi	r20, 0x80	; 128
    32f8:	5f e3       	ldi	r21, 0x3F	; 63
    32fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32fe:	88 23       	and	r24, r24
    3300:	2c f4       	brge	.+10     	; 0x330c <keypad_get_value+0xd6>
		__ticks = 1;
    3302:	81 e0       	ldi	r24, 0x01	; 1
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	9e 83       	std	Y+6, r25	; 0x06
    3308:	8d 83       	std	Y+5, r24	; 0x05
    330a:	3f c0       	rjmp	.+126    	; 0x338a <keypad_get_value+0x154>
	else if (__tmp > 65535)
    330c:	6f 81       	ldd	r22, Y+7	; 0x07
    330e:	78 85       	ldd	r23, Y+8	; 0x08
    3310:	89 85       	ldd	r24, Y+9	; 0x09
    3312:	9a 85       	ldd	r25, Y+10	; 0x0a
    3314:	20 e0       	ldi	r18, 0x00	; 0
    3316:	3f ef       	ldi	r19, 0xFF	; 255
    3318:	4f e7       	ldi	r20, 0x7F	; 127
    331a:	57 e4       	ldi	r21, 0x47	; 71
    331c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3320:	18 16       	cp	r1, r24
    3322:	4c f5       	brge	.+82     	; 0x3376 <keypad_get_value+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3324:	6b 85       	ldd	r22, Y+11	; 0x0b
    3326:	7c 85       	ldd	r23, Y+12	; 0x0c
    3328:	8d 85       	ldd	r24, Y+13	; 0x0d
    332a:	9e 85       	ldd	r25, Y+14	; 0x0e
    332c:	20 e0       	ldi	r18, 0x00	; 0
    332e:	30 e0       	ldi	r19, 0x00	; 0
    3330:	40 e2       	ldi	r20, 0x20	; 32
    3332:	51 e4       	ldi	r21, 0x41	; 65
    3334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3338:	dc 01       	movw	r26, r24
    333a:	cb 01       	movw	r24, r22
    333c:	bc 01       	movw	r22, r24
    333e:	cd 01       	movw	r24, r26
    3340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3344:	dc 01       	movw	r26, r24
    3346:	cb 01       	movw	r24, r22
    3348:	9e 83       	std	Y+6, r25	; 0x06
    334a:	8d 83       	std	Y+5, r24	; 0x05
    334c:	0f c0       	rjmp	.+30     	; 0x336c <keypad_get_value+0x136>
    334e:	88 ec       	ldi	r24, 0xC8	; 200
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	9c 83       	std	Y+4, r25	; 0x04
    3354:	8b 83       	std	Y+3, r24	; 0x03
    3356:	8b 81       	ldd	r24, Y+3	; 0x03
    3358:	9c 81       	ldd	r25, Y+4	; 0x04
    335a:	01 97       	sbiw	r24, 0x01	; 1
    335c:	f1 f7       	brne	.-4      	; 0x335a <keypad_get_value+0x124>
    335e:	9c 83       	std	Y+4, r25	; 0x04
    3360:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3362:	8d 81       	ldd	r24, Y+5	; 0x05
    3364:	9e 81       	ldd	r25, Y+6	; 0x06
    3366:	01 97       	sbiw	r24, 0x01	; 1
    3368:	9e 83       	std	Y+6, r25	; 0x06
    336a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    336c:	8d 81       	ldd	r24, Y+5	; 0x05
    336e:	9e 81       	ldd	r25, Y+6	; 0x06
    3370:	00 97       	sbiw	r24, 0x00	; 0
    3372:	69 f7       	brne	.-38     	; 0x334e <keypad_get_value+0x118>
    3374:	14 c0       	rjmp	.+40     	; 0x339e <keypad_get_value+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3376:	6f 81       	ldd	r22, Y+7	; 0x07
    3378:	78 85       	ldd	r23, Y+8	; 0x08
    337a:	89 85       	ldd	r24, Y+9	; 0x09
    337c:	9a 85       	ldd	r25, Y+10	; 0x0a
    337e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3382:	dc 01       	movw	r26, r24
    3384:	cb 01       	movw	r24, r22
    3386:	9e 83       	std	Y+6, r25	; 0x06
    3388:	8d 83       	std	Y+5, r24	; 0x05
    338a:	8d 81       	ldd	r24, Y+5	; 0x05
    338c:	9e 81       	ldd	r25, Y+6	; 0x06
    338e:	9a 83       	std	Y+2, r25	; 0x02
    3390:	89 83       	std	Y+1, r24	; 0x01
    3392:	89 81       	ldd	r24, Y+1	; 0x01
    3394:	9a 81       	ldd	r25, Y+2	; 0x02
    3396:	01 97       	sbiw	r24, 0x01	; 1
    3398:	f1 f7       	brne	.-4      	; 0x3396 <keypad_get_value+0x160>
    339a:	9a 83       	std	Y+2, r25	; 0x02
    339c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1);
			//columns Check
			for(l_columns_counter=ZERO_INIT;l_columns_counter<ECU_KEYPAD_COLUMNS;l_columns_counter++)
    339e:	18 8a       	std	Y+16, r1	; 0x10
    33a0:	2f c0       	rjmp	.+94     	; 0x3400 <keypad_get_value+0x1ca>
			{
				ret = gpio_pin_read_logic(&(_keypad_obj->keypad_columns_pins[l_columns_counter]),&column_logic);
    33a2:	8c 89       	ldd	r24, Y+20	; 0x14
    33a4:	9d 89       	ldd	r25, Y+21	; 0x15
    33a6:	9c 01       	movw	r18, r24
    33a8:	2c 5f       	subi	r18, 0xFC	; 252
    33aa:	3f 4f       	sbci	r19, 0xFF	; 255
    33ac:	88 89       	ldd	r24, Y+16	; 0x10
    33ae:	88 2f       	mov	r24, r24
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	82 0f       	add	r24, r18
    33b4:	93 1f       	adc	r25, r19
    33b6:	9e 01       	movw	r18, r28
    33b8:	2d 5e       	subi	r18, 0xED	; 237
    33ba:	3f 4f       	sbci	r19, 0xFF	; 255
    33bc:	b9 01       	movw	r22, r18
    33be:	0e 94 89 0a 	call	0x1512	; 0x1512 <gpio_pin_read_logic>
    33c2:	8a 8b       	std	Y+18, r24	; 0x12
				if(GPIO_HIGH==column_logic)
    33c4:	8b 89       	ldd	r24, Y+19	; 0x13
    33c6:	81 30       	cpi	r24, 0x01	; 1
    33c8:	c1 f4       	brne	.+48     	; 0x33fa <keypad_get_value+0x1c4>
				{
					*value=btn_values_int[l_rows_counter][l_columns_counter];
    33ca:	89 89       	ldd	r24, Y+17	; 0x11
    33cc:	48 2f       	mov	r20, r24
    33ce:	50 e0       	ldi	r21, 0x00	; 0
    33d0:	88 89       	ldd	r24, Y+16	; 0x10
    33d2:	28 2f       	mov	r18, r24
    33d4:	30 e0       	ldi	r19, 0x00	; 0
    33d6:	ca 01       	movw	r24, r20
    33d8:	88 0f       	add	r24, r24
    33da:	99 1f       	adc	r25, r25
    33dc:	88 0f       	add	r24, r24
    33de:	99 1f       	adc	r25, r25
    33e0:	82 0f       	add	r24, r18
    33e2:	93 1f       	adc	r25, r19
    33e4:	fc 01       	movw	r30, r24
    33e6:	eb 52       	subi	r30, 0x2B	; 43
    33e8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ea:	80 81       	ld	r24, Z
    33ec:	ee 89       	ldd	r30, Y+22	; 0x16
    33ee:	ff 89       	ldd	r31, Y+23	; 0x17
    33f0:	80 83       	st	Z, r24
					*Key_pressed=KEY_PRESSED;
    33f2:	e8 8d       	ldd	r30, Y+24	; 0x18
    33f4:	f9 8d       	ldd	r31, Y+25	; 0x19
    33f6:	81 e0       	ldi	r24, 0x01	; 1
    33f8:	80 83       	st	Z, r24
					}
			//ba3d ma khalet kolo zero, hakhaly wahd wahd be 5 volt bel tarteeb 3shan keda akhat l_rows_counter fel loop el bara
			ret = gpio_pin_write_logic(&(_keypad_obj->keypad_row_pins[l_rows_counter]),GPIO_HIGH);
			_delay_ms(1);
			//columns Check
			for(l_columns_counter=ZERO_INIT;l_columns_counter<ECU_KEYPAD_COLUMNS;l_columns_counter++)
    33fa:	88 89       	ldd	r24, Y+16	; 0x10
    33fc:	8f 5f       	subi	r24, 0xFF	; 255
    33fe:	88 8b       	std	Y+16, r24	; 0x10
    3400:	88 89       	ldd	r24, Y+16	; 0x10
    3402:	84 30       	cpi	r24, 0x04	; 4
    3404:	70 f2       	brcs	.-100    	; 0x33a2 <keypad_get_value+0x16c>
	{
		ret = E_NOT_OK;
	}
	else
	{
		for(l_rows_counter=ZERO_INIT;l_rows_counter<ECU_KEYPAD_ROWS;l_rows_counter++)
    3406:	89 89       	ldd	r24, Y+17	; 0x11
    3408:	8f 5f       	subi	r24, 0xFF	; 255
    340a:	89 8b       	std	Y+17, r24	; 0x11
    340c:	89 89       	ldd	r24, Y+17	; 0x11
    340e:	84 30       	cpi	r24, 0x04	; 4
    3410:	08 f4       	brcc	.+2      	; 0x3414 <keypad_get_value+0x1de>
    3412:	35 cf       	rjmp	.-406    	; 0x327e <keypad_get_value+0x48>
					*value=btn_values_int[l_rows_counter][l_columns_counter];
					*Key_pressed=KEY_PRESSED;
				}
			}
		}
		ret = E_OK;
    3414:	81 e0       	ldi	r24, 0x01	; 1
    3416:	8a 8b       	std	Y+18, r24	; 0x12
	}
	return ret;
    3418:	8a 89       	ldd	r24, Y+18	; 0x12
}
    341a:	69 96       	adiw	r28, 0x19	; 25
    341c:	0f b6       	in	r0, 0x3f	; 63
    341e:	f8 94       	cli
    3420:	de bf       	out	0x3e, r29	; 62
    3422:	0f be       	out	0x3f, r0	; 63
    3424:	cd bf       	out	0x3d, r28	; 61
    3426:	cf 91       	pop	r28
    3428:	df 91       	pop	r29
    342a:	08 95       	ret

0000342c <seven_segment_initialize>:

#include "ECU_SEVEN_SEG.h"


STD_ReturnStatus seven_segment_initialize(const segment_t *seg)
{
    342c:	df 93       	push	r29
    342e:	cf 93       	push	r28
    3430:	00 d0       	rcall	.+0      	; 0x3432 <seven_segment_initialize+0x6>
    3432:	0f 92       	push	r0
    3434:	cd b7       	in	r28, 0x3d	; 61
    3436:	de b7       	in	r29, 0x3e	; 62
    3438:	9b 83       	std	Y+3, r25	; 0x03
    343a:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_OK;
    343c:	81 e0       	ldi	r24, 0x01	; 1
    343e:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==seg)
    3440:	8a 81       	ldd	r24, Y+2	; 0x02
    3442:	9b 81       	ldd	r25, Y+3	; 0x03
    3444:	00 97       	sbiw	r24, 0x00	; 0
    3446:	11 f4       	brne	.+4      	; 0x344c <seven_segment_initialize+0x20>
	{
		ret = E_NOT_OK;
    3448:	19 82       	std	Y+1, r1	; 0x01
    344a:	22 c0       	rjmp	.+68     	; 0x3490 <seven_segment_initialize+0x64>
	}
	else
	{
	gpio_pin_initialize(&(seg->segment_pins[0]));
    344c:	8a 81       	ldd	r24, Y+2	; 0x02
    344e:	9b 81       	ldd	r25, Y+3	; 0x03
    3450:	0e 94 29 0b 	call	0x1652	; 0x1652 <gpio_pin_initialize>
	gpio_pin_initialize(&(seg->segment_pins[1]));
    3454:	8a 81       	ldd	r24, Y+2	; 0x02
    3456:	9b 81       	ldd	r25, Y+3	; 0x03
    3458:	01 96       	adiw	r24, 0x01	; 1
    345a:	0e 94 29 0b 	call	0x1652	; 0x1652 <gpio_pin_initialize>
	gpio_pin_initialize(&(seg->segment_pins[2]));
    345e:	8a 81       	ldd	r24, Y+2	; 0x02
    3460:	9b 81       	ldd	r25, Y+3	; 0x03
    3462:	02 96       	adiw	r24, 0x02	; 2
    3464:	0e 94 29 0b 	call	0x1652	; 0x1652 <gpio_pin_initialize>
	gpio_pin_initialize(&(seg->segment_pins[3]));
    3468:	8a 81       	ldd	r24, Y+2	; 0x02
    346a:	9b 81       	ldd	r25, Y+3	; 0x03
    346c:	03 96       	adiw	r24, 0x03	; 3
    346e:	0e 94 29 0b 	call	0x1652	; 0x1652 <gpio_pin_initialize>
	gpio_pin_initialize(&(seg->segment_pins[4]));
    3472:	8a 81       	ldd	r24, Y+2	; 0x02
    3474:	9b 81       	ldd	r25, Y+3	; 0x03
    3476:	04 96       	adiw	r24, 0x04	; 4
    3478:	0e 94 29 0b 	call	0x1652	; 0x1652 <gpio_pin_initialize>
	gpio_pin_initialize(&(seg->segment_pins[5]));
    347c:	8a 81       	ldd	r24, Y+2	; 0x02
    347e:	9b 81       	ldd	r25, Y+3	; 0x03
    3480:	05 96       	adiw	r24, 0x05	; 5
    3482:	0e 94 29 0b 	call	0x1652	; 0x1652 <gpio_pin_initialize>
	gpio_pin_initialize(&(seg->segment_pins[6]));
    3486:	8a 81       	ldd	r24, Y+2	; 0x02
    3488:	9b 81       	ldd	r25, Y+3	; 0x03
    348a:	06 96       	adiw	r24, 0x06	; 6
    348c:	0e 94 29 0b 	call	0x1652	; 0x1652 <gpio_pin_initialize>
	}
	return ret;
    3490:	89 81       	ldd	r24, Y+1	; 0x01
}
    3492:	0f 90       	pop	r0
    3494:	0f 90       	pop	r0
    3496:	0f 90       	pop	r0
    3498:	cf 91       	pop	r28
    349a:	df 91       	pop	r29
    349c:	08 95       	ret

0000349e <seven_segment_write_number>:
STD_ReturnStatus seven_segment_write_number(const segment_t *seg,uint8 num)
{
    349e:	df 93       	push	r29
    34a0:	cf 93       	push	r28
    34a2:	00 d0       	rcall	.+0      	; 0x34a4 <seven_segment_write_number+0x6>
    34a4:	00 d0       	rcall	.+0      	; 0x34a6 <seven_segment_write_number+0x8>
    34a6:	cd b7       	in	r28, 0x3d	; 61
    34a8:	de b7       	in	r29, 0x3e	; 62
    34aa:	9b 83       	std	Y+3, r25	; 0x03
    34ac:	8a 83       	std	Y+2, r24	; 0x02
    34ae:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_OK;
    34b0:	81 e0       	ldi	r24, 0x01	; 1
    34b2:	89 83       	std	Y+1, r24	; 0x01
	if((NULL==seg)&&(num>9))
    34b4:	8a 81       	ldd	r24, Y+2	; 0x02
    34b6:	9b 81       	ldd	r25, Y+3	; 0x03
    34b8:	00 97       	sbiw	r24, 0x00	; 0
    34ba:	29 f4       	brne	.+10     	; 0x34c6 <seven_segment_write_number+0x28>
    34bc:	8c 81       	ldd	r24, Y+4	; 0x04
    34be:	8a 30       	cpi	r24, 0x0A	; 10
    34c0:	10 f0       	brcs	.+4      	; 0x34c6 <seven_segment_write_number+0x28>
	{
		ret = E_NOT_OK;
    34c2:	19 82       	std	Y+1, r1	; 0x01
    34c4:	8a c0       	rjmp	.+276    	; 0x35da <seven_segment_write_number+0x13c>
	}
	else
	{
		gpio_pin_write_logic(&(seg->segment_pins[0]),CommCathArr[num]&0x01);
    34c6:	4a 81       	ldd	r20, Y+2	; 0x02
    34c8:	5b 81       	ldd	r21, Y+3	; 0x03
    34ca:	8c 81       	ldd	r24, Y+4	; 0x04
    34cc:	88 2f       	mov	r24, r24
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	fc 01       	movw	r30, r24
    34d2:	ed 57       	subi	r30, 0x7D	; 125
    34d4:	ff 4f       	sbci	r31, 0xFF	; 255
    34d6:	80 81       	ld	r24, Z
    34d8:	28 2f       	mov	r18, r24
    34da:	21 70       	andi	r18, 0x01	; 1
    34dc:	ca 01       	movw	r24, r20
    34de:	62 2f       	mov	r22, r18
    34e0:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
		gpio_pin_write_logic(&(seg->segment_pins[1]),(CommCathArr[num]>>1)&0x01);
    34e4:	8a 81       	ldd	r24, Y+2	; 0x02
    34e6:	9b 81       	ldd	r25, Y+3	; 0x03
    34e8:	ac 01       	movw	r20, r24
    34ea:	4f 5f       	subi	r20, 0xFF	; 255
    34ec:	5f 4f       	sbci	r21, 0xFF	; 255
    34ee:	8c 81       	ldd	r24, Y+4	; 0x04
    34f0:	88 2f       	mov	r24, r24
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	fc 01       	movw	r30, r24
    34f6:	ed 57       	subi	r30, 0x7D	; 125
    34f8:	ff 4f       	sbci	r31, 0xFF	; 255
    34fa:	80 81       	ld	r24, Z
    34fc:	86 95       	lsr	r24
    34fe:	28 2f       	mov	r18, r24
    3500:	21 70       	andi	r18, 0x01	; 1
    3502:	ca 01       	movw	r24, r20
    3504:	62 2f       	mov	r22, r18
    3506:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
		gpio_pin_write_logic(&(seg->segment_pins[2]),(CommCathArr[num]>>2)&0x01);
    350a:	8a 81       	ldd	r24, Y+2	; 0x02
    350c:	9b 81       	ldd	r25, Y+3	; 0x03
    350e:	ac 01       	movw	r20, r24
    3510:	4e 5f       	subi	r20, 0xFE	; 254
    3512:	5f 4f       	sbci	r21, 0xFF	; 255
    3514:	8c 81       	ldd	r24, Y+4	; 0x04
    3516:	88 2f       	mov	r24, r24
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	fc 01       	movw	r30, r24
    351c:	ed 57       	subi	r30, 0x7D	; 125
    351e:	ff 4f       	sbci	r31, 0xFF	; 255
    3520:	80 81       	ld	r24, Z
    3522:	86 95       	lsr	r24
    3524:	86 95       	lsr	r24
    3526:	28 2f       	mov	r18, r24
    3528:	21 70       	andi	r18, 0x01	; 1
    352a:	ca 01       	movw	r24, r20
    352c:	62 2f       	mov	r22, r18
    352e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
		gpio_pin_write_logic(&(seg->segment_pins[3]),(CommCathArr[num]>>3)&0x01);
    3532:	8a 81       	ldd	r24, Y+2	; 0x02
    3534:	9b 81       	ldd	r25, Y+3	; 0x03
    3536:	ac 01       	movw	r20, r24
    3538:	4d 5f       	subi	r20, 0xFD	; 253
    353a:	5f 4f       	sbci	r21, 0xFF	; 255
    353c:	8c 81       	ldd	r24, Y+4	; 0x04
    353e:	88 2f       	mov	r24, r24
    3540:	90 e0       	ldi	r25, 0x00	; 0
    3542:	fc 01       	movw	r30, r24
    3544:	ed 57       	subi	r30, 0x7D	; 125
    3546:	ff 4f       	sbci	r31, 0xFF	; 255
    3548:	80 81       	ld	r24, Z
    354a:	86 95       	lsr	r24
    354c:	86 95       	lsr	r24
    354e:	86 95       	lsr	r24
    3550:	28 2f       	mov	r18, r24
    3552:	21 70       	andi	r18, 0x01	; 1
    3554:	ca 01       	movw	r24, r20
    3556:	62 2f       	mov	r22, r18
    3558:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
		gpio_pin_write_logic(&(seg->segment_pins[4]),(CommCathArr[num]>>4)&0x01);
    355c:	8a 81       	ldd	r24, Y+2	; 0x02
    355e:	9b 81       	ldd	r25, Y+3	; 0x03
    3560:	ac 01       	movw	r20, r24
    3562:	4c 5f       	subi	r20, 0xFC	; 252
    3564:	5f 4f       	sbci	r21, 0xFF	; 255
    3566:	8c 81       	ldd	r24, Y+4	; 0x04
    3568:	88 2f       	mov	r24, r24
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	fc 01       	movw	r30, r24
    356e:	ed 57       	subi	r30, 0x7D	; 125
    3570:	ff 4f       	sbci	r31, 0xFF	; 255
    3572:	80 81       	ld	r24, Z
    3574:	82 95       	swap	r24
    3576:	8f 70       	andi	r24, 0x0F	; 15
    3578:	28 2f       	mov	r18, r24
    357a:	21 70       	andi	r18, 0x01	; 1
    357c:	ca 01       	movw	r24, r20
    357e:	62 2f       	mov	r22, r18
    3580:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
		gpio_pin_write_logic(&(seg->segment_pins[5]),(CommCathArr[num]>>5)&0x01);
    3584:	8a 81       	ldd	r24, Y+2	; 0x02
    3586:	9b 81       	ldd	r25, Y+3	; 0x03
    3588:	ac 01       	movw	r20, r24
    358a:	4b 5f       	subi	r20, 0xFB	; 251
    358c:	5f 4f       	sbci	r21, 0xFF	; 255
    358e:	8c 81       	ldd	r24, Y+4	; 0x04
    3590:	88 2f       	mov	r24, r24
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	fc 01       	movw	r30, r24
    3596:	ed 57       	subi	r30, 0x7D	; 125
    3598:	ff 4f       	sbci	r31, 0xFF	; 255
    359a:	80 81       	ld	r24, Z
    359c:	82 95       	swap	r24
    359e:	86 95       	lsr	r24
    35a0:	87 70       	andi	r24, 0x07	; 7
    35a2:	28 2f       	mov	r18, r24
    35a4:	21 70       	andi	r18, 0x01	; 1
    35a6:	ca 01       	movw	r24, r20
    35a8:	62 2f       	mov	r22, r18
    35aa:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
		gpio_pin_write_logic(&(seg->segment_pins[6]),(CommCathArr[num]>>6)&0x01);
    35ae:	8a 81       	ldd	r24, Y+2	; 0x02
    35b0:	9b 81       	ldd	r25, Y+3	; 0x03
    35b2:	ac 01       	movw	r20, r24
    35b4:	4a 5f       	subi	r20, 0xFA	; 250
    35b6:	5f 4f       	sbci	r21, 0xFF	; 255
    35b8:	8c 81       	ldd	r24, Y+4	; 0x04
    35ba:	88 2f       	mov	r24, r24
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	fc 01       	movw	r30, r24
    35c0:	ed 57       	subi	r30, 0x7D	; 125
    35c2:	ff 4f       	sbci	r31, 0xFF	; 255
    35c4:	80 81       	ld	r24, Z
    35c6:	82 95       	swap	r24
    35c8:	86 95       	lsr	r24
    35ca:	86 95       	lsr	r24
    35cc:	83 70       	andi	r24, 0x03	; 3
    35ce:	28 2f       	mov	r18, r24
    35d0:	21 70       	andi	r18, 0x01	; 1
    35d2:	ca 01       	movw	r24, r20
    35d4:	62 2f       	mov	r22, r18
    35d6:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
	}
	return ret;
    35da:	89 81       	ldd	r24, Y+1	; 0x01
}
    35dc:	0f 90       	pop	r0
    35de:	0f 90       	pop	r0
    35e0:	0f 90       	pop	r0
    35e2:	0f 90       	pop	r0
    35e4:	cf 91       	pop	r28
    35e6:	df 91       	pop	r29
    35e8:	08 95       	ret

000035ea <dc_motor_initialize>:
 *
 * @param _dc_motor
 * @return
 */
STD_ReturnStatus dc_motor_initialize(const dc_motor_t *_dc_motor)
{
    35ea:	df 93       	push	r29
    35ec:	cf 93       	push	r28
    35ee:	00 d0       	rcall	.+0      	; 0x35f0 <dc_motor_initialize+0x6>
    35f0:	0f 92       	push	r0
    35f2:	cd b7       	in	r28, 0x3d	; 61
    35f4:	de b7       	in	r29, 0x3e	; 62
    35f6:	9b 83       	std	Y+3, r25	; 0x03
    35f8:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_OK;
    35fa:	81 e0       	ldi	r24, 0x01	; 1
    35fc:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==_dc_motor)
    35fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3600:	9b 81       	ldd	r25, Y+3	; 0x03
    3602:	00 97       	sbiw	r24, 0x00	; 0
    3604:	11 f4       	brne	.+4      	; 0x360a <dc_motor_initialize+0x20>
	{
		ret=E_NOT_OK;
    3606:	19 82       	std	Y+1, r1	; 0x01
    3608:	09 c0       	rjmp	.+18     	; 0x361c <dc_motor_initialize+0x32>
	}
	else
	{


		gpio_pin_initialize(&(_dc_motor->dc_motor_pin[0]));
    360a:	8a 81       	ldd	r24, Y+2	; 0x02
    360c:	9b 81       	ldd	r25, Y+3	; 0x03
    360e:	0e 94 29 0b 	call	0x1652	; 0x1652 <gpio_pin_initialize>
		gpio_pin_initialize(&(_dc_motor->dc_motor_pin[1]));
    3612:	8a 81       	ldd	r24, Y+2	; 0x02
    3614:	9b 81       	ldd	r25, Y+3	; 0x03
    3616:	01 96       	adiw	r24, 0x01	; 1
    3618:	0e 94 29 0b 	call	0x1652	; 0x1652 <gpio_pin_initialize>
	}
	return ret;
    361c:	89 81       	ldd	r24, Y+1	; 0x01
}
    361e:	0f 90       	pop	r0
    3620:	0f 90       	pop	r0
    3622:	0f 90       	pop	r0
    3624:	cf 91       	pop	r28
    3626:	df 91       	pop	r29
    3628:	08 95       	ret

0000362a <dc_motor_move_right>:
 *
 * @param _dc_motor
 * @return
 */
STD_ReturnStatus dc_motor_move_right(const dc_motor_t *_dc_motor)
{
    362a:	df 93       	push	r29
    362c:	cf 93       	push	r28
    362e:	00 d0       	rcall	.+0      	; 0x3630 <dc_motor_move_right+0x6>
    3630:	0f 92       	push	r0
    3632:	cd b7       	in	r28, 0x3d	; 61
    3634:	de b7       	in	r29, 0x3e	; 62
    3636:	9b 83       	std	Y+3, r25	; 0x03
    3638:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_OK;
    363a:	81 e0       	ldi	r24, 0x01	; 1
    363c:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==_dc_motor)
    363e:	8a 81       	ldd	r24, Y+2	; 0x02
    3640:	9b 81       	ldd	r25, Y+3	; 0x03
    3642:	00 97       	sbiw	r24, 0x00	; 0
    3644:	11 f4       	brne	.+4      	; 0x364a <dc_motor_move_right+0x20>
	{
		ret=E_NOT_OK;
    3646:	19 82       	std	Y+1, r1	; 0x01
    3648:	0b c0       	rjmp	.+22     	; 0x3660 <dc_motor_move_right+0x36>
	}
	else
	{
		gpio_pin_write_logic(&(_dc_motor->dc_motor_pin[0]),GPIO_HIGH);
    364a:	8a 81       	ldd	r24, Y+2	; 0x02
    364c:	9b 81       	ldd	r25, Y+3	; 0x03
    364e:	61 e0       	ldi	r22, 0x01	; 1
    3650:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
		gpio_pin_write_logic(&(_dc_motor->dc_motor_pin[1]),GPIO_LOW);
    3654:	8a 81       	ldd	r24, Y+2	; 0x02
    3656:	9b 81       	ldd	r25, Y+3	; 0x03
    3658:	01 96       	adiw	r24, 0x01	; 1
    365a:	60 e0       	ldi	r22, 0x00	; 0
    365c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
	}
	return ret;
    3660:	89 81       	ldd	r24, Y+1	; 0x01
}
    3662:	0f 90       	pop	r0
    3664:	0f 90       	pop	r0
    3666:	0f 90       	pop	r0
    3668:	cf 91       	pop	r28
    366a:	df 91       	pop	r29
    366c:	08 95       	ret

0000366e <dc_motor_move_left>:
 *
 * @param _dc_motor
 * @return
 */
STD_ReturnStatus dc_motor_move_left(const dc_motor_t *_dc_motor)
{
    366e:	df 93       	push	r29
    3670:	cf 93       	push	r28
    3672:	00 d0       	rcall	.+0      	; 0x3674 <dc_motor_move_left+0x6>
    3674:	0f 92       	push	r0
    3676:	cd b7       	in	r28, 0x3d	; 61
    3678:	de b7       	in	r29, 0x3e	; 62
    367a:	9b 83       	std	Y+3, r25	; 0x03
    367c:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_OK;
    367e:	81 e0       	ldi	r24, 0x01	; 1
    3680:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==_dc_motor)
    3682:	8a 81       	ldd	r24, Y+2	; 0x02
    3684:	9b 81       	ldd	r25, Y+3	; 0x03
    3686:	00 97       	sbiw	r24, 0x00	; 0
    3688:	11 f4       	brne	.+4      	; 0x368e <dc_motor_move_left+0x20>
	{
		ret=E_NOT_OK;
    368a:	19 82       	std	Y+1, r1	; 0x01
    368c:	0b c0       	rjmp	.+22     	; 0x36a4 <dc_motor_move_left+0x36>
	}
	else
	{
		gpio_pin_write_logic(&(_dc_motor->dc_motor_pin[0]),GPIO_LOW);
    368e:	8a 81       	ldd	r24, Y+2	; 0x02
    3690:	9b 81       	ldd	r25, Y+3	; 0x03
    3692:	60 e0       	ldi	r22, 0x00	; 0
    3694:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
		gpio_pin_write_logic(&(_dc_motor->dc_motor_pin[1]),GPIO_HIGH);
    3698:	8a 81       	ldd	r24, Y+2	; 0x02
    369a:	9b 81       	ldd	r25, Y+3	; 0x03
    369c:	01 96       	adiw	r24, 0x01	; 1
    369e:	61 e0       	ldi	r22, 0x01	; 1
    36a0:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
	}
	return ret;
    36a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    36a6:	0f 90       	pop	r0
    36a8:	0f 90       	pop	r0
    36aa:	0f 90       	pop	r0
    36ac:	cf 91       	pop	r28
    36ae:	df 91       	pop	r29
    36b0:	08 95       	ret

000036b2 <dc_motor_stop>:
 *
 * @param _dc_motor
 * @return
 */
STD_ReturnStatus dc_motor_stop(const dc_motor_t *_dc_motor)
{
    36b2:	df 93       	push	r29
    36b4:	cf 93       	push	r28
    36b6:	00 d0       	rcall	.+0      	; 0x36b8 <dc_motor_stop+0x6>
    36b8:	0f 92       	push	r0
    36ba:	cd b7       	in	r28, 0x3d	; 61
    36bc:	de b7       	in	r29, 0x3e	; 62
    36be:	9b 83       	std	Y+3, r25	; 0x03
    36c0:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_OK;
    36c2:	81 e0       	ldi	r24, 0x01	; 1
    36c4:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==_dc_motor)
    36c6:	8a 81       	ldd	r24, Y+2	; 0x02
    36c8:	9b 81       	ldd	r25, Y+3	; 0x03
    36ca:	00 97       	sbiw	r24, 0x00	; 0
    36cc:	11 f4       	brne	.+4      	; 0x36d2 <dc_motor_stop+0x20>
	{
		ret=E_NOT_OK;
    36ce:	19 82       	std	Y+1, r1	; 0x01
    36d0:	0b c0       	rjmp	.+22     	; 0x36e8 <dc_motor_stop+0x36>
	}
	else
	{
		gpio_pin_write_logic(&(_dc_motor->dc_motor_pin[0]),GPIO_LOW);
    36d2:	8a 81       	ldd	r24, Y+2	; 0x02
    36d4:	9b 81       	ldd	r25, Y+3	; 0x03
    36d6:	60 e0       	ldi	r22, 0x00	; 0
    36d8:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
		gpio_pin_write_logic(&(_dc_motor->dc_motor_pin[1]),GPIO_LOW);
    36dc:	8a 81       	ldd	r24, Y+2	; 0x02
    36de:	9b 81       	ldd	r25, Y+3	; 0x03
    36e0:	01 96       	adiw	r24, 0x01	; 1
    36e2:	60 e0       	ldi	r22, 0x00	; 0
    36e4:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_pin_write_logic>
	}
	return ret;
    36e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    36ea:	0f 90       	pop	r0
    36ec:	0f 90       	pop	r0
    36ee:	0f 90       	pop	r0
    36f0:	cf 91       	pop	r28
    36f2:	df 91       	pop	r29
    36f4:	08 95       	ret

000036f6 <ecu_layer_initialize>:
		.lcd_data[7].direction=DIRECTION_OUTPUT,
		.lcd_data[7].logic=GPIO_LOW
};

void ecu_layer_initialize()
{
    36f6:	df 93       	push	r29
    36f8:	cf 93       	push	r28
    36fa:	0f 92       	push	r0
    36fc:	cd b7       	in	r28, 0x3d	; 61
    36fe:	de b7       	in	r29, 0x3e	; 62
	STD_ReturnStatus ret = E_NOT_OK;
    3700:	19 82       	std	Y+1, r1	; 0x01
	ret = led_initialize(&led1);
    3702:	8e ee       	ldi	r24, 0xEE	; 238
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <led_initialize>
    370a:	89 83       	std	Y+1, r24	; 0x01
	ret = led_initialize(&led2);
    370c:	88 e9       	ldi	r24, 0x98	; 152
    370e:	90 e0       	ldi	r25, 0x00	; 0
    3710:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <led_initialize>
    3714:	89 83       	std	Y+1, r24	; 0x01
	ret = led_initialize(&led3);
    3716:	87 e9       	ldi	r24, 0x97	; 151
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <led_initialize>
    371e:	89 83       	std	Y+1, r24	; 0x01
}
    3720:	0f 90       	pop	r0
    3722:	cf 91       	pop	r28
    3724:	df 91       	pop	r29
    3726:	08 95       	ret

00003728 <main>:
		.mcu_pin.direction=DIRECTION_INPUT
};


int main()
{
    3728:	df 93       	push	r29
    372a:	cf 93       	push	r28
    372c:	cd b7       	in	r28, 0x3d	; 61
    372e:	de b7       	in	r29, 0x3e	; 62
    3730:	6d 97       	sbiw	r28, 0x1d	; 29
    3732:	0f b6       	in	r0, 0x3f	; 63
    3734:	f8 94       	cli
    3736:	de bf       	out	0x3e, r29	; 62
    3738:	0f be       	out	0x3f, r0	; 63
    373a:	cd bf       	out	0x3d, r28	; 61
	STD_ReturnStatus ret =E_NOT_OK;
    373c:	1d 8e       	std	Y+29, r1	; 0x1d
	Application_initialize();
    373e:	0e 94 98 1c 	call	0x3930	; 0x3930 <Application_initialize>
	ret = interrupt_INTx_init(&int0_obj);
    3742:	8b eb       	ldi	r24, 0xBB	; 187
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	0e 94 a3 05 	call	0xb46	; 0xb46 <interrupt_INTx_init>
    374a:	8d 8f       	std	Y+29, r24	; 0x1d
	ret = interrupt_INTx_init(&int1_obj);
    374c:	80 ec       	ldi	r24, 0xC0	; 192
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	0e 94 a3 05 	call	0xb46	; 0xb46 <interrupt_INTx_init>
    3754:	8d 8f       	std	Y+29, r24	; 0x1d

	while(1)
	{
		led_turn_toggle(&led3);
    3756:	87 e9       	ldi	r24, 0x97	; 151
    3758:	90 e0       	ldi	r25, 0x00	; 0
    375a:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <led_turn_toggle>
    375e:	80 e0       	ldi	r24, 0x00	; 0
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	a8 e4       	ldi	r26, 0x48	; 72
    3764:	b3 e4       	ldi	r27, 0x43	; 67
    3766:	89 8f       	std	Y+25, r24	; 0x19
    3768:	9a 8f       	std	Y+26, r25	; 0x1a
    376a:	ab 8f       	std	Y+27, r26	; 0x1b
    376c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    376e:	69 8d       	ldd	r22, Y+25	; 0x19
    3770:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3772:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3774:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3776:	20 e0       	ldi	r18, 0x00	; 0
    3778:	30 e0       	ldi	r19, 0x00	; 0
    377a:	4a ef       	ldi	r20, 0xFA	; 250
    377c:	54 e4       	ldi	r21, 0x44	; 68
    377e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3782:	dc 01       	movw	r26, r24
    3784:	cb 01       	movw	r24, r22
    3786:	8d 8b       	std	Y+21, r24	; 0x15
    3788:	9e 8b       	std	Y+22, r25	; 0x16
    378a:	af 8b       	std	Y+23, r26	; 0x17
    378c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    378e:	6d 89       	ldd	r22, Y+21	; 0x15
    3790:	7e 89       	ldd	r23, Y+22	; 0x16
    3792:	8f 89       	ldd	r24, Y+23	; 0x17
    3794:	98 8d       	ldd	r25, Y+24	; 0x18
    3796:	20 e0       	ldi	r18, 0x00	; 0
    3798:	30 e0       	ldi	r19, 0x00	; 0
    379a:	40 e8       	ldi	r20, 0x80	; 128
    379c:	5f e3       	ldi	r21, 0x3F	; 63
    379e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37a2:	88 23       	and	r24, r24
    37a4:	2c f4       	brge	.+10     	; 0x37b0 <main+0x88>
		__ticks = 1;
    37a6:	81 e0       	ldi	r24, 0x01	; 1
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	9c 8b       	std	Y+20, r25	; 0x14
    37ac:	8b 8b       	std	Y+19, r24	; 0x13
    37ae:	3f c0       	rjmp	.+126    	; 0x382e <main+0x106>
	else if (__tmp > 65535)
    37b0:	6d 89       	ldd	r22, Y+21	; 0x15
    37b2:	7e 89       	ldd	r23, Y+22	; 0x16
    37b4:	8f 89       	ldd	r24, Y+23	; 0x17
    37b6:	98 8d       	ldd	r25, Y+24	; 0x18
    37b8:	20 e0       	ldi	r18, 0x00	; 0
    37ba:	3f ef       	ldi	r19, 0xFF	; 255
    37bc:	4f e7       	ldi	r20, 0x7F	; 127
    37be:	57 e4       	ldi	r21, 0x47	; 71
    37c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37c4:	18 16       	cp	r1, r24
    37c6:	4c f5       	brge	.+82     	; 0x381a <main+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37c8:	69 8d       	ldd	r22, Y+25	; 0x19
    37ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37d0:	20 e0       	ldi	r18, 0x00	; 0
    37d2:	30 e0       	ldi	r19, 0x00	; 0
    37d4:	40 e2       	ldi	r20, 0x20	; 32
    37d6:	51 e4       	ldi	r21, 0x41	; 65
    37d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37dc:	dc 01       	movw	r26, r24
    37de:	cb 01       	movw	r24, r22
    37e0:	bc 01       	movw	r22, r24
    37e2:	cd 01       	movw	r24, r26
    37e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e8:	dc 01       	movw	r26, r24
    37ea:	cb 01       	movw	r24, r22
    37ec:	9c 8b       	std	Y+20, r25	; 0x14
    37ee:	8b 8b       	std	Y+19, r24	; 0x13
    37f0:	0f c0       	rjmp	.+30     	; 0x3810 <main+0xe8>
    37f2:	88 ec       	ldi	r24, 0xC8	; 200
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	9a 8b       	std	Y+18, r25	; 0x12
    37f8:	89 8b       	std	Y+17, r24	; 0x11
    37fa:	89 89       	ldd	r24, Y+17	; 0x11
    37fc:	9a 89       	ldd	r25, Y+18	; 0x12
    37fe:	01 97       	sbiw	r24, 0x01	; 1
    3800:	f1 f7       	brne	.-4      	; 0x37fe <main+0xd6>
    3802:	9a 8b       	std	Y+18, r25	; 0x12
    3804:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3806:	8b 89       	ldd	r24, Y+19	; 0x13
    3808:	9c 89       	ldd	r25, Y+20	; 0x14
    380a:	01 97       	sbiw	r24, 0x01	; 1
    380c:	9c 8b       	std	Y+20, r25	; 0x14
    380e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3810:	8b 89       	ldd	r24, Y+19	; 0x13
    3812:	9c 89       	ldd	r25, Y+20	; 0x14
    3814:	00 97       	sbiw	r24, 0x00	; 0
    3816:	69 f7       	brne	.-38     	; 0x37f2 <main+0xca>
    3818:	14 c0       	rjmp	.+40     	; 0x3842 <main+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    381a:	6d 89       	ldd	r22, Y+21	; 0x15
    381c:	7e 89       	ldd	r23, Y+22	; 0x16
    381e:	8f 89       	ldd	r24, Y+23	; 0x17
    3820:	98 8d       	ldd	r25, Y+24	; 0x18
    3822:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3826:	dc 01       	movw	r26, r24
    3828:	cb 01       	movw	r24, r22
    382a:	9c 8b       	std	Y+20, r25	; 0x14
    382c:	8b 8b       	std	Y+19, r24	; 0x13
    382e:	8b 89       	ldd	r24, Y+19	; 0x13
    3830:	9c 89       	ldd	r25, Y+20	; 0x14
    3832:	98 8b       	std	Y+16, r25	; 0x10
    3834:	8f 87       	std	Y+15, r24	; 0x0f
    3836:	8f 85       	ldd	r24, Y+15	; 0x0f
    3838:	98 89       	ldd	r25, Y+16	; 0x10
    383a:	01 97       	sbiw	r24, 0x01	; 1
    383c:	f1 f7       	brne	.-4      	; 0x383a <main+0x112>
    383e:	98 8b       	std	Y+16, r25	; 0x10
    3840:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);
		led_turn_toggle(&led3);
    3842:	87 e9       	ldi	r24, 0x97	; 151
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <led_turn_toggle>
    384a:	80 e0       	ldi	r24, 0x00	; 0
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	a8 e4       	ldi	r26, 0x48	; 72
    3850:	b3 e4       	ldi	r27, 0x43	; 67
    3852:	8b 87       	std	Y+11, r24	; 0x0b
    3854:	9c 87       	std	Y+12, r25	; 0x0c
    3856:	ad 87       	std	Y+13, r26	; 0x0d
    3858:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    385a:	6b 85       	ldd	r22, Y+11	; 0x0b
    385c:	7c 85       	ldd	r23, Y+12	; 0x0c
    385e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3860:	9e 85       	ldd	r25, Y+14	; 0x0e
    3862:	20 e0       	ldi	r18, 0x00	; 0
    3864:	30 e0       	ldi	r19, 0x00	; 0
    3866:	4a ef       	ldi	r20, 0xFA	; 250
    3868:	54 e4       	ldi	r21, 0x44	; 68
    386a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    386e:	dc 01       	movw	r26, r24
    3870:	cb 01       	movw	r24, r22
    3872:	8f 83       	std	Y+7, r24	; 0x07
    3874:	98 87       	std	Y+8, r25	; 0x08
    3876:	a9 87       	std	Y+9, r26	; 0x09
    3878:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    387a:	6f 81       	ldd	r22, Y+7	; 0x07
    387c:	78 85       	ldd	r23, Y+8	; 0x08
    387e:	89 85       	ldd	r24, Y+9	; 0x09
    3880:	9a 85       	ldd	r25, Y+10	; 0x0a
    3882:	20 e0       	ldi	r18, 0x00	; 0
    3884:	30 e0       	ldi	r19, 0x00	; 0
    3886:	40 e8       	ldi	r20, 0x80	; 128
    3888:	5f e3       	ldi	r21, 0x3F	; 63
    388a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    388e:	88 23       	and	r24, r24
    3890:	2c f4       	brge	.+10     	; 0x389c <main+0x174>
		__ticks = 1;
    3892:	81 e0       	ldi	r24, 0x01	; 1
    3894:	90 e0       	ldi	r25, 0x00	; 0
    3896:	9e 83       	std	Y+6, r25	; 0x06
    3898:	8d 83       	std	Y+5, r24	; 0x05
    389a:	3f c0       	rjmp	.+126    	; 0x391a <main+0x1f2>
	else if (__tmp > 65535)
    389c:	6f 81       	ldd	r22, Y+7	; 0x07
    389e:	78 85       	ldd	r23, Y+8	; 0x08
    38a0:	89 85       	ldd	r24, Y+9	; 0x09
    38a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    38a4:	20 e0       	ldi	r18, 0x00	; 0
    38a6:	3f ef       	ldi	r19, 0xFF	; 255
    38a8:	4f e7       	ldi	r20, 0x7F	; 127
    38aa:	57 e4       	ldi	r21, 0x47	; 71
    38ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38b0:	18 16       	cp	r1, r24
    38b2:	4c f5       	brge	.+82     	; 0x3906 <main+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    38b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    38b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    38ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    38bc:	20 e0       	ldi	r18, 0x00	; 0
    38be:	30 e0       	ldi	r19, 0x00	; 0
    38c0:	40 e2       	ldi	r20, 0x20	; 32
    38c2:	51 e4       	ldi	r21, 0x41	; 65
    38c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c8:	dc 01       	movw	r26, r24
    38ca:	cb 01       	movw	r24, r22
    38cc:	bc 01       	movw	r22, r24
    38ce:	cd 01       	movw	r24, r26
    38d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38d4:	dc 01       	movw	r26, r24
    38d6:	cb 01       	movw	r24, r22
    38d8:	9e 83       	std	Y+6, r25	; 0x06
    38da:	8d 83       	std	Y+5, r24	; 0x05
    38dc:	0f c0       	rjmp	.+30     	; 0x38fc <main+0x1d4>
    38de:	88 ec       	ldi	r24, 0xC8	; 200
    38e0:	90 e0       	ldi	r25, 0x00	; 0
    38e2:	9c 83       	std	Y+4, r25	; 0x04
    38e4:	8b 83       	std	Y+3, r24	; 0x03
    38e6:	8b 81       	ldd	r24, Y+3	; 0x03
    38e8:	9c 81       	ldd	r25, Y+4	; 0x04
    38ea:	01 97       	sbiw	r24, 0x01	; 1
    38ec:	f1 f7       	brne	.-4      	; 0x38ea <main+0x1c2>
    38ee:	9c 83       	std	Y+4, r25	; 0x04
    38f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38f2:	8d 81       	ldd	r24, Y+5	; 0x05
    38f4:	9e 81       	ldd	r25, Y+6	; 0x06
    38f6:	01 97       	sbiw	r24, 0x01	; 1
    38f8:	9e 83       	std	Y+6, r25	; 0x06
    38fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38fc:	8d 81       	ldd	r24, Y+5	; 0x05
    38fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3900:	00 97       	sbiw	r24, 0x00	; 0
    3902:	69 f7       	brne	.-38     	; 0x38de <main+0x1b6>
    3904:	28 cf       	rjmp	.-432    	; 0x3756 <main+0x2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3906:	6f 81       	ldd	r22, Y+7	; 0x07
    3908:	78 85       	ldd	r23, Y+8	; 0x08
    390a:	89 85       	ldd	r24, Y+9	; 0x09
    390c:	9a 85       	ldd	r25, Y+10	; 0x0a
    390e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3912:	dc 01       	movw	r26, r24
    3914:	cb 01       	movw	r24, r22
    3916:	9e 83       	std	Y+6, r25	; 0x06
    3918:	8d 83       	std	Y+5, r24	; 0x05
    391a:	8d 81       	ldd	r24, Y+5	; 0x05
    391c:	9e 81       	ldd	r25, Y+6	; 0x06
    391e:	9a 83       	std	Y+2, r25	; 0x02
    3920:	89 83       	std	Y+1, r24	; 0x01
    3922:	89 81       	ldd	r24, Y+1	; 0x01
    3924:	9a 81       	ldd	r25, Y+2	; 0x02
    3926:	01 97       	sbiw	r24, 0x01	; 1
    3928:	f1 f7       	brne	.-4      	; 0x3926 <main+0x1fe>
    392a:	9a 83       	std	Y+2, r25	; 0x02
    392c:	89 83       	std	Y+1, r24	; 0x01
    392e:	13 cf       	rjmp	.-474    	; 0x3756 <main+0x2e>

00003930 <Application_initialize>:
	}

}

void Application_initialize()
{
    3930:	df 93       	push	r29
    3932:	cf 93       	push	r28
    3934:	cd b7       	in	r28, 0x3d	; 61
    3936:	de b7       	in	r29, 0x3e	; 62
	ecu_layer_initialize();
    3938:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ecu_layer_initialize>
}
    393c:	cf 91       	pop	r28
    393e:	df 91       	pop	r29
    3940:	08 95       	ret

00003942 <int0_App_ISR>:




void int0_App_ISR(void)
{
    3942:	df 93       	push	r29
    3944:	cf 93       	push	r28
    3946:	cd b7       	in	r28, 0x3d	; 61
    3948:	de b7       	in	r29, 0x3e	; 62
	led_turn_toggle(&led1);
    394a:	8e ee       	ldi	r24, 0xEE	; 238
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <led_turn_toggle>
}
    3952:	cf 91       	pop	r28
    3954:	df 91       	pop	r29
    3956:	08 95       	ret

00003958 <int1_App_ISR>:


void int1_App_ISR(void)
{
    3958:	df 93       	push	r29
    395a:	cf 93       	push	r28
    395c:	cd b7       	in	r28, 0x3d	; 61
    395e:	de b7       	in	r29, 0x3e	; 62
	led_turn_toggle(&led2);
    3960:	88 e9       	ldi	r24, 0x98	; 152
    3962:	90 e0       	ldi	r25, 0x00	; 0
    3964:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <led_turn_toggle>
}
    3968:	cf 91       	pop	r28
    396a:	df 91       	pop	r29
    396c:	08 95       	ret

0000396e <__udivmodqi4>:
    396e:	99 1b       	sub	r25, r25
    3970:	79 e0       	ldi	r23, 0x09	; 9
    3972:	04 c0       	rjmp	.+8      	; 0x397c <__udivmodqi4_ep>

00003974 <__udivmodqi4_loop>:
    3974:	99 1f       	adc	r25, r25
    3976:	96 17       	cp	r25, r22
    3978:	08 f0       	brcs	.+2      	; 0x397c <__udivmodqi4_ep>
    397a:	96 1b       	sub	r25, r22

0000397c <__udivmodqi4_ep>:
    397c:	88 1f       	adc	r24, r24
    397e:	7a 95       	dec	r23
    3980:	c9 f7       	brne	.-14     	; 0x3974 <__udivmodqi4_loop>
    3982:	80 95       	com	r24
    3984:	08 95       	ret

00003986 <__udivmodhi4>:
    3986:	aa 1b       	sub	r26, r26
    3988:	bb 1b       	sub	r27, r27
    398a:	51 e1       	ldi	r21, 0x11	; 17
    398c:	07 c0       	rjmp	.+14     	; 0x399c <__udivmodhi4_ep>

0000398e <__udivmodhi4_loop>:
    398e:	aa 1f       	adc	r26, r26
    3990:	bb 1f       	adc	r27, r27
    3992:	a6 17       	cp	r26, r22
    3994:	b7 07       	cpc	r27, r23
    3996:	10 f0       	brcs	.+4      	; 0x399c <__udivmodhi4_ep>
    3998:	a6 1b       	sub	r26, r22
    399a:	b7 0b       	sbc	r27, r23

0000399c <__udivmodhi4_ep>:
    399c:	88 1f       	adc	r24, r24
    399e:	99 1f       	adc	r25, r25
    39a0:	5a 95       	dec	r21
    39a2:	a9 f7       	brne	.-22     	; 0x398e <__udivmodhi4_loop>
    39a4:	80 95       	com	r24
    39a6:	90 95       	com	r25
    39a8:	bc 01       	movw	r22, r24
    39aa:	cd 01       	movw	r24, r26
    39ac:	08 95       	ret

000039ae <__prologue_saves__>:
    39ae:	2f 92       	push	r2
    39b0:	3f 92       	push	r3
    39b2:	4f 92       	push	r4
    39b4:	5f 92       	push	r5
    39b6:	6f 92       	push	r6
    39b8:	7f 92       	push	r7
    39ba:	8f 92       	push	r8
    39bc:	9f 92       	push	r9
    39be:	af 92       	push	r10
    39c0:	bf 92       	push	r11
    39c2:	cf 92       	push	r12
    39c4:	df 92       	push	r13
    39c6:	ef 92       	push	r14
    39c8:	ff 92       	push	r15
    39ca:	0f 93       	push	r16
    39cc:	1f 93       	push	r17
    39ce:	cf 93       	push	r28
    39d0:	df 93       	push	r29
    39d2:	cd b7       	in	r28, 0x3d	; 61
    39d4:	de b7       	in	r29, 0x3e	; 62
    39d6:	ca 1b       	sub	r28, r26
    39d8:	db 0b       	sbc	r29, r27
    39da:	0f b6       	in	r0, 0x3f	; 63
    39dc:	f8 94       	cli
    39de:	de bf       	out	0x3e, r29	; 62
    39e0:	0f be       	out	0x3f, r0	; 63
    39e2:	cd bf       	out	0x3d, r28	; 61
    39e4:	09 94       	ijmp

000039e6 <__epilogue_restores__>:
    39e6:	2a 88       	ldd	r2, Y+18	; 0x12
    39e8:	39 88       	ldd	r3, Y+17	; 0x11
    39ea:	48 88       	ldd	r4, Y+16	; 0x10
    39ec:	5f 84       	ldd	r5, Y+15	; 0x0f
    39ee:	6e 84       	ldd	r6, Y+14	; 0x0e
    39f0:	7d 84       	ldd	r7, Y+13	; 0x0d
    39f2:	8c 84       	ldd	r8, Y+12	; 0x0c
    39f4:	9b 84       	ldd	r9, Y+11	; 0x0b
    39f6:	aa 84       	ldd	r10, Y+10	; 0x0a
    39f8:	b9 84       	ldd	r11, Y+9	; 0x09
    39fa:	c8 84       	ldd	r12, Y+8	; 0x08
    39fc:	df 80       	ldd	r13, Y+7	; 0x07
    39fe:	ee 80       	ldd	r14, Y+6	; 0x06
    3a00:	fd 80       	ldd	r15, Y+5	; 0x05
    3a02:	0c 81       	ldd	r16, Y+4	; 0x04
    3a04:	1b 81       	ldd	r17, Y+3	; 0x03
    3a06:	aa 81       	ldd	r26, Y+2	; 0x02
    3a08:	b9 81       	ldd	r27, Y+1	; 0x01
    3a0a:	ce 0f       	add	r28, r30
    3a0c:	d1 1d       	adc	r29, r1
    3a0e:	0f b6       	in	r0, 0x3f	; 63
    3a10:	f8 94       	cli
    3a12:	de bf       	out	0x3e, r29	; 62
    3a14:	0f be       	out	0x3f, r0	; 63
    3a16:	cd bf       	out	0x3d, r28	; 61
    3a18:	ed 01       	movw	r28, r26
    3a1a:	08 95       	ret

00003a1c <memset>:
    3a1c:	dc 01       	movw	r26, r24
    3a1e:	01 c0       	rjmp	.+2      	; 0x3a22 <memset+0x6>
    3a20:	6d 93       	st	X+, r22
    3a22:	41 50       	subi	r20, 0x01	; 1
    3a24:	50 40       	sbci	r21, 0x00	; 0
    3a26:	e0 f7       	brcc	.-8      	; 0x3a20 <memset+0x4>
    3a28:	08 95       	ret

00003a2a <sprintf>:
    3a2a:	ae e0       	ldi	r26, 0x0E	; 14
    3a2c:	b0 e0       	ldi	r27, 0x00	; 0
    3a2e:	eb e1       	ldi	r30, 0x1B	; 27
    3a30:	fd e1       	ldi	r31, 0x1D	; 29
    3a32:	0c 94 e5 1c 	jmp	0x39ca	; 0x39ca <__prologue_saves__+0x1c>
    3a36:	0d 89       	ldd	r16, Y+21	; 0x15
    3a38:	1e 89       	ldd	r17, Y+22	; 0x16
    3a3a:	86 e0       	ldi	r24, 0x06	; 6
    3a3c:	8c 83       	std	Y+4, r24	; 0x04
    3a3e:	1a 83       	std	Y+2, r17	; 0x02
    3a40:	09 83       	std	Y+1, r16	; 0x01
    3a42:	8f ef       	ldi	r24, 0xFF	; 255
    3a44:	9f e7       	ldi	r25, 0x7F	; 127
    3a46:	9e 83       	std	Y+6, r25	; 0x06
    3a48:	8d 83       	std	Y+5, r24	; 0x05
    3a4a:	9e 01       	movw	r18, r28
    3a4c:	27 5e       	subi	r18, 0xE7	; 231
    3a4e:	3f 4f       	sbci	r19, 0xFF	; 255
    3a50:	ce 01       	movw	r24, r28
    3a52:	01 96       	adiw	r24, 0x01	; 1
    3a54:	6f 89       	ldd	r22, Y+23	; 0x17
    3a56:	78 8d       	ldd	r23, Y+24	; 0x18
    3a58:	a9 01       	movw	r20, r18
    3a5a:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <vfprintf>
    3a5e:	2f 81       	ldd	r18, Y+7	; 0x07
    3a60:	38 85       	ldd	r19, Y+8	; 0x08
    3a62:	02 0f       	add	r16, r18
    3a64:	13 1f       	adc	r17, r19
    3a66:	f8 01       	movw	r30, r16
    3a68:	10 82       	st	Z, r1
    3a6a:	2e 96       	adiw	r28, 0x0e	; 14
    3a6c:	e4 e0       	ldi	r30, 0x04	; 4
    3a6e:	0c 94 01 1d 	jmp	0x3a02	; 0x3a02 <__epilogue_restores__+0x1c>

00003a72 <vfprintf>:
    3a72:	ab e0       	ldi	r26, 0x0B	; 11
    3a74:	b0 e0       	ldi	r27, 0x00	; 0
    3a76:	ef e3       	ldi	r30, 0x3F	; 63
    3a78:	fd e1       	ldi	r31, 0x1D	; 29
    3a7a:	0c 94 d7 1c 	jmp	0x39ae	; 0x39ae <__prologue_saves__>
    3a7e:	3c 01       	movw	r6, r24
    3a80:	2b 01       	movw	r4, r22
    3a82:	5a 01       	movw	r10, r20
    3a84:	fc 01       	movw	r30, r24
    3a86:	17 82       	std	Z+7, r1	; 0x07
    3a88:	16 82       	std	Z+6, r1	; 0x06
    3a8a:	83 81       	ldd	r24, Z+3	; 0x03
    3a8c:	81 fd       	sbrc	r24, 1
    3a8e:	03 c0       	rjmp	.+6      	; 0x3a96 <vfprintf+0x24>
    3a90:	6f ef       	ldi	r22, 0xFF	; 255
    3a92:	7f ef       	ldi	r23, 0xFF	; 255
    3a94:	c6 c1       	rjmp	.+908    	; 0x3e22 <vfprintf+0x3b0>
    3a96:	9a e0       	ldi	r25, 0x0A	; 10
    3a98:	89 2e       	mov	r8, r25
    3a9a:	1e 01       	movw	r2, r28
    3a9c:	08 94       	sec
    3a9e:	21 1c       	adc	r2, r1
    3aa0:	31 1c       	adc	r3, r1
    3aa2:	f3 01       	movw	r30, r6
    3aa4:	23 81       	ldd	r18, Z+3	; 0x03
    3aa6:	f2 01       	movw	r30, r4
    3aa8:	23 fd       	sbrc	r18, 3
    3aaa:	85 91       	lpm	r24, Z+
    3aac:	23 ff       	sbrs	r18, 3
    3aae:	81 91       	ld	r24, Z+
    3ab0:	2f 01       	movw	r4, r30
    3ab2:	88 23       	and	r24, r24
    3ab4:	09 f4       	brne	.+2      	; 0x3ab8 <vfprintf+0x46>
    3ab6:	b2 c1       	rjmp	.+868    	; 0x3e1c <vfprintf+0x3aa>
    3ab8:	85 32       	cpi	r24, 0x25	; 37
    3aba:	39 f4       	brne	.+14     	; 0x3aca <vfprintf+0x58>
    3abc:	23 fd       	sbrc	r18, 3
    3abe:	85 91       	lpm	r24, Z+
    3ac0:	23 ff       	sbrs	r18, 3
    3ac2:	81 91       	ld	r24, Z+
    3ac4:	2f 01       	movw	r4, r30
    3ac6:	85 32       	cpi	r24, 0x25	; 37
    3ac8:	29 f4       	brne	.+10     	; 0x3ad4 <vfprintf+0x62>
    3aca:	90 e0       	ldi	r25, 0x00	; 0
    3acc:	b3 01       	movw	r22, r6
    3ace:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <fputc>
    3ad2:	e7 cf       	rjmp	.-50     	; 0x3aa2 <vfprintf+0x30>
    3ad4:	98 2f       	mov	r25, r24
    3ad6:	ff 24       	eor	r15, r15
    3ad8:	ee 24       	eor	r14, r14
    3ada:	99 24       	eor	r9, r9
    3adc:	ff e1       	ldi	r31, 0x1F	; 31
    3ade:	ff 15       	cp	r31, r15
    3ae0:	d0 f0       	brcs	.+52     	; 0x3b16 <vfprintf+0xa4>
    3ae2:	9b 32       	cpi	r25, 0x2B	; 43
    3ae4:	69 f0       	breq	.+26     	; 0x3b00 <vfprintf+0x8e>
    3ae6:	9c 32       	cpi	r25, 0x2C	; 44
    3ae8:	28 f4       	brcc	.+10     	; 0x3af4 <vfprintf+0x82>
    3aea:	90 32       	cpi	r25, 0x20	; 32
    3aec:	59 f0       	breq	.+22     	; 0x3b04 <vfprintf+0x92>
    3aee:	93 32       	cpi	r25, 0x23	; 35
    3af0:	91 f4       	brne	.+36     	; 0x3b16 <vfprintf+0xa4>
    3af2:	0e c0       	rjmp	.+28     	; 0x3b10 <vfprintf+0x9e>
    3af4:	9d 32       	cpi	r25, 0x2D	; 45
    3af6:	49 f0       	breq	.+18     	; 0x3b0a <vfprintf+0x98>
    3af8:	90 33       	cpi	r25, 0x30	; 48
    3afa:	69 f4       	brne	.+26     	; 0x3b16 <vfprintf+0xa4>
    3afc:	41 e0       	ldi	r20, 0x01	; 1
    3afe:	24 c0       	rjmp	.+72     	; 0x3b48 <vfprintf+0xd6>
    3b00:	52 e0       	ldi	r21, 0x02	; 2
    3b02:	f5 2a       	or	r15, r21
    3b04:	84 e0       	ldi	r24, 0x04	; 4
    3b06:	f8 2a       	or	r15, r24
    3b08:	28 c0       	rjmp	.+80     	; 0x3b5a <vfprintf+0xe8>
    3b0a:	98 e0       	ldi	r25, 0x08	; 8
    3b0c:	f9 2a       	or	r15, r25
    3b0e:	25 c0       	rjmp	.+74     	; 0x3b5a <vfprintf+0xe8>
    3b10:	e0 e1       	ldi	r30, 0x10	; 16
    3b12:	fe 2a       	or	r15, r30
    3b14:	22 c0       	rjmp	.+68     	; 0x3b5a <vfprintf+0xe8>
    3b16:	f7 fc       	sbrc	r15, 7
    3b18:	29 c0       	rjmp	.+82     	; 0x3b6c <vfprintf+0xfa>
    3b1a:	89 2f       	mov	r24, r25
    3b1c:	80 53       	subi	r24, 0x30	; 48
    3b1e:	8a 30       	cpi	r24, 0x0A	; 10
    3b20:	70 f4       	brcc	.+28     	; 0x3b3e <vfprintf+0xcc>
    3b22:	f6 fe       	sbrs	r15, 6
    3b24:	05 c0       	rjmp	.+10     	; 0x3b30 <vfprintf+0xbe>
    3b26:	98 9c       	mul	r9, r8
    3b28:	90 2c       	mov	r9, r0
    3b2a:	11 24       	eor	r1, r1
    3b2c:	98 0e       	add	r9, r24
    3b2e:	15 c0       	rjmp	.+42     	; 0x3b5a <vfprintf+0xe8>
    3b30:	e8 9c       	mul	r14, r8
    3b32:	e0 2c       	mov	r14, r0
    3b34:	11 24       	eor	r1, r1
    3b36:	e8 0e       	add	r14, r24
    3b38:	f0 e2       	ldi	r31, 0x20	; 32
    3b3a:	ff 2a       	or	r15, r31
    3b3c:	0e c0       	rjmp	.+28     	; 0x3b5a <vfprintf+0xe8>
    3b3e:	9e 32       	cpi	r25, 0x2E	; 46
    3b40:	29 f4       	brne	.+10     	; 0x3b4c <vfprintf+0xda>
    3b42:	f6 fc       	sbrc	r15, 6
    3b44:	6b c1       	rjmp	.+726    	; 0x3e1c <vfprintf+0x3aa>
    3b46:	40 e4       	ldi	r20, 0x40	; 64
    3b48:	f4 2a       	or	r15, r20
    3b4a:	07 c0       	rjmp	.+14     	; 0x3b5a <vfprintf+0xe8>
    3b4c:	9c 36       	cpi	r25, 0x6C	; 108
    3b4e:	19 f4       	brne	.+6      	; 0x3b56 <vfprintf+0xe4>
    3b50:	50 e8       	ldi	r21, 0x80	; 128
    3b52:	f5 2a       	or	r15, r21
    3b54:	02 c0       	rjmp	.+4      	; 0x3b5a <vfprintf+0xe8>
    3b56:	98 36       	cpi	r25, 0x68	; 104
    3b58:	49 f4       	brne	.+18     	; 0x3b6c <vfprintf+0xfa>
    3b5a:	f2 01       	movw	r30, r4
    3b5c:	23 fd       	sbrc	r18, 3
    3b5e:	95 91       	lpm	r25, Z+
    3b60:	23 ff       	sbrs	r18, 3
    3b62:	91 91       	ld	r25, Z+
    3b64:	2f 01       	movw	r4, r30
    3b66:	99 23       	and	r25, r25
    3b68:	09 f0       	breq	.+2      	; 0x3b6c <vfprintf+0xfa>
    3b6a:	b8 cf       	rjmp	.-144    	; 0x3adc <vfprintf+0x6a>
    3b6c:	89 2f       	mov	r24, r25
    3b6e:	85 54       	subi	r24, 0x45	; 69
    3b70:	83 30       	cpi	r24, 0x03	; 3
    3b72:	18 f0       	brcs	.+6      	; 0x3b7a <vfprintf+0x108>
    3b74:	80 52       	subi	r24, 0x20	; 32
    3b76:	83 30       	cpi	r24, 0x03	; 3
    3b78:	38 f4       	brcc	.+14     	; 0x3b88 <vfprintf+0x116>
    3b7a:	44 e0       	ldi	r20, 0x04	; 4
    3b7c:	50 e0       	ldi	r21, 0x00	; 0
    3b7e:	a4 0e       	add	r10, r20
    3b80:	b5 1e       	adc	r11, r21
    3b82:	5f e3       	ldi	r21, 0x3F	; 63
    3b84:	59 83       	std	Y+1, r21	; 0x01
    3b86:	0f c0       	rjmp	.+30     	; 0x3ba6 <vfprintf+0x134>
    3b88:	93 36       	cpi	r25, 0x63	; 99
    3b8a:	31 f0       	breq	.+12     	; 0x3b98 <vfprintf+0x126>
    3b8c:	93 37       	cpi	r25, 0x73	; 115
    3b8e:	79 f0       	breq	.+30     	; 0x3bae <vfprintf+0x13c>
    3b90:	93 35       	cpi	r25, 0x53	; 83
    3b92:	09 f0       	breq	.+2      	; 0x3b96 <vfprintf+0x124>
    3b94:	56 c0       	rjmp	.+172    	; 0x3c42 <vfprintf+0x1d0>
    3b96:	20 c0       	rjmp	.+64     	; 0x3bd8 <vfprintf+0x166>
    3b98:	f5 01       	movw	r30, r10
    3b9a:	80 81       	ld	r24, Z
    3b9c:	89 83       	std	Y+1, r24	; 0x01
    3b9e:	42 e0       	ldi	r20, 0x02	; 2
    3ba0:	50 e0       	ldi	r21, 0x00	; 0
    3ba2:	a4 0e       	add	r10, r20
    3ba4:	b5 1e       	adc	r11, r21
    3ba6:	61 01       	movw	r12, r2
    3ba8:	01 e0       	ldi	r16, 0x01	; 1
    3baa:	10 e0       	ldi	r17, 0x00	; 0
    3bac:	12 c0       	rjmp	.+36     	; 0x3bd2 <vfprintf+0x160>
    3bae:	f5 01       	movw	r30, r10
    3bb0:	c0 80       	ld	r12, Z
    3bb2:	d1 80       	ldd	r13, Z+1	; 0x01
    3bb4:	f6 fc       	sbrc	r15, 6
    3bb6:	03 c0       	rjmp	.+6      	; 0x3bbe <vfprintf+0x14c>
    3bb8:	6f ef       	ldi	r22, 0xFF	; 255
    3bba:	7f ef       	ldi	r23, 0xFF	; 255
    3bbc:	02 c0       	rjmp	.+4      	; 0x3bc2 <vfprintf+0x150>
    3bbe:	69 2d       	mov	r22, r9
    3bc0:	70 e0       	ldi	r23, 0x00	; 0
    3bc2:	42 e0       	ldi	r20, 0x02	; 2
    3bc4:	50 e0       	ldi	r21, 0x00	; 0
    3bc6:	a4 0e       	add	r10, r20
    3bc8:	b5 1e       	adc	r11, r21
    3bca:	c6 01       	movw	r24, r12
    3bcc:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <strnlen>
    3bd0:	8c 01       	movw	r16, r24
    3bd2:	5f e7       	ldi	r21, 0x7F	; 127
    3bd4:	f5 22       	and	r15, r21
    3bd6:	14 c0       	rjmp	.+40     	; 0x3c00 <vfprintf+0x18e>
    3bd8:	f5 01       	movw	r30, r10
    3bda:	c0 80       	ld	r12, Z
    3bdc:	d1 80       	ldd	r13, Z+1	; 0x01
    3bde:	f6 fc       	sbrc	r15, 6
    3be0:	03 c0       	rjmp	.+6      	; 0x3be8 <vfprintf+0x176>
    3be2:	6f ef       	ldi	r22, 0xFF	; 255
    3be4:	7f ef       	ldi	r23, 0xFF	; 255
    3be6:	02 c0       	rjmp	.+4      	; 0x3bec <vfprintf+0x17a>
    3be8:	69 2d       	mov	r22, r9
    3bea:	70 e0       	ldi	r23, 0x00	; 0
    3bec:	42 e0       	ldi	r20, 0x02	; 2
    3bee:	50 e0       	ldi	r21, 0x00	; 0
    3bf0:	a4 0e       	add	r10, r20
    3bf2:	b5 1e       	adc	r11, r21
    3bf4:	c6 01       	movw	r24, r12
    3bf6:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <strnlen_P>
    3bfa:	8c 01       	movw	r16, r24
    3bfc:	50 e8       	ldi	r21, 0x80	; 128
    3bfe:	f5 2a       	or	r15, r21
    3c00:	f3 fe       	sbrs	r15, 3
    3c02:	07 c0       	rjmp	.+14     	; 0x3c12 <vfprintf+0x1a0>
    3c04:	1a c0       	rjmp	.+52     	; 0x3c3a <vfprintf+0x1c8>
    3c06:	80 e2       	ldi	r24, 0x20	; 32
    3c08:	90 e0       	ldi	r25, 0x00	; 0
    3c0a:	b3 01       	movw	r22, r6
    3c0c:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <fputc>
    3c10:	ea 94       	dec	r14
    3c12:	8e 2d       	mov	r24, r14
    3c14:	90 e0       	ldi	r25, 0x00	; 0
    3c16:	08 17       	cp	r16, r24
    3c18:	19 07       	cpc	r17, r25
    3c1a:	a8 f3       	brcs	.-22     	; 0x3c06 <vfprintf+0x194>
    3c1c:	0e c0       	rjmp	.+28     	; 0x3c3a <vfprintf+0x1c8>
    3c1e:	f6 01       	movw	r30, r12
    3c20:	f7 fc       	sbrc	r15, 7
    3c22:	85 91       	lpm	r24, Z+
    3c24:	f7 fe       	sbrs	r15, 7
    3c26:	81 91       	ld	r24, Z+
    3c28:	6f 01       	movw	r12, r30
    3c2a:	90 e0       	ldi	r25, 0x00	; 0
    3c2c:	b3 01       	movw	r22, r6
    3c2e:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <fputc>
    3c32:	e1 10       	cpse	r14, r1
    3c34:	ea 94       	dec	r14
    3c36:	01 50       	subi	r16, 0x01	; 1
    3c38:	10 40       	sbci	r17, 0x00	; 0
    3c3a:	01 15       	cp	r16, r1
    3c3c:	11 05       	cpc	r17, r1
    3c3e:	79 f7       	brne	.-34     	; 0x3c1e <vfprintf+0x1ac>
    3c40:	ea c0       	rjmp	.+468    	; 0x3e16 <vfprintf+0x3a4>
    3c42:	94 36       	cpi	r25, 0x64	; 100
    3c44:	11 f0       	breq	.+4      	; 0x3c4a <vfprintf+0x1d8>
    3c46:	99 36       	cpi	r25, 0x69	; 105
    3c48:	69 f5       	brne	.+90     	; 0x3ca4 <vfprintf+0x232>
    3c4a:	f7 fe       	sbrs	r15, 7
    3c4c:	08 c0       	rjmp	.+16     	; 0x3c5e <vfprintf+0x1ec>
    3c4e:	f5 01       	movw	r30, r10
    3c50:	20 81       	ld	r18, Z
    3c52:	31 81       	ldd	r19, Z+1	; 0x01
    3c54:	42 81       	ldd	r20, Z+2	; 0x02
    3c56:	53 81       	ldd	r21, Z+3	; 0x03
    3c58:	84 e0       	ldi	r24, 0x04	; 4
    3c5a:	90 e0       	ldi	r25, 0x00	; 0
    3c5c:	0a c0       	rjmp	.+20     	; 0x3c72 <vfprintf+0x200>
    3c5e:	f5 01       	movw	r30, r10
    3c60:	80 81       	ld	r24, Z
    3c62:	91 81       	ldd	r25, Z+1	; 0x01
    3c64:	9c 01       	movw	r18, r24
    3c66:	44 27       	eor	r20, r20
    3c68:	37 fd       	sbrc	r19, 7
    3c6a:	40 95       	com	r20
    3c6c:	54 2f       	mov	r21, r20
    3c6e:	82 e0       	ldi	r24, 0x02	; 2
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	a8 0e       	add	r10, r24
    3c74:	b9 1e       	adc	r11, r25
    3c76:	9f e6       	ldi	r25, 0x6F	; 111
    3c78:	f9 22       	and	r15, r25
    3c7a:	57 ff       	sbrs	r21, 7
    3c7c:	09 c0       	rjmp	.+18     	; 0x3c90 <vfprintf+0x21e>
    3c7e:	50 95       	com	r21
    3c80:	40 95       	com	r20
    3c82:	30 95       	com	r19
    3c84:	21 95       	neg	r18
    3c86:	3f 4f       	sbci	r19, 0xFF	; 255
    3c88:	4f 4f       	sbci	r20, 0xFF	; 255
    3c8a:	5f 4f       	sbci	r21, 0xFF	; 255
    3c8c:	e0 e8       	ldi	r30, 0x80	; 128
    3c8e:	fe 2a       	or	r15, r30
    3c90:	ca 01       	movw	r24, r20
    3c92:	b9 01       	movw	r22, r18
    3c94:	a1 01       	movw	r20, r2
    3c96:	2a e0       	ldi	r18, 0x0A	; 10
    3c98:	30 e0       	ldi	r19, 0x00	; 0
    3c9a:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <__ultoa_invert>
    3c9e:	d8 2e       	mov	r13, r24
    3ca0:	d2 18       	sub	r13, r2
    3ca2:	40 c0       	rjmp	.+128    	; 0x3d24 <vfprintf+0x2b2>
    3ca4:	95 37       	cpi	r25, 0x75	; 117
    3ca6:	29 f4       	brne	.+10     	; 0x3cb2 <vfprintf+0x240>
    3ca8:	1f 2d       	mov	r17, r15
    3caa:	1f 7e       	andi	r17, 0xEF	; 239
    3cac:	2a e0       	ldi	r18, 0x0A	; 10
    3cae:	30 e0       	ldi	r19, 0x00	; 0
    3cb0:	1d c0       	rjmp	.+58     	; 0x3cec <vfprintf+0x27a>
    3cb2:	1f 2d       	mov	r17, r15
    3cb4:	19 7f       	andi	r17, 0xF9	; 249
    3cb6:	9f 36       	cpi	r25, 0x6F	; 111
    3cb8:	61 f0       	breq	.+24     	; 0x3cd2 <vfprintf+0x260>
    3cba:	90 37       	cpi	r25, 0x70	; 112
    3cbc:	20 f4       	brcc	.+8      	; 0x3cc6 <vfprintf+0x254>
    3cbe:	98 35       	cpi	r25, 0x58	; 88
    3cc0:	09 f0       	breq	.+2      	; 0x3cc4 <vfprintf+0x252>
    3cc2:	ac c0       	rjmp	.+344    	; 0x3e1c <vfprintf+0x3aa>
    3cc4:	0f c0       	rjmp	.+30     	; 0x3ce4 <vfprintf+0x272>
    3cc6:	90 37       	cpi	r25, 0x70	; 112
    3cc8:	39 f0       	breq	.+14     	; 0x3cd8 <vfprintf+0x266>
    3cca:	98 37       	cpi	r25, 0x78	; 120
    3ccc:	09 f0       	breq	.+2      	; 0x3cd0 <vfprintf+0x25e>
    3cce:	a6 c0       	rjmp	.+332    	; 0x3e1c <vfprintf+0x3aa>
    3cd0:	04 c0       	rjmp	.+8      	; 0x3cda <vfprintf+0x268>
    3cd2:	28 e0       	ldi	r18, 0x08	; 8
    3cd4:	30 e0       	ldi	r19, 0x00	; 0
    3cd6:	0a c0       	rjmp	.+20     	; 0x3cec <vfprintf+0x27a>
    3cd8:	10 61       	ori	r17, 0x10	; 16
    3cda:	14 fd       	sbrc	r17, 4
    3cdc:	14 60       	ori	r17, 0x04	; 4
    3cde:	20 e1       	ldi	r18, 0x10	; 16
    3ce0:	30 e0       	ldi	r19, 0x00	; 0
    3ce2:	04 c0       	rjmp	.+8      	; 0x3cec <vfprintf+0x27a>
    3ce4:	14 fd       	sbrc	r17, 4
    3ce6:	16 60       	ori	r17, 0x06	; 6
    3ce8:	20 e1       	ldi	r18, 0x10	; 16
    3cea:	32 e0       	ldi	r19, 0x02	; 2
    3cec:	17 ff       	sbrs	r17, 7
    3cee:	08 c0       	rjmp	.+16     	; 0x3d00 <vfprintf+0x28e>
    3cf0:	f5 01       	movw	r30, r10
    3cf2:	60 81       	ld	r22, Z
    3cf4:	71 81       	ldd	r23, Z+1	; 0x01
    3cf6:	82 81       	ldd	r24, Z+2	; 0x02
    3cf8:	93 81       	ldd	r25, Z+3	; 0x03
    3cfa:	44 e0       	ldi	r20, 0x04	; 4
    3cfc:	50 e0       	ldi	r21, 0x00	; 0
    3cfe:	08 c0       	rjmp	.+16     	; 0x3d10 <vfprintf+0x29e>
    3d00:	f5 01       	movw	r30, r10
    3d02:	80 81       	ld	r24, Z
    3d04:	91 81       	ldd	r25, Z+1	; 0x01
    3d06:	bc 01       	movw	r22, r24
    3d08:	80 e0       	ldi	r24, 0x00	; 0
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	42 e0       	ldi	r20, 0x02	; 2
    3d0e:	50 e0       	ldi	r21, 0x00	; 0
    3d10:	a4 0e       	add	r10, r20
    3d12:	b5 1e       	adc	r11, r21
    3d14:	a1 01       	movw	r20, r2
    3d16:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <__ultoa_invert>
    3d1a:	d8 2e       	mov	r13, r24
    3d1c:	d2 18       	sub	r13, r2
    3d1e:	8f e7       	ldi	r24, 0x7F	; 127
    3d20:	f8 2e       	mov	r15, r24
    3d22:	f1 22       	and	r15, r17
    3d24:	f6 fe       	sbrs	r15, 6
    3d26:	0b c0       	rjmp	.+22     	; 0x3d3e <vfprintf+0x2cc>
    3d28:	5e ef       	ldi	r21, 0xFE	; 254
    3d2a:	f5 22       	and	r15, r21
    3d2c:	d9 14       	cp	r13, r9
    3d2e:	38 f4       	brcc	.+14     	; 0x3d3e <vfprintf+0x2cc>
    3d30:	f4 fe       	sbrs	r15, 4
    3d32:	07 c0       	rjmp	.+14     	; 0x3d42 <vfprintf+0x2d0>
    3d34:	f2 fc       	sbrc	r15, 2
    3d36:	05 c0       	rjmp	.+10     	; 0x3d42 <vfprintf+0x2d0>
    3d38:	8f ee       	ldi	r24, 0xEF	; 239
    3d3a:	f8 22       	and	r15, r24
    3d3c:	02 c0       	rjmp	.+4      	; 0x3d42 <vfprintf+0x2d0>
    3d3e:	1d 2d       	mov	r17, r13
    3d40:	01 c0       	rjmp	.+2      	; 0x3d44 <vfprintf+0x2d2>
    3d42:	19 2d       	mov	r17, r9
    3d44:	f4 fe       	sbrs	r15, 4
    3d46:	0d c0       	rjmp	.+26     	; 0x3d62 <vfprintf+0x2f0>
    3d48:	fe 01       	movw	r30, r28
    3d4a:	ed 0d       	add	r30, r13
    3d4c:	f1 1d       	adc	r31, r1
    3d4e:	80 81       	ld	r24, Z
    3d50:	80 33       	cpi	r24, 0x30	; 48
    3d52:	19 f4       	brne	.+6      	; 0x3d5a <vfprintf+0x2e8>
    3d54:	99 ee       	ldi	r25, 0xE9	; 233
    3d56:	f9 22       	and	r15, r25
    3d58:	08 c0       	rjmp	.+16     	; 0x3d6a <vfprintf+0x2f8>
    3d5a:	1f 5f       	subi	r17, 0xFF	; 255
    3d5c:	f2 fe       	sbrs	r15, 2
    3d5e:	05 c0       	rjmp	.+10     	; 0x3d6a <vfprintf+0x2f8>
    3d60:	03 c0       	rjmp	.+6      	; 0x3d68 <vfprintf+0x2f6>
    3d62:	8f 2d       	mov	r24, r15
    3d64:	86 78       	andi	r24, 0x86	; 134
    3d66:	09 f0       	breq	.+2      	; 0x3d6a <vfprintf+0x2f8>
    3d68:	1f 5f       	subi	r17, 0xFF	; 255
    3d6a:	0f 2d       	mov	r16, r15
    3d6c:	f3 fc       	sbrc	r15, 3
    3d6e:	14 c0       	rjmp	.+40     	; 0x3d98 <vfprintf+0x326>
    3d70:	f0 fe       	sbrs	r15, 0
    3d72:	0f c0       	rjmp	.+30     	; 0x3d92 <vfprintf+0x320>
    3d74:	1e 15       	cp	r17, r14
    3d76:	10 f0       	brcs	.+4      	; 0x3d7c <vfprintf+0x30a>
    3d78:	9d 2c       	mov	r9, r13
    3d7a:	0b c0       	rjmp	.+22     	; 0x3d92 <vfprintf+0x320>
    3d7c:	9d 2c       	mov	r9, r13
    3d7e:	9e 0c       	add	r9, r14
    3d80:	91 1a       	sub	r9, r17
    3d82:	1e 2d       	mov	r17, r14
    3d84:	06 c0       	rjmp	.+12     	; 0x3d92 <vfprintf+0x320>
    3d86:	80 e2       	ldi	r24, 0x20	; 32
    3d88:	90 e0       	ldi	r25, 0x00	; 0
    3d8a:	b3 01       	movw	r22, r6
    3d8c:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <fputc>
    3d90:	1f 5f       	subi	r17, 0xFF	; 255
    3d92:	1e 15       	cp	r17, r14
    3d94:	c0 f3       	brcs	.-16     	; 0x3d86 <vfprintf+0x314>
    3d96:	04 c0       	rjmp	.+8      	; 0x3da0 <vfprintf+0x32e>
    3d98:	1e 15       	cp	r17, r14
    3d9a:	10 f4       	brcc	.+4      	; 0x3da0 <vfprintf+0x32e>
    3d9c:	e1 1a       	sub	r14, r17
    3d9e:	01 c0       	rjmp	.+2      	; 0x3da2 <vfprintf+0x330>
    3da0:	ee 24       	eor	r14, r14
    3da2:	04 ff       	sbrs	r16, 4
    3da4:	0f c0       	rjmp	.+30     	; 0x3dc4 <vfprintf+0x352>
    3da6:	80 e3       	ldi	r24, 0x30	; 48
    3da8:	90 e0       	ldi	r25, 0x00	; 0
    3daa:	b3 01       	movw	r22, r6
    3dac:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <fputc>
    3db0:	02 ff       	sbrs	r16, 2
    3db2:	1d c0       	rjmp	.+58     	; 0x3dee <vfprintf+0x37c>
    3db4:	01 fd       	sbrc	r16, 1
    3db6:	03 c0       	rjmp	.+6      	; 0x3dbe <vfprintf+0x34c>
    3db8:	88 e7       	ldi	r24, 0x78	; 120
    3dba:	90 e0       	ldi	r25, 0x00	; 0
    3dbc:	0e c0       	rjmp	.+28     	; 0x3dda <vfprintf+0x368>
    3dbe:	88 e5       	ldi	r24, 0x58	; 88
    3dc0:	90 e0       	ldi	r25, 0x00	; 0
    3dc2:	0b c0       	rjmp	.+22     	; 0x3dda <vfprintf+0x368>
    3dc4:	80 2f       	mov	r24, r16
    3dc6:	86 78       	andi	r24, 0x86	; 134
    3dc8:	91 f0       	breq	.+36     	; 0x3dee <vfprintf+0x37c>
    3dca:	01 ff       	sbrs	r16, 1
    3dcc:	02 c0       	rjmp	.+4      	; 0x3dd2 <vfprintf+0x360>
    3dce:	8b e2       	ldi	r24, 0x2B	; 43
    3dd0:	01 c0       	rjmp	.+2      	; 0x3dd4 <vfprintf+0x362>
    3dd2:	80 e2       	ldi	r24, 0x20	; 32
    3dd4:	f7 fc       	sbrc	r15, 7
    3dd6:	8d e2       	ldi	r24, 0x2D	; 45
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	b3 01       	movw	r22, r6
    3ddc:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <fputc>
    3de0:	06 c0       	rjmp	.+12     	; 0x3dee <vfprintf+0x37c>
    3de2:	80 e3       	ldi	r24, 0x30	; 48
    3de4:	90 e0       	ldi	r25, 0x00	; 0
    3de6:	b3 01       	movw	r22, r6
    3de8:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <fputc>
    3dec:	9a 94       	dec	r9
    3dee:	d9 14       	cp	r13, r9
    3df0:	c0 f3       	brcs	.-16     	; 0x3de2 <vfprintf+0x370>
    3df2:	da 94       	dec	r13
    3df4:	f1 01       	movw	r30, r2
    3df6:	ed 0d       	add	r30, r13
    3df8:	f1 1d       	adc	r31, r1
    3dfa:	80 81       	ld	r24, Z
    3dfc:	90 e0       	ldi	r25, 0x00	; 0
    3dfe:	b3 01       	movw	r22, r6
    3e00:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <fputc>
    3e04:	dd 20       	and	r13, r13
    3e06:	a9 f7       	brne	.-22     	; 0x3df2 <vfprintf+0x380>
    3e08:	06 c0       	rjmp	.+12     	; 0x3e16 <vfprintf+0x3a4>
    3e0a:	80 e2       	ldi	r24, 0x20	; 32
    3e0c:	90 e0       	ldi	r25, 0x00	; 0
    3e0e:	b3 01       	movw	r22, r6
    3e10:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <fputc>
    3e14:	ea 94       	dec	r14
    3e16:	ee 20       	and	r14, r14
    3e18:	c1 f7       	brne	.-16     	; 0x3e0a <vfprintf+0x398>
    3e1a:	43 ce       	rjmp	.-890    	; 0x3aa2 <vfprintf+0x30>
    3e1c:	f3 01       	movw	r30, r6
    3e1e:	66 81       	ldd	r22, Z+6	; 0x06
    3e20:	77 81       	ldd	r23, Z+7	; 0x07
    3e22:	cb 01       	movw	r24, r22
    3e24:	2b 96       	adiw	r28, 0x0b	; 11
    3e26:	e2 e1       	ldi	r30, 0x12	; 18
    3e28:	0c 94 f3 1c 	jmp	0x39e6	; 0x39e6 <__epilogue_restores__>

00003e2c <strnlen_P>:
    3e2c:	fc 01       	movw	r30, r24
    3e2e:	05 90       	lpm	r0, Z+
    3e30:	61 50       	subi	r22, 0x01	; 1
    3e32:	70 40       	sbci	r23, 0x00	; 0
    3e34:	01 10       	cpse	r0, r1
    3e36:	d8 f7       	brcc	.-10     	; 0x3e2e <strnlen_P+0x2>
    3e38:	80 95       	com	r24
    3e3a:	90 95       	com	r25
    3e3c:	8e 0f       	add	r24, r30
    3e3e:	9f 1f       	adc	r25, r31
    3e40:	08 95       	ret

00003e42 <strnlen>:
    3e42:	fc 01       	movw	r30, r24
    3e44:	61 50       	subi	r22, 0x01	; 1
    3e46:	70 40       	sbci	r23, 0x00	; 0
    3e48:	01 90       	ld	r0, Z+
    3e4a:	01 10       	cpse	r0, r1
    3e4c:	d8 f7       	brcc	.-10     	; 0x3e44 <strnlen+0x2>
    3e4e:	80 95       	com	r24
    3e50:	90 95       	com	r25
    3e52:	8e 0f       	add	r24, r30
    3e54:	9f 1f       	adc	r25, r31
    3e56:	08 95       	ret

00003e58 <fputc>:
    3e58:	0f 93       	push	r16
    3e5a:	1f 93       	push	r17
    3e5c:	cf 93       	push	r28
    3e5e:	df 93       	push	r29
    3e60:	8c 01       	movw	r16, r24
    3e62:	eb 01       	movw	r28, r22
    3e64:	8b 81       	ldd	r24, Y+3	; 0x03
    3e66:	81 ff       	sbrs	r24, 1
    3e68:	1b c0       	rjmp	.+54     	; 0x3ea0 <fputc+0x48>
    3e6a:	82 ff       	sbrs	r24, 2
    3e6c:	0d c0       	rjmp	.+26     	; 0x3e88 <fputc+0x30>
    3e6e:	2e 81       	ldd	r18, Y+6	; 0x06
    3e70:	3f 81       	ldd	r19, Y+7	; 0x07
    3e72:	8c 81       	ldd	r24, Y+4	; 0x04
    3e74:	9d 81       	ldd	r25, Y+5	; 0x05
    3e76:	28 17       	cp	r18, r24
    3e78:	39 07       	cpc	r19, r25
    3e7a:	64 f4       	brge	.+24     	; 0x3e94 <fputc+0x3c>
    3e7c:	e8 81       	ld	r30, Y
    3e7e:	f9 81       	ldd	r31, Y+1	; 0x01
    3e80:	01 93       	st	Z+, r16
    3e82:	f9 83       	std	Y+1, r31	; 0x01
    3e84:	e8 83       	st	Y, r30
    3e86:	06 c0       	rjmp	.+12     	; 0x3e94 <fputc+0x3c>
    3e88:	e8 85       	ldd	r30, Y+8	; 0x08
    3e8a:	f9 85       	ldd	r31, Y+9	; 0x09
    3e8c:	80 2f       	mov	r24, r16
    3e8e:	09 95       	icall
    3e90:	89 2b       	or	r24, r25
    3e92:	31 f4       	brne	.+12     	; 0x3ea0 <fputc+0x48>
    3e94:	8e 81       	ldd	r24, Y+6	; 0x06
    3e96:	9f 81       	ldd	r25, Y+7	; 0x07
    3e98:	01 96       	adiw	r24, 0x01	; 1
    3e9a:	9f 83       	std	Y+7, r25	; 0x07
    3e9c:	8e 83       	std	Y+6, r24	; 0x06
    3e9e:	02 c0       	rjmp	.+4      	; 0x3ea4 <fputc+0x4c>
    3ea0:	0f ef       	ldi	r16, 0xFF	; 255
    3ea2:	1f ef       	ldi	r17, 0xFF	; 255
    3ea4:	c8 01       	movw	r24, r16
    3ea6:	df 91       	pop	r29
    3ea8:	cf 91       	pop	r28
    3eaa:	1f 91       	pop	r17
    3eac:	0f 91       	pop	r16
    3eae:	08 95       	ret

00003eb0 <__ultoa_invert>:
    3eb0:	fa 01       	movw	r30, r20
    3eb2:	aa 27       	eor	r26, r26
    3eb4:	28 30       	cpi	r18, 0x08	; 8
    3eb6:	51 f1       	breq	.+84     	; 0x3f0c <__ultoa_invert+0x5c>
    3eb8:	20 31       	cpi	r18, 0x10	; 16
    3eba:	81 f1       	breq	.+96     	; 0x3f1c <__ultoa_invert+0x6c>
    3ebc:	e8 94       	clt
    3ebe:	6f 93       	push	r22
    3ec0:	6e 7f       	andi	r22, 0xFE	; 254
    3ec2:	6e 5f       	subi	r22, 0xFE	; 254
    3ec4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ec6:	8f 4f       	sbci	r24, 0xFF	; 255
    3ec8:	9f 4f       	sbci	r25, 0xFF	; 255
    3eca:	af 4f       	sbci	r26, 0xFF	; 255
    3ecc:	b1 e0       	ldi	r27, 0x01	; 1
    3ece:	3e d0       	rcall	.+124    	; 0x3f4c <__ultoa_invert+0x9c>
    3ed0:	b4 e0       	ldi	r27, 0x04	; 4
    3ed2:	3c d0       	rcall	.+120    	; 0x3f4c <__ultoa_invert+0x9c>
    3ed4:	67 0f       	add	r22, r23
    3ed6:	78 1f       	adc	r23, r24
    3ed8:	89 1f       	adc	r24, r25
    3eda:	9a 1f       	adc	r25, r26
    3edc:	a1 1d       	adc	r26, r1
    3ede:	68 0f       	add	r22, r24
    3ee0:	79 1f       	adc	r23, r25
    3ee2:	8a 1f       	adc	r24, r26
    3ee4:	91 1d       	adc	r25, r1
    3ee6:	a1 1d       	adc	r26, r1
    3ee8:	6a 0f       	add	r22, r26
    3eea:	71 1d       	adc	r23, r1
    3eec:	81 1d       	adc	r24, r1
    3eee:	91 1d       	adc	r25, r1
    3ef0:	a1 1d       	adc	r26, r1
    3ef2:	20 d0       	rcall	.+64     	; 0x3f34 <__ultoa_invert+0x84>
    3ef4:	09 f4       	brne	.+2      	; 0x3ef8 <__ultoa_invert+0x48>
    3ef6:	68 94       	set
    3ef8:	3f 91       	pop	r19
    3efa:	2a e0       	ldi	r18, 0x0A	; 10
    3efc:	26 9f       	mul	r18, r22
    3efe:	11 24       	eor	r1, r1
    3f00:	30 19       	sub	r19, r0
    3f02:	30 5d       	subi	r19, 0xD0	; 208
    3f04:	31 93       	st	Z+, r19
    3f06:	de f6       	brtc	.-74     	; 0x3ebe <__ultoa_invert+0xe>
    3f08:	cf 01       	movw	r24, r30
    3f0a:	08 95       	ret
    3f0c:	46 2f       	mov	r20, r22
    3f0e:	47 70       	andi	r20, 0x07	; 7
    3f10:	40 5d       	subi	r20, 0xD0	; 208
    3f12:	41 93       	st	Z+, r20
    3f14:	b3 e0       	ldi	r27, 0x03	; 3
    3f16:	0f d0       	rcall	.+30     	; 0x3f36 <__ultoa_invert+0x86>
    3f18:	c9 f7       	brne	.-14     	; 0x3f0c <__ultoa_invert+0x5c>
    3f1a:	f6 cf       	rjmp	.-20     	; 0x3f08 <__ultoa_invert+0x58>
    3f1c:	46 2f       	mov	r20, r22
    3f1e:	4f 70       	andi	r20, 0x0F	; 15
    3f20:	40 5d       	subi	r20, 0xD0	; 208
    3f22:	4a 33       	cpi	r20, 0x3A	; 58
    3f24:	18 f0       	brcs	.+6      	; 0x3f2c <__ultoa_invert+0x7c>
    3f26:	49 5d       	subi	r20, 0xD9	; 217
    3f28:	31 fd       	sbrc	r19, 1
    3f2a:	40 52       	subi	r20, 0x20	; 32
    3f2c:	41 93       	st	Z+, r20
    3f2e:	02 d0       	rcall	.+4      	; 0x3f34 <__ultoa_invert+0x84>
    3f30:	a9 f7       	brne	.-22     	; 0x3f1c <__ultoa_invert+0x6c>
    3f32:	ea cf       	rjmp	.-44     	; 0x3f08 <__ultoa_invert+0x58>
    3f34:	b4 e0       	ldi	r27, 0x04	; 4
    3f36:	a6 95       	lsr	r26
    3f38:	97 95       	ror	r25
    3f3a:	87 95       	ror	r24
    3f3c:	77 95       	ror	r23
    3f3e:	67 95       	ror	r22
    3f40:	ba 95       	dec	r27
    3f42:	c9 f7       	brne	.-14     	; 0x3f36 <__ultoa_invert+0x86>
    3f44:	00 97       	sbiw	r24, 0x00	; 0
    3f46:	61 05       	cpc	r22, r1
    3f48:	71 05       	cpc	r23, r1
    3f4a:	08 95       	ret
    3f4c:	9b 01       	movw	r18, r22
    3f4e:	ac 01       	movw	r20, r24
    3f50:	0a 2e       	mov	r0, r26
    3f52:	06 94       	lsr	r0
    3f54:	57 95       	ror	r21
    3f56:	47 95       	ror	r20
    3f58:	37 95       	ror	r19
    3f5a:	27 95       	ror	r18
    3f5c:	ba 95       	dec	r27
    3f5e:	c9 f7       	brne	.-14     	; 0x3f52 <__ultoa_invert+0xa2>
    3f60:	62 0f       	add	r22, r18
    3f62:	73 1f       	adc	r23, r19
    3f64:	84 1f       	adc	r24, r20
    3f66:	95 1f       	adc	r25, r21
    3f68:	a0 1d       	adc	r26, r0
    3f6a:	08 95       	ret

00003f6c <_exit>:
    3f6c:	f8 94       	cli

00003f6e <__stop_program>:
    3f6e:	ff cf       	rjmp	.-2      	; 0x3f6e <__stop_program>
