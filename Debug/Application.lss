
Application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000044ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007e  00800060  000044ea  0000457e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  008000de  008000de  000045fc  2**0
                  ALLOC
  3 .stab         000069d8  00000000  00000000  000045fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000039f6  00000000  00000000  0000afd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000e9ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000eb0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000ec7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000108c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000117ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0001255c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000126bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00012949  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013117  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__vector_1>
       8:	0c 94 b3 08 	jmp	0x1166	; 0x1166 <__vector_2>
       c:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 07 09 	jmp	0x120e	; 0x120e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ee       	ldi	r30, 0xEA	; 234
      68:	f4 e4       	ldi	r31, 0x44	; 68
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3d       	cpi	r26, 0xDE	; 222
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae ed       	ldi	r26, 0xDE	; 222
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3e       	cpi	r26, 0xEF	; 239
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <main>
      8a:	0c 94 73 22 	jmp	0x44e6	; 0x44e6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 94 1f 	jmp	0x3f28	; 0x3f28 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e6       	ldi	r26, 0x63	; 99
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b0 1f 	jmp	0x3f60	; 0x3f60 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a0 1f 	jmp	0x3f40	; 0x3f40 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bc 1f 	jmp	0x3f78	; 0x3f78 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a0 1f 	jmp	0x3f40	; 0x3f40 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bc 1f 	jmp	0x3f78	; 0x3f78 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 94 1f 	jmp	0x3f28	; 0x3f28 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e6       	ldi	r24, 0x63	; 99
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b0 1f 	jmp	0x3f60	; 0x3f60 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a0 1f 	jmp	0x3f40	; 0x3f40 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 bc 1f 	jmp	0x3f78	; 0x3f78 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a0 1f 	jmp	0x3f40	; 0x3f40 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 bc 1f 	jmp	0x3f78	; 0x3f78 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a0 1f 	jmp	0x3f40	; 0x3f40 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 bc 1f 	jmp	0x3f78	; 0x3f78 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a4 1f 	jmp	0x3f48	; 0x3f48 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c0 1f 	jmp	0x3f80	; 0x3f80 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <interrupt_INTx_init>:
 *
 * @param int_obj
 * @return
 */
STD_ReturnStatus interrupt_INTx_init(const interrupt_INTx_t *int_obj)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <interrupt_INTx_init+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9b 83       	std	Y+3, r25	; 0x03
     b54:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
     b56:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==int_obj)
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	9b 81       	ldd	r25, Y+3	; 0x03
     b5c:	00 97       	sbiw	r24, 0x00	; 0
     b5e:	11 f4       	brne	.+4      	; 0xb64 <interrupt_INTx_init+0x1e>
	{
		ret = E_NOT_OK;
     b60:	19 82       	std	Y+1, r1	; 0x01
     b62:	1e c0       	rjmp	.+60     	; 0xba0 <interrupt_INTx_init+0x5a>
	}
	else
	{
		/*	Disable the External Interrupt*/
		ret = interrupt_INTx_Disable(int_obj);
     b64:	8a 81       	ldd	r24, Y+2	; 0x02
     b66:	9b 81       	ldd	r25, Y+3	; 0x03
     b68:	0e 94 9f 06 	call	0xd3e	; 0xd3e <interrupt_INTx_Disable>
     b6c:	89 83       	std	Y+1, r24	; 0x01
		/*	Clear Interrupt Flag : External interrupt did not occur*/
		ret = interrupt_INTx_Clear_Flag(int_obj);
     b6e:	8a 81       	ldd	r24, Y+2	; 0x02
     b70:	9b 81       	ldd	r25, Y+3	; 0x03
     b72:	0e 94 9b 07 	call	0xf36	; 0xf36 <interrupt_INTx_Clear_Flag>
     b76:	89 83       	std	Y+1, r24	; 0x01
		/*	configure External interrupt edge*/
		ret = interrupt_INTx_Edge_Init(int_obj);
     b78:	8a 81       	ldd	r24, Y+2	; 0x02
     b7a:	9b 81       	ldd	r25, Y+3	; 0x03
     b7c:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <interrupt_INTx_Edge_Init>
     b80:	89 83       	std	Y+1, r24	; 0x01
		/*	configure External interrupt I/O pin*/
		ret = interrupt_INTx_Pin_Init(int_obj);
     b82:	8a 81       	ldd	r24, Y+2	; 0x02
     b84:	9b 81       	ldd	r25, Y+3	; 0x03
     b86:	0e 94 7f 07 	call	0xefe	; 0xefe <interrupt_INTx_Pin_Init>
     b8a:	89 83       	std	Y+1, r24	; 0x01
		/*	configure Default Interrupt Call Back*/
		ret = interrupt_INTx_SetInterruptHandler(int_obj);
     b8c:	8a 81       	ldd	r24, Y+2	; 0x02
     b8e:	9b 81       	ldd	r25, Y+3	; 0x03
     b90:	0e 94 42 08 	call	0x1084	; 0x1084 <interrupt_INTx_SetInterruptHandler>
     b94:	89 83       	std	Y+1, r24	; 0x01
		/*	Enable the External Interrupt*/
		ret = interrupt_INTx_Enable(int_obj);
     b96:	8a 81       	ldd	r24, Y+2	; 0x02
     b98:	9b 81       	ldd	r25, Y+3	; 0x03
     b9a:	0e 94 3d 06 	call	0xc7a	; 0xc7a <interrupt_INTx_Enable>
     b9e:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ba2:	0f 90       	pop	r0
     ba4:	0f 90       	pop	r0
     ba6:	0f 90       	pop	r0
     ba8:	cf 91       	pop	r28
     baa:	df 91       	pop	r29
     bac:	08 95       	ret

00000bae <INT0_ISR>:


void INT0_ISR(void)
{
     bae:	df 93       	push	r29
     bb0:	cf 93       	push	r28
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
	/* Clear flag*/
	EXT_INT0_InterruptFlagClear();
     bb6:	aa e5       	ldi	r26, 0x5A	; 90
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	ea e5       	ldi	r30, 0x5A	; 90
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	80 64       	ori	r24, 0x40	; 64
     bc2:	8c 93       	st	X, r24
	/* Code */

	/*	call back */
	if(INT0_InterruptHandler)
     bc4:	80 91 de 00 	lds	r24, 0x00DE
     bc8:	90 91 df 00 	lds	r25, 0x00DF
     bcc:	00 97       	sbiw	r24, 0x00	; 0
     bce:	29 f0       	breq	.+10     	; 0xbda <INT0_ISR+0x2c>
	{
		INT0_InterruptHandler();
     bd0:	e0 91 de 00 	lds	r30, 0x00DE
     bd4:	f0 91 df 00 	lds	r31, 0x00DF
     bd8:	09 95       	icall
	}
}
     bda:	cf 91       	pop	r28
     bdc:	df 91       	pop	r29
     bde:	08 95       	ret

00000be0 <INT1_ISR>:


void INT1_ISR(void)
{
     be0:	df 93       	push	r29
     be2:	cf 93       	push	r28
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
	/* Clear flag*/
	EXT_INT1_InterruptFlagClear();
     be8:	aa e5       	ldi	r26, 0x5A	; 90
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	ea e5       	ldi	r30, 0x5A	; 90
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	80 68       	ori	r24, 0x80	; 128
     bf4:	8c 93       	st	X, r24
	/* Code */

	/*	call back */
	if(INT1_InterruptHandler)
     bf6:	80 91 e0 00 	lds	r24, 0x00E0
     bfa:	90 91 e1 00 	lds	r25, 0x00E1
     bfe:	00 97       	sbiw	r24, 0x00	; 0
     c00:	29 f0       	breq	.+10     	; 0xc0c <INT1_ISR+0x2c>
	{
		INT1_InterruptHandler();
     c02:	e0 91 e0 00 	lds	r30, 0x00E0
     c06:	f0 91 e1 00 	lds	r31, 0x00E1
     c0a:	09 95       	icall
	}
}
     c0c:	cf 91       	pop	r28
     c0e:	df 91       	pop	r29
     c10:	08 95       	ret

00000c12 <INT2_ISR>:


void INT2_ISR(void)
{
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	cd b7       	in	r28, 0x3d	; 61
     c18:	de b7       	in	r29, 0x3e	; 62
	/* Clear flag*/
	EXT_INT2_InterruptFlagClear();
     c1a:	aa e5       	ldi	r26, 0x5A	; 90
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	ea e5       	ldi	r30, 0x5A	; 90
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	80 62       	ori	r24, 0x20	; 32
     c26:	8c 93       	st	X, r24
	/* Code */

	/*	call back */
	if(INT2_InterruptHandler)
     c28:	80 91 e2 00 	lds	r24, 0x00E2
     c2c:	90 91 e3 00 	lds	r25, 0x00E3
     c30:	00 97       	sbiw	r24, 0x00	; 0
     c32:	29 f0       	breq	.+10     	; 0xc3e <INT2_ISR+0x2c>
	{
		INT2_InterruptHandler();
     c34:	e0 91 e2 00 	lds	r30, 0x00E2
     c38:	f0 91 e3 00 	lds	r31, 0x00E3
     c3c:	09 95       	icall
	}
}
     c3e:	cf 91       	pop	r28
     c40:	df 91       	pop	r29
     c42:	08 95       	ret

00000c44 <interrupt_INTx_Deinit>:
 *
 * @param int_obj
 * @return
 */
STD_ReturnStatus interrupt_INTx_Deinit(const interrupt_INTx_t *int_obj)
{
     c44:	df 93       	push	r29
     c46:	cf 93       	push	r28
     c48:	00 d0       	rcall	.+0      	; 0xc4a <interrupt_INTx_Deinit+0x6>
     c4a:	0f 92       	push	r0
     c4c:	cd b7       	in	r28, 0x3d	; 61
     c4e:	de b7       	in	r29, 0x3e	; 62
     c50:	9b 83       	std	Y+3, r25	; 0x03
     c52:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
     c54:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==int_obj)
     c56:	8a 81       	ldd	r24, Y+2	; 0x02
     c58:	9b 81       	ldd	r25, Y+3	; 0x03
     c5a:	00 97       	sbiw	r24, 0x00	; 0
     c5c:	11 f4       	brne	.+4      	; 0xc62 <interrupt_INTx_Deinit+0x1e>
	{
		ret = E_NOT_OK;
     c5e:	19 82       	std	Y+1, r1	; 0x01
     c60:	05 c0       	rjmp	.+10     	; 0xc6c <interrupt_INTx_Deinit+0x28>
	}
	else
	{
		ret = interrupt_INTx_Disable(int_obj);
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	9b 81       	ldd	r25, Y+3	; 0x03
     c66:	0e 94 9f 06 	call	0xd3e	; 0xd3e <interrupt_INTx_Disable>
     c6a:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
}
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	cf 91       	pop	r28
     c76:	df 91       	pop	r29
     c78:	08 95       	ret

00000c7a <interrupt_INTx_Enable>:


static STD_ReturnStatus interrupt_INTx_Enable(const interrupt_INTx_t *int_obj)
{
     c7a:	df 93       	push	r29
     c7c:	cf 93       	push	r28
     c7e:	00 d0       	rcall	.+0      	; 0xc80 <interrupt_INTx_Enable+0x6>
     c80:	00 d0       	rcall	.+0      	; 0xc82 <interrupt_INTx_Enable+0x8>
     c82:	0f 92       	push	r0
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
     c88:	9b 83       	std	Y+3, r25	; 0x03
     c8a:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
     c8c:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==int_obj)
     c8e:	8a 81       	ldd	r24, Y+2	; 0x02
     c90:	9b 81       	ldd	r25, Y+3	; 0x03
     c92:	00 97       	sbiw	r24, 0x00	; 0
     c94:	11 f4       	brne	.+4      	; 0xc9a <interrupt_INTx_Enable+0x20>
	{
		ret = E_NOT_OK;
     c96:	19 82       	std	Y+1, r1	; 0x01
     c98:	49 c0       	rjmp	.+146    	; 0xd2c <interrupt_INTx_Enable+0xb2>
	}
	else
	{
		switch(int_obj->source)
     c9a:	ea 81       	ldd	r30, Y+2	; 0x02
     c9c:	fb 81       	ldd	r31, Y+3	; 0x03
     c9e:	84 81       	ldd	r24, Z+4	; 0x04
     ca0:	28 2f       	mov	r18, r24
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	3d 83       	std	Y+5, r19	; 0x05
     ca6:	2c 83       	std	Y+4, r18	; 0x04
     ca8:	8c 81       	ldd	r24, Y+4	; 0x04
     caa:	9d 81       	ldd	r25, Y+5	; 0x05
     cac:	81 30       	cpi	r24, 0x01	; 1
     cae:	91 05       	cpc	r25, r1
     cb0:	d1 f0       	breq	.+52     	; 0xce6 <interrupt_INTx_Enable+0x6c>
     cb2:	2c 81       	ldd	r18, Y+4	; 0x04
     cb4:	3d 81       	ldd	r19, Y+5	; 0x05
     cb6:	22 30       	cpi	r18, 0x02	; 2
     cb8:	31 05       	cpc	r19, r1
     cba:	31 f1       	breq	.+76     	; 0xd08 <interrupt_INTx_Enable+0x8e>
     cbc:	8c 81       	ldd	r24, Y+4	; 0x04
     cbe:	9d 81       	ldd	r25, Y+5	; 0x05
     cc0:	00 97       	sbiw	r24, 0x00	; 0
     cc2:	99 f5       	brne	.+102    	; 0xd2a <interrupt_INTx_Enable+0xb0>
		{
		case INTERRUPT_EXTERNAL_INT0:
			INTERRUPT_GlobalInterruptEnable();
     cc4:	af e5       	ldi	r26, 0x5F	; 95
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	ef e5       	ldi	r30, 0x5F	; 95
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	80 68       	ori	r24, 0x80	; 128
     cd0:	8c 93       	st	X, r24
			EXT_INT0_InterruptEnable();
     cd2:	ab e5       	ldi	r26, 0x5B	; 91
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	eb e5       	ldi	r30, 0x5B	; 91
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	80 64       	ori	r24, 0x40	; 64
     cde:	8c 93       	st	X, r24
			ret = E_OK;
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	89 83       	std	Y+1, r24	; 0x01
     ce4:	23 c0       	rjmp	.+70     	; 0xd2c <interrupt_INTx_Enable+0xb2>
			break;
		case INTERRUPT_EXTERNAL_INT1:
			INTERRUPT_GlobalInterruptEnable();
     ce6:	af e5       	ldi	r26, 0x5F	; 95
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	ef e5       	ldi	r30, 0x5F	; 95
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	80 68       	ori	r24, 0x80	; 128
     cf2:	8c 93       	st	X, r24
			EXT_INT1_InterruptEnable();
     cf4:	ab e5       	ldi	r26, 0x5B	; 91
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	eb e5       	ldi	r30, 0x5B	; 91
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	80 68       	ori	r24, 0x80	; 128
     d00:	8c 93       	st	X, r24
			ret = E_OK;
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	89 83       	std	Y+1, r24	; 0x01
     d06:	12 c0       	rjmp	.+36     	; 0xd2c <interrupt_INTx_Enable+0xb2>
			break;
		case INTERRUPT_EXTERNAL_INT2:
			INTERRUPT_GlobalInterruptEnable();
     d08:	af e5       	ldi	r26, 0x5F	; 95
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	ef e5       	ldi	r30, 0x5F	; 95
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 68       	ori	r24, 0x80	; 128
     d14:	8c 93       	st	X, r24
			EXT_INT2_InterruptEnable();
     d16:	ab e5       	ldi	r26, 0x5B	; 91
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	eb e5       	ldi	r30, 0x5B	; 91
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	80 62       	ori	r24, 0x20	; 32
     d22:	8c 93       	st	X, r24
			ret = E_OK;
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	89 83       	std	Y+1, r24	; 0x01
     d28:	01 c0       	rjmp	.+2      	; 0xd2c <interrupt_INTx_Enable+0xb2>
			break;
		default:ret=E_NOT_OK;
     d2a:	19 82       	std	Y+1, r1	; 0x01
		}

	}
	return ret;
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
}
     d2e:	0f 90       	pop	r0
     d30:	0f 90       	pop	r0
     d32:	0f 90       	pop	r0
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	cf 91       	pop	r28
     d3a:	df 91       	pop	r29
     d3c:	08 95       	ret

00000d3e <interrupt_INTx_Disable>:


static STD_ReturnStatus interrupt_INTx_Disable(const interrupt_INTx_t *int_obj)
{
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	00 d0       	rcall	.+0      	; 0xd44 <interrupt_INTx_Disable+0x6>
     d44:	00 d0       	rcall	.+0      	; 0xd46 <interrupt_INTx_Disable+0x8>
     d46:	0f 92       	push	r0
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
     d4c:	9b 83       	std	Y+3, r25	; 0x03
     d4e:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
     d50:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==int_obj)
     d52:	8a 81       	ldd	r24, Y+2	; 0x02
     d54:	9b 81       	ldd	r25, Y+3	; 0x03
     d56:	00 97       	sbiw	r24, 0x00	; 0
     d58:	11 f4       	brne	.+4      	; 0xd5e <interrupt_INTx_Disable+0x20>
	{
		ret = E_NOT_OK;
     d5a:	19 82       	std	Y+1, r1	; 0x01
     d5c:	34 c0       	rjmp	.+104    	; 0xdc6 <interrupt_INTx_Disable+0x88>
	}
	else
	{
		switch(int_obj->source)
     d5e:	ea 81       	ldd	r30, Y+2	; 0x02
     d60:	fb 81       	ldd	r31, Y+3	; 0x03
     d62:	84 81       	ldd	r24, Z+4	; 0x04
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	3d 83       	std	Y+5, r19	; 0x05
     d6a:	2c 83       	std	Y+4, r18	; 0x04
     d6c:	8c 81       	ldd	r24, Y+4	; 0x04
     d6e:	9d 81       	ldd	r25, Y+5	; 0x05
     d70:	81 30       	cpi	r24, 0x01	; 1
     d72:	91 05       	cpc	r25, r1
     d74:	99 f0       	breq	.+38     	; 0xd9c <interrupt_INTx_Disable+0x5e>
     d76:	2c 81       	ldd	r18, Y+4	; 0x04
     d78:	3d 81       	ldd	r19, Y+5	; 0x05
     d7a:	22 30       	cpi	r18, 0x02	; 2
     d7c:	31 05       	cpc	r19, r1
     d7e:	c1 f0       	breq	.+48     	; 0xdb0 <interrupt_INTx_Disable+0x72>
     d80:	8c 81       	ldd	r24, Y+4	; 0x04
     d82:	9d 81       	ldd	r25, Y+5	; 0x05
     d84:	00 97       	sbiw	r24, 0x00	; 0
     d86:	f1 f4       	brne	.+60     	; 0xdc4 <interrupt_INTx_Disable+0x86>
		{
		case INTERRUPT_EXTERNAL_INT0:
			EXT_INT0_InterruptDisable();
     d88:	ab e5       	ldi	r26, 0x5B	; 91
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	eb e5       	ldi	r30, 0x5B	; 91
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	8f 7b       	andi	r24, 0xBF	; 191
     d94:	8c 93       	st	X, r24
			ret = E_OK;
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	89 83       	std	Y+1, r24	; 0x01
     d9a:	15 c0       	rjmp	.+42     	; 0xdc6 <interrupt_INTx_Disable+0x88>
			break;
		case INTERRUPT_EXTERNAL_INT1:
			EXT_INT1_InterruptDisable();
     d9c:	ab e5       	ldi	r26, 0x5B	; 91
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	eb e5       	ldi	r30, 0x5B	; 91
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	8f 77       	andi	r24, 0x7F	; 127
     da8:	8c 93       	st	X, r24
			ret = E_OK;
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	89 83       	std	Y+1, r24	; 0x01
     dae:	0b c0       	rjmp	.+22     	; 0xdc6 <interrupt_INTx_Disable+0x88>
			break;
		case INTERRUPT_EXTERNAL_INT2:
			EXT_INT2_InterruptDisable();
     db0:	ab e5       	ldi	r26, 0x5B	; 91
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	eb e5       	ldi	r30, 0x5B	; 91
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	8f 7d       	andi	r24, 0xDF	; 223
     dbc:	8c 93       	st	X, r24
			ret = E_OK;
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	89 83       	std	Y+1, r24	; 0x01
     dc2:	01 c0       	rjmp	.+2      	; 0xdc6 <interrupt_INTx_Disable+0x88>
			break;
		default:ret=E_NOT_OK;
     dc4:	19 82       	std	Y+1, r1	; 0x01
		}

	}
	return ret;
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
}
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	cf 91       	pop	r28
     dd4:	df 91       	pop	r29
     dd6:	08 95       	ret

00000dd8 <interrupt_INTx_Edge_Init>:


static STD_ReturnStatus interrupt_INTx_Edge_Init(const interrupt_INTx_t *int_obj)
{
     dd8:	df 93       	push	r29
     dda:	cf 93       	push	r28
     ddc:	00 d0       	rcall	.+0      	; 0xdde <interrupt_INTx_Edge_Init+0x6>
     dde:	00 d0       	rcall	.+0      	; 0xde0 <interrupt_INTx_Edge_Init+0x8>
     de0:	0f 92       	push	r0
     de2:	cd b7       	in	r28, 0x3d	; 61
     de4:	de b7       	in	r29, 0x3e	; 62
     de6:	9b 83       	std	Y+3, r25	; 0x03
     de8:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
     dea:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==int_obj)
     dec:	8a 81       	ldd	r24, Y+2	; 0x02
     dee:	9b 81       	ldd	r25, Y+3	; 0x03
     df0:	00 97       	sbiw	r24, 0x00	; 0
     df2:	11 f4       	brne	.+4      	; 0xdf8 <interrupt_INTx_Edge_Init+0x20>
	{
		ret = E_NOT_OK;
     df4:	19 82       	std	Y+1, r1	; 0x01
     df6:	7a c0       	rjmp	.+244    	; 0xeec <interrupt_INTx_Edge_Init+0x114>
	}
	else
	{
		switch(int_obj->source)
     df8:	ea 81       	ldd	r30, Y+2	; 0x02
     dfa:	fb 81       	ldd	r31, Y+3	; 0x03
     dfc:	84 81       	ldd	r24, Z+4	; 0x04
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	3d 83       	std	Y+5, r19	; 0x05
     e04:	2c 83       	std	Y+4, r18	; 0x04
     e06:	8c 81       	ldd	r24, Y+4	; 0x04
     e08:	9d 81       	ldd	r25, Y+5	; 0x05
     e0a:	81 30       	cpi	r24, 0x01	; 1
     e0c:	91 05       	cpc	r25, r1
     e0e:	71 f1       	breq	.+92     	; 0xe6c <interrupt_INTx_Edge_Init+0x94>
     e10:	2c 81       	ldd	r18, Y+4	; 0x04
     e12:	3d 81       	ldd	r19, Y+5	; 0x05
     e14:	22 30       	cpi	r18, 0x02	; 2
     e16:	31 05       	cpc	r19, r1
     e18:	09 f4       	brne	.+2      	; 0xe1c <interrupt_INTx_Edge_Init+0x44>
     e1a:	4b c0       	rjmp	.+150    	; 0xeb2 <interrupt_INTx_Edge_Init+0xda>
     e1c:	8c 81       	ldd	r24, Y+4	; 0x04
     e1e:	9d 81       	ldd	r25, Y+5	; 0x05
     e20:	00 97       	sbiw	r24, 0x00	; 0
     e22:	09 f0       	breq	.+2      	; 0xe26 <interrupt_INTx_Edge_Init+0x4e>
     e24:	62 c0       	rjmp	.+196    	; 0xeea <interrupt_INTx_Edge_Init+0x112>
				{
				case INTERRUPT_EXTERNAL_INT0:
					if(int_obj->edge==INTERRUPT_FALLING_EDGE){EXT_INT0_FallingEdgeSet(); }
     e26:	ea 81       	ldd	r30, Y+2	; 0x02
     e28:	fb 81       	ldd	r31, Y+3	; 0x03
     e2a:	83 81       	ldd	r24, Z+3	; 0x03
     e2c:	88 23       	and	r24, r24
     e2e:	41 f4       	brne	.+16     	; 0xe40 <interrupt_INTx_Edge_Init+0x68>
     e30:	a5 e5       	ldi	r26, 0x55	; 85
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	e5 e5       	ldi	r30, 0x55	; 85
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	82 60       	ori	r24, 0x02	; 2
     e3c:	8c 93       	st	X, r24
     e3e:	13 c0       	rjmp	.+38     	; 0xe66 <interrupt_INTx_Edge_Init+0x8e>
					else if(int_obj->edge==INTERRUPT_RISING_EDGE){EXT_INT0_RisingEdgeSet();}
     e40:	ea 81       	ldd	r30, Y+2	; 0x02
     e42:	fb 81       	ldd	r31, Y+3	; 0x03
     e44:	83 81       	ldd	r24, Z+3	; 0x03
     e46:	81 30       	cpi	r24, 0x01	; 1
     e48:	71 f4       	brne	.+28     	; 0xe66 <interrupt_INTx_Edge_Init+0x8e>
     e4a:	a5 e5       	ldi	r26, 0x55	; 85
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e5 e5       	ldi	r30, 0x55	; 85
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	81 60       	ori	r24, 0x01	; 1
     e56:	8c 93       	st	X, r24
     e58:	a5 e5       	ldi	r26, 0x55	; 85
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e5 e5       	ldi	r30, 0x55	; 85
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	82 60       	ori	r24, 0x02	; 2
     e64:	8c 93       	st	X, r24
					ret = E_OK;
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	89 83       	std	Y+1, r24	; 0x01
     e6a:	40 c0       	rjmp	.+128    	; 0xeec <interrupt_INTx_Edge_Init+0x114>
					break;
				case INTERRUPT_EXTERNAL_INT1:
					if(int_obj->edge==INTERRUPT_FALLING_EDGE){EXT_INT1_FallingEdgeSet(); }
     e6c:	ea 81       	ldd	r30, Y+2	; 0x02
     e6e:	fb 81       	ldd	r31, Y+3	; 0x03
     e70:	83 81       	ldd	r24, Z+3	; 0x03
     e72:	88 23       	and	r24, r24
     e74:	41 f4       	brne	.+16     	; 0xe86 <interrupt_INTx_Edge_Init+0xae>
     e76:	a5 e5       	ldi	r26, 0x55	; 85
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e5 e5       	ldi	r30, 0x55	; 85
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	88 60       	ori	r24, 0x08	; 8
     e82:	8c 93       	st	X, r24
     e84:	13 c0       	rjmp	.+38     	; 0xeac <interrupt_INTx_Edge_Init+0xd4>
					else if(int_obj->edge==INTERRUPT_RISING_EDGE){EXT_INT1_RisingEdgeSet();}
     e86:	ea 81       	ldd	r30, Y+2	; 0x02
     e88:	fb 81       	ldd	r31, Y+3	; 0x03
     e8a:	83 81       	ldd	r24, Z+3	; 0x03
     e8c:	81 30       	cpi	r24, 0x01	; 1
     e8e:	71 f4       	brne	.+28     	; 0xeac <interrupt_INTx_Edge_Init+0xd4>
     e90:	a5 e5       	ldi	r26, 0x55	; 85
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e5 e5       	ldi	r30, 0x55	; 85
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	84 60       	ori	r24, 0x04	; 4
     e9c:	8c 93       	st	X, r24
     e9e:	a5 e5       	ldi	r26, 0x55	; 85
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e5 e5       	ldi	r30, 0x55	; 85
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	88 60       	ori	r24, 0x08	; 8
     eaa:	8c 93       	st	X, r24
					ret = E_OK;
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	89 83       	std	Y+1, r24	; 0x01
     eb0:	1d c0       	rjmp	.+58     	; 0xeec <interrupt_INTx_Edge_Init+0x114>
					break;
				case INTERRUPT_EXTERNAL_INT2:
					if(int_obj->edge==INTERRUPT_FALLING_EDGE){EXT_INT2_FallingEdgeSet(); }
     eb2:	ea 81       	ldd	r30, Y+2	; 0x02
     eb4:	fb 81       	ldd	r31, Y+3	; 0x03
     eb6:	83 81       	ldd	r24, Z+3	; 0x03
     eb8:	88 23       	and	r24, r24
     eba:	41 f4       	brne	.+16     	; 0xecc <interrupt_INTx_Edge_Init+0xf4>
     ebc:	a4 e5       	ldi	r26, 0x54	; 84
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e4 e5       	ldi	r30, 0x54	; 84
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	8f 7b       	andi	r24, 0xBF	; 191
     ec8:	8c 93       	st	X, r24
     eca:	0c c0       	rjmp	.+24     	; 0xee4 <interrupt_INTx_Edge_Init+0x10c>
					else if(int_obj->edge==INTERRUPT_RISING_EDGE){EXT_INT2_RisingEdgeSet();}
     ecc:	ea 81       	ldd	r30, Y+2	; 0x02
     ece:	fb 81       	ldd	r31, Y+3	; 0x03
     ed0:	83 81       	ldd	r24, Z+3	; 0x03
     ed2:	81 30       	cpi	r24, 0x01	; 1
     ed4:	39 f4       	brne	.+14     	; 0xee4 <interrupt_INTx_Edge_Init+0x10c>
     ed6:	a4 e5       	ldi	r26, 0x54	; 84
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e4 e5       	ldi	r30, 0x54	; 84
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	80 64       	ori	r24, 0x40	; 64
     ee2:	8c 93       	st	X, r24
					ret = E_OK;
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	89 83       	std	Y+1, r24	; 0x01
     ee8:	01 c0       	rjmp	.+2      	; 0xeec <interrupt_INTx_Edge_Init+0x114>
					break;
				default:ret=E_NOT_OK;
     eea:	19 82       	std	Y+1, r1	; 0x01
				}
	}
	return ret;
     eec:	89 81       	ldd	r24, Y+1	; 0x01
}
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <interrupt_INTx_Pin_Init>:

static STD_ReturnStatus interrupt_INTx_Pin_Init(const interrupt_INTx_t *int_obj)
{
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	00 d0       	rcall	.+0      	; 0xf04 <interrupt_INTx_Pin_Init+0x6>
     f04:	0f 92       	push	r0
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	9b 83       	std	Y+3, r25	; 0x03
     f0c:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
     f0e:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==int_obj)
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	9b 81       	ldd	r25, Y+3	; 0x03
     f14:	00 97       	sbiw	r24, 0x00	; 0
     f16:	11 f4       	brne	.+4      	; 0xf1c <interrupt_INTx_Pin_Init+0x1e>
	{
		ret = E_NOT_OK;
     f18:	19 82       	std	Y+1, r1	; 0x01
     f1a:	06 c0       	rjmp	.+12     	; 0xf28 <interrupt_INTx_Pin_Init+0x2a>
	}
	else
	{
		ret = gpio_pin_direction_initialize(&(int_obj->mcu_pin));
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	9b 81       	ldd	r25, Y+3	; 0x03
     f20:	02 96       	adiw	r24, 0x02	; 2
     f22:	0e 94 84 0c 	call	0x1908	; 0x1908 <gpio_pin_direction_initialize>
     f26:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
     f28:	89 81       	ldd	r24, Y+1	; 0x01
}
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	08 95       	ret

00000f36 <interrupt_INTx_Clear_Flag>:



static STD_ReturnStatus interrupt_INTx_Clear_Flag(const interrupt_INTx_t *int_obj)
{
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <interrupt_INTx_Clear_Flag+0x6>
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <interrupt_INTx_Clear_Flag+0x8>
     f3e:	0f 92       	push	r0
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	9b 83       	std	Y+3, r25	; 0x03
     f46:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
     f48:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==int_obj)
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	9b 81       	ldd	r25, Y+3	; 0x03
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	11 f4       	brne	.+4      	; 0xf56 <interrupt_INTx_Clear_Flag+0x20>
	{
		ret = E_NOT_OK;
     f52:	19 82       	std	Y+1, r1	; 0x01
     f54:	34 c0       	rjmp	.+104    	; 0xfbe <interrupt_INTx_Clear_Flag+0x88>
	}
	else
	{
		switch(int_obj->source)
     f56:	ea 81       	ldd	r30, Y+2	; 0x02
     f58:	fb 81       	ldd	r31, Y+3	; 0x03
     f5a:	84 81       	ldd	r24, Z+4	; 0x04
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	3d 83       	std	Y+5, r19	; 0x05
     f62:	2c 83       	std	Y+4, r18	; 0x04
     f64:	8c 81       	ldd	r24, Y+4	; 0x04
     f66:	9d 81       	ldd	r25, Y+5	; 0x05
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	91 05       	cpc	r25, r1
     f6c:	99 f0       	breq	.+38     	; 0xf94 <interrupt_INTx_Clear_Flag+0x5e>
     f6e:	2c 81       	ldd	r18, Y+4	; 0x04
     f70:	3d 81       	ldd	r19, Y+5	; 0x05
     f72:	22 30       	cpi	r18, 0x02	; 2
     f74:	31 05       	cpc	r19, r1
     f76:	c1 f0       	breq	.+48     	; 0xfa8 <interrupt_INTx_Clear_Flag+0x72>
     f78:	8c 81       	ldd	r24, Y+4	; 0x04
     f7a:	9d 81       	ldd	r25, Y+5	; 0x05
     f7c:	00 97       	sbiw	r24, 0x00	; 0
     f7e:	f1 f4       	brne	.+60     	; 0xfbc <interrupt_INTx_Clear_Flag+0x86>
				{
				case INTERRUPT_EXTERNAL_INT0:
					EXT_INT0_InterruptFlagClear();
     f80:	aa e5       	ldi	r26, 0x5A	; 90
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	ea e5       	ldi	r30, 0x5A	; 90
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	80 64       	ori	r24, 0x40	; 64
     f8c:	8c 93       	st	X, r24
					ret = E_OK;
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	89 83       	std	Y+1, r24	; 0x01
     f92:	15 c0       	rjmp	.+42     	; 0xfbe <interrupt_INTx_Clear_Flag+0x88>
					break;
				case INTERRUPT_EXTERNAL_INT1:
					EXT_INT1_InterruptFlagClear();
     f94:	aa e5       	ldi	r26, 0x5A	; 90
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	ea e5       	ldi	r30, 0x5A	; 90
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	80 68       	ori	r24, 0x80	; 128
     fa0:	8c 93       	st	X, r24
					ret = E_OK;
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	89 83       	std	Y+1, r24	; 0x01
     fa6:	0b c0       	rjmp	.+22     	; 0xfbe <interrupt_INTx_Clear_Flag+0x88>
					break;
				case INTERRUPT_EXTERNAL_INT2:
					EXT_INT2_InterruptFlagClear();
     fa8:	aa e5       	ldi	r26, 0x5A	; 90
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	ea e5       	ldi	r30, 0x5A	; 90
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	80 62       	ori	r24, 0x20	; 32
     fb4:	8c 93       	st	X, r24
					ret = E_OK;
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	89 83       	std	Y+1, r24	; 0x01
     fba:	01 c0       	rjmp	.+2      	; 0xfbe <interrupt_INTx_Clear_Flag+0x88>
					break;
				default:ret=E_NOT_OK;
     fbc:	19 82       	std	Y+1, r1	; 0x01
				}
	}
	return ret;
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
}
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	cf 91       	pop	r28
     fcc:	df 91       	pop	r29
     fce:	08 95       	ret

00000fd0 <INT0_SetInterruptHandler>:




static STD_ReturnStatus INT0_SetInterruptHandler(void(*InterruptHandler)(void))
{
     fd0:	df 93       	push	r29
     fd2:	cf 93       	push	r28
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <INT0_SetInterruptHandler+0x6>
     fd6:	0f 92       	push	r0
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	9b 83       	std	Y+3, r25	; 0x03
     fde:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
     fe0:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==InterruptHandler)
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	9b 81       	ldd	r25, Y+3	; 0x03
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	11 f4       	brne	.+4      	; 0xfee <INT0_SetInterruptHandler+0x1e>
	{
		ret = E_NOT_OK;
     fea:	19 82       	std	Y+1, r1	; 0x01
     fec:	08 c0       	rjmp	.+16     	; 0xffe <INT0_SetInterruptHandler+0x2e>
	}
	else
	{
		INT0_InterruptHandler = InterruptHandler;//hena hakhaly el address bta3 el func in app yeb2a shaylo el INT0_InterruptHandler
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	9b 81       	ldd	r25, Y+3	; 0x03
     ff2:	90 93 df 00 	sts	0x00DF, r25
     ff6:	80 93 de 00 	sts	0x00DE, r24
		//keda 3amalat callback be hes en function fel application layer a2dar astakhdemha dlw2ty fel MCAL layer
		ret = E_OK;
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	08 95       	ret

0000100c <INT1_SetInterruptHandler>:
static STD_ReturnStatus INT1_SetInterruptHandler(void(*InterruptHandler)(void))
{
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	00 d0       	rcall	.+0      	; 0x1012 <INT1_SetInterruptHandler+0x6>
    1012:	0f 92       	push	r0
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	9b 83       	std	Y+3, r25	; 0x03
    101a:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
    101c:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==InterruptHandler)
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	9b 81       	ldd	r25, Y+3	; 0x03
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	11 f4       	brne	.+4      	; 0x102a <INT1_SetInterruptHandler+0x1e>
	{
		ret = E_NOT_OK;
    1026:	19 82       	std	Y+1, r1	; 0x01
    1028:	08 c0       	rjmp	.+16     	; 0x103a <INT1_SetInterruptHandler+0x2e>
	}
	else
	{
		INT1_InterruptHandler = InterruptHandler;//hena hakhaly el address bta3 el func in app yeb2a shaylo el INT0_InterruptHandler
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	9b 81       	ldd	r25, Y+3	; 0x03
    102e:	90 93 e1 00 	sts	0x00E1, r25
    1032:	80 93 e0 00 	sts	0x00E0, r24
		//keda 3amalat callback be hes en function fel application layer a2dar astakhdemha dlw2ty fel MCAL layer
		ret = E_OK;
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    103a:	89 81       	ldd	r24, Y+1	; 0x01
}
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	cf 91       	pop	r28
    1044:	df 91       	pop	r29
    1046:	08 95       	ret

00001048 <INT2_SetInterruptHandler>:
static STD_ReturnStatus INT2_SetInterruptHandler(void(*InterruptHandler)(void))
{
    1048:	df 93       	push	r29
    104a:	cf 93       	push	r28
    104c:	00 d0       	rcall	.+0      	; 0x104e <INT2_SetInterruptHandler+0x6>
    104e:	0f 92       	push	r0
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
    1054:	9b 83       	std	Y+3, r25	; 0x03
    1056:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
    1058:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==InterruptHandler)
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	9b 81       	ldd	r25, Y+3	; 0x03
    105e:	00 97       	sbiw	r24, 0x00	; 0
    1060:	11 f4       	brne	.+4      	; 0x1066 <INT2_SetInterruptHandler+0x1e>
	{
		ret = E_NOT_OK;
    1062:	19 82       	std	Y+1, r1	; 0x01
    1064:	08 c0       	rjmp	.+16     	; 0x1076 <INT2_SetInterruptHandler+0x2e>
	}
	else
	{
		INT2_InterruptHandler = InterruptHandler;//hena hakhaly el address bta3 el func in app yeb2a shaylo el INT0_InterruptHandler
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	9b 81       	ldd	r25, Y+3	; 0x03
    106a:	90 93 e3 00 	sts	0x00E3, r25
    106e:	80 93 e2 00 	sts	0x00E2, r24
		//keda 3amalat callback be hes en function fel application layer a2dar astakhdemha dlw2ty fel MCAL layer
		ret = E_OK;
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    1076:	89 81       	ldd	r24, Y+1	; 0x01
}
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	cf 91       	pop	r28
    1080:	df 91       	pop	r29
    1082:	08 95       	ret

00001084 <interrupt_INTx_SetInterruptHandler>:
static STD_ReturnStatus interrupt_INTx_SetInterruptHandler(const interrupt_INTx_t *int_obj)
{
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	00 d0       	rcall	.+0      	; 0x108a <interrupt_INTx_SetInterruptHandler+0x6>
    108a:	00 d0       	rcall	.+0      	; 0x108c <interrupt_INTx_SetInterruptHandler+0x8>
    108c:	0f 92       	push	r0
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	9b 83       	std	Y+3, r25	; 0x03
    1094:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
    1096:	19 82       	std	Y+1, r1	; 0x01
		if(NULL==int_obj)
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	9b 81       	ldd	r25, Y+3	; 0x03
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	11 f4       	brne	.+4      	; 0x10a4 <interrupt_INTx_SetInterruptHandler+0x20>
		{
			ret = E_NOT_OK;
    10a0:	19 82       	std	Y+1, r1	; 0x01
    10a2:	2e c0       	rjmp	.+92     	; 0x1100 <interrupt_INTx_SetInterruptHandler+0x7c>
		}
		else
		{
			switch(int_obj->source)
    10a4:	ea 81       	ldd	r30, Y+2	; 0x02
    10a6:	fb 81       	ldd	r31, Y+3	; 0x03
    10a8:	84 81       	ldd	r24, Z+4	; 0x04
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	3d 83       	std	Y+5, r19	; 0x05
    10b0:	2c 83       	std	Y+4, r18	; 0x04
    10b2:	8c 81       	ldd	r24, Y+4	; 0x04
    10b4:	9d 81       	ldd	r25, Y+5	; 0x05
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	91 05       	cpc	r25, r1
    10ba:	89 f0       	breq	.+34     	; 0x10de <interrupt_INTx_SetInterruptHandler+0x5a>
    10bc:	2c 81       	ldd	r18, Y+4	; 0x04
    10be:	3d 81       	ldd	r19, Y+5	; 0x05
    10c0:	22 30       	cpi	r18, 0x02	; 2
    10c2:	31 05       	cpc	r19, r1
    10c4:	a1 f0       	breq	.+40     	; 0x10ee <interrupt_INTx_SetInterruptHandler+0x6a>
    10c6:	8c 81       	ldd	r24, Y+4	; 0x04
    10c8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ca:	00 97       	sbiw	r24, 0x00	; 0
    10cc:	c1 f4       	brne	.+48     	; 0x10fe <interrupt_INTx_SetInterruptHandler+0x7a>
			{
			case INTERRUPT_EXTERNAL_INT0:
				ret = INT0_SetInterruptHandler(int_obj->EXT_INTERRUPTHANDLER);//hena ana ba3at el address bta3 el function bta3 el application
    10ce:	ea 81       	ldd	r30, Y+2	; 0x02
    10d0:	fb 81       	ldd	r31, Y+3	; 0x03
    10d2:	80 81       	ld	r24, Z
    10d4:	91 81       	ldd	r25, Z+1	; 0x01
    10d6:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <INT0_SetInterruptHandler>
    10da:	89 83       	std	Y+1, r24	; 0x01
    10dc:	11 c0       	rjmp	.+34     	; 0x1100 <interrupt_INTx_SetInterruptHandler+0x7c>
				break;
			case INTERRUPT_EXTERNAL_INT1:
				ret = INT1_SetInterruptHandler(int_obj->EXT_INTERRUPTHANDLER);
    10de:	ea 81       	ldd	r30, Y+2	; 0x02
    10e0:	fb 81       	ldd	r31, Y+3	; 0x03
    10e2:	80 81       	ld	r24, Z
    10e4:	91 81       	ldd	r25, Z+1	; 0x01
    10e6:	0e 94 06 08 	call	0x100c	; 0x100c <INT1_SetInterruptHandler>
    10ea:	89 83       	std	Y+1, r24	; 0x01
    10ec:	09 c0       	rjmp	.+18     	; 0x1100 <interrupt_INTx_SetInterruptHandler+0x7c>
				break;
			case INTERRUPT_EXTERNAL_INT2:
				ret = INT2_SetInterruptHandler(int_obj->EXT_INTERRUPTHANDLER);
    10ee:	ea 81       	ldd	r30, Y+2	; 0x02
    10f0:	fb 81       	ldd	r31, Y+3	; 0x03
    10f2:	80 81       	ld	r24, Z
    10f4:	91 81       	ldd	r25, Z+1	; 0x01
    10f6:	0e 94 24 08 	call	0x1048	; 0x1048 <INT2_SetInterruptHandler>
    10fa:	89 83       	std	Y+1, r24	; 0x01
    10fc:	01 c0       	rjmp	.+2      	; 0x1100 <interrupt_INTx_SetInterruptHandler+0x7c>
				break;
			default:ret=E_NOT_OK;
    10fe:	19 82       	std	Y+1, r1	; 0x01
			}

		}
		return ret;
    1100:	89 81       	ldd	r24, Y+1	; 0x01
}
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	08 95       	ret

00001112 <__vector_1>:
#include "../Interrupt/mcal_interrupt_manager.h"



ISR(INT0_vect)
{
    1112:	1f 92       	push	r1
    1114:	0f 92       	push	r0
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	0f 92       	push	r0
    111a:	11 24       	eor	r1, r1
    111c:	2f 93       	push	r18
    111e:	3f 93       	push	r19
    1120:	4f 93       	push	r20
    1122:	5f 93       	push	r21
    1124:	6f 93       	push	r22
    1126:	7f 93       	push	r23
    1128:	8f 93       	push	r24
    112a:	9f 93       	push	r25
    112c:	af 93       	push	r26
    112e:	bf 93       	push	r27
    1130:	ef 93       	push	r30
    1132:	ff 93       	push	r31
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
	INT0_ISR();
    113c:	0e 94 d7 05 	call	0xbae	; 0xbae <INT0_ISR>
}
    1140:	cf 91       	pop	r28
    1142:	df 91       	pop	r29
    1144:	ff 91       	pop	r31
    1146:	ef 91       	pop	r30
    1148:	bf 91       	pop	r27
    114a:	af 91       	pop	r26
    114c:	9f 91       	pop	r25
    114e:	8f 91       	pop	r24
    1150:	7f 91       	pop	r23
    1152:	6f 91       	pop	r22
    1154:	5f 91       	pop	r21
    1156:	4f 91       	pop	r20
    1158:	3f 91       	pop	r19
    115a:	2f 91       	pop	r18
    115c:	0f 90       	pop	r0
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	0f 90       	pop	r0
    1162:	1f 90       	pop	r1
    1164:	18 95       	reti

00001166 <__vector_2>:


ISR(INT1_vect)
{
    1166:	1f 92       	push	r1
    1168:	0f 92       	push	r0
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	0f 92       	push	r0
    116e:	11 24       	eor	r1, r1
    1170:	2f 93       	push	r18
    1172:	3f 93       	push	r19
    1174:	4f 93       	push	r20
    1176:	5f 93       	push	r21
    1178:	6f 93       	push	r22
    117a:	7f 93       	push	r23
    117c:	8f 93       	push	r24
    117e:	9f 93       	push	r25
    1180:	af 93       	push	r26
    1182:	bf 93       	push	r27
    1184:	ef 93       	push	r30
    1186:	ff 93       	push	r31
    1188:	df 93       	push	r29
    118a:	cf 93       	push	r28
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
	INT1_ISR();
    1190:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <INT1_ISR>
}
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	ff 91       	pop	r31
    119a:	ef 91       	pop	r30
    119c:	bf 91       	pop	r27
    119e:	af 91       	pop	r26
    11a0:	9f 91       	pop	r25
    11a2:	8f 91       	pop	r24
    11a4:	7f 91       	pop	r23
    11a6:	6f 91       	pop	r22
    11a8:	5f 91       	pop	r21
    11aa:	4f 91       	pop	r20
    11ac:	3f 91       	pop	r19
    11ae:	2f 91       	pop	r18
    11b0:	0f 90       	pop	r0
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	0f 90       	pop	r0
    11b6:	1f 90       	pop	r1
    11b8:	18 95       	reti

000011ba <__vector_3>:

ISR(INT2_vect)
{
    11ba:	1f 92       	push	r1
    11bc:	0f 92       	push	r0
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	0f 92       	push	r0
    11c2:	11 24       	eor	r1, r1
    11c4:	2f 93       	push	r18
    11c6:	3f 93       	push	r19
    11c8:	4f 93       	push	r20
    11ca:	5f 93       	push	r21
    11cc:	6f 93       	push	r22
    11ce:	7f 93       	push	r23
    11d0:	8f 93       	push	r24
    11d2:	9f 93       	push	r25
    11d4:	af 93       	push	r26
    11d6:	bf 93       	push	r27
    11d8:	ef 93       	push	r30
    11da:	ff 93       	push	r31
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
	INT2_ISR();
    11e4:	0e 94 09 06 	call	0xc12	; 0xc12 <INT2_ISR>
}
    11e8:	cf 91       	pop	r28
    11ea:	df 91       	pop	r29
    11ec:	ff 91       	pop	r31
    11ee:	ef 91       	pop	r30
    11f0:	bf 91       	pop	r27
    11f2:	af 91       	pop	r26
    11f4:	9f 91       	pop	r25
    11f6:	8f 91       	pop	r24
    11f8:	7f 91       	pop	r23
    11fa:	6f 91       	pop	r22
    11fc:	5f 91       	pop	r21
    11fe:	4f 91       	pop	r20
    1200:	3f 91       	pop	r19
    1202:	2f 91       	pop	r18
    1204:	0f 90       	pop	r0
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	0f 90       	pop	r0
    120a:	1f 90       	pop	r1
    120c:	18 95       	reti

0000120e <__vector_16>:

ISR(ADC_vect)
{
    120e:	1f 92       	push	r1
    1210:	0f 92       	push	r0
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	0f 92       	push	r0
    1216:	11 24       	eor	r1, r1
    1218:	2f 93       	push	r18
    121a:	3f 93       	push	r19
    121c:	4f 93       	push	r20
    121e:	5f 93       	push	r21
    1220:	6f 93       	push	r22
    1222:	7f 93       	push	r23
    1224:	8f 93       	push	r24
    1226:	9f 93       	push	r25
    1228:	af 93       	push	r26
    122a:	bf 93       	push	r27
    122c:	ef 93       	push	r30
    122e:	ff 93       	push	r31
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
	ADC_ISR();
    1238:	0e 94 a5 0b 	call	0x174a	; 0x174a <ADC_ISR>
}
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	ff 91       	pop	r31
    1242:	ef 91       	pop	r30
    1244:	bf 91       	pop	r27
    1246:	af 91       	pop	r26
    1248:	9f 91       	pop	r25
    124a:	8f 91       	pop	r24
    124c:	7f 91       	pop	r23
    124e:	6f 91       	pop	r22
    1250:	5f 91       	pop	r21
    1252:	4f 91       	pop	r20
    1254:	3f 91       	pop	r19
    1256:	2f 91       	pop	r18
    1258:	0f 90       	pop	r0
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	0f 90       	pop	r0
    125e:	1f 90       	pop	r1
    1260:	18 95       	reti

00001262 <ADC_Init>:

static inline void adc_input_channel_port_configure(adc_channel_select_t channel);
static inline void select_result_format(const adc_conf_t*_adc);

STD_ReturnStatus ADC_Init(const adc_conf_t*_adc)
{
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	00 d0       	rcall	.+0      	; 0x1268 <ADC_Init+0x6>
    1268:	00 d0       	rcall	.+0      	; 0x126a <ADC_Init+0x8>
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	9c 83       	std	Y+4, r25	; 0x04
    1270:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret = E_NOT_OK;
    1272:	1a 82       	std	Y+2, r1	; 0x02
	uint8 l_channel;
	if(NULL==_adc)
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	9c 81       	ldd	r25, Y+4	; 0x04
    1278:	00 97       	sbiw	r24, 0x00	; 0
    127a:	11 f4       	brne	.+4      	; 0x1280 <ADC_Init+0x1e>
	{
		ret = E_NOT_OK;
    127c:	1a 82       	std	Y+2, r1	; 0x02
    127e:	58 c0       	rjmp	.+176    	; 0x1330 <ADC_Init+0xce>
	}
	else
	{
		/* Disable the ADC */
		ADC_CONVERTER_DISABLE();
    1280:	a6 e2       	ldi	r26, 0x26	; 38
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e6 e2       	ldi	r30, 0x26	; 38
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	8f 77       	andi	r24, 0x7F	; 127
    128c:	8c 93       	st	X, r24
		/* Configure the conversion clock */
		ADC_SETPRESCALAR(_adc->conversion_clock);
    128e:	a6 e2       	ldi	r26, 0x26	; 38
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	e6 e2       	ldi	r30, 0x26	; 38
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	90 81       	ld	r25, Z
    1298:	eb 81       	ldd	r30, Y+3	; 0x03
    129a:	fc 81       	ldd	r31, Y+4	; 0x04
    129c:	82 81       	ldd	r24, Z+2	; 0x02
    129e:	89 2b       	or	r24, r25
    12a0:	8c 93       	st	X, r24
		/* Configure the default channel*/
		l_channel=_adc->adc_channel;
    12a2:	eb 81       	ldd	r30, Y+3	; 0x03
    12a4:	fc 81       	ldd	r31, Y+4	; 0x04
    12a6:	83 81       	ldd	r24, Z+3	; 0x03
    12a8:	89 83       	std	Y+1, r24	; 0x01
		ADC_SETCHANNEL(l_channel);
    12aa:	a7 e2       	ldi	r26, 0x27	; 39
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e7 e2       	ldi	r30, 0x27	; 39
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	80 7e       	andi	r24, 0xE0	; 224
    12b6:	8c 93       	st	X, r24
    12b8:	a7 e2       	ldi	r26, 0x27	; 39
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e7 e2       	ldi	r30, 0x27	; 39
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	90 81       	ld	r25, Z
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	89 2b       	or	r24, r25
    12c6:	8c 93       	st	X, r24
		adc_input_channel_port_configure(_adc->adc_channel);
    12c8:	eb 81       	ldd	r30, Y+3	; 0x03
    12ca:	fc 81       	ldd	r31, Y+4	; 0x04
    12cc:	83 81       	ldd	r24, Z+3	; 0x03
    12ce:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <adc_input_channel_port_configure>
		/* Configure the interrupt */
		#if ADC_INTERRUPT_FEATURE_ENABLE==INTERRUPT_FEATURE_ENABLE
		INTERRUPT_GlobalInterruptEnable();
    12d2:	af e5       	ldi	r26, 0x5F	; 95
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	ef e5       	ldi	r30, 0x5F	; 95
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	80 68       	ori	r24, 0x80	; 128
    12de:	8c 93       	st	X, r24
		ADC_InterruptEnable();
    12e0:	a6 e2       	ldi	r26, 0x26	; 38
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	e6 e2       	ldi	r30, 0x26	; 38
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	88 60       	ori	r24, 0x08	; 8
    12ec:	8c 93       	st	X, r24
		ADC_InterruptHandler = _adc->ADC_InterruptHandler;
    12ee:	eb 81       	ldd	r30, Y+3	; 0x03
    12f0:	fc 81       	ldd	r31, Y+4	; 0x04
    12f2:	80 81       	ld	r24, Z
    12f4:	91 81       	ldd	r25, Z+1	; 0x01
    12f6:	90 93 e5 00 	sts	0x00E5, r25
    12fa:	80 93 e4 00 	sts	0x00E4, r24
		#endif
		/* Configure the result format*/
		select_result_format(_adc);
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	9c 81       	ldd	r25, Y+4	; 0x04
    1302:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <select_result_format>
		/* Configure the voltage reference*/
		ADC_DISABLE_VOLTAGE_REFERENCE();//make Vref the internal VDD-->5v
    1306:	a7 e2       	ldi	r26, 0x27	; 39
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	e7 e2       	ldi	r30, 0x27	; 39
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	80 64       	ori	r24, 0x40	; 64
    1312:	8c 93       	st	X, r24
    1314:	a7 e2       	ldi	r26, 0x27	; 39
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e7 e2       	ldi	r30, 0x27	; 39
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	8f 77       	andi	r24, 0x7F	; 127
    1320:	8c 93       	st	X, r24
		/* Enable the ADC*/
		ADC_CONVERTER_ENABLE();
    1322:	a6 e2       	ldi	r26, 0x26	; 38
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e6 e2       	ldi	r30, 0x26	; 38
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	80 68       	ori	r24, 0x80	; 128
    132e:	8c 93       	st	X, r24
	}
	return ret;
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	cf 91       	pop	r28
    133c:	df 91       	pop	r29
    133e:	08 95       	ret

00001340 <ADC_DeInit>:

STD_ReturnStatus ADC_DeInit(const adc_conf_t*_adc)
{
    1340:	df 93       	push	r29
    1342:	cf 93       	push	r28
    1344:	00 d0       	rcall	.+0      	; 0x1346 <ADC_DeInit+0x6>
    1346:	0f 92       	push	r0
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	9b 83       	std	Y+3, r25	; 0x03
    134e:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
    1350:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==_adc)
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	9b 81       	ldd	r25, Y+3	; 0x03
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	11 f4       	brne	.+4      	; 0x135e <ADC_DeInit+0x1e>
	{
		ret = E_NOT_OK;
    135a:	19 82       	std	Y+1, r1	; 0x01
    135c:	0e c0       	rjmp	.+28     	; 0x137a <ADC_DeInit+0x3a>
	}
	else
	{
		/* Disable the ADC */
		ADC_CONVERTER_DISABLE();
    135e:	a6 e2       	ldi	r26, 0x26	; 38
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e6 e2       	ldi	r30, 0x26	; 38
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	8f 77       	andi	r24, 0x7F	; 127
    136a:	8c 93       	st	X, r24
		//Disable interrupt
		#if ADC_INTERRUPT_FEATURE_ENABLE==INTERRUPT_FEATURE_ENABLE
		ADC_InterruptDisable();
    136c:	a6 e2       	ldi	r26, 0x26	; 38
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e6 e2       	ldi	r30, 0x26	; 38
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	87 7f       	andi	r24, 0xF7	; 247
    1378:	8c 93       	st	X, r24
		#endif
	}
	return ret;
    137a:	89 81       	ldd	r24, Y+1	; 0x01
}
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	cf 91       	pop	r28
    1384:	df 91       	pop	r29
    1386:	08 95       	ret

00001388 <ADC_SelectChannel>:
STD_ReturnStatus ADC_SelectChannel(const adc_conf_t*_adc,adc_channel_select_t channel)
{
    1388:	df 93       	push	r29
    138a:	cf 93       	push	r28
    138c:	00 d0       	rcall	.+0      	; 0x138e <ADC_SelectChannel+0x6>
    138e:	00 d0       	rcall	.+0      	; 0x1390 <ADC_SelectChannel+0x8>
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	9b 83       	std	Y+3, r25	; 0x03
    1396:	8a 83       	std	Y+2, r24	; 0x02
    1398:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_NOT_OK;
    139a:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==_adc)
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	9b 81       	ldd	r25, Y+3	; 0x03
    13a0:	00 97       	sbiw	r24, 0x00	; 0
    13a2:	11 f4       	brne	.+4      	; 0x13a8 <ADC_SelectChannel+0x20>
	{
		ret = E_NOT_OK;
    13a4:	19 82       	std	Y+1, r1	; 0x01
    13a6:	12 c0       	rjmp	.+36     	; 0x13cc <ADC_SelectChannel+0x44>
	}
	else
	{
		/* Configure the default channel*/
		ADC_SETCHANNEL(channel);
    13a8:	a7 e2       	ldi	r26, 0x27	; 39
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e7 e2       	ldi	r30, 0x27	; 39
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	80 7e       	andi	r24, 0xE0	; 224
    13b4:	8c 93       	st	X, r24
    13b6:	a7 e2       	ldi	r26, 0x27	; 39
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	e7 e2       	ldi	r30, 0x27	; 39
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	90 81       	ld	r25, Z
    13c0:	8c 81       	ldd	r24, Y+4	; 0x04
    13c2:	89 2b       	or	r24, r25
    13c4:	8c 93       	st	X, r24
		adc_input_channel_port_configure(channel);
    13c6:	8c 81       	ldd	r24, Y+4	; 0x04
    13c8:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <adc_input_channel_port_configure>
	}
	return ret;
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	08 95       	ret

000013dc <ADC_StartConversion>:
STD_ReturnStatus ADC_StartConversion(const adc_conf_t*_adc)
{
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <ADC_StartConversion+0x6>
    13e2:	0f 92       	push	r0
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
    13e8:	9b 83       	std	Y+3, r25	; 0x03
    13ea:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
    13ec:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==_adc)
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	9b 81       	ldd	r25, Y+3	; 0x03
    13f2:	00 97       	sbiw	r24, 0x00	; 0
    13f4:	11 f4       	brne	.+4      	; 0x13fa <ADC_StartConversion+0x1e>
	{
		ret = E_NOT_OK;
    13f6:	19 82       	std	Y+1, r1	; 0x01
    13f8:	07 c0       	rjmp	.+14     	; 0x1408 <ADC_StartConversion+0x2c>
	}
	else
	{
		ADC_START_CONVERSION();
    13fa:	a6 e2       	ldi	r26, 0x26	; 38
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e6 e2       	ldi	r30, 0x26	; 38
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	80 64       	ori	r24, 0x40	; 64
    1406:	8c 93       	st	X, r24
	}
	return ret;
    1408:	89 81       	ldd	r24, Y+1	; 0x01
}
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	08 95       	ret

00001416 <ADC_IsConversionDone>:
 * @param conversion_status
 * @return true if conversion complete
 * 		   false if conversion is not complete
 */
STD_ReturnStatus ADC_IsConversionDone(const adc_conf_t*_adc,uint8 *conversion_status)
{
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	00 d0       	rcall	.+0      	; 0x141c <ADC_IsConversionDone+0x6>
    141c:	00 d0       	rcall	.+0      	; 0x141e <ADC_IsConversionDone+0x8>
    141e:	00 d0       	rcall	.+0      	; 0x1420 <ADC_IsConversionDone+0xa>
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	9b 83       	std	Y+3, r25	; 0x03
    1426:	8a 83       	std	Y+2, r24	; 0x02
    1428:	7d 83       	std	Y+5, r23	; 0x05
    142a:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_NOT_OK;
    142c:	19 82       	std	Y+1, r1	; 0x01
	if((NULL==_adc)&&(NULL==conversion_status))
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	9b 81       	ldd	r25, Y+3	; 0x03
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	31 f4       	brne	.+12     	; 0x1442 <ADC_IsConversionDone+0x2c>
    1436:	8c 81       	ldd	r24, Y+4	; 0x04
    1438:	9d 81       	ldd	r25, Y+5	; 0x05
    143a:	00 97       	sbiw	r24, 0x00	; 0
    143c:	11 f4       	brne	.+4      	; 0x1442 <ADC_IsConversionDone+0x2c>
	{
		ret = E_NOT_OK;
    143e:	19 82       	std	Y+1, r1	; 0x01
    1440:	14 c0       	rjmp	.+40     	; 0x146a <ADC_IsConversionDone+0x54>
	}
	else
	{
		//if ADC_CONVERSION_STATUS() get value of 1 then the conversion is ongoing else the conversion is done
		*conversion_status=(uint8)(!ADC_CONVERSION_STATUS());//
    1442:	e6 e2       	ldi	r30, 0x26	; 38
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	82 95       	swap	r24
    144a:	86 95       	lsr	r24
    144c:	86 95       	lsr	r24
    144e:	83 70       	andi	r24, 0x03	; 3
    1450:	88 2f       	mov	r24, r24
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	81 70       	andi	r24, 0x01	; 1
    1456:	90 70       	andi	r25, 0x00	; 0
    1458:	1e 82       	std	Y+6, r1	; 0x06
    145a:	00 97       	sbiw	r24, 0x00	; 0
    145c:	11 f4       	brne	.+4      	; 0x1462 <ADC_IsConversionDone+0x4c>
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	8e 83       	std	Y+6, r24	; 0x06
    1462:	ec 81       	ldd	r30, Y+4	; 0x04
    1464:	fd 81       	ldd	r31, Y+5	; 0x05
    1466:	8e 81       	ldd	r24, Y+6	; 0x06
    1468:	80 83       	st	Z, r24
	}
	return ret;
    146a:	89 81       	ldd	r24, Y+1	; 0x01
}
    146c:	26 96       	adiw	r28, 0x06	; 6
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	f8 94       	cli
    1472:	de bf       	out	0x3e, r29	; 62
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	cd bf       	out	0x3d, r28	; 61
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <ADC_GetConversionResult>:
 * @param _adc
 * @param conversion_result
 * @return
 */
STD_ReturnStatus ADC_GetConversionResult(const adc_conf_t*_adc,adc_result_t *conversion_result)
{
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
    1486:	27 97       	sbiw	r28, 0x07	; 7
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	f8 94       	cli
    148c:	de bf       	out	0x3e, r29	; 62
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	cd bf       	out	0x3d, r28	; 61
    1492:	9d 83       	std	Y+5, r25	; 0x05
    1494:	8c 83       	std	Y+4, r24	; 0x04
    1496:	7f 83       	std	Y+7, r23	; 0x07
    1498:	6e 83       	std	Y+6, r22	; 0x06
	STD_ReturnStatus ret = E_NOT_OK;
    149a:	1b 82       	std	Y+3, r1	; 0x03
	uint16 low;
	if((NULL==_adc)&&(NULL==conversion_result))
    149c:	8c 81       	ldd	r24, Y+4	; 0x04
    149e:	9d 81       	ldd	r25, Y+5	; 0x05
    14a0:	00 97       	sbiw	r24, 0x00	; 0
    14a2:	31 f4       	brne	.+12     	; 0x14b0 <ADC_GetConversionResult+0x32>
    14a4:	8e 81       	ldd	r24, Y+6	; 0x06
    14a6:	9f 81       	ldd	r25, Y+7	; 0x07
    14a8:	00 97       	sbiw	r24, 0x00	; 0
    14aa:	11 f4       	brne	.+4      	; 0x14b0 <ADC_GetConversionResult+0x32>
	{
		ret = E_NOT_OK;
    14ac:	1b 82       	std	Y+3, r1	; 0x03
    14ae:	45 c0       	rjmp	.+138    	; 0x153a <ADC_GetConversionResult+0xbc>
	}
	else
	{
		if(_adc->result_format==ADC_RIGHT_ADJUST)
    14b0:	ec 81       	ldd	r30, Y+4	; 0x04
    14b2:	fd 81       	ldd	r31, Y+5	; 0x05
    14b4:	84 81       	ldd	r24, Z+4	; 0x04
    14b6:	82 70       	andi	r24, 0x02	; 2
    14b8:	88 23       	and	r24, r24
    14ba:	f9 f4       	brne	.+62     	; 0x14fa <ADC_GetConversionResult+0x7c>
		{
			low=(uint16)ADCL;
    14bc:	e4 e2       	ldi	r30, 0x24	; 36
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	88 2f       	mov	r24, r24
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	9a 83       	std	Y+2, r25	; 0x02
    14c8:	89 83       	std	Y+1, r24	; 0x01
//			*conversion_result=(adc_result_t)(ADCH<<8)+ADCL;
			*conversion_result=(uint16)ADCH*256;
    14ca:	e5 e2       	ldi	r30, 0x25	; 37
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	88 2f       	mov	r24, r24
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	98 2f       	mov	r25, r24
    14d6:	88 27       	eor	r24, r24
    14d8:	ee 81       	ldd	r30, Y+6	; 0x06
    14da:	ff 81       	ldd	r31, Y+7	; 0x07
    14dc:	91 83       	std	Z+1, r25	; 0x01
    14de:	80 83       	st	Z, r24
			*conversion_result+=low;
    14e0:	ee 81       	ldd	r30, Y+6	; 0x06
    14e2:	ff 81       	ldd	r31, Y+7	; 0x07
    14e4:	20 81       	ld	r18, Z
    14e6:	31 81       	ldd	r19, Z+1	; 0x01
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	9a 81       	ldd	r25, Y+2	; 0x02
    14ec:	82 0f       	add	r24, r18
    14ee:	93 1f       	adc	r25, r19
    14f0:	ee 81       	ldd	r30, Y+6	; 0x06
    14f2:	ff 81       	ldd	r31, Y+7	; 0x07
    14f4:	91 83       	std	Z+1, r25	; 0x01
    14f6:	80 83       	st	Z, r24
    14f8:	20 c0       	rjmp	.+64     	; 0x153a <ADC_GetConversionResult+0xbc>
		}
		else if(_adc->result_format==ADC_LEFT_ADJUST)
    14fa:	ec 81       	ldd	r30, Y+4	; 0x04
    14fc:	fd 81       	ldd	r31, Y+5	; 0x05
    14fe:	84 81       	ldd	r24, Z+4	; 0x04
    1500:	82 70       	andi	r24, 0x02	; 2
    1502:	88 23       	and	r24, r24
    1504:	d1 f0       	breq	.+52     	; 0x153a <ADC_GetConversionResult+0xbc>
		{
			*conversion_result=(adc_result_t)(((ADCH<<8)+ADCL)>>6);
    1506:	e5 e2       	ldi	r30, 0x25	; 37
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	88 2f       	mov	r24, r24
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	38 2f       	mov	r19, r24
    1512:	22 27       	eor	r18, r18
    1514:	e4 e2       	ldi	r30, 0x24	; 36
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	88 2f       	mov	r24, r24
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	82 0f       	add	r24, r18
    1520:	93 1f       	adc	r25, r19
    1522:	08 2e       	mov	r0, r24
    1524:	89 2f       	mov	r24, r25
    1526:	00 0c       	add	r0, r0
    1528:	88 1f       	adc	r24, r24
    152a:	99 0b       	sbc	r25, r25
    152c:	00 0c       	add	r0, r0
    152e:	88 1f       	adc	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	ee 81       	ldd	r30, Y+6	; 0x06
    1534:	ff 81       	ldd	r31, Y+7	; 0x07
    1536:	91 83       	std	Z+1, r25	; 0x01
    1538:	80 83       	st	Z, r24
		}
	}
	return ret;
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    153c:	27 96       	adiw	r28, 0x07	; 7
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	f8 94       	cli
    1542:	de bf       	out	0x3e, r29	; 62
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	cd bf       	out	0x3d, r28	; 61
    1548:	cf 91       	pop	r28
    154a:	df 91       	pop	r29
    154c:	08 95       	ret

0000154e <ADC_GetConversion_Blocking>:
STD_ReturnStatus ADC_GetConversion_Blocking(const adc_conf_t*_adc,adc_channel_select_t channel,adc_result_t *conversion_result)
{
    154e:	df 93       	push	r29
    1550:	cf 93       	push	r28
    1552:	00 d0       	rcall	.+0      	; 0x1554 <ADC_GetConversion_Blocking+0x6>
    1554:	00 d0       	rcall	.+0      	; 0x1556 <ADC_GetConversion_Blocking+0x8>
    1556:	00 d0       	rcall	.+0      	; 0x1558 <ADC_GetConversion_Blocking+0xa>
    1558:	cd b7       	in	r28, 0x3d	; 61
    155a:	de b7       	in	r29, 0x3e	; 62
    155c:	9b 83       	std	Y+3, r25	; 0x03
    155e:	8a 83       	std	Y+2, r24	; 0x02
    1560:	6c 83       	std	Y+4, r22	; 0x04
    1562:	5e 83       	std	Y+6, r21	; 0x06
    1564:	4d 83       	std	Y+5, r20	; 0x05
	STD_ReturnStatus ret = E_NOT_OK;
    1566:	19 82       	std	Y+1, r1	; 0x01
	if((NULL==_adc)&&(NULL==conversion_result))
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	9b 81       	ldd	r25, Y+3	; 0x03
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	31 f4       	brne	.+12     	; 0x157c <ADC_GetConversion_Blocking+0x2e>
    1570:	8d 81       	ldd	r24, Y+5	; 0x05
    1572:	9e 81       	ldd	r25, Y+6	; 0x06
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	11 f4       	brne	.+4      	; 0x157c <ADC_GetConversion_Blocking+0x2e>
	{
		ret = E_NOT_OK;
    1578:	19 82       	std	Y+1, r1	; 0x01
    157a:	13 c0       	rjmp	.+38     	; 0x15a2 <ADC_GetConversion_Blocking+0x54>
	}
	else
	{
		/* Select channel */
		ret = ADC_SelectChannel(_adc,channel);
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	9b 81       	ldd	r25, Y+3	; 0x03
    1580:	6c 81       	ldd	r22, Y+4	; 0x04
    1582:	0e 94 c4 09 	call	0x1388	; 0x1388 <ADC_SelectChannel>
    1586:	89 83       	std	Y+1, r24	; 0x01
		/* Start adc conversion */
		ret = ADC_StartConversion(_adc);
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	9b 81       	ldd	r25, Y+3	; 0x03
    158c:	0e 94 ee 09 	call	0x13dc	; 0x13dc <ADC_StartConversion>
    1590:	89 83       	std	Y+1, r24	; 0x01
		/* check conversion*/
		while(ADSC==1);
		ret = ADC_GetConversionResult(_adc,conversion_result);
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	9b 81       	ldd	r25, Y+3	; 0x03
    1596:	2d 81       	ldd	r18, Y+5	; 0x05
    1598:	3e 81       	ldd	r19, Y+6	; 0x06
    159a:	b9 01       	movw	r22, r18
    159c:	0e 94 3f 0a 	call	0x147e	; 0x147e <ADC_GetConversionResult>
    15a0:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    15a4:	26 96       	adiw	r28, 0x06	; 6
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	f8 94       	cli
    15aa:	de bf       	out	0x3e, r29	; 62
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	cd bf       	out	0x3d, r28	; 61
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	08 95       	ret

000015b6 <adc_input_channel_port_configure>:



static inline void adc_input_channel_port_configure(adc_channel_select_t channel)
{
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	00 d0       	rcall	.+0      	; 0x15bc <adc_input_channel_port_configure+0x6>
    15bc:	0f 92       	push	r0
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	89 83       	std	Y+1, r24	; 0x01
	switch(channel)
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	3b 83       	std	Y+3, r19	; 0x03
    15cc:	2a 83       	std	Y+2, r18	; 0x02
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	9b 81       	ldd	r25, Y+3	; 0x03
    15d2:	83 30       	cpi	r24, 0x03	; 3
    15d4:	91 05       	cpc	r25, r1
    15d6:	09 f4       	brne	.+2      	; 0x15da <adc_input_channel_port_configure+0x24>
    15d8:	41 c0       	rjmp	.+130    	; 0x165c <adc_input_channel_port_configure+0xa6>
    15da:	2a 81       	ldd	r18, Y+2	; 0x02
    15dc:	3b 81       	ldd	r19, Y+3	; 0x03
    15de:	24 30       	cpi	r18, 0x04	; 4
    15e0:	31 05       	cpc	r19, r1
    15e2:	7c f4       	brge	.+30     	; 0x1602 <adc_input_channel_port_configure+0x4c>
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	9b 81       	ldd	r25, Y+3	; 0x03
    15e8:	81 30       	cpi	r24, 0x01	; 1
    15ea:	91 05       	cpc	r25, r1
    15ec:	39 f1       	breq	.+78     	; 0x163c <adc_input_channel_port_configure+0x86>
    15ee:	2a 81       	ldd	r18, Y+2	; 0x02
    15f0:	3b 81       	ldd	r19, Y+3	; 0x03
    15f2:	22 30       	cpi	r18, 0x02	; 2
    15f4:	31 05       	cpc	r19, r1
    15f6:	54 f5       	brge	.+84     	; 0x164c <adc_input_channel_port_configure+0x96>
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	9b 81       	ldd	r25, Y+3	; 0x03
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	b1 f0       	breq	.+44     	; 0x162c <adc_input_channel_port_configure+0x76>
    1600:	54 c0       	rjmp	.+168    	; 0x16aa <adc_input_channel_port_configure+0xf4>
    1602:	2a 81       	ldd	r18, Y+2	; 0x02
    1604:	3b 81       	ldd	r19, Y+3	; 0x03
    1606:	25 30       	cpi	r18, 0x05	; 5
    1608:	31 05       	cpc	r19, r1
    160a:	c1 f1       	breq	.+112    	; 0x167c <adc_input_channel_port_configure+0xc6>
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	9b 81       	ldd	r25, Y+3	; 0x03
    1610:	85 30       	cpi	r24, 0x05	; 5
    1612:	91 05       	cpc	r25, r1
    1614:	5c f1       	brlt	.+86     	; 0x166c <adc_input_channel_port_configure+0xb6>
    1616:	2a 81       	ldd	r18, Y+2	; 0x02
    1618:	3b 81       	ldd	r19, Y+3	; 0x03
    161a:	26 30       	cpi	r18, 0x06	; 6
    161c:	31 05       	cpc	r19, r1
    161e:	b1 f1       	breq	.+108    	; 0x168c <adc_input_channel_port_configure+0xd6>
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	9b 81       	ldd	r25, Y+3	; 0x03
    1624:	87 30       	cpi	r24, 0x07	; 7
    1626:	91 05       	cpc	r25, r1
    1628:	c9 f1       	breq	.+114    	; 0x169c <adc_input_channel_port_configure+0xe6>
    162a:	3f c0       	rjmp	.+126    	; 0x16aa <adc_input_channel_port_configure+0xf4>
	{
	case ADC_CHANNEL_AN0:	CLR_BIT(DDRA,PIN0);break;
    162c:	aa e3       	ldi	r26, 0x3A	; 58
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	ea e3       	ldi	r30, 0x3A	; 58
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	8e 7f       	andi	r24, 0xFE	; 254
    1638:	8c 93       	st	X, r24
    163a:	37 c0       	rjmp	.+110    	; 0x16aa <adc_input_channel_port_configure+0xf4>
	case ADC_CHANNEL_AN1:	CLR_BIT(DDRA,PIN1);break;
    163c:	aa e3       	ldi	r26, 0x3A	; 58
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	ea e3       	ldi	r30, 0x3A	; 58
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	8d 7f       	andi	r24, 0xFD	; 253
    1648:	8c 93       	st	X, r24
    164a:	2f c0       	rjmp	.+94     	; 0x16aa <adc_input_channel_port_configure+0xf4>
	case ADC_CHANNEL_AN2:	CLR_BIT(DDRA,PIN2);break;
    164c:	aa e3       	ldi	r26, 0x3A	; 58
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	ea e3       	ldi	r30, 0x3A	; 58
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	8b 7f       	andi	r24, 0xFB	; 251
    1658:	8c 93       	st	X, r24
    165a:	27 c0       	rjmp	.+78     	; 0x16aa <adc_input_channel_port_configure+0xf4>
	case ADC_CHANNEL_AN3:	CLR_BIT(DDRA,PIN3);break;
    165c:	aa e3       	ldi	r26, 0x3A	; 58
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	ea e3       	ldi	r30, 0x3A	; 58
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	87 7f       	andi	r24, 0xF7	; 247
    1668:	8c 93       	st	X, r24
    166a:	1f c0       	rjmp	.+62     	; 0x16aa <adc_input_channel_port_configure+0xf4>
	case ADC_CHANNEL_AN4:	CLR_BIT(DDRA,PIN4);break;
    166c:	aa e3       	ldi	r26, 0x3A	; 58
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	ea e3       	ldi	r30, 0x3A	; 58
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	8f 7e       	andi	r24, 0xEF	; 239
    1678:	8c 93       	st	X, r24
    167a:	17 c0       	rjmp	.+46     	; 0x16aa <adc_input_channel_port_configure+0xf4>
	case ADC_CHANNEL_AN5:	CLR_BIT(DDRA,PIN5);break;
    167c:	aa e3       	ldi	r26, 0x3A	; 58
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	ea e3       	ldi	r30, 0x3A	; 58
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	8f 7d       	andi	r24, 0xDF	; 223
    1688:	8c 93       	st	X, r24
    168a:	0f c0       	rjmp	.+30     	; 0x16aa <adc_input_channel_port_configure+0xf4>
	case ADC_CHANNEL_AN6:	CLR_BIT(DDRA,PIN6);break;
    168c:	aa e3       	ldi	r26, 0x3A	; 58
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	ea e3       	ldi	r30, 0x3A	; 58
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	8f 7b       	andi	r24, 0xBF	; 191
    1698:	8c 93       	st	X, r24
    169a:	07 c0       	rjmp	.+14     	; 0x16aa <adc_input_channel_port_configure+0xf4>
	case ADC_CHANNEL_AN7:	CLR_BIT(DDRA,PIN7);break;
    169c:	aa e3       	ldi	r26, 0x3A	; 58
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	ea e3       	ldi	r30, 0x3A	; 58
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	8f 77       	andi	r24, 0x7F	; 127
    16a8:	8c 93       	st	X, r24
	}
}
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	08 95       	ret

000016b6 <select_result_format>:


static inline void select_result_format(const adc_conf_t*_adc)
{
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	00 d0       	rcall	.+0      	; 0x16bc <select_result_format+0x6>
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
    16c0:	9a 83       	std	Y+2, r25	; 0x02
    16c2:	89 83       	std	Y+1, r24	; 0x01
	if(_adc->result_format==ADC_RIGHT_ADJUST)
    16c4:	e9 81       	ldd	r30, Y+1	; 0x01
    16c6:	fa 81       	ldd	r31, Y+2	; 0x02
    16c8:	84 81       	ldd	r24, Z+4	; 0x04
    16ca:	82 70       	andi	r24, 0x02	; 2
    16cc:	88 23       	and	r24, r24
    16ce:	41 f4       	brne	.+16     	; 0x16e0 <select_result_format+0x2a>
	{
		ADC_RESULT_RIGHT_ADJUST();
    16d0:	a7 e2       	ldi	r26, 0x27	; 39
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	e7 e2       	ldi	r30, 0x27	; 39
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	8f 7d       	andi	r24, 0xDF	; 223
    16dc:	8c 93       	st	X, r24
    16de:	0d c0       	rjmp	.+26     	; 0x16fa <select_result_format+0x44>
	}
	else if(_adc->result_format==ADC_LEFT_ADJUST)
    16e0:	e9 81       	ldd	r30, Y+1	; 0x01
    16e2:	fa 81       	ldd	r31, Y+2	; 0x02
    16e4:	84 81       	ldd	r24, Z+4	; 0x04
    16e6:	82 70       	andi	r24, 0x02	; 2
    16e8:	88 23       	and	r24, r24
    16ea:	39 f0       	breq	.+14     	; 0x16fa <select_result_format+0x44>
	{
		ADC_RESULT_LEFT_ADJUST();
    16ec:	a7 e2       	ldi	r26, 0x27	; 39
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	e7 e2       	ldi	r30, 0x27	; 39
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	80 62       	ori	r24, 0x20	; 32
    16f8:	8c 93       	st	X, r24
	}
}
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	cf 91       	pop	r28
    1700:	df 91       	pop	r29
    1702:	08 95       	ret

00001704 <ADC_StartConversion_Interrupt>:

STD_ReturnStatus ADC_StartConversion_Interrupt(const adc_conf_t*_adc,adc_channel_select_t channel)
{
    1704:	df 93       	push	r29
    1706:	cf 93       	push	r28
    1708:	00 d0       	rcall	.+0      	; 0x170a <ADC_StartConversion_Interrupt+0x6>
    170a:	00 d0       	rcall	.+0      	; 0x170c <ADC_StartConversion_Interrupt+0x8>
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    1710:	9b 83       	std	Y+3, r25	; 0x03
    1712:	8a 83       	std	Y+2, r24	; 0x02
    1714:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_NOT_OK;
    1716:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==_adc)
    1718:	8a 81       	ldd	r24, Y+2	; 0x02
    171a:	9b 81       	ldd	r25, Y+3	; 0x03
    171c:	00 97       	sbiw	r24, 0x00	; 0
    171e:	11 f4       	brne	.+4      	; 0x1724 <ADC_StartConversion_Interrupt+0x20>
	{
		ret = E_NOT_OK;
    1720:	19 82       	std	Y+1, r1	; 0x01
    1722:	0b c0       	rjmp	.+22     	; 0x173a <ADC_StartConversion_Interrupt+0x36>
	}
	else
	{
		/* Select channel */
		ret = ADC_SelectChannel(_adc,channel);
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	9b 81       	ldd	r25, Y+3	; 0x03
    1728:	6c 81       	ldd	r22, Y+4	; 0x04
    172a:	0e 94 c4 09 	call	0x1388	; 0x1388 <ADC_SelectChannel>
    172e:	89 83       	std	Y+1, r24	; 0x01
		/* Start adc conversion */
		ret = ADC_StartConversion(_adc);
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	9b 81       	ldd	r25, Y+3	; 0x03
    1734:	0e 94 ee 09 	call	0x13dc	; 0x13dc <ADC_StartConversion>
    1738:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    173a:	89 81       	ldd	r24, Y+1	; 0x01
}
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	08 95       	ret

0000174a <ADC_ISR>:

void ADC_ISR()
{
    174a:	df 93       	push	r29
    174c:	cf 93       	push	r28
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
	/* clear flag*/
	ADC_InterruptFlagClear();
    1752:	a6 e2       	ldi	r26, 0x26	; 38
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	e6 e2       	ldi	r30, 0x26	; 38
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	80 61       	ori	r24, 0x10	; 16
    175e:	8c 93       	st	X, r24
	if(ADC_InterruptHandler)
    1760:	80 91 e4 00 	lds	r24, 0x00E4
    1764:	90 91 e5 00 	lds	r25, 0x00E5
    1768:	00 97       	sbiw	r24, 0x00	; 0
    176a:	29 f0       	breq	.+10     	; 0x1776 <ADC_ISR+0x2c>
	{
		ADC_InterruptHandler();
    176c:	e0 91 e4 00 	lds	r30, 0x00E4
    1770:	f0 91 e5 00 	lds	r31, 0x00E5
    1774:	09 95       	icall
	}
}
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	08 95       	ret

0000177c <Data_EEPROM_WriteByte>:

#include "MCAL_EEPROM.h"


STD_ReturnStatus Data_EEPROM_WriteByte(uint8 bAdd,uint8 bData)
{
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	63 97       	sbiw	r28, 0x13	; 19
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	f8 94       	cli
    178a:	de bf       	out	0x3e, r29	; 62
    178c:	0f be       	out	0x3f, r0	; 63
    178e:	cd bf       	out	0x3d, r28	; 61
    1790:	88 8b       	std	Y+16, r24	; 0x10
    1792:	69 8b       	std	Y+17, r22	; 0x11
	STD_ReturnStatus ret = E_OK;
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	8f 87       	std	Y+15, r24	; 0x0f
    while((EECR & 0x02) == 1) ;           // CHECK EEWE BIT
    1798:	ec e3       	ldi	r30, 0x3C	; 60
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    while((SPMCR & 0x01 )== 1);          // CHECK SPMEN BIT
    179e:	e7 e5       	ldi	r30, 0x57	; 87
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	88 2f       	mov	r24, r24
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	81 70       	andi	r24, 0x01	; 1
    17aa:	90 70       	andi	r25, 0x00	; 0
    17ac:	88 23       	and	r24, r24
    17ae:	b9 f7       	brne	.-18     	; 0x179e <Data_EEPROM_WriteByte+0x22>
    EEARH=0x00;                       // SET ADDRESS MSB BYTE
    17b0:	ef e3       	ldi	r30, 0x3F	; 63
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	10 82       	st	Z, r1
    EEARL = bAdd ;                 // SET LSB BYTE OF ADDRESS
    17b6:	ee e3       	ldi	r30, 0x3E	; 62
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	88 89       	ldd	r24, Y+16	; 0x10
    17bc:	80 83       	st	Z, r24
    EEDR = bData ;                     // WRITE data to be written to EEPROM
    17be:	ed e3       	ldi	r30, 0x3D	; 61
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	89 89       	ldd	r24, Y+17	; 0x11
    17c4:	80 83       	st	Z, r24
    EECR = 0x04 ;                       // SET EEMWE BIT
    17c6:	ec e3       	ldi	r30, 0x3C	; 60
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	84 e0       	ldi	r24, 0x04	; 4
    17cc:	80 83       	st	Z, r24
    EECR = 0x06;                        // SET EEMWE & EEWE BITS
    17ce:	ec e3       	ldi	r30, 0x3C	; 60
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	86 e0       	ldi	r24, 0x06	; 6
    17d4:	80 83       	st	Z, r24
    while((EECR & 0x04) == 1);           // CHECK EEMWE IS CLRED
    17d6:	ec e3       	ldi	r30, 0x3C	; 60
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	a0 e2       	ldi	r26, 0x20	; 32
    17e2:	b1 e4       	ldi	r27, 0x41	; 65
    17e4:	8b 87       	std	Y+11, r24	; 0x0b
    17e6:	9c 87       	std	Y+12, r25	; 0x0c
    17e8:	ad 87       	std	Y+13, r26	; 0x0d
    17ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    17f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	4a ef       	ldi	r20, 0xFA	; 250
    17fa:	54 e4       	ldi	r21, 0x44	; 68
    17fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	8f 83       	std	Y+7, r24	; 0x07
    1806:	98 87       	std	Y+8, r25	; 0x08
    1808:	a9 87       	std	Y+9, r26	; 0x09
    180a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    180c:	6f 81       	ldd	r22, Y+7	; 0x07
    180e:	78 85       	ldd	r23, Y+8	; 0x08
    1810:	89 85       	ldd	r24, Y+9	; 0x09
    1812:	9a 85       	ldd	r25, Y+10	; 0x0a
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	40 e8       	ldi	r20, 0x80	; 128
    181a:	5f e3       	ldi	r21, 0x3F	; 63
    181c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1820:	88 23       	and	r24, r24
    1822:	2c f4       	brge	.+10     	; 0x182e <Data_EEPROM_WriteByte+0xb2>
		__ticks = 1;
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	9e 83       	std	Y+6, r25	; 0x06
    182a:	8d 83       	std	Y+5, r24	; 0x05
    182c:	3f c0       	rjmp	.+126    	; 0x18ac <Data_EEPROM_WriteByte+0x130>
	else if (__tmp > 65535)
    182e:	6f 81       	ldd	r22, Y+7	; 0x07
    1830:	78 85       	ldd	r23, Y+8	; 0x08
    1832:	89 85       	ldd	r24, Y+9	; 0x09
    1834:	9a 85       	ldd	r25, Y+10	; 0x0a
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	3f ef       	ldi	r19, 0xFF	; 255
    183a:	4f e7       	ldi	r20, 0x7F	; 127
    183c:	57 e4       	ldi	r21, 0x47	; 71
    183e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1842:	18 16       	cp	r1, r24
    1844:	4c f5       	brge	.+82     	; 0x1898 <Data_EEPROM_WriteByte+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1846:	6b 85       	ldd	r22, Y+11	; 0x0b
    1848:	7c 85       	ldd	r23, Y+12	; 0x0c
    184a:	8d 85       	ldd	r24, Y+13	; 0x0d
    184c:	9e 85       	ldd	r25, Y+14	; 0x0e
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	40 e2       	ldi	r20, 0x20	; 32
    1854:	51 e4       	ldi	r21, 0x41	; 65
    1856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	bc 01       	movw	r22, r24
    1860:	cd 01       	movw	r24, r26
    1862:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	9e 83       	std	Y+6, r25	; 0x06
    186c:	8d 83       	std	Y+5, r24	; 0x05
    186e:	0f c0       	rjmp	.+30     	; 0x188e <Data_EEPROM_WriteByte+0x112>
    1870:	88 ec       	ldi	r24, 0xC8	; 200
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	9c 83       	std	Y+4, r25	; 0x04
    1876:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	9c 81       	ldd	r25, Y+4	; 0x04
    187c:	01 97       	sbiw	r24, 0x01	; 1
    187e:	f1 f7       	brne	.-4      	; 0x187c <Data_EEPROM_WriteByte+0x100>
    1880:	9c 83       	std	Y+4, r25	; 0x04
    1882:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1884:	8d 81       	ldd	r24, Y+5	; 0x05
    1886:	9e 81       	ldd	r25, Y+6	; 0x06
    1888:	01 97       	sbiw	r24, 0x01	; 1
    188a:	9e 83       	std	Y+6, r25	; 0x06
    188c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188e:	8d 81       	ldd	r24, Y+5	; 0x05
    1890:	9e 81       	ldd	r25, Y+6	; 0x06
    1892:	00 97       	sbiw	r24, 0x00	; 0
    1894:	69 f7       	brne	.-38     	; 0x1870 <Data_EEPROM_WriteByte+0xf4>
    1896:	14 c0       	rjmp	.+40     	; 0x18c0 <Data_EEPROM_WriteByte+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1898:	6f 81       	ldd	r22, Y+7	; 0x07
    189a:	78 85       	ldd	r23, Y+8	; 0x08
    189c:	89 85       	ldd	r24, Y+9	; 0x09
    189e:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	9e 83       	std	Y+6, r25	; 0x06
    18aa:	8d 83       	std	Y+5, r24	; 0x05
    18ac:	8d 81       	ldd	r24, Y+5	; 0x05
    18ae:	9e 81       	ldd	r25, Y+6	; 0x06
    18b0:	9a 83       	std	Y+2, r25	; 0x02
    18b2:	89 83       	std	Y+1, r24	; 0x01
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	9a 81       	ldd	r25, Y+2	; 0x02
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	f1 f7       	brne	.-4      	; 0x18b8 <Data_EEPROM_WriteByte+0x13c>
    18bc:	9a 83       	std	Y+2, r25	; 0x02
    18be:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(10);
	return ret;
    18c0:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    18c2:	63 96       	adiw	r28, 0x13	; 19
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	f8 94       	cli
    18c8:	de bf       	out	0x3e, r29	; 62
    18ca:	0f be       	out	0x3f, r0	; 63
    18cc:	cd bf       	out	0x3d, r28	; 61
    18ce:	cf 91       	pop	r28
    18d0:	df 91       	pop	r29
    18d2:	08 95       	ret

000018d4 <Data_EEPROM_ReadByte>:
STD_ReturnStatus Data_EEPROM_ReadByte(uint16 bAdd,uint8 *bData)
{
    18d4:	df 93       	push	r29
    18d6:	cf 93       	push	r28
    18d8:	00 d0       	rcall	.+0      	; 0x18da <Data_EEPROM_ReadByte+0x6>
    18da:	00 d0       	rcall	.+0      	; 0x18dc <Data_EEPROM_ReadByte+0x8>
    18dc:	0f 92       	push	r0
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
    18e2:	9b 83       	std	Y+3, r25	; 0x03
    18e4:	8a 83       	std	Y+2, r24	; 0x02
    18e6:	7d 83       	std	Y+5, r23	; 0x05
    18e8:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_NOT_OK;
    18ea:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==bData)
    18ec:	8c 81       	ldd	r24, Y+4	; 0x04
    18ee:	9d 81       	ldd	r25, Y+5	; 0x05
    18f0:	00 97       	sbiw	r24, 0x00	; 0
    18f2:	09 f4       	brne	.+2      	; 0x18f6 <Data_EEPROM_ReadByte+0x22>
	{
		ret = E_NOT_OK;
    18f4:	19 82       	std	Y+1, r1	; 0x01
	}
	else
	{

	}
	return ret;
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	cf 91       	pop	r28
    1904:	df 91       	pop	r29
    1906:	08 95       	ret

00001908 <gpio_pin_direction_initialize>:
/***
 *
 * @param _pin_config
 * @return
 */
STD_ReturnStatus gpio_pin_direction_initialize(const Pin_Config_t *_pin_config){
    1908:	df 93       	push	r29
    190a:	cf 93       	push	r28
    190c:	00 d0       	rcall	.+0      	; 0x190e <gpio_pin_direction_initialize+0x6>
    190e:	00 d0       	rcall	.+0      	; 0x1910 <gpio_pin_direction_initialize+0x8>
    1910:	0f 92       	push	r0
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
    1916:	9b 83       	std	Y+3, r25	; 0x03
    1918:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret=E_OK;
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==_pin_config||_pin_config->pin > PORT_PIN_MAX_NUMBER-1)
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	9b 81       	ldd	r25, Y+3	; 0x03
    1922:	00 97       	sbiw	r24, 0x00	; 0
    1924:	59 f0       	breq	.+22     	; 0x193c <gpio_pin_direction_initialize+0x34>
    1926:	ea 81       	ldd	r30, Y+2	; 0x02
    1928:	fb 81       	ldd	r31, Y+3	; 0x03
    192a:	80 81       	ld	r24, Z
    192c:	86 95       	lsr	r24
    192e:	86 95       	lsr	r24
    1930:	87 70       	andi	r24, 0x07	; 7
    1932:	88 2f       	mov	r24, r24
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	88 30       	cpi	r24, 0x08	; 8
    1938:	91 05       	cpc	r25, r1
    193a:	14 f0       	brlt	.+4      	; 0x1940 <gpio_pin_direction_initialize+0x38>
	{
		ret=E_NOT_OK;
    193c:	19 82       	std	Y+1, r1	; 0x01
    193e:	75 c0       	rjmp	.+234    	; 0x1a2a <gpio_pin_direction_initialize+0x122>
	}
	else
	{
		switch(_pin_config->direction)
    1940:	ea 81       	ldd	r30, Y+2	; 0x02
    1942:	fb 81       	ldd	r31, Y+3	; 0x03
    1944:	80 81       	ld	r24, Z
    1946:	82 95       	swap	r24
    1948:	86 95       	lsr	r24
    194a:	87 70       	andi	r24, 0x07	; 7
    194c:	81 70       	andi	r24, 0x01	; 1
    194e:	28 2f       	mov	r18, r24
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	3d 83       	std	Y+5, r19	; 0x05
    1954:	2c 83       	std	Y+4, r18	; 0x04
    1956:	8c 81       	ldd	r24, Y+4	; 0x04
    1958:	9d 81       	ldd	r25, Y+5	; 0x05
    195a:	00 97       	sbiw	r24, 0x00	; 0
    195c:	b1 f1       	breq	.+108    	; 0x19ca <gpio_pin_direction_initialize+0xc2>
    195e:	2c 81       	ldd	r18, Y+4	; 0x04
    1960:	3d 81       	ldd	r19, Y+5	; 0x05
    1962:	21 30       	cpi	r18, 0x01	; 1
    1964:	31 05       	cpc	r19, r1
    1966:	09 f0       	breq	.+2      	; 0x196a <gpio_pin_direction_initialize+0x62>
    1968:	60 c0       	rjmp	.+192    	; 0x1a2a <gpio_pin_direction_initialize+0x122>
		{
		case DIRECTION_OUTPUT:		SET_BIT(*DDR_register[_pin_config->port],_pin_config->pin);break;
    196a:	ea 81       	ldd	r30, Y+2	; 0x02
    196c:	fb 81       	ldd	r31, Y+3	; 0x03
    196e:	80 81       	ld	r24, Z
    1970:	83 70       	andi	r24, 0x03	; 3
    1972:	88 2f       	mov	r24, r24
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	88 0f       	add	r24, r24
    1978:	99 1f       	adc	r25, r25
    197a:	fc 01       	movw	r30, r24
    197c:	e5 59       	subi	r30, 0x95	; 149
    197e:	ff 4f       	sbci	r31, 0xFF	; 255
    1980:	a0 81       	ld	r26, Z
    1982:	b1 81       	ldd	r27, Z+1	; 0x01
    1984:	ea 81       	ldd	r30, Y+2	; 0x02
    1986:	fb 81       	ldd	r31, Y+3	; 0x03
    1988:	80 81       	ld	r24, Z
    198a:	83 70       	andi	r24, 0x03	; 3
    198c:	88 2f       	mov	r24, r24
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	88 0f       	add	r24, r24
    1992:	99 1f       	adc	r25, r25
    1994:	fc 01       	movw	r30, r24
    1996:	e5 59       	subi	r30, 0x95	; 149
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	01 90       	ld	r0, Z+
    199c:	f0 81       	ld	r31, Z
    199e:	e0 2d       	mov	r30, r0
    19a0:	80 81       	ld	r24, Z
    19a2:	48 2f       	mov	r20, r24
    19a4:	ea 81       	ldd	r30, Y+2	; 0x02
    19a6:	fb 81       	ldd	r31, Y+3	; 0x03
    19a8:	80 81       	ld	r24, Z
    19aa:	86 95       	lsr	r24
    19ac:	86 95       	lsr	r24
    19ae:	87 70       	andi	r24, 0x07	; 7
    19b0:	28 2f       	mov	r18, r24
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	02 2e       	mov	r0, r18
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <gpio_pin_direction_initialize+0xb8>
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	0a 94       	dec	r0
    19c2:	e2 f7       	brpl	.-8      	; 0x19bc <gpio_pin_direction_initialize+0xb4>
    19c4:	84 2b       	or	r24, r20
    19c6:	8c 93       	st	X, r24
    19c8:	30 c0       	rjmp	.+96     	; 0x1a2a <gpio_pin_direction_initialize+0x122>
		case DIRECTION_INPUT: 		CLR_BIT(*DDR_register[_pin_config->port],_pin_config->pin);break;
    19ca:	ea 81       	ldd	r30, Y+2	; 0x02
    19cc:	fb 81       	ldd	r31, Y+3	; 0x03
    19ce:	80 81       	ld	r24, Z
    19d0:	83 70       	andi	r24, 0x03	; 3
    19d2:	88 2f       	mov	r24, r24
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	88 0f       	add	r24, r24
    19d8:	99 1f       	adc	r25, r25
    19da:	fc 01       	movw	r30, r24
    19dc:	e5 59       	subi	r30, 0x95	; 149
    19de:	ff 4f       	sbci	r31, 0xFF	; 255
    19e0:	a0 81       	ld	r26, Z
    19e2:	b1 81       	ldd	r27, Z+1	; 0x01
    19e4:	ea 81       	ldd	r30, Y+2	; 0x02
    19e6:	fb 81       	ldd	r31, Y+3	; 0x03
    19e8:	80 81       	ld	r24, Z
    19ea:	83 70       	andi	r24, 0x03	; 3
    19ec:	88 2f       	mov	r24, r24
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	88 0f       	add	r24, r24
    19f2:	99 1f       	adc	r25, r25
    19f4:	fc 01       	movw	r30, r24
    19f6:	e5 59       	subi	r30, 0x95	; 149
    19f8:	ff 4f       	sbci	r31, 0xFF	; 255
    19fa:	01 90       	ld	r0, Z+
    19fc:	f0 81       	ld	r31, Z
    19fe:	e0 2d       	mov	r30, r0
    1a00:	80 81       	ld	r24, Z
    1a02:	48 2f       	mov	r20, r24
    1a04:	ea 81       	ldd	r30, Y+2	; 0x02
    1a06:	fb 81       	ldd	r31, Y+3	; 0x03
    1a08:	80 81       	ld	r24, Z
    1a0a:	86 95       	lsr	r24
    1a0c:	86 95       	lsr	r24
    1a0e:	87 70       	andi	r24, 0x07	; 7
    1a10:	28 2f       	mov	r18, r24
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	02 2e       	mov	r0, r18
    1a1a:	02 c0       	rjmp	.+4      	; 0x1a20 <gpio_pin_direction_initialize+0x118>
    1a1c:	88 0f       	add	r24, r24
    1a1e:	99 1f       	adc	r25, r25
    1a20:	0a 94       	dec	r0
    1a22:	e2 f7       	brpl	.-8      	; 0x1a1c <gpio_pin_direction_initialize+0x114>
    1a24:	80 95       	com	r24
    1a26:	84 23       	and	r24, r20
    1a28:	8c 93       	st	X, r24
		}
	}
	return ret;
    1a2a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	cf 91       	pop	r28
    1a38:	df 91       	pop	r29
    1a3a:	08 95       	ret

00001a3c <gpio_pin_get_direction_status>:
 * @param _pin_config
 * @param direction_status
 * @return
 */
STD_ReturnStatus gpio_pin_get_direction_status(const Pin_Config_t *_pin_config,direction_t *direction_status)
{
    1a3c:	df 93       	push	r29
    1a3e:	cf 93       	push	r28
    1a40:	00 d0       	rcall	.+0      	; 0x1a42 <gpio_pin_get_direction_status+0x6>
    1a42:	00 d0       	rcall	.+0      	; 0x1a44 <gpio_pin_get_direction_status+0x8>
    1a44:	0f 92       	push	r0
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
    1a4a:	9b 83       	std	Y+3, r25	; 0x03
    1a4c:	8a 83       	std	Y+2, r24	; 0x02
    1a4e:	7d 83       	std	Y+5, r23	; 0x05
    1a50:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret=E_OK;
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	89 83       	std	Y+1, r24	; 0x01
		if(NULL==_pin_config || NULL==direction_status ||_pin_config->pin > PORT_PIN_MAX_NUMBER-1)
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	9b 81       	ldd	r25, Y+3	; 0x03
    1a5a:	00 97       	sbiw	r24, 0x00	; 0
    1a5c:	79 f0       	breq	.+30     	; 0x1a7c <gpio_pin_get_direction_status+0x40>
    1a5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a60:	9d 81       	ldd	r25, Y+5	; 0x05
    1a62:	00 97       	sbiw	r24, 0x00	; 0
    1a64:	59 f0       	breq	.+22     	; 0x1a7c <gpio_pin_get_direction_status+0x40>
    1a66:	ea 81       	ldd	r30, Y+2	; 0x02
    1a68:	fb 81       	ldd	r31, Y+3	; 0x03
    1a6a:	80 81       	ld	r24, Z
    1a6c:	86 95       	lsr	r24
    1a6e:	86 95       	lsr	r24
    1a70:	87 70       	andi	r24, 0x07	; 7
    1a72:	88 2f       	mov	r24, r24
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	88 30       	cpi	r24, 0x08	; 8
    1a78:	91 05       	cpc	r25, r1
    1a7a:	14 f0       	brlt	.+4      	; 0x1a80 <gpio_pin_get_direction_status+0x44>
		{
			ret=E_NOT_OK;
    1a7c:	19 82       	std	Y+1, r1	; 0x01
    1a7e:	27 c0       	rjmp	.+78     	; 0x1ace <gpio_pin_get_direction_status+0x92>
		}
		else
		{
			*direction_status=READ_BIT(*DDR_register[_pin_config->direction],_pin_config->pin);
    1a80:	ea 81       	ldd	r30, Y+2	; 0x02
    1a82:	fb 81       	ldd	r31, Y+3	; 0x03
    1a84:	80 81       	ld	r24, Z
    1a86:	82 95       	swap	r24
    1a88:	86 95       	lsr	r24
    1a8a:	87 70       	andi	r24, 0x07	; 7
    1a8c:	81 70       	andi	r24, 0x01	; 1
    1a8e:	88 2f       	mov	r24, r24
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	88 0f       	add	r24, r24
    1a94:	99 1f       	adc	r25, r25
    1a96:	fc 01       	movw	r30, r24
    1a98:	e5 59       	subi	r30, 0x95	; 149
    1a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9c:	01 90       	ld	r0, Z+
    1a9e:	f0 81       	ld	r31, Z
    1aa0:	e0 2d       	mov	r30, r0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	ea 81       	ldd	r30, Y+2	; 0x02
    1aaa:	fb 81       	ldd	r31, Y+3	; 0x03
    1aac:	80 81       	ld	r24, Z
    1aae:	86 95       	lsr	r24
    1ab0:	86 95       	lsr	r24
    1ab2:	87 70       	andi	r24, 0x07	; 7
    1ab4:	88 2f       	mov	r24, r24
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	a9 01       	movw	r20, r18
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <gpio_pin_get_direction_status+0x84>
    1abc:	55 95       	asr	r21
    1abe:	47 95       	ror	r20
    1ac0:	8a 95       	dec	r24
    1ac2:	e2 f7       	brpl	.-8      	; 0x1abc <gpio_pin_get_direction_status+0x80>
    1ac4:	ca 01       	movw	r24, r20
    1ac6:	81 70       	andi	r24, 0x01	; 1
    1ac8:	ec 81       	ldd	r30, Y+4	; 0x04
    1aca:	fd 81       	ldd	r31, Y+5	; 0x05
    1acc:	80 83       	st	Z, r24
		}
		return ret;
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	0f 90       	pop	r0
    1ada:	cf 91       	pop	r28
    1adc:	df 91       	pop	r29
    1ade:	08 95       	ret

00001ae0 <gpio_pin_write_logic>:
 * @param _pin_config
 * @param logic
 * @return
 */
STD_ReturnStatus gpio_pin_write_logic(const Pin_Config_t *_pin_config,Logic_t logic)
{
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	00 d0       	rcall	.+0      	; 0x1ae6 <gpio_pin_write_logic+0x6>
    1ae6:	00 d0       	rcall	.+0      	; 0x1ae8 <gpio_pin_write_logic+0x8>
    1ae8:	00 d0       	rcall	.+0      	; 0x1aea <gpio_pin_write_logic+0xa>
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
    1aee:	9b 83       	std	Y+3, r25	; 0x03
    1af0:	8a 83       	std	Y+2, r24	; 0x02
    1af2:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret=E_OK;
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	89 83       	std	Y+1, r24	; 0x01
		if(NULL==_pin_config||_pin_config->pin > PORT_PIN_MAX_NUMBER-1)
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	9b 81       	ldd	r25, Y+3	; 0x03
    1afc:	00 97       	sbiw	r24, 0x00	; 0
    1afe:	59 f0       	breq	.+22     	; 0x1b16 <gpio_pin_write_logic+0x36>
    1b00:	ea 81       	ldd	r30, Y+2	; 0x02
    1b02:	fb 81       	ldd	r31, Y+3	; 0x03
    1b04:	80 81       	ld	r24, Z
    1b06:	86 95       	lsr	r24
    1b08:	86 95       	lsr	r24
    1b0a:	87 70       	andi	r24, 0x07	; 7
    1b0c:	88 2f       	mov	r24, r24
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	88 30       	cpi	r24, 0x08	; 8
    1b12:	91 05       	cpc	r25, r1
    1b14:	14 f0       	brlt	.+4      	; 0x1b1a <gpio_pin_write_logic+0x3a>
		{
			ret=E_NOT_OK;
    1b16:	19 82       	std	Y+1, r1	; 0x01
    1b18:	6f c0       	rjmp	.+222    	; 0x1bf8 <gpio_pin_write_logic+0x118>
		}
		else
		{
			switch(logic)
    1b1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	3e 83       	std	Y+6, r19	; 0x06
    1b22:	2d 83       	std	Y+5, r18	; 0x05
    1b24:	8d 81       	ldd	r24, Y+5	; 0x05
    1b26:	9e 81       	ldd	r25, Y+6	; 0x06
    1b28:	00 97       	sbiw	r24, 0x00	; 0
    1b2a:	b1 f1       	breq	.+108    	; 0x1b98 <gpio_pin_write_logic+0xb8>
    1b2c:	2d 81       	ldd	r18, Y+5	; 0x05
    1b2e:	3e 81       	ldd	r19, Y+6	; 0x06
    1b30:	21 30       	cpi	r18, 0x01	; 1
    1b32:	31 05       	cpc	r19, r1
    1b34:	09 f0       	breq	.+2      	; 0x1b38 <gpio_pin_write_logic+0x58>
    1b36:	60 c0       	rjmp	.+192    	; 0x1bf8 <gpio_pin_write_logic+0x118>
			{
			case GPIO_HIGH:			SET_BIT(*PORT_register[_pin_config->port],_pin_config->pin);break;
    1b38:	ea 81       	ldd	r30, Y+2	; 0x02
    1b3a:	fb 81       	ldd	r31, Y+3	; 0x03
    1b3c:	80 81       	ld	r24, Z
    1b3e:	83 70       	andi	r24, 0x03	; 3
    1b40:	88 2f       	mov	r24, r24
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	88 0f       	add	r24, r24
    1b46:	99 1f       	adc	r25, r25
    1b48:	fc 01       	movw	r30, r24
    1b4a:	ed 58       	subi	r30, 0x8D	; 141
    1b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4e:	a0 81       	ld	r26, Z
    1b50:	b1 81       	ldd	r27, Z+1	; 0x01
    1b52:	ea 81       	ldd	r30, Y+2	; 0x02
    1b54:	fb 81       	ldd	r31, Y+3	; 0x03
    1b56:	80 81       	ld	r24, Z
    1b58:	83 70       	andi	r24, 0x03	; 3
    1b5a:	88 2f       	mov	r24, r24
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	fc 01       	movw	r30, r24
    1b64:	ed 58       	subi	r30, 0x8D	; 141
    1b66:	ff 4f       	sbci	r31, 0xFF	; 255
    1b68:	01 90       	ld	r0, Z+
    1b6a:	f0 81       	ld	r31, Z
    1b6c:	e0 2d       	mov	r30, r0
    1b6e:	80 81       	ld	r24, Z
    1b70:	48 2f       	mov	r20, r24
    1b72:	ea 81       	ldd	r30, Y+2	; 0x02
    1b74:	fb 81       	ldd	r31, Y+3	; 0x03
    1b76:	80 81       	ld	r24, Z
    1b78:	86 95       	lsr	r24
    1b7a:	86 95       	lsr	r24
    1b7c:	87 70       	andi	r24, 0x07	; 7
    1b7e:	28 2f       	mov	r18, r24
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	02 2e       	mov	r0, r18
    1b88:	02 c0       	rjmp	.+4      	; 0x1b8e <gpio_pin_write_logic+0xae>
    1b8a:	88 0f       	add	r24, r24
    1b8c:	99 1f       	adc	r25, r25
    1b8e:	0a 94       	dec	r0
    1b90:	e2 f7       	brpl	.-8      	; 0x1b8a <gpio_pin_write_logic+0xaa>
    1b92:	84 2b       	or	r24, r20
    1b94:	8c 93       	st	X, r24
    1b96:	30 c0       	rjmp	.+96     	; 0x1bf8 <gpio_pin_write_logic+0x118>
			case GPIO_LOW:			CLR_BIT(*PORT_register[_pin_config->port],_pin_config->pin);break;
    1b98:	ea 81       	ldd	r30, Y+2	; 0x02
    1b9a:	fb 81       	ldd	r31, Y+3	; 0x03
    1b9c:	80 81       	ld	r24, Z
    1b9e:	83 70       	andi	r24, 0x03	; 3
    1ba0:	88 2f       	mov	r24, r24
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	fc 01       	movw	r30, r24
    1baa:	ed 58       	subi	r30, 0x8D	; 141
    1bac:	ff 4f       	sbci	r31, 0xFF	; 255
    1bae:	a0 81       	ld	r26, Z
    1bb0:	b1 81       	ldd	r27, Z+1	; 0x01
    1bb2:	ea 81       	ldd	r30, Y+2	; 0x02
    1bb4:	fb 81       	ldd	r31, Y+3	; 0x03
    1bb6:	80 81       	ld	r24, Z
    1bb8:	83 70       	andi	r24, 0x03	; 3
    1bba:	88 2f       	mov	r24, r24
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	88 0f       	add	r24, r24
    1bc0:	99 1f       	adc	r25, r25
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	ed 58       	subi	r30, 0x8D	; 141
    1bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc8:	01 90       	ld	r0, Z+
    1bca:	f0 81       	ld	r31, Z
    1bcc:	e0 2d       	mov	r30, r0
    1bce:	80 81       	ld	r24, Z
    1bd0:	48 2f       	mov	r20, r24
    1bd2:	ea 81       	ldd	r30, Y+2	; 0x02
    1bd4:	fb 81       	ldd	r31, Y+3	; 0x03
    1bd6:	80 81       	ld	r24, Z
    1bd8:	86 95       	lsr	r24
    1bda:	86 95       	lsr	r24
    1bdc:	87 70       	andi	r24, 0x07	; 7
    1bde:	28 2f       	mov	r18, r24
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	02 2e       	mov	r0, r18
    1be8:	02 c0       	rjmp	.+4      	; 0x1bee <gpio_pin_write_logic+0x10e>
    1bea:	88 0f       	add	r24, r24
    1bec:	99 1f       	adc	r25, r25
    1bee:	0a 94       	dec	r0
    1bf0:	e2 f7       	brpl	.-8      	; 0x1bea <gpio_pin_write_logic+0x10a>
    1bf2:	80 95       	com	r24
    1bf4:	84 23       	and	r24, r20
    1bf6:	8c 93       	st	X, r24
			}
		}
		return ret;
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bfa:	26 96       	adiw	r28, 0x06	; 6
    1bfc:	0f b6       	in	r0, 0x3f	; 63
    1bfe:	f8 94       	cli
    1c00:	de bf       	out	0x3e, r29	; 62
    1c02:	0f be       	out	0x3f, r0	; 63
    1c04:	cd bf       	out	0x3d, r28	; 61
    1c06:	cf 91       	pop	r28
    1c08:	df 91       	pop	r29
    1c0a:	08 95       	ret

00001c0c <gpio_pin_read_logic>:
 * @param _pin_config
 * @param logic
 * @return
 */
STD_ReturnStatus gpio_pin_read_logic(const Pin_Config_t *_pin_config,Logic_t *logic)
{
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	00 d0       	rcall	.+0      	; 0x1c12 <gpio_pin_read_logic+0x6>
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <gpio_pin_read_logic+0x8>
    1c14:	0f 92       	push	r0
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	9b 83       	std	Y+3, r25	; 0x03
    1c1c:	8a 83       	std	Y+2, r24	; 0x02
    1c1e:	7d 83       	std	Y+5, r23	; 0x05
    1c20:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret=E_OK;
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	89 83       	std	Y+1, r24	; 0x01
		if(NULL==_pin_config|| NULL== logic||_pin_config->pin > PORT_PIN_MAX_NUMBER-1)
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	9b 81       	ldd	r25, Y+3	; 0x03
    1c2a:	00 97       	sbiw	r24, 0x00	; 0
    1c2c:	79 f0       	breq	.+30     	; 0x1c4c <gpio_pin_read_logic+0x40>
    1c2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c30:	9d 81       	ldd	r25, Y+5	; 0x05
    1c32:	00 97       	sbiw	r24, 0x00	; 0
    1c34:	59 f0       	breq	.+22     	; 0x1c4c <gpio_pin_read_logic+0x40>
    1c36:	ea 81       	ldd	r30, Y+2	; 0x02
    1c38:	fb 81       	ldd	r31, Y+3	; 0x03
    1c3a:	80 81       	ld	r24, Z
    1c3c:	86 95       	lsr	r24
    1c3e:	86 95       	lsr	r24
    1c40:	87 70       	andi	r24, 0x07	; 7
    1c42:	88 2f       	mov	r24, r24
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	88 30       	cpi	r24, 0x08	; 8
    1c48:	91 05       	cpc	r25, r1
    1c4a:	14 f0       	brlt	.+4      	; 0x1c50 <gpio_pin_read_logic+0x44>
		{
			ret=E_NOT_OK;
    1c4c:	19 82       	std	Y+1, r1	; 0x01
    1c4e:	24 c0       	rjmp	.+72     	; 0x1c98 <gpio_pin_read_logic+0x8c>
		}
		else
		{
			*logic=READ_BIT(*PIN_register[_pin_config->port],_pin_config->pin);
    1c50:	ea 81       	ldd	r30, Y+2	; 0x02
    1c52:	fb 81       	ldd	r31, Y+3	; 0x03
    1c54:	80 81       	ld	r24, Z
    1c56:	83 70       	andi	r24, 0x03	; 3
    1c58:	88 2f       	mov	r24, r24
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	fc 01       	movw	r30, r24
    1c62:	e5 58       	subi	r30, 0x85	; 133
    1c64:	ff 4f       	sbci	r31, 0xFF	; 255
    1c66:	01 90       	ld	r0, Z+
    1c68:	f0 81       	ld	r31, Z
    1c6a:	e0 2d       	mov	r30, r0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	28 2f       	mov	r18, r24
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	ea 81       	ldd	r30, Y+2	; 0x02
    1c74:	fb 81       	ldd	r31, Y+3	; 0x03
    1c76:	80 81       	ld	r24, Z
    1c78:	86 95       	lsr	r24
    1c7a:	86 95       	lsr	r24
    1c7c:	87 70       	andi	r24, 0x07	; 7
    1c7e:	88 2f       	mov	r24, r24
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	a9 01       	movw	r20, r18
    1c84:	02 c0       	rjmp	.+4      	; 0x1c8a <gpio_pin_read_logic+0x7e>
    1c86:	55 95       	asr	r21
    1c88:	47 95       	ror	r20
    1c8a:	8a 95       	dec	r24
    1c8c:	e2 f7       	brpl	.-8      	; 0x1c86 <gpio_pin_read_logic+0x7a>
    1c8e:	ca 01       	movw	r24, r20
    1c90:	81 70       	andi	r24, 0x01	; 1
    1c92:	ec 81       	ldd	r30, Y+4	; 0x04
    1c94:	fd 81       	ldd	r31, Y+5	; 0x05
    1c96:	80 83       	st	Z, r24
		}
		return ret;
    1c98:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	08 95       	ret

00001caa <gpio_pin_toggle_logic>:
 *
 * @param _pin_config
 * @return
 */
STD_ReturnStatus gpio_pin_toggle_logic(const Pin_Config_t *_pin_config)
{
    1caa:	df 93       	push	r29
    1cac:	cf 93       	push	r28
    1cae:	00 d0       	rcall	.+0      	; 0x1cb0 <gpio_pin_toggle_logic+0x6>
    1cb0:	0f 92       	push	r0
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
    1cb6:	9b 83       	std	Y+3, r25	; 0x03
    1cb8:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret=E_OK;
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	89 83       	std	Y+1, r24	; 0x01
		if(NULL==_pin_config||_pin_config->pin > PORT_PIN_MAX_NUMBER-1)
    1cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc0:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc2:	00 97       	sbiw	r24, 0x00	; 0
    1cc4:	59 f0       	breq	.+22     	; 0x1cdc <gpio_pin_toggle_logic+0x32>
    1cc6:	ea 81       	ldd	r30, Y+2	; 0x02
    1cc8:	fb 81       	ldd	r31, Y+3	; 0x03
    1cca:	80 81       	ld	r24, Z
    1ccc:	86 95       	lsr	r24
    1cce:	86 95       	lsr	r24
    1cd0:	87 70       	andi	r24, 0x07	; 7
    1cd2:	88 2f       	mov	r24, r24
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	88 30       	cpi	r24, 0x08	; 8
    1cd8:	91 05       	cpc	r25, r1
    1cda:	14 f0       	brlt	.+4      	; 0x1ce0 <gpio_pin_toggle_logic+0x36>
		{
			ret=E_NOT_OK;
    1cdc:	19 82       	std	Y+1, r1	; 0x01
    1cde:	2f c0       	rjmp	.+94     	; 0x1d3e <gpio_pin_toggle_logic+0x94>
		}
		else
		{
			TOGGLE_BIT(*PORT_register[_pin_config->port],_pin_config->pin);
    1ce0:	ea 81       	ldd	r30, Y+2	; 0x02
    1ce2:	fb 81       	ldd	r31, Y+3	; 0x03
    1ce4:	80 81       	ld	r24, Z
    1ce6:	83 70       	andi	r24, 0x03	; 3
    1ce8:	88 2f       	mov	r24, r24
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	88 0f       	add	r24, r24
    1cee:	99 1f       	adc	r25, r25
    1cf0:	fc 01       	movw	r30, r24
    1cf2:	ed 58       	subi	r30, 0x8D	; 141
    1cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf6:	a0 81       	ld	r26, Z
    1cf8:	b1 81       	ldd	r27, Z+1	; 0x01
    1cfa:	ea 81       	ldd	r30, Y+2	; 0x02
    1cfc:	fb 81       	ldd	r31, Y+3	; 0x03
    1cfe:	80 81       	ld	r24, Z
    1d00:	83 70       	andi	r24, 0x03	; 3
    1d02:	88 2f       	mov	r24, r24
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	88 0f       	add	r24, r24
    1d08:	99 1f       	adc	r25, r25
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	ed 58       	subi	r30, 0x8D	; 141
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	01 90       	ld	r0, Z+
    1d12:	f0 81       	ld	r31, Z
    1d14:	e0 2d       	mov	r30, r0
    1d16:	80 81       	ld	r24, Z
    1d18:	48 2f       	mov	r20, r24
    1d1a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d1c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d1e:	80 81       	ld	r24, Z
    1d20:	86 95       	lsr	r24
    1d22:	86 95       	lsr	r24
    1d24:	87 70       	andi	r24, 0x07	; 7
    1d26:	28 2f       	mov	r18, r24
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	02 2e       	mov	r0, r18
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <gpio_pin_toggle_logic+0x8c>
    1d32:	88 0f       	add	r24, r24
    1d34:	99 1f       	adc	r25, r25
    1d36:	0a 94       	dec	r0
    1d38:	e2 f7       	brpl	.-8      	; 0x1d32 <gpio_pin_toggle_logic+0x88>
    1d3a:	84 27       	eor	r24, r20
    1d3c:	8c 93       	st	X, r24
		}
		return ret;
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	0f 90       	pop	r0
    1d46:	cf 91       	pop	r28
    1d48:	df 91       	pop	r29
    1d4a:	08 95       	ret

00001d4c <gpio_pin_initialize>:
 *
 * @param _pin_config
 * @return
 */
STD_ReturnStatus gpio_pin_initialize(const Pin_Config_t *_pin_config)
{
    1d4c:	df 93       	push	r29
    1d4e:	cf 93       	push	r28
    1d50:	00 d0       	rcall	.+0      	; 0x1d52 <gpio_pin_initialize+0x6>
    1d52:	0f 92       	push	r0
    1d54:	cd b7       	in	r28, 0x3d	; 61
    1d56:	de b7       	in	r29, 0x3e	; 62
    1d58:	9b 83       	std	Y+3, r25	; 0x03
    1d5a:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_OK;
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==_pin_config)
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	9b 81       	ldd	r25, Y+3	; 0x03
    1d64:	00 97       	sbiw	r24, 0x00	; 0
    1d66:	11 f4       	brne	.+4      	; 0x1d6c <gpio_pin_initialize+0x20>
	{
		ret=E_NOT_OK;
    1d68:	19 82       	std	Y+1, r1	; 0x01
    1d6a:	14 c0       	rjmp	.+40     	; 0x1d94 <gpio_pin_initialize+0x48>
	}
	else
	{
		ret= gpio_pin_direction_initialize(_pin_config);
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d70:	0e 94 84 0c 	call	0x1908	; 0x1908 <gpio_pin_direction_initialize>
    1d74:	89 83       	std	Y+1, r24	; 0x01
		ret= gpio_pin_write_logic(_pin_config,_pin_config->logic);
    1d76:	ea 81       	ldd	r30, Y+2	; 0x02
    1d78:	fb 81       	ldd	r31, Y+3	; 0x03
    1d7a:	80 81       	ld	r24, Z
    1d7c:	82 95       	swap	r24
    1d7e:	86 95       	lsr	r24
    1d80:	86 95       	lsr	r24
    1d82:	83 70       	andi	r24, 0x03	; 3
    1d84:	81 70       	andi	r24, 0x01	; 1
    1d86:	28 2f       	mov	r18, r24
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d8c:	62 2f       	mov	r22, r18
    1d8e:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
    1d92:	89 83       	std	Y+1, r24	; 0x01
	}

	return ret;
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	0f 90       	pop	r0
    1d9c:	cf 91       	pop	r28
    1d9e:	df 91       	pop	r29
    1da0:	08 95       	ret

00001da2 <gpio_port_direction_initialize>:
 * @param port
 * @param direction
 * @return
 */
STD_ReturnStatus gpio_port_direction_initialize(port_index_t port,uint8 direction)
{
    1da2:	df 93       	push	r29
    1da4:	cf 93       	push	r28
    1da6:	00 d0       	rcall	.+0      	; 0x1da8 <gpio_port_direction_initialize+0x6>
    1da8:	0f 92       	push	r0
    1daa:	cd b7       	in	r28, 0x3d	; 61
    1dac:	de b7       	in	r29, 0x3e	; 62
    1dae:	8a 83       	std	Y+2, r24	; 0x02
    1db0:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnStatus ret=E_OK;
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	89 83       	std	Y+1, r24	; 0x01
	if(port>PORT_MAX_NUMBER-1)
    1db6:	8a 81       	ldd	r24, Y+2	; 0x02
    1db8:	84 30       	cpi	r24, 0x04	; 4
    1dba:	10 f0       	brcs	.+4      	; 0x1dc0 <gpio_port_direction_initialize+0x1e>
	{
		ret=E_NOT_OK;
    1dbc:	19 82       	std	Y+1, r1	; 0x01
    1dbe:	0d c0       	rjmp	.+26     	; 0x1dda <gpio_port_direction_initialize+0x38>
	}
	else
	{
		*DDR_register[port]=direction;
    1dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc2:	88 2f       	mov	r24, r24
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	88 0f       	add	r24, r24
    1dc8:	99 1f       	adc	r25, r25
    1dca:	fc 01       	movw	r30, r24
    1dcc:	e5 59       	subi	r30, 0x95	; 149
    1dce:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd0:	01 90       	ld	r0, Z+
    1dd2:	f0 81       	ld	r31, Z
    1dd4:	e0 2d       	mov	r30, r0
    1dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd8:	80 83       	st	Z, r24
	}

	return ret;
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	cf 91       	pop	r28
    1de4:	df 91       	pop	r29
    1de6:	08 95       	ret

00001de8 <gpio_port_get_direction_status>:
STD_ReturnStatus gpio_port_get_direction_status(port_index_t port,uint8 *direction_status)
{
    1de8:	df 93       	push	r29
    1dea:	cf 93       	push	r28
    1dec:	00 d0       	rcall	.+0      	; 0x1dee <gpio_port_get_direction_status+0x6>
    1dee:	00 d0       	rcall	.+0      	; 0x1df0 <gpio_port_get_direction_status+0x8>
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
    1df4:	8a 83       	std	Y+2, r24	; 0x02
    1df6:	7c 83       	std	Y+4, r23	; 0x04
    1df8:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnStatus ret=E_OK;
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==direction_status && port>PORT_MAX_NUMBER-1)
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	9c 81       	ldd	r25, Y+4	; 0x04
    1e02:	00 97       	sbiw	r24, 0x00	; 0
    1e04:	29 f4       	brne	.+10     	; 0x1e10 <gpio_port_get_direction_status+0x28>
    1e06:	8a 81       	ldd	r24, Y+2	; 0x02
    1e08:	84 30       	cpi	r24, 0x04	; 4
    1e0a:	10 f0       	brcs	.+4      	; 0x1e10 <gpio_port_get_direction_status+0x28>
	{
		ret=E_NOT_OK;
    1e0c:	19 82       	std	Y+1, r1	; 0x01
    1e0e:	0f c0       	rjmp	.+30     	; 0x1e2e <gpio_port_get_direction_status+0x46>
	}
	else
	{
		*direction_status=*DDR_register[port];
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	88 2f       	mov	r24, r24
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	88 0f       	add	r24, r24
    1e18:	99 1f       	adc	r25, r25
    1e1a:	fc 01       	movw	r30, r24
    1e1c:	e5 59       	subi	r30, 0x95	; 149
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	01 90       	ld	r0, Z+
    1e22:	f0 81       	ld	r31, Z
    1e24:	e0 2d       	mov	r30, r0
    1e26:	80 81       	ld	r24, Z
    1e28:	eb 81       	ldd	r30, Y+3	; 0x03
    1e2a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e2c:	80 83       	st	Z, r24
	}

	return ret;
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e30:	0f 90       	pop	r0
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	cf 91       	pop	r28
    1e3a:	df 91       	pop	r29
    1e3c:	08 95       	ret

00001e3e <gpio_port_write_logic>:
 * @param port
 * @param logic
 * @return
 */
STD_ReturnStatus gpio_port_write_logic(port_index_t port,uint8 logic)
{
    1e3e:	df 93       	push	r29
    1e40:	cf 93       	push	r28
    1e42:	00 d0       	rcall	.+0      	; 0x1e44 <gpio_port_write_logic+0x6>
    1e44:	0f 92       	push	r0
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
    1e4a:	8a 83       	std	Y+2, r24	; 0x02
    1e4c:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnStatus ret=E_OK;
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	89 83       	std	Y+1, r24	; 0x01
	if(port>PORT_MAX_NUMBER-1)
    1e52:	8a 81       	ldd	r24, Y+2	; 0x02
    1e54:	84 30       	cpi	r24, 0x04	; 4
    1e56:	10 f0       	brcs	.+4      	; 0x1e5c <gpio_port_write_logic+0x1e>
		{
			ret=E_NOT_OK;
    1e58:	19 82       	std	Y+1, r1	; 0x01
    1e5a:	0d c0       	rjmp	.+26     	; 0x1e76 <gpio_port_write_logic+0x38>
		}
		else
		{
			*PORT_register[port]=logic;
    1e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5e:	88 2f       	mov	r24, r24
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	88 0f       	add	r24, r24
    1e64:	99 1f       	adc	r25, r25
    1e66:	fc 01       	movw	r30, r24
    1e68:	ed 58       	subi	r30, 0x8D	; 141
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	01 90       	ld	r0, Z+
    1e6e:	f0 81       	ld	r31, Z
    1e70:	e0 2d       	mov	r30, r0
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	80 83       	st	Z, r24
		}

	return ret;
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	cf 91       	pop	r28
    1e80:	df 91       	pop	r29
    1e82:	08 95       	ret

00001e84 <gpio_port_read_logic>:
STD_ReturnStatus gpio_port_read_logic(port_index_t port,Logic_t *logic)
{
    1e84:	df 93       	push	r29
    1e86:	cf 93       	push	r28
    1e88:	00 d0       	rcall	.+0      	; 0x1e8a <gpio_port_read_logic+0x6>
    1e8a:	00 d0       	rcall	.+0      	; 0x1e8c <gpio_port_read_logic+0x8>
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
    1e90:	8a 83       	std	Y+2, r24	; 0x02
    1e92:	7c 83       	std	Y+4, r23	; 0x04
    1e94:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnStatus ret=E_OK;
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==logic && port>PORT_MAX_NUMBER-1)
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9e:	00 97       	sbiw	r24, 0x00	; 0
    1ea0:	29 f4       	brne	.+10     	; 0x1eac <gpio_port_read_logic+0x28>
    1ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea4:	84 30       	cpi	r24, 0x04	; 4
    1ea6:	10 f0       	brcs	.+4      	; 0x1eac <gpio_port_read_logic+0x28>
	{
		ret=E_NOT_OK;
    1ea8:	19 82       	std	Y+1, r1	; 0x01
    1eaa:	0f c0       	rjmp	.+30     	; 0x1eca <gpio_port_read_logic+0x46>
	}
	else
	{
		*logic=*PORT_register[port];
    1eac:	8a 81       	ldd	r24, Y+2	; 0x02
    1eae:	88 2f       	mov	r24, r24
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	88 0f       	add	r24, r24
    1eb4:	99 1f       	adc	r25, r25
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	ed 58       	subi	r30, 0x8D	; 141
    1eba:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebc:	01 90       	ld	r0, Z+
    1ebe:	f0 81       	ld	r31, Z
    1ec0:	e0 2d       	mov	r30, r0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	eb 81       	ldd	r30, Y+3	; 0x03
    1ec6:	fc 81       	ldd	r31, Y+4	; 0x04
    1ec8:	80 83       	st	Z, r24
	}

	return ret;
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	cf 91       	pop	r28
    1ed6:	df 91       	pop	r29
    1ed8:	08 95       	ret

00001eda <gpio_port_toggle_logic>:
 *
 * @param port
 * @return
 */
STD_ReturnStatus gpio_port_toggle_logic(port_index_t port)
{
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	00 d0       	rcall	.+0      	; 0x1ee0 <gpio_port_toggle_logic+0x6>
    1ee0:	cd b7       	in	r28, 0x3d	; 61
    1ee2:	de b7       	in	r29, 0x3e	; 62
    1ee4:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret=E_OK;
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	89 83       	std	Y+1, r24	; 0x01
	if(port>PORT_MAX_NUMBER-1)
    1eea:	8a 81       	ldd	r24, Y+2	; 0x02
    1eec:	84 30       	cpi	r24, 0x04	; 4
    1eee:	10 f0       	brcs	.+4      	; 0x1ef4 <gpio_port_toggle_logic+0x1a>
	{
		ret=E_NOT_OK;
    1ef0:	19 82       	std	Y+1, r1	; 0x01
    1ef2:	18 c0       	rjmp	.+48     	; 0x1f24 <gpio_port_toggle_logic+0x4a>
	}
	else
	{
		*PORT_register[port]^=0xff;
    1ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef6:	88 2f       	mov	r24, r24
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	88 0f       	add	r24, r24
    1efc:	99 1f       	adc	r25, r25
    1efe:	fc 01       	movw	r30, r24
    1f00:	ed 58       	subi	r30, 0x8D	; 141
    1f02:	ff 4f       	sbci	r31, 0xFF	; 255
    1f04:	a0 81       	ld	r26, Z
    1f06:	b1 81       	ldd	r27, Z+1	; 0x01
    1f08:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0a:	88 2f       	mov	r24, r24
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	88 0f       	add	r24, r24
    1f10:	99 1f       	adc	r25, r25
    1f12:	fc 01       	movw	r30, r24
    1f14:	ed 58       	subi	r30, 0x8D	; 141
    1f16:	ff 4f       	sbci	r31, 0xFF	; 255
    1f18:	01 90       	ld	r0, Z+
    1f1a:	f0 81       	ld	r31, Z
    1f1c:	e0 2d       	mov	r30, r0
    1f1e:	80 81       	ld	r24, Z
    1f20:	80 95       	com	r24
    1f22:	8c 93       	st	X, r24
	}


	return ret;
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f26:	0f 90       	pop	r0
    1f28:	0f 90       	pop	r0
    1f2a:	cf 91       	pop	r28
    1f2c:	df 91       	pop	r29
    1f2e:	08 95       	ret

00001f30 <relay_initialize>:
 *      Author: hazem
 */
#include "ECU_RELAY.h"

STD_ReturnStatus relay_initialize(const relay_t *_relay)
{
    1f30:	df 93       	push	r29
    1f32:	cf 93       	push	r28
    1f34:	00 d0       	rcall	.+0      	; 0x1f36 <relay_initialize+0x6>
    1f36:	00 d0       	rcall	.+0      	; 0x1f38 <relay_initialize+0x8>
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
    1f3c:	9c 83       	std	Y+4, r25	; 0x04
    1f3e:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret = E_OK;
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == _relay)
    1f44:	8b 81       	ldd	r24, Y+3	; 0x03
    1f46:	9c 81       	ldd	r25, Y+4	; 0x04
    1f48:	00 97       	sbiw	r24, 0x00	; 0
    1f4a:	11 f4       	brne	.+4      	; 0x1f50 <relay_initialize+0x20>
	{
		ret = E_NOT_OK;
    1f4c:	19 82       	std	Y+1, r1	; 0x01
    1f4e:	34 c0       	rjmp	.+104    	; 0x1fb8 <relay_initialize+0x88>
		Pin_Config_t pin_obj={
				.port= _relay->relay_port,
				.pin=_relay->relay_pin,
				.direction=DIRECTION_OUTPUT,
				.logic=_relay->relay_status
		};
    1f50:	eb 81       	ldd	r30, Y+3	; 0x03
    1f52:	fc 81       	ldd	r31, Y+4	; 0x04
    1f54:	80 81       	ld	r24, Z
    1f56:	8f 70       	andi	r24, 0x0F	; 15
    1f58:	28 2f       	mov	r18, r24
    1f5a:	23 70       	andi	r18, 0x03	; 3
    1f5c:	eb 81       	ldd	r30, Y+3	; 0x03
    1f5e:	fc 81       	ldd	r31, Y+4	; 0x04
    1f60:	80 81       	ld	r24, Z
    1f62:	98 2f       	mov	r25, r24
    1f64:	92 95       	swap	r25
    1f66:	9f 70       	andi	r25, 0x0F	; 15
    1f68:	97 70       	andi	r25, 0x07	; 7
    1f6a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f6c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f6e:	80 81       	ld	r24, Z
    1f70:	38 2f       	mov	r19, r24
    1f72:	33 1f       	adc	r19, r19
    1f74:	33 27       	eor	r19, r19
    1f76:	33 1f       	adc	r19, r19
    1f78:	23 70       	andi	r18, 0x03	; 3
    1f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7c:	8c 7f       	andi	r24, 0xFC	; 252
    1f7e:	82 2b       	or	r24, r18
    1f80:	8a 83       	std	Y+2, r24	; 0x02
    1f82:	89 2f       	mov	r24, r25
    1f84:	87 70       	andi	r24, 0x07	; 7
    1f86:	98 2f       	mov	r25, r24
    1f88:	99 0f       	add	r25, r25
    1f8a:	99 0f       	add	r25, r25
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	83 7e       	andi	r24, 0xE3	; 227
    1f90:	89 2b       	or	r24, r25
    1f92:	8a 83       	std	Y+2, r24	; 0x02
    1f94:	8a 81       	ldd	r24, Y+2	; 0x02
    1f96:	80 62       	ori	r24, 0x20	; 32
    1f98:	8a 83       	std	Y+2, r24	; 0x02
    1f9a:	83 2f       	mov	r24, r19
    1f9c:	81 70       	andi	r24, 0x01	; 1
    1f9e:	98 2f       	mov	r25, r24
    1fa0:	92 95       	swap	r25
    1fa2:	99 0f       	add	r25, r25
    1fa4:	99 0f       	add	r25, r25
    1fa6:	90 7c       	andi	r25, 0xC0	; 192
    1fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1faa:	8f 7b       	andi	r24, 0xBF	; 191
    1fac:	89 2b       	or	r24, r25
    1fae:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_initialize(&pin_obj);
    1fb0:	ce 01       	movw	r24, r28
    1fb2:	02 96       	adiw	r24, 0x02	; 2
    1fb4:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <gpio_pin_initialize>
	}

	return ret;
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fba:	0f 90       	pop	r0
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	cf 91       	pop	r28
    1fc4:	df 91       	pop	r29
    1fc6:	08 95       	ret

00001fc8 <relay_turn_on>:



STD_ReturnStatus relay_turn_on(const relay_t *_relay)
{
    1fc8:	df 93       	push	r29
    1fca:	cf 93       	push	r28
    1fcc:	00 d0       	rcall	.+0      	; 0x1fce <relay_turn_on+0x6>
    1fce:	00 d0       	rcall	.+0      	; 0x1fd0 <relay_turn_on+0x8>
    1fd0:	cd b7       	in	r28, 0x3d	; 61
    1fd2:	de b7       	in	r29, 0x3e	; 62
    1fd4:	9c 83       	std	Y+4, r25	; 0x04
    1fd6:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret = E_OK;
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == _relay)
    1fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fde:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe0:	00 97       	sbiw	r24, 0x00	; 0
    1fe2:	11 f4       	brne	.+4      	; 0x1fe8 <relay_turn_on+0x20>
	{
		ret = E_NOT_OK;
    1fe4:	19 82       	std	Y+1, r1	; 0x01
    1fe6:	35 c0       	rjmp	.+106    	; 0x2052 <relay_turn_on+0x8a>
		Pin_Config_t pin_obj={
				.port= _relay->relay_port,
				.pin=_relay->relay_pin,
				.direction=DIRECTION_OUTPUT,
				.logic=_relay->relay_status
		};
    1fe8:	eb 81       	ldd	r30, Y+3	; 0x03
    1fea:	fc 81       	ldd	r31, Y+4	; 0x04
    1fec:	80 81       	ld	r24, Z
    1fee:	8f 70       	andi	r24, 0x0F	; 15
    1ff0:	28 2f       	mov	r18, r24
    1ff2:	23 70       	andi	r18, 0x03	; 3
    1ff4:	eb 81       	ldd	r30, Y+3	; 0x03
    1ff6:	fc 81       	ldd	r31, Y+4	; 0x04
    1ff8:	80 81       	ld	r24, Z
    1ffa:	98 2f       	mov	r25, r24
    1ffc:	92 95       	swap	r25
    1ffe:	9f 70       	andi	r25, 0x0F	; 15
    2000:	97 70       	andi	r25, 0x07	; 7
    2002:	eb 81       	ldd	r30, Y+3	; 0x03
    2004:	fc 81       	ldd	r31, Y+4	; 0x04
    2006:	80 81       	ld	r24, Z
    2008:	38 2f       	mov	r19, r24
    200a:	33 1f       	adc	r19, r19
    200c:	33 27       	eor	r19, r19
    200e:	33 1f       	adc	r19, r19
    2010:	23 70       	andi	r18, 0x03	; 3
    2012:	8a 81       	ldd	r24, Y+2	; 0x02
    2014:	8c 7f       	andi	r24, 0xFC	; 252
    2016:	82 2b       	or	r24, r18
    2018:	8a 83       	std	Y+2, r24	; 0x02
    201a:	89 2f       	mov	r24, r25
    201c:	87 70       	andi	r24, 0x07	; 7
    201e:	98 2f       	mov	r25, r24
    2020:	99 0f       	add	r25, r25
    2022:	99 0f       	add	r25, r25
    2024:	8a 81       	ldd	r24, Y+2	; 0x02
    2026:	83 7e       	andi	r24, 0xE3	; 227
    2028:	89 2b       	or	r24, r25
    202a:	8a 83       	std	Y+2, r24	; 0x02
    202c:	8a 81       	ldd	r24, Y+2	; 0x02
    202e:	80 62       	ori	r24, 0x20	; 32
    2030:	8a 83       	std	Y+2, r24	; 0x02
    2032:	83 2f       	mov	r24, r19
    2034:	81 70       	andi	r24, 0x01	; 1
    2036:	98 2f       	mov	r25, r24
    2038:	92 95       	swap	r25
    203a:	99 0f       	add	r25, r25
    203c:	99 0f       	add	r25, r25
    203e:	90 7c       	andi	r25, 0xC0	; 192
    2040:	8a 81       	ldd	r24, Y+2	; 0x02
    2042:	8f 7b       	andi	r24, 0xBF	; 191
    2044:	89 2b       	or	r24, r25
    2046:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_write_logic(&pin_obj,GPIO_HIGH);
    2048:	ce 01       	movw	r24, r28
    204a:	02 96       	adiw	r24, 0x02	; 2
    204c:	61 e0       	ldi	r22, 0x01	; 1
    204e:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
	}


	return ret;
    2052:	89 81       	ldd	r24, Y+1	; 0x01
}
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	0f 90       	pop	r0
    205c:	cf 91       	pop	r28
    205e:	df 91       	pop	r29
    2060:	08 95       	ret

00002062 <relay_turn_off>:
STD_ReturnStatus relay_turn_off(const relay_t *_relay)
{
    2062:	df 93       	push	r29
    2064:	cf 93       	push	r28
    2066:	00 d0       	rcall	.+0      	; 0x2068 <relay_turn_off+0x6>
    2068:	00 d0       	rcall	.+0      	; 0x206a <relay_turn_off+0x8>
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
    206e:	9c 83       	std	Y+4, r25	; 0x04
    2070:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret = E_OK;
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == _relay)
    2076:	8b 81       	ldd	r24, Y+3	; 0x03
    2078:	9c 81       	ldd	r25, Y+4	; 0x04
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	11 f4       	brne	.+4      	; 0x2082 <relay_turn_off+0x20>
	{
		ret = E_NOT_OK;
    207e:	19 82       	std	Y+1, r1	; 0x01
    2080:	35 c0       	rjmp	.+106    	; 0x20ec <relay_turn_off+0x8a>
		Pin_Config_t pin_obj={
				.port= _relay->relay_port,
				.pin=_relay->relay_pin,
				.direction=DIRECTION_OUTPUT,
				.logic=_relay->relay_status
		};
    2082:	eb 81       	ldd	r30, Y+3	; 0x03
    2084:	fc 81       	ldd	r31, Y+4	; 0x04
    2086:	80 81       	ld	r24, Z
    2088:	8f 70       	andi	r24, 0x0F	; 15
    208a:	28 2f       	mov	r18, r24
    208c:	23 70       	andi	r18, 0x03	; 3
    208e:	eb 81       	ldd	r30, Y+3	; 0x03
    2090:	fc 81       	ldd	r31, Y+4	; 0x04
    2092:	80 81       	ld	r24, Z
    2094:	98 2f       	mov	r25, r24
    2096:	92 95       	swap	r25
    2098:	9f 70       	andi	r25, 0x0F	; 15
    209a:	97 70       	andi	r25, 0x07	; 7
    209c:	eb 81       	ldd	r30, Y+3	; 0x03
    209e:	fc 81       	ldd	r31, Y+4	; 0x04
    20a0:	80 81       	ld	r24, Z
    20a2:	38 2f       	mov	r19, r24
    20a4:	33 1f       	adc	r19, r19
    20a6:	33 27       	eor	r19, r19
    20a8:	33 1f       	adc	r19, r19
    20aa:	23 70       	andi	r18, 0x03	; 3
    20ac:	8a 81       	ldd	r24, Y+2	; 0x02
    20ae:	8c 7f       	andi	r24, 0xFC	; 252
    20b0:	82 2b       	or	r24, r18
    20b2:	8a 83       	std	Y+2, r24	; 0x02
    20b4:	89 2f       	mov	r24, r25
    20b6:	87 70       	andi	r24, 0x07	; 7
    20b8:	98 2f       	mov	r25, r24
    20ba:	99 0f       	add	r25, r25
    20bc:	99 0f       	add	r25, r25
    20be:	8a 81       	ldd	r24, Y+2	; 0x02
    20c0:	83 7e       	andi	r24, 0xE3	; 227
    20c2:	89 2b       	or	r24, r25
    20c4:	8a 83       	std	Y+2, r24	; 0x02
    20c6:	8a 81       	ldd	r24, Y+2	; 0x02
    20c8:	80 62       	ori	r24, 0x20	; 32
    20ca:	8a 83       	std	Y+2, r24	; 0x02
    20cc:	83 2f       	mov	r24, r19
    20ce:	81 70       	andi	r24, 0x01	; 1
    20d0:	98 2f       	mov	r25, r24
    20d2:	92 95       	swap	r25
    20d4:	99 0f       	add	r25, r25
    20d6:	99 0f       	add	r25, r25
    20d8:	90 7c       	andi	r25, 0xC0	; 192
    20da:	8a 81       	ldd	r24, Y+2	; 0x02
    20dc:	8f 7b       	andi	r24, 0xBF	; 191
    20de:	89 2b       	or	r24, r25
    20e0:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_write_logic(&pin_obj,GPIO_LOW);
    20e2:	ce 01       	movw	r24, r28
    20e4:	02 96       	adiw	r24, 0x02	; 2
    20e6:	60 e0       	ldi	r22, 0x00	; 0
    20e8:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
	}


	return ret;
    20ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	0f 90       	pop	r0
    20f6:	cf 91       	pop	r28
    20f8:	df 91       	pop	r29
    20fa:	08 95       	ret

000020fc <relay_toggle>:




STD_ReturnStatus relay_toggle(const relay_t *_relay)
{
    20fc:	df 93       	push	r29
    20fe:	cf 93       	push	r28
    2100:	00 d0       	rcall	.+0      	; 0x2102 <relay_toggle+0x6>
    2102:	00 d0       	rcall	.+0      	; 0x2104 <relay_toggle+0x8>
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
    2108:	9c 83       	std	Y+4, r25	; 0x04
    210a:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret = E_OK;
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == _relay)
    2110:	8b 81       	ldd	r24, Y+3	; 0x03
    2112:	9c 81       	ldd	r25, Y+4	; 0x04
    2114:	00 97       	sbiw	r24, 0x00	; 0
    2116:	11 f4       	brne	.+4      	; 0x211c <relay_toggle+0x20>
	{
		ret = E_NOT_OK;
    2118:	19 82       	std	Y+1, r1	; 0x01
    211a:	34 c0       	rjmp	.+104    	; 0x2184 <relay_toggle+0x88>
		Pin_Config_t pin_obj={
				.port= _relay->relay_port,
				.pin=_relay->relay_pin,
				.direction=DIRECTION_OUTPUT,
				.logic=_relay->relay_status
		};
    211c:	eb 81       	ldd	r30, Y+3	; 0x03
    211e:	fc 81       	ldd	r31, Y+4	; 0x04
    2120:	80 81       	ld	r24, Z
    2122:	8f 70       	andi	r24, 0x0F	; 15
    2124:	28 2f       	mov	r18, r24
    2126:	23 70       	andi	r18, 0x03	; 3
    2128:	eb 81       	ldd	r30, Y+3	; 0x03
    212a:	fc 81       	ldd	r31, Y+4	; 0x04
    212c:	80 81       	ld	r24, Z
    212e:	98 2f       	mov	r25, r24
    2130:	92 95       	swap	r25
    2132:	9f 70       	andi	r25, 0x0F	; 15
    2134:	97 70       	andi	r25, 0x07	; 7
    2136:	eb 81       	ldd	r30, Y+3	; 0x03
    2138:	fc 81       	ldd	r31, Y+4	; 0x04
    213a:	80 81       	ld	r24, Z
    213c:	38 2f       	mov	r19, r24
    213e:	33 1f       	adc	r19, r19
    2140:	33 27       	eor	r19, r19
    2142:	33 1f       	adc	r19, r19
    2144:	23 70       	andi	r18, 0x03	; 3
    2146:	8a 81       	ldd	r24, Y+2	; 0x02
    2148:	8c 7f       	andi	r24, 0xFC	; 252
    214a:	82 2b       	or	r24, r18
    214c:	8a 83       	std	Y+2, r24	; 0x02
    214e:	89 2f       	mov	r24, r25
    2150:	87 70       	andi	r24, 0x07	; 7
    2152:	98 2f       	mov	r25, r24
    2154:	99 0f       	add	r25, r25
    2156:	99 0f       	add	r25, r25
    2158:	8a 81       	ldd	r24, Y+2	; 0x02
    215a:	83 7e       	andi	r24, 0xE3	; 227
    215c:	89 2b       	or	r24, r25
    215e:	8a 83       	std	Y+2, r24	; 0x02
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	80 62       	ori	r24, 0x20	; 32
    2164:	8a 83       	std	Y+2, r24	; 0x02
    2166:	83 2f       	mov	r24, r19
    2168:	81 70       	andi	r24, 0x01	; 1
    216a:	98 2f       	mov	r25, r24
    216c:	92 95       	swap	r25
    216e:	99 0f       	add	r25, r25
    2170:	99 0f       	add	r25, r25
    2172:	90 7c       	andi	r25, 0xC0	; 192
    2174:	8a 81       	ldd	r24, Y+2	; 0x02
    2176:	8f 7b       	andi	r24, 0xBF	; 191
    2178:	89 2b       	or	r24, r25
    217a:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_toggle_logic(&pin_obj);
    217c:	ce 01       	movw	r24, r28
    217e:	02 96       	adiw	r24, 0x02	; 2
    2180:	0e 94 55 0e 	call	0x1caa	; 0x1caa <gpio_pin_toggle_logic>
	}


	return ret;
    2184:	89 81       	ldd	r24, Y+1	; 0x01
}
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
    218c:	0f 90       	pop	r0
    218e:	cf 91       	pop	r28
    2190:	df 91       	pop	r29
    2192:	08 95       	ret

00002194 <button_initialize>:
 *
 * @param btn
 * @return
 */
STD_ReturnStatus button_initialize(const button_t *btn)
{
    2194:	df 93       	push	r29
    2196:	cf 93       	push	r28
    2198:	00 d0       	rcall	.+0      	; 0x219a <button_initialize+0x6>
    219a:	0f 92       	push	r0
    219c:	cd b7       	in	r28, 0x3d	; 61
    219e:	de b7       	in	r29, 0x3e	; 62
    21a0:	9b 83       	std	Y+3, r25	; 0x03
    21a2:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret=E_OK;
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==btn)
    21a8:	8a 81       	ldd	r24, Y+2	; 0x02
    21aa:	9b 81       	ldd	r25, Y+3	; 0x03
    21ac:	00 97       	sbiw	r24, 0x00	; 0
    21ae:	11 f4       	brne	.+4      	; 0x21b4 <button_initialize+0x20>
	{
		ret = E_NOT_OK;
    21b0:	19 82       	std	Y+1, r1	; 0x01
    21b2:	05 c0       	rjmp	.+10     	; 0x21be <button_initialize+0x2a>
	}
	else
	{
		ret = gpio_pin_direction_initialize(&(btn->button_pin));
    21b4:	8a 81       	ldd	r24, Y+2	; 0x02
    21b6:	9b 81       	ldd	r25, Y+3	; 0x03
    21b8:	0e 94 84 0c 	call	0x1908	; 0x1908 <gpio_pin_direction_initialize>
    21bc:	89 83       	std	Y+1, r24	; 0x01
	}


	return ret;
    21be:	89 81       	ldd	r24, Y+1	; 0x01
}
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	0f 90       	pop	r0
    21c6:	cf 91       	pop	r28
    21c8:	df 91       	pop	r29
    21ca:	08 95       	ret

000021cc <button_read_state>:
 * @param btn
 * @param btn_state
 * @return
 */
STD_ReturnStatus button_read_state(const button_t *btn,button_status_t *btn_state)
{
    21cc:	df 93       	push	r29
    21ce:	cf 93       	push	r28
    21d0:	00 d0       	rcall	.+0      	; 0x21d2 <button_read_state+0x6>
    21d2:	00 d0       	rcall	.+0      	; 0x21d4 <button_read_state+0x8>
    21d4:	00 d0       	rcall	.+0      	; 0x21d6 <button_read_state+0xa>
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    21da:	9c 83       	std	Y+4, r25	; 0x04
    21dc:	8b 83       	std	Y+3, r24	; 0x03
    21de:	7e 83       	std	Y+6, r23	; 0x06
    21e0:	6d 83       	std	Y+5, r22	; 0x05
	STD_ReturnStatus ret=E_NOT_OK;
    21e2:	19 82       	std	Y+1, r1	; 0x01
	Logic_t pin_logic_status=GPIO_LOW;
    21e4:	1a 82       	std	Y+2, r1	; 0x02
	if((NULL==btn)||(NULL==btn_state))
    21e6:	8b 81       	ldd	r24, Y+3	; 0x03
    21e8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ea:	00 97       	sbiw	r24, 0x00	; 0
    21ec:	21 f0       	breq	.+8      	; 0x21f6 <button_read_state+0x2a>
    21ee:	8d 81       	ldd	r24, Y+5	; 0x05
    21f0:	9e 81       	ldd	r25, Y+6	; 0x06
    21f2:	00 97       	sbiw	r24, 0x00	; 0
    21f4:	11 f4       	brne	.+4      	; 0x21fa <button_read_state+0x2e>
	{
		ret = E_NOT_OK;
    21f6:	19 82       	std	Y+1, r1	; 0x01
    21f8:	2b c0       	rjmp	.+86     	; 0x2250 <button_read_state+0x84>
	}
	else
	{
		gpio_pin_read_logic(&(btn->button_pin),&pin_logic_status);
    21fa:	8b 81       	ldd	r24, Y+3	; 0x03
    21fc:	9c 81       	ldd	r25, Y+4	; 0x04
    21fe:	9e 01       	movw	r18, r28
    2200:	2e 5f       	subi	r18, 0xFE	; 254
    2202:	3f 4f       	sbci	r19, 0xFF	; 255
    2204:	b9 01       	movw	r22, r18
    2206:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <gpio_pin_read_logic>
		if(BUTTON_ACTIVE_HIGH == btn->button_connection)
    220a:	eb 81       	ldd	r30, Y+3	; 0x03
    220c:	fc 81       	ldd	r31, Y+4	; 0x04
    220e:	82 81       	ldd	r24, Z+2	; 0x02
    2210:	88 23       	and	r24, r24
    2212:	61 f4       	brne	.+24     	; 0x222c <button_read_state+0x60>
		{
			if(GPIO_HIGH==pin_logic_status)
    2214:	8a 81       	ldd	r24, Y+2	; 0x02
    2216:	81 30       	cpi	r24, 0x01	; 1
    2218:	21 f4       	brne	.+8      	; 0x2222 <button_read_state+0x56>
			{
				*btn_state=BUTTON_PRESSED;
    221a:	ed 81       	ldd	r30, Y+5	; 0x05
    221c:	fe 81       	ldd	r31, Y+6	; 0x06
    221e:	10 82       	st	Z, r1
    2220:	15 c0       	rjmp	.+42     	; 0x224c <button_read_state+0x80>
			}
			else
			{
				*btn_state=BUTTON_RELEASED;
    2222:	ed 81       	ldd	r30, Y+5	; 0x05
    2224:	fe 81       	ldd	r31, Y+6	; 0x06
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	80 83       	st	Z, r24
    222a:	10 c0       	rjmp	.+32     	; 0x224c <button_read_state+0x80>
			}
		}
		else if(BUTTON_ACTIVE_LOW == btn->button_connection)
    222c:	eb 81       	ldd	r30, Y+3	; 0x03
    222e:	fc 81       	ldd	r31, Y+4	; 0x04
    2230:	82 81       	ldd	r24, Z+2	; 0x02
    2232:	81 30       	cpi	r24, 0x01	; 1
    2234:	59 f4       	brne	.+22     	; 0x224c <button_read_state+0x80>
		{
			if(GPIO_LOW==pin_logic_status)
    2236:	8a 81       	ldd	r24, Y+2	; 0x02
    2238:	88 23       	and	r24, r24
    223a:	21 f4       	brne	.+8      	; 0x2244 <button_read_state+0x78>
			{
				*btn_state=BUTTON_PRESSED;
    223c:	ed 81       	ldd	r30, Y+5	; 0x05
    223e:	fe 81       	ldd	r31, Y+6	; 0x06
    2240:	10 82       	st	Z, r1
    2242:	04 c0       	rjmp	.+8      	; 0x224c <button_read_state+0x80>
			}
			else
			{
				*btn_state=BUTTON_RELEASED;
    2244:	ed 81       	ldd	r30, Y+5	; 0x05
    2246:	fe 81       	ldd	r31, Y+6	; 0x06
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	80 83       	st	Z, r24
			}
		}
		ret = E_OK;
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	89 83       	std	Y+1, r24	; 0x01
	}


	return ret;
    2250:	89 81       	ldd	r24, Y+1	; 0x01
}
    2252:	26 96       	adiw	r28, 0x06	; 6
    2254:	0f b6       	in	r0, 0x3f	; 63
    2256:	f8 94       	cli
    2258:	de bf       	out	0x3e, r29	; 62
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	cd bf       	out	0x3d, r28	; 61
    225e:	cf 91       	pop	r28
    2260:	df 91       	pop	r29
    2262:	08 95       	ret

00002264 <led_initialize>:
 *
 * @param led
 * @return
 */
STD_ReturnStatus led_initialize(const led_t *led)
{
    2264:	df 93       	push	r29
    2266:	cf 93       	push	r28
    2268:	00 d0       	rcall	.+0      	; 0x226a <led_initialize+0x6>
    226a:	00 d0       	rcall	.+0      	; 0x226c <led_initialize+0x8>
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
    2270:	9c 83       	std	Y+4, r25	; 0x04
    2272:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret=E_OK;
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==led)
    2278:	8b 81       	ldd	r24, Y+3	; 0x03
    227a:	9c 81       	ldd	r25, Y+4	; 0x04
    227c:	00 97       	sbiw	r24, 0x00	; 0
    227e:	11 f4       	brne	.+4      	; 0x2284 <led_initialize+0x20>
	{
		ret= E_NOT_OK;
    2280:	19 82       	std	Y+1, r1	; 0x01
    2282:	37 c0       	rjmp	.+110    	; 0x22f2 <led_initialize+0x8e>
	}
	else
	{
		Pin_Config_t pin_obj={.port=led->port_name,.pin=led->pin,.direction=DIRECTION_OUTPUT,.logic=led->led_status};
    2284:	eb 81       	ldd	r30, Y+3	; 0x03
    2286:	fc 81       	ldd	r31, Y+4	; 0x04
    2288:	80 81       	ld	r24, Z
    228a:	87 70       	andi	r24, 0x07	; 7
    228c:	28 2f       	mov	r18, r24
    228e:	23 70       	andi	r18, 0x03	; 3
    2290:	eb 81       	ldd	r30, Y+3	; 0x03
    2292:	fc 81       	ldd	r31, Y+4	; 0x04
    2294:	80 81       	ld	r24, Z
    2296:	98 2f       	mov	r25, r24
    2298:	96 95       	lsr	r25
    229a:	96 95       	lsr	r25
    229c:	96 95       	lsr	r25
    229e:	97 70       	andi	r25, 0x07	; 7
    22a0:	eb 81       	ldd	r30, Y+3	; 0x03
    22a2:	fc 81       	ldd	r31, Y+4	; 0x04
    22a4:	80 81       	ld	r24, Z
    22a6:	38 2f       	mov	r19, r24
    22a8:	32 95       	swap	r19
    22aa:	36 95       	lsr	r19
    22ac:	36 95       	lsr	r19
    22ae:	33 70       	andi	r19, 0x03	; 3
    22b0:	31 70       	andi	r19, 0x01	; 1
    22b2:	23 70       	andi	r18, 0x03	; 3
    22b4:	8a 81       	ldd	r24, Y+2	; 0x02
    22b6:	8c 7f       	andi	r24, 0xFC	; 252
    22b8:	82 2b       	or	r24, r18
    22ba:	8a 83       	std	Y+2, r24	; 0x02
    22bc:	89 2f       	mov	r24, r25
    22be:	87 70       	andi	r24, 0x07	; 7
    22c0:	98 2f       	mov	r25, r24
    22c2:	99 0f       	add	r25, r25
    22c4:	99 0f       	add	r25, r25
    22c6:	8a 81       	ldd	r24, Y+2	; 0x02
    22c8:	83 7e       	andi	r24, 0xE3	; 227
    22ca:	89 2b       	or	r24, r25
    22cc:	8a 83       	std	Y+2, r24	; 0x02
    22ce:	8a 81       	ldd	r24, Y+2	; 0x02
    22d0:	80 62       	ori	r24, 0x20	; 32
    22d2:	8a 83       	std	Y+2, r24	; 0x02
    22d4:	83 2f       	mov	r24, r19
    22d6:	81 70       	andi	r24, 0x01	; 1
    22d8:	98 2f       	mov	r25, r24
    22da:	92 95       	swap	r25
    22dc:	99 0f       	add	r25, r25
    22de:	99 0f       	add	r25, r25
    22e0:	90 7c       	andi	r25, 0xC0	; 192
    22e2:	8a 81       	ldd	r24, Y+2	; 0x02
    22e4:	8f 7b       	andi	r24, 0xBF	; 191
    22e6:	89 2b       	or	r24, r25
    22e8:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_initialize(&pin_obj);
    22ea:	ce 01       	movw	r24, r28
    22ec:	02 96       	adiw	r24, 0x02	; 2
    22ee:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <gpio_pin_initialize>
	}

	return ret;
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	cf 91       	pop	r28
    22fe:	df 91       	pop	r29
    2300:	08 95       	ret

00002302 <led_turn_on>:
 *
 * @param led
 * @return
 */
STD_ReturnStatus led_turn_on(const led_t *led)
{
    2302:	df 93       	push	r29
    2304:	cf 93       	push	r28
    2306:	00 d0       	rcall	.+0      	; 0x2308 <led_turn_on+0x6>
    2308:	00 d0       	rcall	.+0      	; 0x230a <led_turn_on+0x8>
    230a:	cd b7       	in	r28, 0x3d	; 61
    230c:	de b7       	in	r29, 0x3e	; 62
    230e:	9c 83       	std	Y+4, r25	; 0x04
    2310:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret=E_OK;
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==led)
    2316:	8b 81       	ldd	r24, Y+3	; 0x03
    2318:	9c 81       	ldd	r25, Y+4	; 0x04
    231a:	00 97       	sbiw	r24, 0x00	; 0
    231c:	11 f4       	brne	.+4      	; 0x2322 <led_turn_on+0x20>
	{
		ret= E_NOT_OK;
    231e:	19 82       	std	Y+1, r1	; 0x01
    2320:	38 c0       	rjmp	.+112    	; 0x2392 <led_turn_on+0x90>
	}
	else
	{
		Pin_Config_t pin_obj={.port=led->port_name,.pin=led->pin,.direction=DIRECTION_OUTPUT,.logic=led->led_status};
    2322:	eb 81       	ldd	r30, Y+3	; 0x03
    2324:	fc 81       	ldd	r31, Y+4	; 0x04
    2326:	80 81       	ld	r24, Z
    2328:	87 70       	andi	r24, 0x07	; 7
    232a:	28 2f       	mov	r18, r24
    232c:	23 70       	andi	r18, 0x03	; 3
    232e:	eb 81       	ldd	r30, Y+3	; 0x03
    2330:	fc 81       	ldd	r31, Y+4	; 0x04
    2332:	80 81       	ld	r24, Z
    2334:	98 2f       	mov	r25, r24
    2336:	96 95       	lsr	r25
    2338:	96 95       	lsr	r25
    233a:	96 95       	lsr	r25
    233c:	97 70       	andi	r25, 0x07	; 7
    233e:	eb 81       	ldd	r30, Y+3	; 0x03
    2340:	fc 81       	ldd	r31, Y+4	; 0x04
    2342:	80 81       	ld	r24, Z
    2344:	38 2f       	mov	r19, r24
    2346:	32 95       	swap	r19
    2348:	36 95       	lsr	r19
    234a:	36 95       	lsr	r19
    234c:	33 70       	andi	r19, 0x03	; 3
    234e:	31 70       	andi	r19, 0x01	; 1
    2350:	23 70       	andi	r18, 0x03	; 3
    2352:	8a 81       	ldd	r24, Y+2	; 0x02
    2354:	8c 7f       	andi	r24, 0xFC	; 252
    2356:	82 2b       	or	r24, r18
    2358:	8a 83       	std	Y+2, r24	; 0x02
    235a:	89 2f       	mov	r24, r25
    235c:	87 70       	andi	r24, 0x07	; 7
    235e:	98 2f       	mov	r25, r24
    2360:	99 0f       	add	r25, r25
    2362:	99 0f       	add	r25, r25
    2364:	8a 81       	ldd	r24, Y+2	; 0x02
    2366:	83 7e       	andi	r24, 0xE3	; 227
    2368:	89 2b       	or	r24, r25
    236a:	8a 83       	std	Y+2, r24	; 0x02
    236c:	8a 81       	ldd	r24, Y+2	; 0x02
    236e:	80 62       	ori	r24, 0x20	; 32
    2370:	8a 83       	std	Y+2, r24	; 0x02
    2372:	83 2f       	mov	r24, r19
    2374:	81 70       	andi	r24, 0x01	; 1
    2376:	98 2f       	mov	r25, r24
    2378:	92 95       	swap	r25
    237a:	99 0f       	add	r25, r25
    237c:	99 0f       	add	r25, r25
    237e:	90 7c       	andi	r25, 0xC0	; 192
    2380:	8a 81       	ldd	r24, Y+2	; 0x02
    2382:	8f 7b       	andi	r24, 0xBF	; 191
    2384:	89 2b       	or	r24, r25
    2386:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_write_logic(&pin_obj,GPIO_HIGH);
    2388:	ce 01       	movw	r24, r28
    238a:	02 96       	adiw	r24, 0x02	; 2
    238c:	61 e0       	ldi	r22, 0x01	; 1
    238e:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
	}

	return ret;
    2392:	89 81       	ldd	r24, Y+1	; 0x01
}
    2394:	0f 90       	pop	r0
    2396:	0f 90       	pop	r0
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	cf 91       	pop	r28
    239e:	df 91       	pop	r29
    23a0:	08 95       	ret

000023a2 <led_turn_off>:
 *
 * @param led
 * @return
 */
STD_ReturnStatus led_turn_off(const led_t *led)
{
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	00 d0       	rcall	.+0      	; 0x23a8 <led_turn_off+0x6>
    23a8:	00 d0       	rcall	.+0      	; 0x23aa <led_turn_off+0x8>
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
    23ae:	9c 83       	std	Y+4, r25	; 0x04
    23b0:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret=E_OK;
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==led)
    23b6:	8b 81       	ldd	r24, Y+3	; 0x03
    23b8:	9c 81       	ldd	r25, Y+4	; 0x04
    23ba:	00 97       	sbiw	r24, 0x00	; 0
    23bc:	11 f4       	brne	.+4      	; 0x23c2 <led_turn_off+0x20>
	{
		ret= E_NOT_OK;
    23be:	19 82       	std	Y+1, r1	; 0x01
    23c0:	38 c0       	rjmp	.+112    	; 0x2432 <led_turn_off+0x90>
	}
	else
	{
		Pin_Config_t pin_obj={.port=led->port_name,.pin=led->pin,.direction=DIRECTION_OUTPUT,.logic=led->led_status};
    23c2:	eb 81       	ldd	r30, Y+3	; 0x03
    23c4:	fc 81       	ldd	r31, Y+4	; 0x04
    23c6:	80 81       	ld	r24, Z
    23c8:	87 70       	andi	r24, 0x07	; 7
    23ca:	28 2f       	mov	r18, r24
    23cc:	23 70       	andi	r18, 0x03	; 3
    23ce:	eb 81       	ldd	r30, Y+3	; 0x03
    23d0:	fc 81       	ldd	r31, Y+4	; 0x04
    23d2:	80 81       	ld	r24, Z
    23d4:	98 2f       	mov	r25, r24
    23d6:	96 95       	lsr	r25
    23d8:	96 95       	lsr	r25
    23da:	96 95       	lsr	r25
    23dc:	97 70       	andi	r25, 0x07	; 7
    23de:	eb 81       	ldd	r30, Y+3	; 0x03
    23e0:	fc 81       	ldd	r31, Y+4	; 0x04
    23e2:	80 81       	ld	r24, Z
    23e4:	38 2f       	mov	r19, r24
    23e6:	32 95       	swap	r19
    23e8:	36 95       	lsr	r19
    23ea:	36 95       	lsr	r19
    23ec:	33 70       	andi	r19, 0x03	; 3
    23ee:	31 70       	andi	r19, 0x01	; 1
    23f0:	23 70       	andi	r18, 0x03	; 3
    23f2:	8a 81       	ldd	r24, Y+2	; 0x02
    23f4:	8c 7f       	andi	r24, 0xFC	; 252
    23f6:	82 2b       	or	r24, r18
    23f8:	8a 83       	std	Y+2, r24	; 0x02
    23fa:	89 2f       	mov	r24, r25
    23fc:	87 70       	andi	r24, 0x07	; 7
    23fe:	98 2f       	mov	r25, r24
    2400:	99 0f       	add	r25, r25
    2402:	99 0f       	add	r25, r25
    2404:	8a 81       	ldd	r24, Y+2	; 0x02
    2406:	83 7e       	andi	r24, 0xE3	; 227
    2408:	89 2b       	or	r24, r25
    240a:	8a 83       	std	Y+2, r24	; 0x02
    240c:	8a 81       	ldd	r24, Y+2	; 0x02
    240e:	80 62       	ori	r24, 0x20	; 32
    2410:	8a 83       	std	Y+2, r24	; 0x02
    2412:	83 2f       	mov	r24, r19
    2414:	81 70       	andi	r24, 0x01	; 1
    2416:	98 2f       	mov	r25, r24
    2418:	92 95       	swap	r25
    241a:	99 0f       	add	r25, r25
    241c:	99 0f       	add	r25, r25
    241e:	90 7c       	andi	r25, 0xC0	; 192
    2420:	8a 81       	ldd	r24, Y+2	; 0x02
    2422:	8f 7b       	andi	r24, 0xBF	; 191
    2424:	89 2b       	or	r24, r25
    2426:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_write_logic(&pin_obj,GPIO_LOW);
    2428:	ce 01       	movw	r24, r28
    242a:	02 96       	adiw	r24, 0x02	; 2
    242c:	60 e0       	ldi	r22, 0x00	; 0
    242e:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
	}

	return ret;
    2432:	89 81       	ldd	r24, Y+1	; 0x01
}
    2434:	0f 90       	pop	r0
    2436:	0f 90       	pop	r0
    2438:	0f 90       	pop	r0
    243a:	0f 90       	pop	r0
    243c:	cf 91       	pop	r28
    243e:	df 91       	pop	r29
    2440:	08 95       	ret

00002442 <led_turn_toggle>:
 *
 * @param led
 * @return
 */
STD_ReturnStatus led_turn_toggle(const led_t *led)
{
    2442:	df 93       	push	r29
    2444:	cf 93       	push	r28
    2446:	00 d0       	rcall	.+0      	; 0x2448 <led_turn_toggle+0x6>
    2448:	00 d0       	rcall	.+0      	; 0x244a <led_turn_toggle+0x8>
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
    244e:	9c 83       	std	Y+4, r25	; 0x04
    2450:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret=E_OK;
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==led)
    2456:	8b 81       	ldd	r24, Y+3	; 0x03
    2458:	9c 81       	ldd	r25, Y+4	; 0x04
    245a:	00 97       	sbiw	r24, 0x00	; 0
    245c:	11 f4       	brne	.+4      	; 0x2462 <led_turn_toggle+0x20>
	{
		ret= E_NOT_OK;
    245e:	19 82       	std	Y+1, r1	; 0x01
    2460:	37 c0       	rjmp	.+110    	; 0x24d0 <led_turn_toggle+0x8e>
	}
	else
	{
		Pin_Config_t pin_obj={.port=led->port_name,.pin=led->pin,.direction=DIRECTION_OUTPUT,.logic=led->led_status};
    2462:	eb 81       	ldd	r30, Y+3	; 0x03
    2464:	fc 81       	ldd	r31, Y+4	; 0x04
    2466:	80 81       	ld	r24, Z
    2468:	87 70       	andi	r24, 0x07	; 7
    246a:	28 2f       	mov	r18, r24
    246c:	23 70       	andi	r18, 0x03	; 3
    246e:	eb 81       	ldd	r30, Y+3	; 0x03
    2470:	fc 81       	ldd	r31, Y+4	; 0x04
    2472:	80 81       	ld	r24, Z
    2474:	98 2f       	mov	r25, r24
    2476:	96 95       	lsr	r25
    2478:	96 95       	lsr	r25
    247a:	96 95       	lsr	r25
    247c:	97 70       	andi	r25, 0x07	; 7
    247e:	eb 81       	ldd	r30, Y+3	; 0x03
    2480:	fc 81       	ldd	r31, Y+4	; 0x04
    2482:	80 81       	ld	r24, Z
    2484:	38 2f       	mov	r19, r24
    2486:	32 95       	swap	r19
    2488:	36 95       	lsr	r19
    248a:	36 95       	lsr	r19
    248c:	33 70       	andi	r19, 0x03	; 3
    248e:	31 70       	andi	r19, 0x01	; 1
    2490:	23 70       	andi	r18, 0x03	; 3
    2492:	8a 81       	ldd	r24, Y+2	; 0x02
    2494:	8c 7f       	andi	r24, 0xFC	; 252
    2496:	82 2b       	or	r24, r18
    2498:	8a 83       	std	Y+2, r24	; 0x02
    249a:	89 2f       	mov	r24, r25
    249c:	87 70       	andi	r24, 0x07	; 7
    249e:	98 2f       	mov	r25, r24
    24a0:	99 0f       	add	r25, r25
    24a2:	99 0f       	add	r25, r25
    24a4:	8a 81       	ldd	r24, Y+2	; 0x02
    24a6:	83 7e       	andi	r24, 0xE3	; 227
    24a8:	89 2b       	or	r24, r25
    24aa:	8a 83       	std	Y+2, r24	; 0x02
    24ac:	8a 81       	ldd	r24, Y+2	; 0x02
    24ae:	80 62       	ori	r24, 0x20	; 32
    24b0:	8a 83       	std	Y+2, r24	; 0x02
    24b2:	83 2f       	mov	r24, r19
    24b4:	81 70       	andi	r24, 0x01	; 1
    24b6:	98 2f       	mov	r25, r24
    24b8:	92 95       	swap	r25
    24ba:	99 0f       	add	r25, r25
    24bc:	99 0f       	add	r25, r25
    24be:	90 7c       	andi	r25, 0xC0	; 192
    24c0:	8a 81       	ldd	r24, Y+2	; 0x02
    24c2:	8f 7b       	andi	r24, 0xBF	; 191
    24c4:	89 2b       	or	r24, r25
    24c6:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_toggle_logic(&pin_obj);
    24c8:	ce 01       	movw	r24, r28
    24ca:	02 96       	adiw	r24, 0x02	; 2
    24cc:	0e 94 55 0e 	call	0x1caa	; 0x1caa <gpio_pin_toggle_logic>
	}

	return ret;
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    24d2:	0f 90       	pop	r0
    24d4:	0f 90       	pop	r0
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	cf 91       	pop	r28
    24dc:	df 91       	pop	r29
    24de:	08 95       	ret

000024e0 <lcd_4bit_initialize>:




STD_ReturnStatus lcd_4bit_initialize(const chr_lcd_4bit_t *lcd)
{
    24e0:	df 93       	push	r29
    24e2:	cf 93       	push	r28
    24e4:	cd b7       	in	r28, 0x3d	; 61
    24e6:	de b7       	in	r29, 0x3e	; 62
    24e8:	a0 97       	sbiw	r28, 0x20	; 32
    24ea:	0f b6       	in	r0, 0x3f	; 63
    24ec:	f8 94       	cli
    24ee:	de bf       	out	0x3e, r29	; 62
    24f0:	0f be       	out	0x3f, r0	; 63
    24f2:	cd bf       	out	0x3d, r28	; 61
    24f4:	98 a3       	std	Y+32, r25	; 0x20
    24f6:	8f 8f       	std	Y+31, r24	; 0x1f
	STD_ReturnStatus ret = E_OK;
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 l_data_pins_counter = ZERO_INIT;
    24fc:	1d 8e       	std	Y+29, r1	; 0x1d
	if(NULL==lcd)
    24fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2500:	98 a1       	ldd	r25, Y+32	; 0x20
    2502:	00 97       	sbiw	r24, 0x00	; 0
    2504:	11 f4       	brne	.+4      	; 0x250a <lcd_4bit_initialize+0x2a>
	{
		ret = E_NOT_OK;
    2506:	1e 8e       	std	Y+30, r1	; 0x1e
    2508:	3c c1       	rjmp	.+632    	; 0x2782 <lcd_4bit_initialize+0x2a2>
	}
	else
	{
		ret = gpio_pin_initialize(&(lcd->lcd_rs));
    250a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    250c:	98 a1       	ldd	r25, Y+32	; 0x20
    250e:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <gpio_pin_initialize>
    2512:	8e 8f       	std	Y+30, r24	; 0x1e
		ret = gpio_pin_initialize(&(lcd->lcd_en));
    2514:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2516:	98 a1       	ldd	r25, Y+32	; 0x20
    2518:	01 96       	adiw	r24, 0x01	; 1
    251a:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <gpio_pin_initialize>
    251e:	8e 8f       	std	Y+30, r24	; 0x1e
		for(l_data_pins_counter=ZERO_INIT;l_data_pins_counter<4;l_data_pins_counter++)
    2520:	1d 8e       	std	Y+29, r1	; 0x1d
    2522:	10 c0       	rjmp	.+32     	; 0x2544 <lcd_4bit_initialize+0x64>
		{
			ret = gpio_pin_initialize(&(lcd->lcd_data[l_data_pins_counter]));
    2524:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2526:	98 a1       	ldd	r25, Y+32	; 0x20
    2528:	9c 01       	movw	r18, r24
    252a:	2e 5f       	subi	r18, 0xFE	; 254
    252c:	3f 4f       	sbci	r19, 0xFF	; 255
    252e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2530:	88 2f       	mov	r24, r24
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	82 0f       	add	r24, r18
    2536:	93 1f       	adc	r25, r19
    2538:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <gpio_pin_initialize>
    253c:	8e 8f       	std	Y+30, r24	; 0x1e
	}
	else
	{
		ret = gpio_pin_initialize(&(lcd->lcd_rs));
		ret = gpio_pin_initialize(&(lcd->lcd_en));
		for(l_data_pins_counter=ZERO_INIT;l_data_pins_counter<4;l_data_pins_counter++)
    253e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2540:	8f 5f       	subi	r24, 0xFF	; 255
    2542:	8d 8f       	std	Y+29, r24	; 0x1d
    2544:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2546:	84 30       	cpi	r24, 0x04	; 4
    2548:	68 f3       	brcs	.-38     	; 0x2524 <lcd_4bit_initialize+0x44>
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	a0 e2       	ldi	r26, 0x20	; 32
    2550:	b2 e4       	ldi	r27, 0x42	; 66
    2552:	89 8f       	std	Y+25, r24	; 0x19
    2554:	9a 8f       	std	Y+26, r25	; 0x1a
    2556:	ab 8f       	std	Y+27, r26	; 0x1b
    2558:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    255a:	69 8d       	ldd	r22, Y+25	; 0x19
    255c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    255e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2560:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	4a ef       	ldi	r20, 0xFA	; 250
    2568:	54 e4       	ldi	r21, 0x44	; 68
    256a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	8d 8b       	std	Y+21, r24	; 0x15
    2574:	9e 8b       	std	Y+22, r25	; 0x16
    2576:	af 8b       	std	Y+23, r26	; 0x17
    2578:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    257a:	6d 89       	ldd	r22, Y+21	; 0x15
    257c:	7e 89       	ldd	r23, Y+22	; 0x16
    257e:	8f 89       	ldd	r24, Y+23	; 0x17
    2580:	98 8d       	ldd	r25, Y+24	; 0x18
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	40 e8       	ldi	r20, 0x80	; 128
    2588:	5f e3       	ldi	r21, 0x3F	; 63
    258a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    258e:	88 23       	and	r24, r24
    2590:	2c f4       	brge	.+10     	; 0x259c <lcd_4bit_initialize+0xbc>
		__ticks = 1;
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	9c 8b       	std	Y+20, r25	; 0x14
    2598:	8b 8b       	std	Y+19, r24	; 0x13
    259a:	3f c0       	rjmp	.+126    	; 0x261a <lcd_4bit_initialize+0x13a>
	else if (__tmp > 65535)
    259c:	6d 89       	ldd	r22, Y+21	; 0x15
    259e:	7e 89       	ldd	r23, Y+22	; 0x16
    25a0:	8f 89       	ldd	r24, Y+23	; 0x17
    25a2:	98 8d       	ldd	r25, Y+24	; 0x18
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	3f ef       	ldi	r19, 0xFF	; 255
    25a8:	4f e7       	ldi	r20, 0x7F	; 127
    25aa:	57 e4       	ldi	r21, 0x47	; 71
    25ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25b0:	18 16       	cp	r1, r24
    25b2:	4c f5       	brge	.+82     	; 0x2606 <lcd_4bit_initialize+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b4:	69 8d       	ldd	r22, Y+25	; 0x19
    25b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	40 e2       	ldi	r20, 0x20	; 32
    25c2:	51 e4       	ldi	r21, 0x41	; 65
    25c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c8:	dc 01       	movw	r26, r24
    25ca:	cb 01       	movw	r24, r22
    25cc:	bc 01       	movw	r22, r24
    25ce:	cd 01       	movw	r24, r26
    25d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d4:	dc 01       	movw	r26, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	9c 8b       	std	Y+20, r25	; 0x14
    25da:	8b 8b       	std	Y+19, r24	; 0x13
    25dc:	0f c0       	rjmp	.+30     	; 0x25fc <lcd_4bit_initialize+0x11c>
    25de:	88 ec       	ldi	r24, 0xC8	; 200
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	9a 8b       	std	Y+18, r25	; 0x12
    25e4:	89 8b       	std	Y+17, r24	; 0x11
    25e6:	89 89       	ldd	r24, Y+17	; 0x11
    25e8:	9a 89       	ldd	r25, Y+18	; 0x12
    25ea:	01 97       	sbiw	r24, 0x01	; 1
    25ec:	f1 f7       	brne	.-4      	; 0x25ea <lcd_4bit_initialize+0x10a>
    25ee:	9a 8b       	std	Y+18, r25	; 0x12
    25f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f2:	8b 89       	ldd	r24, Y+19	; 0x13
    25f4:	9c 89       	ldd	r25, Y+20	; 0x14
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	9c 8b       	std	Y+20, r25	; 0x14
    25fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25fc:	8b 89       	ldd	r24, Y+19	; 0x13
    25fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2600:	00 97       	sbiw	r24, 0x00	; 0
    2602:	69 f7       	brne	.-38     	; 0x25de <lcd_4bit_initialize+0xfe>
    2604:	14 c0       	rjmp	.+40     	; 0x262e <lcd_4bit_initialize+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2606:	6d 89       	ldd	r22, Y+21	; 0x15
    2608:	7e 89       	ldd	r23, Y+22	; 0x16
    260a:	8f 89       	ldd	r24, Y+23	; 0x17
    260c:	98 8d       	ldd	r25, Y+24	; 0x18
    260e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	9c 8b       	std	Y+20, r25	; 0x14
    2618:	8b 8b       	std	Y+19, r24	; 0x13
    261a:	8b 89       	ldd	r24, Y+19	; 0x13
    261c:	9c 89       	ldd	r25, Y+20	; 0x14
    261e:	98 8b       	std	Y+16, r25	; 0x10
    2620:	8f 87       	std	Y+15, r24	; 0x0f
    2622:	8f 85       	ldd	r24, Y+15	; 0x0f
    2624:	98 89       	ldd	r25, Y+16	; 0x10
    2626:	01 97       	sbiw	r24, 0x01	; 1
    2628:	f1 f7       	brne	.-4      	; 0x2626 <lcd_4bit_initialize+0x146>
    262a:	98 8b       	std	Y+16, r25	; 0x10
    262c:	8f 87       	std	Y+15, r24	; 0x0f
//		_delay_ms(3);
//		ret = lcd_4bit_send_command(lcd,0x00);
//		ret = lcd_4bit_send_command(lcd,0x40);
//		_delay_ms(2);
//		ret = lcd_4bit_send_command(lcd,0x80);
	    lcd_send_4bits(lcd, 0x03);  // Send 0x03 command (Function Set - 8-bit mode)
    262e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2630:	98 a1       	ldd	r25, Y+32	; 0x20
    2632:	63 e0       	ldi	r22, 0x03	; 3
    2634:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <lcd_send_4bits>
	    lcd_4bit_send_enable(lcd);
    2638:	8f 8d       	ldd	r24, Y+31	; 0x1f
    263a:	98 a1       	ldd	r25, Y+32	; 0x20
    263c:	0e 94 a5 1a 	call	0x354a	; 0x354a <lcd_4bit_send_enable>

	    // Delay for at least 4.1ms or follow the LCD module datasheet recommendations

	    lcd_send_4bits(lcd, 0x03);  // Send 0x03 command (Function Set - 8-bit mode)
    2640:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2642:	98 a1       	ldd	r25, Y+32	; 0x20
    2644:	63 e0       	ldi	r22, 0x03	; 3
    2646:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <lcd_send_4bits>
	    lcd_4bit_send_enable(lcd);
    264a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    264c:	98 a1       	ldd	r25, Y+32	; 0x20
    264e:	0e 94 a5 1a 	call	0x354a	; 0x354a <lcd_4bit_send_enable>

	    // Delay for at least 100μs or follow the LCD module datasheet recommendations

	    lcd_send_4bits(lcd, 0x03);  // Send 0x03 command (Function Set - 8-bit mode)
    2652:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2654:	98 a1       	ldd	r25, Y+32	; 0x20
    2656:	63 e0       	ldi	r22, 0x03	; 3
    2658:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <lcd_send_4bits>
	    lcd_4bit_send_enable(lcd);
    265c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    265e:	98 a1       	ldd	r25, Y+32	; 0x20
    2660:	0e 94 a5 1a 	call	0x354a	; 0x354a <lcd_4bit_send_enable>

	    // Switch to 4-bit mode
	    lcd_send_4bits(lcd, 0x02);  // Send 0x02 command (Function Set - 4-bit mode)
    2664:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2666:	98 a1       	ldd	r25, Y+32	; 0x20
    2668:	62 e0       	ldi	r22, 0x02	; 2
    266a:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <lcd_send_4bits>
	    lcd_4bit_send_enable(lcd);
    266e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2670:	98 a1       	ldd	r25, Y+32	; 0x20
    2672:	0e 94 a5 1a 	call	0x354a	; 0x354a <lcd_4bit_send_enable>

	    // Configure the LCD module
	    lcd_4bit_send_command(lcd, 0x28);  // 0x28 command (Function Set - 4-bit mode, 2 lines, 5x8 dots)
    2676:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2678:	98 a1       	ldd	r25, Y+32	; 0x20
    267a:	68 e2       	ldi	r22, 0x28	; 40
    267c:	0e 94 cb 13 	call	0x2796	; 0x2796 <lcd_4bit_send_command>
	    lcd_4bit_send_command(lcd, 0x0C);  // 0x0C command (Display On/Off - Display on, Cursor off, Blink off)
    2680:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2682:	98 a1       	ldd	r25, Y+32	; 0x20
    2684:	6c e0       	ldi	r22, 0x0C	; 12
    2686:	0e 94 cb 13 	call	0x2796	; 0x2796 <lcd_4bit_send_command>
	    lcd_4bit_send_command(lcd, 0x06);  // 0x06 command (Entry Mode Set - Increment cursor, No display shift)
    268a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    268c:	98 a1       	ldd	r25, Y+32	; 0x20
    268e:	66 e0       	ldi	r22, 0x06	; 6
    2690:	0e 94 cb 13 	call	0x2796	; 0x2796 <lcd_4bit_send_command>
	    lcd_4bit_send_command(lcd, 0x01);  // 0x01 command (Clear Display)
    2694:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2696:	98 a1       	ldd	r25, Y+32	; 0x20
    2698:	61 e0       	ldi	r22, 0x01	; 1
    269a:	0e 94 cb 13 	call	0x2796	; 0x2796 <lcd_4bit_send_command>
    269e:	80 e0       	ldi	r24, 0x00	; 0
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	a0 e4       	ldi	r26, 0x40	; 64
    26a4:	b0 e4       	ldi	r27, 0x40	; 64
    26a6:	8b 87       	std	Y+11, r24	; 0x0b
    26a8:	9c 87       	std	Y+12, r25	; 0x0c
    26aa:	ad 87       	std	Y+13, r26	; 0x0d
    26ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    26b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    26b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    26b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	4a ef       	ldi	r20, 0xFA	; 250
    26bc:	54 e4       	ldi	r21, 0x44	; 68
    26be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	8f 83       	std	Y+7, r24	; 0x07
    26c8:	98 87       	std	Y+8, r25	; 0x08
    26ca:	a9 87       	std	Y+9, r26	; 0x09
    26cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26ce:	6f 81       	ldd	r22, Y+7	; 0x07
    26d0:	78 85       	ldd	r23, Y+8	; 0x08
    26d2:	89 85       	ldd	r24, Y+9	; 0x09
    26d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	40 e8       	ldi	r20, 0x80	; 128
    26dc:	5f e3       	ldi	r21, 0x3F	; 63
    26de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26e2:	88 23       	and	r24, r24
    26e4:	2c f4       	brge	.+10     	; 0x26f0 <lcd_4bit_initialize+0x210>
		__ticks = 1;
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	9e 83       	std	Y+6, r25	; 0x06
    26ec:	8d 83       	std	Y+5, r24	; 0x05
    26ee:	3f c0       	rjmp	.+126    	; 0x276e <lcd_4bit_initialize+0x28e>
	else if (__tmp > 65535)
    26f0:	6f 81       	ldd	r22, Y+7	; 0x07
    26f2:	78 85       	ldd	r23, Y+8	; 0x08
    26f4:	89 85       	ldd	r24, Y+9	; 0x09
    26f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	3f ef       	ldi	r19, 0xFF	; 255
    26fc:	4f e7       	ldi	r20, 0x7F	; 127
    26fe:	57 e4       	ldi	r21, 0x47	; 71
    2700:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2704:	18 16       	cp	r1, r24
    2706:	4c f5       	brge	.+82     	; 0x275a <lcd_4bit_initialize+0x27a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2708:	6b 85       	ldd	r22, Y+11	; 0x0b
    270a:	7c 85       	ldd	r23, Y+12	; 0x0c
    270c:	8d 85       	ldd	r24, Y+13	; 0x0d
    270e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	40 e2       	ldi	r20, 0x20	; 32
    2716:	51 e4       	ldi	r21, 0x41	; 65
    2718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271c:	dc 01       	movw	r26, r24
    271e:	cb 01       	movw	r24, r22
    2720:	bc 01       	movw	r22, r24
    2722:	cd 01       	movw	r24, r26
    2724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	9e 83       	std	Y+6, r25	; 0x06
    272e:	8d 83       	std	Y+5, r24	; 0x05
    2730:	0f c0       	rjmp	.+30     	; 0x2750 <lcd_4bit_initialize+0x270>
    2732:	88 ec       	ldi	r24, 0xC8	; 200
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	9c 83       	std	Y+4, r25	; 0x04
    2738:	8b 83       	std	Y+3, r24	; 0x03
    273a:	8b 81       	ldd	r24, Y+3	; 0x03
    273c:	9c 81       	ldd	r25, Y+4	; 0x04
    273e:	01 97       	sbiw	r24, 0x01	; 1
    2740:	f1 f7       	brne	.-4      	; 0x273e <lcd_4bit_initialize+0x25e>
    2742:	9c 83       	std	Y+4, r25	; 0x04
    2744:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2746:	8d 81       	ldd	r24, Y+5	; 0x05
    2748:	9e 81       	ldd	r25, Y+6	; 0x06
    274a:	01 97       	sbiw	r24, 0x01	; 1
    274c:	9e 83       	std	Y+6, r25	; 0x06
    274e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2750:	8d 81       	ldd	r24, Y+5	; 0x05
    2752:	9e 81       	ldd	r25, Y+6	; 0x06
    2754:	00 97       	sbiw	r24, 0x00	; 0
    2756:	69 f7       	brne	.-38     	; 0x2732 <lcd_4bit_initialize+0x252>
    2758:	14 c0       	rjmp	.+40     	; 0x2782 <lcd_4bit_initialize+0x2a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    275a:	6f 81       	ldd	r22, Y+7	; 0x07
    275c:	78 85       	ldd	r23, Y+8	; 0x08
    275e:	89 85       	ldd	r24, Y+9	; 0x09
    2760:	9a 85       	ldd	r25, Y+10	; 0x0a
    2762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	9e 83       	std	Y+6, r25	; 0x06
    276c:	8d 83       	std	Y+5, r24	; 0x05
    276e:	8d 81       	ldd	r24, Y+5	; 0x05
    2770:	9e 81       	ldd	r25, Y+6	; 0x06
    2772:	9a 83       	std	Y+2, r25	; 0x02
    2774:	89 83       	std	Y+1, r24	; 0x01
    2776:	89 81       	ldd	r24, Y+1	; 0x01
    2778:	9a 81       	ldd	r25, Y+2	; 0x02
    277a:	01 97       	sbiw	r24, 0x01	; 1
    277c:	f1 f7       	brne	.-4      	; 0x277a <lcd_4bit_initialize+0x29a>
    277e:	9a 83       	std	Y+2, r25	; 0x02
    2780:	89 83       	std	Y+1, r24	; 0x01

	    // Delay for at least 1.5ms or follow the LCD module datasheet recommendations
	    _delay_ms(3);
	    // LCD module is now initialized and ready to use
	}
	return ret;
    2782:	8e 8d       	ldd	r24, Y+30	; 0x1e
}
    2784:	a0 96       	adiw	r28, 0x20	; 32
    2786:	0f b6       	in	r0, 0x3f	; 63
    2788:	f8 94       	cli
    278a:	de bf       	out	0x3e, r29	; 62
    278c:	0f be       	out	0x3f, r0	; 63
    278e:	cd bf       	out	0x3d, r28	; 61
    2790:	cf 91       	pop	r28
    2792:	df 91       	pop	r29
    2794:	08 95       	ret

00002796 <lcd_4bit_send_command>:


STD_ReturnStatus lcd_4bit_send_command(const chr_lcd_4bit_t *lcd,uint8 command)
{
    2796:	df 93       	push	r29
    2798:	cf 93       	push	r28
    279a:	00 d0       	rcall	.+0      	; 0x279c <lcd_4bit_send_command+0x6>
    279c:	00 d0       	rcall	.+0      	; 0x279e <lcd_4bit_send_command+0x8>
    279e:	cd b7       	in	r28, 0x3d	; 61
    27a0:	de b7       	in	r29, 0x3e	; 62
    27a2:	9b 83       	std	Y+3, r25	; 0x03
    27a4:	8a 83       	std	Y+2, r24	; 0x02
    27a6:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_OK;
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==lcd)
    27ac:	8a 81       	ldd	r24, Y+2	; 0x02
    27ae:	9b 81       	ldd	r25, Y+3	; 0x03
    27b0:	00 97       	sbiw	r24, 0x00	; 0
    27b2:	11 f4       	brne	.+4      	; 0x27b8 <lcd_4bit_send_command+0x22>
	{
		ret = E_NOT_OK;
    27b4:	19 82       	std	Y+1, r1	; 0x01
    27b6:	20 c0       	rjmp	.+64     	; 0x27f8 <lcd_4bit_send_command+0x62>
	}
	else
	{
		ret = gpio_pin_write_logic(&(lcd->lcd_rs),GPIO_LOW);
    27b8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ba:	9b 81       	ldd	r25, Y+3	; 0x03
    27bc:	60 e0       	ldi	r22, 0x00	; 0
    27be:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
    27c2:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_send_4bits(lcd,command>>4);
    27c4:	8c 81       	ldd	r24, Y+4	; 0x04
    27c6:	28 2f       	mov	r18, r24
    27c8:	22 95       	swap	r18
    27ca:	2f 70       	andi	r18, 0x0F	; 15
    27cc:	8a 81       	ldd	r24, Y+2	; 0x02
    27ce:	9b 81       	ldd	r25, Y+3	; 0x03
    27d0:	62 2f       	mov	r22, r18
    27d2:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <lcd_send_4bits>
    27d6:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_4bit_send_enable(lcd);
    27d8:	8a 81       	ldd	r24, Y+2	; 0x02
    27da:	9b 81       	ldd	r25, Y+3	; 0x03
    27dc:	0e 94 a5 1a 	call	0x354a	; 0x354a <lcd_4bit_send_enable>
    27e0:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_send_4bits(lcd,command);
    27e2:	8a 81       	ldd	r24, Y+2	; 0x02
    27e4:	9b 81       	ldd	r25, Y+3	; 0x03
    27e6:	6c 81       	ldd	r22, Y+4	; 0x04
    27e8:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <lcd_send_4bits>
    27ec:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_4bit_send_enable(lcd);
    27ee:	8a 81       	ldd	r24, Y+2	; 0x02
    27f0:	9b 81       	ldd	r25, Y+3	; 0x03
    27f2:	0e 94 a5 1a 	call	0x354a	; 0x354a <lcd_4bit_send_enable>
    27f6:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    27fa:	0f 90       	pop	r0
    27fc:	0f 90       	pop	r0
    27fe:	0f 90       	pop	r0
    2800:	0f 90       	pop	r0
    2802:	cf 91       	pop	r28
    2804:	df 91       	pop	r29
    2806:	08 95       	ret

00002808 <lcd_4bit_send_char_data>:


STD_ReturnStatus lcd_4bit_send_char_data(const chr_lcd_4bit_t *lcd,uint8 data)
{
    2808:	df 93       	push	r29
    280a:	cf 93       	push	r28
    280c:	00 d0       	rcall	.+0      	; 0x280e <lcd_4bit_send_char_data+0x6>
    280e:	00 d0       	rcall	.+0      	; 0x2810 <lcd_4bit_send_char_data+0x8>
    2810:	cd b7       	in	r28, 0x3d	; 61
    2812:	de b7       	in	r29, 0x3e	; 62
    2814:	9b 83       	std	Y+3, r25	; 0x03
    2816:	8a 83       	std	Y+2, r24	; 0x02
    2818:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_OK;
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==lcd)
    281e:	8a 81       	ldd	r24, Y+2	; 0x02
    2820:	9b 81       	ldd	r25, Y+3	; 0x03
    2822:	00 97       	sbiw	r24, 0x00	; 0
    2824:	11 f4       	brne	.+4      	; 0x282a <lcd_4bit_send_char_data+0x22>
	{
		ret = E_NOT_OK;
    2826:	19 82       	std	Y+1, r1	; 0x01
    2828:	20 c0       	rjmp	.+64     	; 0x286a <lcd_4bit_send_char_data+0x62>
	}
	else
	{
		ret = gpio_pin_write_logic(&(lcd->lcd_rs),GPIO_HIGH);
    282a:	8a 81       	ldd	r24, Y+2	; 0x02
    282c:	9b 81       	ldd	r25, Y+3	; 0x03
    282e:	61 e0       	ldi	r22, 0x01	; 1
    2830:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
    2834:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_send_4bits(lcd,data>>4);
    2836:	8c 81       	ldd	r24, Y+4	; 0x04
    2838:	28 2f       	mov	r18, r24
    283a:	22 95       	swap	r18
    283c:	2f 70       	andi	r18, 0x0F	; 15
    283e:	8a 81       	ldd	r24, Y+2	; 0x02
    2840:	9b 81       	ldd	r25, Y+3	; 0x03
    2842:	62 2f       	mov	r22, r18
    2844:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <lcd_send_4bits>
    2848:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_4bit_send_enable(lcd);
    284a:	8a 81       	ldd	r24, Y+2	; 0x02
    284c:	9b 81       	ldd	r25, Y+3	; 0x03
    284e:	0e 94 a5 1a 	call	0x354a	; 0x354a <lcd_4bit_send_enable>
    2852:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_send_4bits(lcd,data);
    2854:	8a 81       	ldd	r24, Y+2	; 0x02
    2856:	9b 81       	ldd	r25, Y+3	; 0x03
    2858:	6c 81       	ldd	r22, Y+4	; 0x04
    285a:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <lcd_send_4bits>
    285e:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_4bit_send_enable(lcd);
    2860:	8a 81       	ldd	r24, Y+2	; 0x02
    2862:	9b 81       	ldd	r25, Y+3	; 0x03
    2864:	0e 94 a5 1a 	call	0x354a	; 0x354a <lcd_4bit_send_enable>
    2868:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    286a:	89 81       	ldd	r24, Y+1	; 0x01
}
    286c:	0f 90       	pop	r0
    286e:	0f 90       	pop	r0
    2870:	0f 90       	pop	r0
    2872:	0f 90       	pop	r0
    2874:	cf 91       	pop	r28
    2876:	df 91       	pop	r29
    2878:	08 95       	ret

0000287a <lcd_4bit_send_char_data_pos>:


STD_ReturnStatus lcd_4bit_send_char_data_pos(const chr_lcd_4bit_t *lcd,uint8 row,uint8 column,uint8 data)
{
    287a:	df 93       	push	r29
    287c:	cf 93       	push	r28
    287e:	00 d0       	rcall	.+0      	; 0x2880 <lcd_4bit_send_char_data_pos+0x6>
    2880:	00 d0       	rcall	.+0      	; 0x2882 <lcd_4bit_send_char_data_pos+0x8>
    2882:	00 d0       	rcall	.+0      	; 0x2884 <lcd_4bit_send_char_data_pos+0xa>
    2884:	cd b7       	in	r28, 0x3d	; 61
    2886:	de b7       	in	r29, 0x3e	; 62
    2888:	9b 83       	std	Y+3, r25	; 0x03
    288a:	8a 83       	std	Y+2, r24	; 0x02
    288c:	6c 83       	std	Y+4, r22	; 0x04
    288e:	4d 83       	std	Y+5, r20	; 0x05
    2890:	2e 83       	std	Y+6, r18	; 0x06
	STD_ReturnStatus ret = E_OK;
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==lcd)
    2896:	8a 81       	ldd	r24, Y+2	; 0x02
    2898:	9b 81       	ldd	r25, Y+3	; 0x03
    289a:	00 97       	sbiw	r24, 0x00	; 0
    289c:	11 f4       	brne	.+4      	; 0x28a2 <lcd_4bit_send_char_data_pos+0x28>
	{
		ret = E_NOT_OK;
    289e:	19 82       	std	Y+1, r1	; 0x01
    28a0:	0b c0       	rjmp	.+22     	; 0x28b8 <lcd_4bit_send_char_data_pos+0x3e>
	}
	else
	{
		lcd_4bit_set_cursor(lcd,row,column);
    28a2:	8a 81       	ldd	r24, Y+2	; 0x02
    28a4:	9b 81       	ldd	r25, Y+3	; 0x03
    28a6:	6c 81       	ldd	r22, Y+4	; 0x04
    28a8:	4d 81       	ldd	r20, Y+5	; 0x05
    28aa:	0e 94 15 1c 	call	0x382a	; 0x382a <lcd_4bit_set_cursor>
		lcd_4bit_send_char_data(lcd,data);
    28ae:	8a 81       	ldd	r24, Y+2	; 0x02
    28b0:	9b 81       	ldd	r25, Y+3	; 0x03
    28b2:	6e 81       	ldd	r22, Y+6	; 0x06
    28b4:	0e 94 04 14 	call	0x2808	; 0x2808 <lcd_4bit_send_char_data>
	}
	return ret;
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    28ba:	26 96       	adiw	r28, 0x06	; 6
    28bc:	0f b6       	in	r0, 0x3f	; 63
    28be:	f8 94       	cli
    28c0:	de bf       	out	0x3e, r29	; 62
    28c2:	0f be       	out	0x3f, r0	; 63
    28c4:	cd bf       	out	0x3d, r28	; 61
    28c6:	cf 91       	pop	r28
    28c8:	df 91       	pop	r29
    28ca:	08 95       	ret

000028cc <lcd_4bit_send_string>:


STD_ReturnStatus lcd_4bit_send_string(const chr_lcd_4bit_t *lcd,uint8* str)
{
    28cc:	df 93       	push	r29
    28ce:	cf 93       	push	r28
    28d0:	00 d0       	rcall	.+0      	; 0x28d2 <lcd_4bit_send_string+0x6>
    28d2:	00 d0       	rcall	.+0      	; 0x28d4 <lcd_4bit_send_string+0x8>
    28d4:	0f 92       	push	r0
    28d6:	cd b7       	in	r28, 0x3d	; 61
    28d8:	de b7       	in	r29, 0x3e	; 62
    28da:	9b 83       	std	Y+3, r25	; 0x03
    28dc:	8a 83       	std	Y+2, r24	; 0x02
    28de:	7d 83       	std	Y+5, r23	; 0x05
    28e0:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_OK;
    28e2:	81 e0       	ldi	r24, 0x01	; 1
    28e4:	89 83       	std	Y+1, r24	; 0x01
	if((NULL==lcd)||(NULL==str))
    28e6:	8a 81       	ldd	r24, Y+2	; 0x02
    28e8:	9b 81       	ldd	r25, Y+3	; 0x03
    28ea:	00 97       	sbiw	r24, 0x00	; 0
    28ec:	21 f0       	breq	.+8      	; 0x28f6 <lcd_4bit_send_string+0x2a>
    28ee:	8c 81       	ldd	r24, Y+4	; 0x04
    28f0:	9d 81       	ldd	r25, Y+5	; 0x05
    28f2:	00 97       	sbiw	r24, 0x00	; 0
    28f4:	81 f4       	brne	.+32     	; 0x2916 <lcd_4bit_send_string+0x4a>
	{
		ret = E_NOT_OK;
    28f6:	19 82       	std	Y+1, r1	; 0x01
    28f8:	13 c0       	rjmp	.+38     	; 0x2920 <lcd_4bit_send_string+0x54>
	}
	else
	{
		while(*str)
		{
			ret = lcd_4bit_send_char_data(lcd,*str++);
    28fa:	ec 81       	ldd	r30, Y+4	; 0x04
    28fc:	fd 81       	ldd	r31, Y+5	; 0x05
    28fe:	20 81       	ld	r18, Z
    2900:	8c 81       	ldd	r24, Y+4	; 0x04
    2902:	9d 81       	ldd	r25, Y+5	; 0x05
    2904:	01 96       	adiw	r24, 0x01	; 1
    2906:	9d 83       	std	Y+5, r25	; 0x05
    2908:	8c 83       	std	Y+4, r24	; 0x04
    290a:	8a 81       	ldd	r24, Y+2	; 0x02
    290c:	9b 81       	ldd	r25, Y+3	; 0x03
    290e:	62 2f       	mov	r22, r18
    2910:	0e 94 04 14 	call	0x2808	; 0x2808 <lcd_4bit_send_char_data>
    2914:	89 83       	std	Y+1, r24	; 0x01
	{
		ret = E_NOT_OK;
	}
	else
	{
		while(*str)
    2916:	ec 81       	ldd	r30, Y+4	; 0x04
    2918:	fd 81       	ldd	r31, Y+5	; 0x05
    291a:	80 81       	ld	r24, Z
    291c:	88 23       	and	r24, r24
    291e:	69 f7       	brne	.-38     	; 0x28fa <lcd_4bit_send_string+0x2e>
		{
			ret = lcd_4bit_send_char_data(lcd,*str++);
		}
	}
	return ret;
    2920:	89 81       	ldd	r24, Y+1	; 0x01
}
    2922:	0f 90       	pop	r0
    2924:	0f 90       	pop	r0
    2926:	0f 90       	pop	r0
    2928:	0f 90       	pop	r0
    292a:	0f 90       	pop	r0
    292c:	cf 91       	pop	r28
    292e:	df 91       	pop	r29
    2930:	08 95       	ret

00002932 <lcd_4bit_send_string_pos>:


STD_ReturnStatus lcd_4bit_send_string_pos(const chr_lcd_4bit_t *lcd,uint8 row,uint8 column,uint8* str){
    2932:	df 93       	push	r29
    2934:	cf 93       	push	r28
    2936:	cd b7       	in	r28, 0x3d	; 61
    2938:	de b7       	in	r29, 0x3e	; 62
    293a:	27 97       	sbiw	r28, 0x07	; 7
    293c:	0f b6       	in	r0, 0x3f	; 63
    293e:	f8 94       	cli
    2940:	de bf       	out	0x3e, r29	; 62
    2942:	0f be       	out	0x3f, r0	; 63
    2944:	cd bf       	out	0x3d, r28	; 61
    2946:	9b 83       	std	Y+3, r25	; 0x03
    2948:	8a 83       	std	Y+2, r24	; 0x02
    294a:	6c 83       	std	Y+4, r22	; 0x04
    294c:	4d 83       	std	Y+5, r20	; 0x05
    294e:	3f 83       	std	Y+7, r19	; 0x07
    2950:	2e 83       	std	Y+6, r18	; 0x06

	STD_ReturnStatus ret = E_OK;
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	89 83       	std	Y+1, r24	; 0x01
	if((NULL==lcd)||(NULL==str))
    2956:	8a 81       	ldd	r24, Y+2	; 0x02
    2958:	9b 81       	ldd	r25, Y+3	; 0x03
    295a:	00 97       	sbiw	r24, 0x00	; 0
    295c:	21 f0       	breq	.+8      	; 0x2966 <lcd_4bit_send_string_pos+0x34>
    295e:	8e 81       	ldd	r24, Y+6	; 0x06
    2960:	9f 81       	ldd	r25, Y+7	; 0x07
    2962:	00 97       	sbiw	r24, 0x00	; 0
    2964:	11 f4       	brne	.+4      	; 0x296a <lcd_4bit_send_string_pos+0x38>
	{
		ret = E_NOT_OK;
    2966:	19 82       	std	Y+1, r1	; 0x01
    2968:	1b c0       	rjmp	.+54     	; 0x29a0 <lcd_4bit_send_string_pos+0x6e>
	}
	else
	{
		ret = lcd_4bit_set_cursor(lcd,row,column);
    296a:	8a 81       	ldd	r24, Y+2	; 0x02
    296c:	9b 81       	ldd	r25, Y+3	; 0x03
    296e:	6c 81       	ldd	r22, Y+4	; 0x04
    2970:	4d 81       	ldd	r20, Y+5	; 0x05
    2972:	0e 94 15 1c 	call	0x382a	; 0x382a <lcd_4bit_set_cursor>
    2976:	89 83       	std	Y+1, r24	; 0x01
    2978:	0e c0       	rjmp	.+28     	; 0x2996 <lcd_4bit_send_string_pos+0x64>
		while(*str)
		{
			ret = lcd_4bit_send_char_data(lcd,*str++);
    297a:	ee 81       	ldd	r30, Y+6	; 0x06
    297c:	ff 81       	ldd	r31, Y+7	; 0x07
    297e:	20 81       	ld	r18, Z
    2980:	8e 81       	ldd	r24, Y+6	; 0x06
    2982:	9f 81       	ldd	r25, Y+7	; 0x07
    2984:	01 96       	adiw	r24, 0x01	; 1
    2986:	9f 83       	std	Y+7, r25	; 0x07
    2988:	8e 83       	std	Y+6, r24	; 0x06
    298a:	8a 81       	ldd	r24, Y+2	; 0x02
    298c:	9b 81       	ldd	r25, Y+3	; 0x03
    298e:	62 2f       	mov	r22, r18
    2990:	0e 94 04 14 	call	0x2808	; 0x2808 <lcd_4bit_send_char_data>
    2994:	89 83       	std	Y+1, r24	; 0x01
		ret = E_NOT_OK;
	}
	else
	{
		ret = lcd_4bit_set_cursor(lcd,row,column);
		while(*str)
    2996:	ee 81       	ldd	r30, Y+6	; 0x06
    2998:	ff 81       	ldd	r31, Y+7	; 0x07
    299a:	80 81       	ld	r24, Z
    299c:	88 23       	and	r24, r24
    299e:	69 f7       	brne	.-38     	; 0x297a <lcd_4bit_send_string_pos+0x48>
		{
			ret = lcd_4bit_send_char_data(lcd,*str++);
		}
	}
	return ret;
    29a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    29a2:	27 96       	adiw	r28, 0x07	; 7
    29a4:	0f b6       	in	r0, 0x3f	; 63
    29a6:	f8 94       	cli
    29a8:	de bf       	out	0x3e, r29	; 62
    29aa:	0f be       	out	0x3f, r0	; 63
    29ac:	cd bf       	out	0x3d, r28	; 61
    29ae:	cf 91       	pop	r28
    29b0:	df 91       	pop	r29
    29b2:	08 95       	ret

000029b4 <lcd_4bit_send_custom_char>:


STD_ReturnStatus lcd_4bit_send_custom_char(const chr_lcd_4bit_t *lcd,uint8 row,uint8 column,uint8 _char[],uint8 mem_pos)
{
    29b4:	0f 93       	push	r16
    29b6:	df 93       	push	r29
    29b8:	cf 93       	push	r28
    29ba:	cd b7       	in	r28, 0x3d	; 61
    29bc:	de b7       	in	r29, 0x3e	; 62
    29be:	29 97       	sbiw	r28, 0x09	; 9
    29c0:	0f b6       	in	r0, 0x3f	; 63
    29c2:	f8 94       	cli
    29c4:	de bf       	out	0x3e, r29	; 62
    29c6:	0f be       	out	0x3f, r0	; 63
    29c8:	cd bf       	out	0x3d, r28	; 61
    29ca:	9c 83       	std	Y+4, r25	; 0x04
    29cc:	8b 83       	std	Y+3, r24	; 0x03
    29ce:	6d 83       	std	Y+5, r22	; 0x05
    29d0:	4e 83       	std	Y+6, r20	; 0x06
    29d2:	38 87       	std	Y+8, r19	; 0x08
    29d4:	2f 83       	std	Y+7, r18	; 0x07
    29d6:	09 87       	std	Y+9, r16	; 0x09
	STD_ReturnStatus ret = E_OK;
    29d8:	81 e0       	ldi	r24, 0x01	; 1
    29da:	8a 83       	std	Y+2, r24	; 0x02
	uint8 lcd_counter = ZERO_INIT;
    29dc:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==lcd)
    29de:	8b 81       	ldd	r24, Y+3	; 0x03
    29e0:	9c 81       	ldd	r25, Y+4	; 0x04
    29e2:	00 97       	sbiw	r24, 0x00	; 0
    29e4:	11 f4       	brne	.+4      	; 0x29ea <lcd_4bit_send_custom_char+0x36>
	{
		ret = E_NOT_OK;
    29e6:	1a 82       	std	Y+2, r1	; 0x02
    29e8:	30 c0       	rjmp	.+96     	; 0x2a4a <lcd_4bit_send_custom_char+0x96>
	}
	else
	{
		ret =  lcd_4bit_send_command(lcd,_LCD_CGRAM_START+(mem_pos*8));//mem_pos is the position addres oin cgram(1~8)
    29ea:	89 85       	ldd	r24, Y+9	; 0x09
    29ec:	88 2f       	mov	r24, r24
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	08 96       	adiw	r24, 0x08	; 8
    29f2:	88 0f       	add	r24, r24
    29f4:	99 1f       	adc	r25, r25
    29f6:	88 0f       	add	r24, r24
    29f8:	99 1f       	adc	r25, r25
    29fa:	88 0f       	add	r24, r24
    29fc:	99 1f       	adc	r25, r25
    29fe:	28 2f       	mov	r18, r24
    2a00:	8b 81       	ldd	r24, Y+3	; 0x03
    2a02:	9c 81       	ldd	r25, Y+4	; 0x04
    2a04:	62 2f       	mov	r22, r18
    2a06:	0e 94 cb 13 	call	0x2796	; 0x2796 <lcd_4bit_send_command>
    2a0a:	8a 83       	std	Y+2, r24	; 0x02
		for(lcd_counter=ZERO_INIT;lcd_counter<=7;++lcd_counter)
    2a0c:	19 82       	std	Y+1, r1	; 0x01
    2a0e:	12 c0       	rjmp	.+36     	; 0x2a34 <lcd_4bit_send_custom_char+0x80>
		{
			ret = lcd_4bit_send_char_data(lcd,_char[lcd_counter]);
    2a10:	89 81       	ldd	r24, Y+1	; 0x01
    2a12:	28 2f       	mov	r18, r24
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	8f 81       	ldd	r24, Y+7	; 0x07
    2a18:	98 85       	ldd	r25, Y+8	; 0x08
    2a1a:	fc 01       	movw	r30, r24
    2a1c:	e2 0f       	add	r30, r18
    2a1e:	f3 1f       	adc	r31, r19
    2a20:	20 81       	ld	r18, Z
    2a22:	8b 81       	ldd	r24, Y+3	; 0x03
    2a24:	9c 81       	ldd	r25, Y+4	; 0x04
    2a26:	62 2f       	mov	r22, r18
    2a28:	0e 94 04 14 	call	0x2808	; 0x2808 <lcd_4bit_send_char_data>
    2a2c:	8a 83       	std	Y+2, r24	; 0x02
		ret = E_NOT_OK;
	}
	else
	{
		ret =  lcd_4bit_send_command(lcd,_LCD_CGRAM_START+(mem_pos*8));//mem_pos is the position addres oin cgram(1~8)
		for(lcd_counter=ZERO_INIT;lcd_counter<=7;++lcd_counter)
    2a2e:	89 81       	ldd	r24, Y+1	; 0x01
    2a30:	8f 5f       	subi	r24, 0xFF	; 255
    2a32:	89 83       	std	Y+1, r24	; 0x01
    2a34:	89 81       	ldd	r24, Y+1	; 0x01
    2a36:	88 30       	cpi	r24, 0x08	; 8
    2a38:	58 f3       	brcs	.-42     	; 0x2a10 <lcd_4bit_send_custom_char+0x5c>
		{
			ret = lcd_4bit_send_char_data(lcd,_char[lcd_counter]);
		}
		ret = lcd_4bit_send_char_data_pos(lcd,row,column,mem_pos);
    2a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a3e:	6d 81       	ldd	r22, Y+5	; 0x05
    2a40:	4e 81       	ldd	r20, Y+6	; 0x06
    2a42:	29 85       	ldd	r18, Y+9	; 0x09
    2a44:	0e 94 3d 14 	call	0x287a	; 0x287a <lcd_4bit_send_char_data_pos>
    2a48:	8a 83       	std	Y+2, r24	; 0x02
	}
	return ret;
    2a4a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2a4c:	29 96       	adiw	r28, 0x09	; 9
    2a4e:	0f b6       	in	r0, 0x3f	; 63
    2a50:	f8 94       	cli
    2a52:	de bf       	out	0x3e, r29	; 62
    2a54:	0f be       	out	0x3f, r0	; 63
    2a56:	cd bf       	out	0x3d, r28	; 61
    2a58:	cf 91       	pop	r28
    2a5a:	df 91       	pop	r29
    2a5c:	0f 91       	pop	r16
    2a5e:	08 95       	ret

00002a60 <lcd_4bit_send_int>:

STD_ReturnStatus lcd_4bit_send_int(const chr_lcd_4bit_t *lcd,uint8 Num)
{
    2a60:	df 93       	push	r29
    2a62:	cf 93       	push	r28
    2a64:	00 d0       	rcall	.+0      	; 0x2a66 <lcd_4bit_send_int+0x6>
    2a66:	00 d0       	rcall	.+0      	; 0x2a68 <lcd_4bit_send_int+0x8>
    2a68:	cd b7       	in	r28, 0x3d	; 61
    2a6a:	de b7       	in	r29, 0x3e	; 62
    2a6c:	9a 83       	std	Y+2, r25	; 0x02
    2a6e:	89 83       	std	Y+1, r24	; 0x01
    2a70:	6b 83       	std	Y+3, r22	; 0x03
	if(Num!=0)
    2a72:	8b 81       	ldd	r24, Y+3	; 0x03
    2a74:	88 23       	and	r24, r24
    2a76:	c1 f0       	breq	.+48     	; 0x2aa8 <lcd_4bit_send_int+0x48>
	{
		lcd_4bit_send_int(lcd,Num/10);
    2a78:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7a:	9a e0       	ldi	r25, 0x0A	; 10
    2a7c:	69 2f       	mov	r22, r25
    2a7e:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <__udivmodqi4>
    2a82:	28 2f       	mov	r18, r24
    2a84:	89 81       	ldd	r24, Y+1	; 0x01
    2a86:	9a 81       	ldd	r25, Y+2	; 0x02
    2a88:	62 2f       	mov	r22, r18
    2a8a:	0e 94 30 15 	call	0x2a60	; 0x2a60 <lcd_4bit_send_int>
		lcd_4bit_send_char_data(lcd,(Num%10)+48);
    2a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a90:	9a e0       	ldi	r25, 0x0A	; 10
    2a92:	69 2f       	mov	r22, r25
    2a94:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <__udivmodqi4>
    2a98:	89 2f       	mov	r24, r25
    2a9a:	28 2f       	mov	r18, r24
    2a9c:	20 5d       	subi	r18, 0xD0	; 208
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01
    2aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa2:	62 2f       	mov	r22, r18
    2aa4:	0e 94 04 14 	call	0x2808	; 0x2808 <lcd_4bit_send_char_data>
	}
}
    2aa8:	0f 90       	pop	r0
    2aaa:	0f 90       	pop	r0
    2aac:	0f 90       	pop	r0
    2aae:	0f 90       	pop	r0
    2ab0:	cf 91       	pop	r28
    2ab2:	df 91       	pop	r29
    2ab4:	08 95       	ret

00002ab6 <lcd_4bit_send_int_pos>:

STD_ReturnStatus lcd_4bit_send_int_pos(const chr_lcd_4bit_t *lcd,uint8 row,uint8 column,uint32 Num)
{
    2ab6:	df 93       	push	r29
    2ab8:	cf 93       	push	r28
    2aba:	cd b7       	in	r28, 0x3d	; 61
    2abc:	de b7       	in	r29, 0x3e	; 62
    2abe:	27 97       	sbiw	r28, 0x07	; 7
    2ac0:	0f b6       	in	r0, 0x3f	; 63
    2ac2:	f8 94       	cli
    2ac4:	de bf       	out	0x3e, r29	; 62
    2ac6:	0f be       	out	0x3f, r0	; 63
    2ac8:	cd bf       	out	0x3d, r28	; 61
    2aca:	9a 83       	std	Y+2, r25	; 0x02
    2acc:	89 83       	std	Y+1, r24	; 0x01
    2ace:	6b 83       	std	Y+3, r22	; 0x03
    2ad0:	4c 83       	std	Y+4, r20	; 0x04
    2ad2:	3e 83       	std	Y+6, r19	; 0x06
    2ad4:	2d 83       	std	Y+5, r18	; 0x05
	lcd_4bit_set_cursor(lcd,row,column);
    2ad6:	89 81       	ldd	r24, Y+1	; 0x01
    2ad8:	9a 81       	ldd	r25, Y+2	; 0x02
    2ada:	6b 81       	ldd	r22, Y+3	; 0x03
    2adc:	4c 81       	ldd	r20, Y+4	; 0x04
    2ade:	0e 94 15 1c 	call	0x382a	; 0x382a <lcd_4bit_set_cursor>
	if(Num!=0)
    2ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae6:	00 97       	sbiw	r24, 0x00	; 0
    2ae8:	e1 f0       	breq	.+56     	; 0x2b22 <lcd_4bit_send_int_pos+0x6c>
	{
		lcd_4bit_send_int(lcd,Num/10);
    2aea:	8d 81       	ldd	r24, Y+5	; 0x05
    2aec:	9e 81       	ldd	r25, Y+6	; 0x06
    2aee:	2a e0       	ldi	r18, 0x0A	; 10
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	b9 01       	movw	r22, r18
    2af4:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__udivmodhi4>
    2af8:	cb 01       	movw	r24, r22
    2afa:	28 2f       	mov	r18, r24
    2afc:	89 81       	ldd	r24, Y+1	; 0x01
    2afe:	9a 81       	ldd	r25, Y+2	; 0x02
    2b00:	62 2f       	mov	r22, r18
    2b02:	0e 94 30 15 	call	0x2a60	; 0x2a60 <lcd_4bit_send_int>
		lcd_4bit_send_char_data(lcd,(Num%10)+48);
    2b06:	8d 81       	ldd	r24, Y+5	; 0x05
    2b08:	9e 81       	ldd	r25, Y+6	; 0x06
    2b0a:	2a e0       	ldi	r18, 0x0A	; 10
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	b9 01       	movw	r22, r18
    2b10:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__udivmodhi4>
    2b14:	28 2f       	mov	r18, r24
    2b16:	20 5d       	subi	r18, 0xD0	; 208
    2b18:	89 81       	ldd	r24, Y+1	; 0x01
    2b1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b1c:	62 2f       	mov	r22, r18
    2b1e:	0e 94 04 14 	call	0x2808	; 0x2808 <lcd_4bit_send_char_data>
	}
}
    2b22:	27 96       	adiw	r28, 0x07	; 7
    2b24:	0f b6       	in	r0, 0x3f	; 63
    2b26:	f8 94       	cli
    2b28:	de bf       	out	0x3e, r29	; 62
    2b2a:	0f be       	out	0x3f, r0	; 63
    2b2c:	cd bf       	out	0x3d, r28	; 61
    2b2e:	cf 91       	pop	r28
    2b30:	df 91       	pop	r29
    2b32:	08 95       	ret

00002b34 <lcd_8bit_initialize>:
STD_ReturnStatus lcd_8bit_initialize(const chr_lcd_8bit_t *lcd)
{
    2b34:	df 93       	push	r29
    2b36:	cf 93       	push	r28
    2b38:	cd b7       	in	r28, 0x3d	; 61
    2b3a:	de b7       	in	r29, 0x3e	; 62
    2b3c:	ec 97       	sbiw	r28, 0x3c	; 60
    2b3e:	0f b6       	in	r0, 0x3f	; 63
    2b40:	f8 94       	cli
    2b42:	de bf       	out	0x3e, r29	; 62
    2b44:	0f be       	out	0x3f, r0	; 63
    2b46:	cd bf       	out	0x3d, r28	; 61
    2b48:	9c af       	std	Y+60, r25	; 0x3c
    2b4a:	8b af       	std	Y+59, r24	; 0x3b
	STD_ReturnStatus ret = E_OK;
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	8a af       	std	Y+58, r24	; 0x3a
	uint8 l_data_pins_counter = ZERO_INIT;
    2b50:	19 ae       	std	Y+57, r1	; 0x39
	if(NULL==lcd)
    2b52:	8b ad       	ldd	r24, Y+59	; 0x3b
    2b54:	9c ad       	ldd	r25, Y+60	; 0x3c
    2b56:	00 97       	sbiw	r24, 0x00	; 0
    2b58:	11 f4       	brne	.+4      	; 0x2b5e <lcd_8bit_initialize+0x2a>
	{
		ret = E_NOT_OK;
    2b5a:	1a ae       	std	Y+58, r1	; 0x3a
    2b5c:	ff c1       	rjmp	.+1022   	; 0x2f5c <lcd_8bit_initialize+0x428>
	}
	else
	{
		ret = gpio_pin_initialize(&(lcd->lcd_rs));
    2b5e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2b60:	9c ad       	ldd	r25, Y+60	; 0x3c
    2b62:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <gpio_pin_initialize>
    2b66:	8a af       	std	Y+58, r24	; 0x3a
		ret = gpio_pin_initialize(&(lcd->lcd_en));
    2b68:	8b ad       	ldd	r24, Y+59	; 0x3b
    2b6a:	9c ad       	ldd	r25, Y+60	; 0x3c
    2b6c:	01 96       	adiw	r24, 0x01	; 1
    2b6e:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <gpio_pin_initialize>
    2b72:	8a af       	std	Y+58, r24	; 0x3a
		for(l_data_pins_counter=0;l_data_pins_counter<8;l_data_pins_counter++)
    2b74:	19 ae       	std	Y+57, r1	; 0x39
    2b76:	0f c0       	rjmp	.+30     	; 0x2b96 <lcd_8bit_initialize+0x62>
		{
			gpio_pin_initialize(&(lcd->lcd_data[l_data_pins_counter]));
    2b78:	8b ad       	ldd	r24, Y+59	; 0x3b
    2b7a:	9c ad       	ldd	r25, Y+60	; 0x3c
    2b7c:	9c 01       	movw	r18, r24
    2b7e:	2e 5f       	subi	r18, 0xFE	; 254
    2b80:	3f 4f       	sbci	r19, 0xFF	; 255
    2b82:	89 ad       	ldd	r24, Y+57	; 0x39
    2b84:	88 2f       	mov	r24, r24
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	82 0f       	add	r24, r18
    2b8a:	93 1f       	adc	r25, r19
    2b8c:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <gpio_pin_initialize>
	}
	else
	{
		ret = gpio_pin_initialize(&(lcd->lcd_rs));
		ret = gpio_pin_initialize(&(lcd->lcd_en));
		for(l_data_pins_counter=0;l_data_pins_counter<8;l_data_pins_counter++)
    2b90:	89 ad       	ldd	r24, Y+57	; 0x39
    2b92:	8f 5f       	subi	r24, 0xFF	; 255
    2b94:	89 af       	std	Y+57, r24	; 0x39
    2b96:	89 ad       	ldd	r24, Y+57	; 0x39
    2b98:	88 30       	cpi	r24, 0x08	; 8
    2b9a:	70 f3       	brcs	.-36     	; 0x2b78 <lcd_8bit_initialize+0x44>
    2b9c:	80 e0       	ldi	r24, 0x00	; 0
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	a0 e2       	ldi	r26, 0x20	; 32
    2ba2:	b2 e4       	ldi	r27, 0x42	; 66
    2ba4:	8d ab       	std	Y+53, r24	; 0x35
    2ba6:	9e ab       	std	Y+54, r25	; 0x36
    2ba8:	af ab       	std	Y+55, r26	; 0x37
    2baa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bac:	6d a9       	ldd	r22, Y+53	; 0x35
    2bae:	7e a9       	ldd	r23, Y+54	; 0x36
    2bb0:	8f a9       	ldd	r24, Y+55	; 0x37
    2bb2:	98 ad       	ldd	r25, Y+56	; 0x38
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	4a ef       	ldi	r20, 0xFA	; 250
    2bba:	54 e4       	ldi	r21, 0x44	; 68
    2bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	89 ab       	std	Y+49, r24	; 0x31
    2bc6:	9a ab       	std	Y+50, r25	; 0x32
    2bc8:	ab ab       	std	Y+51, r26	; 0x33
    2bca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2bcc:	69 a9       	ldd	r22, Y+49	; 0x31
    2bce:	7a a9       	ldd	r23, Y+50	; 0x32
    2bd0:	8b a9       	ldd	r24, Y+51	; 0x33
    2bd2:	9c a9       	ldd	r25, Y+52	; 0x34
    2bd4:	20 e0       	ldi	r18, 0x00	; 0
    2bd6:	30 e0       	ldi	r19, 0x00	; 0
    2bd8:	40 e8       	ldi	r20, 0x80	; 128
    2bda:	5f e3       	ldi	r21, 0x3F	; 63
    2bdc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2be0:	88 23       	and	r24, r24
    2be2:	2c f4       	brge	.+10     	; 0x2bee <lcd_8bit_initialize+0xba>
		__ticks = 1;
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	98 ab       	std	Y+48, r25	; 0x30
    2bea:	8f a7       	std	Y+47, r24	; 0x2f
    2bec:	3f c0       	rjmp	.+126    	; 0x2c6c <lcd_8bit_initialize+0x138>
	else if (__tmp > 65535)
    2bee:	69 a9       	ldd	r22, Y+49	; 0x31
    2bf0:	7a a9       	ldd	r23, Y+50	; 0x32
    2bf2:	8b a9       	ldd	r24, Y+51	; 0x33
    2bf4:	9c a9       	ldd	r25, Y+52	; 0x34
    2bf6:	20 e0       	ldi	r18, 0x00	; 0
    2bf8:	3f ef       	ldi	r19, 0xFF	; 255
    2bfa:	4f e7       	ldi	r20, 0x7F	; 127
    2bfc:	57 e4       	ldi	r21, 0x47	; 71
    2bfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c02:	18 16       	cp	r1, r24
    2c04:	4c f5       	brge	.+82     	; 0x2c58 <lcd_8bit_initialize+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c06:	6d a9       	ldd	r22, Y+53	; 0x35
    2c08:	7e a9       	ldd	r23, Y+54	; 0x36
    2c0a:	8f a9       	ldd	r24, Y+55	; 0x37
    2c0c:	98 ad       	ldd	r25, Y+56	; 0x38
    2c0e:	20 e0       	ldi	r18, 0x00	; 0
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	40 e2       	ldi	r20, 0x20	; 32
    2c14:	51 e4       	ldi	r21, 0x41	; 65
    2c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	bc 01       	movw	r22, r24
    2c20:	cd 01       	movw	r24, r26
    2c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c26:	dc 01       	movw	r26, r24
    2c28:	cb 01       	movw	r24, r22
    2c2a:	98 ab       	std	Y+48, r25	; 0x30
    2c2c:	8f a7       	std	Y+47, r24	; 0x2f
    2c2e:	0f c0       	rjmp	.+30     	; 0x2c4e <lcd_8bit_initialize+0x11a>
    2c30:	88 ec       	ldi	r24, 0xC8	; 200
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	9e a7       	std	Y+46, r25	; 0x2e
    2c36:	8d a7       	std	Y+45, r24	; 0x2d
    2c38:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c3a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c3c:	01 97       	sbiw	r24, 0x01	; 1
    2c3e:	f1 f7       	brne	.-4      	; 0x2c3c <lcd_8bit_initialize+0x108>
    2c40:	9e a7       	std	Y+46, r25	; 0x2e
    2c42:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c44:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c46:	98 a9       	ldd	r25, Y+48	; 0x30
    2c48:	01 97       	sbiw	r24, 0x01	; 1
    2c4a:	98 ab       	std	Y+48, r25	; 0x30
    2c4c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c4e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c50:	98 a9       	ldd	r25, Y+48	; 0x30
    2c52:	00 97       	sbiw	r24, 0x00	; 0
    2c54:	69 f7       	brne	.-38     	; 0x2c30 <lcd_8bit_initialize+0xfc>
    2c56:	14 c0       	rjmp	.+40     	; 0x2c80 <lcd_8bit_initialize+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c58:	69 a9       	ldd	r22, Y+49	; 0x31
    2c5a:	7a a9       	ldd	r23, Y+50	; 0x32
    2c5c:	8b a9       	ldd	r24, Y+51	; 0x33
    2c5e:	9c a9       	ldd	r25, Y+52	; 0x34
    2c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c64:	dc 01       	movw	r26, r24
    2c66:	cb 01       	movw	r24, r22
    2c68:	98 ab       	std	Y+48, r25	; 0x30
    2c6a:	8f a7       	std	Y+47, r24	; 0x2f
    2c6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c6e:	98 a9       	ldd	r25, Y+48	; 0x30
    2c70:	9c a7       	std	Y+44, r25	; 0x2c
    2c72:	8b a7       	std	Y+43, r24	; 0x2b
    2c74:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c76:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c78:	01 97       	sbiw	r24, 0x01	; 1
    2c7a:	f1 f7       	brne	.-4      	; 0x2c78 <lcd_8bit_initialize+0x144>
    2c7c:	9c a7       	std	Y+44, r25	; 0x2c
    2c7e:	8b a7       	std	Y+43, r24	; 0x2b
		{
			gpio_pin_initialize(&(lcd->lcd_data[l_data_pins_counter]));
		}
		_delay_ms(40);
		ret = lcd_8bit_send_command(lcd,0x38);
    2c80:	8b ad       	ldd	r24, Y+59	; 0x3b
    2c82:	9c ad       	ldd	r25, Y+60	; 0x3c
    2c84:	68 e3       	ldi	r22, 0x38	; 56
    2c86:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <lcd_8bit_send_command>
    2c8a:	8a af       	std	Y+58, r24	; 0x3a
    2c8c:	80 e0       	ldi	r24, 0x00	; 0
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	a0 e8       	ldi	r26, 0x80	; 128
    2c92:	bf e3       	ldi	r27, 0x3F	; 63
    2c94:	8f a3       	std	Y+39, r24	; 0x27
    2c96:	98 a7       	std	Y+40, r25	; 0x28
    2c98:	a9 a7       	std	Y+41, r26	; 0x29
    2c9a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c9c:	6f a1       	ldd	r22, Y+39	; 0x27
    2c9e:	78 a5       	ldd	r23, Y+40	; 0x28
    2ca0:	89 a5       	ldd	r24, Y+41	; 0x29
    2ca2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	4a ef       	ldi	r20, 0xFA	; 250
    2caa:	54 e4       	ldi	r21, 0x44	; 68
    2cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	8b a3       	std	Y+35, r24	; 0x23
    2cb6:	9c a3       	std	Y+36, r25	; 0x24
    2cb8:	ad a3       	std	Y+37, r26	; 0x25
    2cba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2cbc:	6b a1       	ldd	r22, Y+35	; 0x23
    2cbe:	7c a1       	ldd	r23, Y+36	; 0x24
    2cc0:	8d a1       	ldd	r24, Y+37	; 0x25
    2cc2:	9e a1       	ldd	r25, Y+38	; 0x26
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	40 e8       	ldi	r20, 0x80	; 128
    2cca:	5f e3       	ldi	r21, 0x3F	; 63
    2ccc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cd0:	88 23       	and	r24, r24
    2cd2:	2c f4       	brge	.+10     	; 0x2cde <lcd_8bit_initialize+0x1aa>
		__ticks = 1;
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	9a a3       	std	Y+34, r25	; 0x22
    2cda:	89 a3       	std	Y+33, r24	; 0x21
    2cdc:	3f c0       	rjmp	.+126    	; 0x2d5c <lcd_8bit_initialize+0x228>
	else if (__tmp > 65535)
    2cde:	6b a1       	ldd	r22, Y+35	; 0x23
    2ce0:	7c a1       	ldd	r23, Y+36	; 0x24
    2ce2:	8d a1       	ldd	r24, Y+37	; 0x25
    2ce4:	9e a1       	ldd	r25, Y+38	; 0x26
    2ce6:	20 e0       	ldi	r18, 0x00	; 0
    2ce8:	3f ef       	ldi	r19, 0xFF	; 255
    2cea:	4f e7       	ldi	r20, 0x7F	; 127
    2cec:	57 e4       	ldi	r21, 0x47	; 71
    2cee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cf2:	18 16       	cp	r1, r24
    2cf4:	4c f5       	brge	.+82     	; 0x2d48 <lcd_8bit_initialize+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cf6:	6f a1       	ldd	r22, Y+39	; 0x27
    2cf8:	78 a5       	ldd	r23, Y+40	; 0x28
    2cfa:	89 a5       	ldd	r24, Y+41	; 0x29
    2cfc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	40 e2       	ldi	r20, 0x20	; 32
    2d04:	51 e4       	ldi	r21, 0x41	; 65
    2d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	bc 01       	movw	r22, r24
    2d10:	cd 01       	movw	r24, r26
    2d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	9a a3       	std	Y+34, r25	; 0x22
    2d1c:	89 a3       	std	Y+33, r24	; 0x21
    2d1e:	0f c0       	rjmp	.+30     	; 0x2d3e <lcd_8bit_initialize+0x20a>
    2d20:	88 ec       	ldi	r24, 0xC8	; 200
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	98 a3       	std	Y+32, r25	; 0x20
    2d26:	8f 8f       	std	Y+31, r24	; 0x1f
    2d28:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d2a:	98 a1       	ldd	r25, Y+32	; 0x20
    2d2c:	01 97       	sbiw	r24, 0x01	; 1
    2d2e:	f1 f7       	brne	.-4      	; 0x2d2c <lcd_8bit_initialize+0x1f8>
    2d30:	98 a3       	std	Y+32, r25	; 0x20
    2d32:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d34:	89 a1       	ldd	r24, Y+33	; 0x21
    2d36:	9a a1       	ldd	r25, Y+34	; 0x22
    2d38:	01 97       	sbiw	r24, 0x01	; 1
    2d3a:	9a a3       	std	Y+34, r25	; 0x22
    2d3c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d3e:	89 a1       	ldd	r24, Y+33	; 0x21
    2d40:	9a a1       	ldd	r25, Y+34	; 0x22
    2d42:	00 97       	sbiw	r24, 0x00	; 0
    2d44:	69 f7       	brne	.-38     	; 0x2d20 <lcd_8bit_initialize+0x1ec>
    2d46:	14 c0       	rjmp	.+40     	; 0x2d70 <lcd_8bit_initialize+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d48:	6b a1       	ldd	r22, Y+35	; 0x23
    2d4a:	7c a1       	ldd	r23, Y+36	; 0x24
    2d4c:	8d a1       	ldd	r24, Y+37	; 0x25
    2d4e:	9e a1       	ldd	r25, Y+38	; 0x26
    2d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	9a a3       	std	Y+34, r25	; 0x22
    2d5a:	89 a3       	std	Y+33, r24	; 0x21
    2d5c:	89 a1       	ldd	r24, Y+33	; 0x21
    2d5e:	9a a1       	ldd	r25, Y+34	; 0x22
    2d60:	9e 8f       	std	Y+30, r25	; 0x1e
    2d62:	8d 8f       	std	Y+29, r24	; 0x1d
    2d64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d66:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d68:	01 97       	sbiw	r24, 0x01	; 1
    2d6a:	f1 f7       	brne	.-4      	; 0x2d68 <lcd_8bit_initialize+0x234>
    2d6c:	9e 8f       	std	Y+30, r25	; 0x1e
    2d6e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		ret = lcd_8bit_send_command(lcd,0x0C);
    2d70:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d72:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d74:	6c e0       	ldi	r22, 0x0C	; 12
    2d76:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <lcd_8bit_send_command>
    2d7a:	8a af       	std	Y+58, r24	; 0x3a
    2d7c:	80 e0       	ldi	r24, 0x00	; 0
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	a0 e0       	ldi	r26, 0x00	; 0
    2d82:	b0 e4       	ldi	r27, 0x40	; 64
    2d84:	89 8f       	std	Y+25, r24	; 0x19
    2d86:	9a 8f       	std	Y+26, r25	; 0x1a
    2d88:	ab 8f       	std	Y+27, r26	; 0x1b
    2d8a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d8c:	69 8d       	ldd	r22, Y+25	; 0x19
    2d8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d94:	20 e0       	ldi	r18, 0x00	; 0
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	4a ef       	ldi	r20, 0xFA	; 250
    2d9a:	54 e4       	ldi	r21, 0x44	; 68
    2d9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da0:	dc 01       	movw	r26, r24
    2da2:	cb 01       	movw	r24, r22
    2da4:	8d 8b       	std	Y+21, r24	; 0x15
    2da6:	9e 8b       	std	Y+22, r25	; 0x16
    2da8:	af 8b       	std	Y+23, r26	; 0x17
    2daa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dac:	6d 89       	ldd	r22, Y+21	; 0x15
    2dae:	7e 89       	ldd	r23, Y+22	; 0x16
    2db0:	8f 89       	ldd	r24, Y+23	; 0x17
    2db2:	98 8d       	ldd	r25, Y+24	; 0x18
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	40 e8       	ldi	r20, 0x80	; 128
    2dba:	5f e3       	ldi	r21, 0x3F	; 63
    2dbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dc0:	88 23       	and	r24, r24
    2dc2:	2c f4       	brge	.+10     	; 0x2dce <lcd_8bit_initialize+0x29a>
		__ticks = 1;
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	9c 8b       	std	Y+20, r25	; 0x14
    2dca:	8b 8b       	std	Y+19, r24	; 0x13
    2dcc:	3f c0       	rjmp	.+126    	; 0x2e4c <lcd_8bit_initialize+0x318>
	else if (__tmp > 65535)
    2dce:	6d 89       	ldd	r22, Y+21	; 0x15
    2dd0:	7e 89       	ldd	r23, Y+22	; 0x16
    2dd2:	8f 89       	ldd	r24, Y+23	; 0x17
    2dd4:	98 8d       	ldd	r25, Y+24	; 0x18
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	3f ef       	ldi	r19, 0xFF	; 255
    2dda:	4f e7       	ldi	r20, 0x7F	; 127
    2ddc:	57 e4       	ldi	r21, 0x47	; 71
    2dde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2de2:	18 16       	cp	r1, r24
    2de4:	4c f5       	brge	.+82     	; 0x2e38 <lcd_8bit_initialize+0x304>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2de6:	69 8d       	ldd	r22, Y+25	; 0x19
    2de8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	40 e2       	ldi	r20, 0x20	; 32
    2df4:	51 e4       	ldi	r21, 0x41	; 65
    2df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	cb 01       	movw	r24, r22
    2dfe:	bc 01       	movw	r22, r24
    2e00:	cd 01       	movw	r24, r26
    2e02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e06:	dc 01       	movw	r26, r24
    2e08:	cb 01       	movw	r24, r22
    2e0a:	9c 8b       	std	Y+20, r25	; 0x14
    2e0c:	8b 8b       	std	Y+19, r24	; 0x13
    2e0e:	0f c0       	rjmp	.+30     	; 0x2e2e <lcd_8bit_initialize+0x2fa>
    2e10:	88 ec       	ldi	r24, 0xC8	; 200
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	9a 8b       	std	Y+18, r25	; 0x12
    2e16:	89 8b       	std	Y+17, r24	; 0x11
    2e18:	89 89       	ldd	r24, Y+17	; 0x11
    2e1a:	9a 89       	ldd	r25, Y+18	; 0x12
    2e1c:	01 97       	sbiw	r24, 0x01	; 1
    2e1e:	f1 f7       	brne	.-4      	; 0x2e1c <lcd_8bit_initialize+0x2e8>
    2e20:	9a 8b       	std	Y+18, r25	; 0x12
    2e22:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e24:	8b 89       	ldd	r24, Y+19	; 0x13
    2e26:	9c 89       	ldd	r25, Y+20	; 0x14
    2e28:	01 97       	sbiw	r24, 0x01	; 1
    2e2a:	9c 8b       	std	Y+20, r25	; 0x14
    2e2c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e2e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e30:	9c 89       	ldd	r25, Y+20	; 0x14
    2e32:	00 97       	sbiw	r24, 0x00	; 0
    2e34:	69 f7       	brne	.-38     	; 0x2e10 <lcd_8bit_initialize+0x2dc>
    2e36:	14 c0       	rjmp	.+40     	; 0x2e60 <lcd_8bit_initialize+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e38:	6d 89       	ldd	r22, Y+21	; 0x15
    2e3a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e3c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e3e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e44:	dc 01       	movw	r26, r24
    2e46:	cb 01       	movw	r24, r22
    2e48:	9c 8b       	std	Y+20, r25	; 0x14
    2e4a:	8b 8b       	std	Y+19, r24	; 0x13
    2e4c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e4e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e50:	98 8b       	std	Y+16, r25	; 0x10
    2e52:	8f 87       	std	Y+15, r24	; 0x0f
    2e54:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e56:	98 89       	ldd	r25, Y+16	; 0x10
    2e58:	01 97       	sbiw	r24, 0x01	; 1
    2e5a:	f1 f7       	brne	.-4      	; 0x2e58 <lcd_8bit_initialize+0x324>
    2e5c:	98 8b       	std	Y+16, r25	; 0x10
    2e5e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		//ret = lcd_8bit_send_command(lcd,_LCD_8BIT_MODE_2_LINE);
		ret = lcd_8bit_send_command(lcd, _LCD_CLEAR);
    2e60:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e62:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e64:	61 e0       	ldi	r22, 0x01	; 1
    2e66:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <lcd_8bit_send_command>
    2e6a:	8a af       	std	Y+58, r24	; 0x3a
    2e6c:	80 e0       	ldi	r24, 0x00	; 0
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	a0 e0       	ldi	r26, 0x00	; 0
    2e72:	b0 e4       	ldi	r27, 0x40	; 64
    2e74:	8b 87       	std	Y+11, r24	; 0x0b
    2e76:	9c 87       	std	Y+12, r25	; 0x0c
    2e78:	ad 87       	std	Y+13, r26	; 0x0d
    2e7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e80:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e82:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	4a ef       	ldi	r20, 0xFA	; 250
    2e8a:	54 e4       	ldi	r21, 0x44	; 68
    2e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	8f 83       	std	Y+7, r24	; 0x07
    2e96:	98 87       	std	Y+8, r25	; 0x08
    2e98:	a9 87       	std	Y+9, r26	; 0x09
    2e9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e9e:	78 85       	ldd	r23, Y+8	; 0x08
    2ea0:	89 85       	ldd	r24, Y+9	; 0x09
    2ea2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ea4:	20 e0       	ldi	r18, 0x00	; 0
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	40 e8       	ldi	r20, 0x80	; 128
    2eaa:	5f e3       	ldi	r21, 0x3F	; 63
    2eac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2eb0:	88 23       	and	r24, r24
    2eb2:	2c f4       	brge	.+10     	; 0x2ebe <lcd_8bit_initialize+0x38a>
		__ticks = 1;
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	9e 83       	std	Y+6, r25	; 0x06
    2eba:	8d 83       	std	Y+5, r24	; 0x05
    2ebc:	3f c0       	rjmp	.+126    	; 0x2f3c <lcd_8bit_initialize+0x408>
	else if (__tmp > 65535)
    2ebe:	6f 81       	ldd	r22, Y+7	; 0x07
    2ec0:	78 85       	ldd	r23, Y+8	; 0x08
    2ec2:	89 85       	ldd	r24, Y+9	; 0x09
    2ec4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec6:	20 e0       	ldi	r18, 0x00	; 0
    2ec8:	3f ef       	ldi	r19, 0xFF	; 255
    2eca:	4f e7       	ldi	r20, 0x7F	; 127
    2ecc:	57 e4       	ldi	r21, 0x47	; 71
    2ece:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ed2:	18 16       	cp	r1, r24
    2ed4:	4c f5       	brge	.+82     	; 0x2f28 <lcd_8bit_initialize+0x3f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ed8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eda:	8d 85       	ldd	r24, Y+13	; 0x0d
    2edc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ede:	20 e0       	ldi	r18, 0x00	; 0
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	40 e2       	ldi	r20, 0x20	; 32
    2ee4:	51 e4       	ldi	r21, 0x41	; 65
    2ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eea:	dc 01       	movw	r26, r24
    2eec:	cb 01       	movw	r24, r22
    2eee:	bc 01       	movw	r22, r24
    2ef0:	cd 01       	movw	r24, r26
    2ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	9e 83       	std	Y+6, r25	; 0x06
    2efc:	8d 83       	std	Y+5, r24	; 0x05
    2efe:	0f c0       	rjmp	.+30     	; 0x2f1e <lcd_8bit_initialize+0x3ea>
    2f00:	88 ec       	ldi	r24, 0xC8	; 200
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	9c 83       	std	Y+4, r25	; 0x04
    2f06:	8b 83       	std	Y+3, r24	; 0x03
    2f08:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f0c:	01 97       	sbiw	r24, 0x01	; 1
    2f0e:	f1 f7       	brne	.-4      	; 0x2f0c <lcd_8bit_initialize+0x3d8>
    2f10:	9c 83       	std	Y+4, r25	; 0x04
    2f12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f14:	8d 81       	ldd	r24, Y+5	; 0x05
    2f16:	9e 81       	ldd	r25, Y+6	; 0x06
    2f18:	01 97       	sbiw	r24, 0x01	; 1
    2f1a:	9e 83       	std	Y+6, r25	; 0x06
    2f1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f20:	9e 81       	ldd	r25, Y+6	; 0x06
    2f22:	00 97       	sbiw	r24, 0x00	; 0
    2f24:	69 f7       	brne	.-38     	; 0x2f00 <lcd_8bit_initialize+0x3cc>
    2f26:	14 c0       	rjmp	.+40     	; 0x2f50 <lcd_8bit_initialize+0x41c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f28:	6f 81       	ldd	r22, Y+7	; 0x07
    2f2a:	78 85       	ldd	r23, Y+8	; 0x08
    2f2c:	89 85       	ldd	r24, Y+9	; 0x09
    2f2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	9e 83       	std	Y+6, r25	; 0x06
    2f3a:	8d 83       	std	Y+5, r24	; 0x05
    2f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f40:	9a 83       	std	Y+2, r25	; 0x02
    2f42:	89 83       	std	Y+1, r24	; 0x01
    2f44:	89 81       	ldd	r24, Y+1	; 0x01
    2f46:	9a 81       	ldd	r25, Y+2	; 0x02
    2f48:	01 97       	sbiw	r24, 0x01	; 1
    2f4a:	f1 f7       	brne	.-4      	; 0x2f48 <lcd_8bit_initialize+0x414>
    2f4c:	9a 83       	std	Y+2, r25	; 0x02
    2f4e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		//ret = lcd_8bit_send_command(lcd, _LCD_RETURN_HOME);
		//ret = lcd_8bit_send_command(lcd, _LCD_ENTRY_MODE);
		//ret = lcd_8bit_send_command(lcd, _LCD_CURSER_OFF_DISPLAY_ON);
		//ret = lcd_8bit_send_command(lcd,_LCD_8BIT_MODE_2_LINE);
		ret = lcd_8bit_send_command(lcd,0x80);
    2f50:	8b ad       	ldd	r24, Y+59	; 0x3b
    2f52:	9c ad       	ldd	r25, Y+60	; 0x3c
    2f54:	60 e8       	ldi	r22, 0x80	; 128
    2f56:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <lcd_8bit_send_command>
    2f5a:	8a af       	std	Y+58, r24	; 0x3a
		//ret = lcd_8bit_send_command(lcd,0x04);
	}
	return ret;
    2f5c:	8a ad       	ldd	r24, Y+58	; 0x3a
}
    2f5e:	ec 96       	adiw	r28, 0x3c	; 60
    2f60:	0f b6       	in	r0, 0x3f	; 63
    2f62:	f8 94       	cli
    2f64:	de bf       	out	0x3e, r29	; 62
    2f66:	0f be       	out	0x3f, r0	; 63
    2f68:	cd bf       	out	0x3d, r28	; 61
    2f6a:	cf 91       	pop	r28
    2f6c:	df 91       	pop	r29
    2f6e:	08 95       	ret

00002f70 <lcd_8bit_send_command>:
STD_ReturnStatus lcd_8bit_send_command(const chr_lcd_8bit_t *lcd,uint8 command)
{
    2f70:	df 93       	push	r29
    2f72:	cf 93       	push	r28
    2f74:	00 d0       	rcall	.+0      	; 0x2f76 <lcd_8bit_send_command+0x6>
    2f76:	00 d0       	rcall	.+0      	; 0x2f78 <lcd_8bit_send_command+0x8>
    2f78:	0f 92       	push	r0
    2f7a:	cd b7       	in	r28, 0x3d	; 61
    2f7c:	de b7       	in	r29, 0x3e	; 62
    2f7e:	9c 83       	std	Y+4, r25	; 0x04
    2f80:	8b 83       	std	Y+3, r24	; 0x03
    2f82:	6d 83       	std	Y+5, r22	; 0x05
	STD_ReturnStatus ret = E_OK;
    2f84:	81 e0       	ldi	r24, 0x01	; 1
    2f86:	8a 83       	std	Y+2, r24	; 0x02
	uint8 l_pin_counter=ZERO_INIT;
    2f88:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==lcd)
    2f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f8e:	00 97       	sbiw	r24, 0x00	; 0
    2f90:	11 f4       	brne	.+4      	; 0x2f96 <lcd_8bit_send_command+0x26>
	{
		ret = E_NOT_OK;
    2f92:	1a 82       	std	Y+2, r1	; 0x02
    2f94:	32 c0       	rjmp	.+100    	; 0x2ffa <lcd_8bit_send_command+0x8a>
	}
	else
	{
		ret = gpio_pin_write_logic(&(lcd->lcd_rs),GPIO_LOW);
    2f96:	8b 81       	ldd	r24, Y+3	; 0x03
    2f98:	9c 81       	ldd	r25, Y+4	; 0x04
    2f9a:	60 e0       	ldi	r22, 0x00	; 0
    2f9c:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
    2fa0:	8a 83       	std	Y+2, r24	; 0x02
		for(l_pin_counter=0;l_pin_counter<8;++l_pin_counter)
    2fa2:	19 82       	std	Y+1, r1	; 0x01
    2fa4:	22 c0       	rjmp	.+68     	; 0x2fea <lcd_8bit_send_command+0x7a>
		{
			ret = gpio_pin_write_logic(&(lcd->lcd_data[l_pin_counter]), (command>>l_pin_counter) & (uint8)0x01);
    2fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa8:	9c 81       	ldd	r25, Y+4	; 0x04
    2faa:	9c 01       	movw	r18, r24
    2fac:	2e 5f       	subi	r18, 0xFE	; 254
    2fae:	3f 4f       	sbci	r19, 0xFF	; 255
    2fb0:	89 81       	ldd	r24, Y+1	; 0x01
    2fb2:	88 2f       	mov	r24, r24
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	a9 01       	movw	r20, r18
    2fb8:	48 0f       	add	r20, r24
    2fba:	59 1f       	adc	r21, r25
    2fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    2fbe:	28 2f       	mov	r18, r24
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	89 81       	ldd	r24, Y+1	; 0x01
    2fc4:	88 2f       	mov	r24, r24
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	b9 01       	movw	r22, r18
    2fca:	02 c0       	rjmp	.+4      	; 0x2fd0 <lcd_8bit_send_command+0x60>
    2fcc:	75 95       	asr	r23
    2fce:	67 95       	ror	r22
    2fd0:	8a 95       	dec	r24
    2fd2:	e2 f7       	brpl	.-8      	; 0x2fcc <lcd_8bit_send_command+0x5c>
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	28 2f       	mov	r18, r24
    2fd8:	21 70       	andi	r18, 0x01	; 1
    2fda:	ca 01       	movw	r24, r20
    2fdc:	62 2f       	mov	r22, r18
    2fde:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
    2fe2:	8a 83       	std	Y+2, r24	; 0x02
		ret = E_NOT_OK;
	}
	else
	{
		ret = gpio_pin_write_logic(&(lcd->lcd_rs),GPIO_LOW);
		for(l_pin_counter=0;l_pin_counter<8;++l_pin_counter)
    2fe4:	89 81       	ldd	r24, Y+1	; 0x01
    2fe6:	8f 5f       	subi	r24, 0xFF	; 255
    2fe8:	89 83       	std	Y+1, r24	; 0x01
    2fea:	89 81       	ldd	r24, Y+1	; 0x01
    2fec:	88 30       	cpi	r24, 0x08	; 8
    2fee:	d8 f2       	brcs	.-74     	; 0x2fa6 <lcd_8bit_send_command+0x36>
		{
			ret = gpio_pin_write_logic(&(lcd->lcd_data[l_pin_counter]), (command>>l_pin_counter) & (uint8)0x01);
		}
		ret = lcd_8bit_send_enable(lcd);
    2ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff4:	0e 94 3d 1b 	call	0x367a	; 0x367a <lcd_8bit_send_enable>
    2ff8:	8a 83       	std	Y+2, r24	; 0x02
	}
	return ret;
    2ffa:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2ffc:	0f 90       	pop	r0
    2ffe:	0f 90       	pop	r0
    3000:	0f 90       	pop	r0
    3002:	0f 90       	pop	r0
    3004:	0f 90       	pop	r0
    3006:	cf 91       	pop	r28
    3008:	df 91       	pop	r29
    300a:	08 95       	ret

0000300c <lcd_8bit_send_char_data>:
STD_ReturnStatus lcd_8bit_send_char_data(const chr_lcd_8bit_t *lcd,uint8 data)
{
    300c:	df 93       	push	r29
    300e:	cf 93       	push	r28
    3010:	00 d0       	rcall	.+0      	; 0x3012 <lcd_8bit_send_char_data+0x6>
    3012:	00 d0       	rcall	.+0      	; 0x3014 <lcd_8bit_send_char_data+0x8>
    3014:	0f 92       	push	r0
    3016:	cd b7       	in	r28, 0x3d	; 61
    3018:	de b7       	in	r29, 0x3e	; 62
    301a:	9c 83       	std	Y+4, r25	; 0x04
    301c:	8b 83       	std	Y+3, r24	; 0x03
    301e:	6d 83       	std	Y+5, r22	; 0x05
	STD_ReturnStatus ret = E_OK;
    3020:	81 e0       	ldi	r24, 0x01	; 1
    3022:	8a 83       	std	Y+2, r24	; 0x02
	uint8 l_pin_counter=ZERO_INIT;
    3024:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==lcd)
    3026:	8b 81       	ldd	r24, Y+3	; 0x03
    3028:	9c 81       	ldd	r25, Y+4	; 0x04
    302a:	00 97       	sbiw	r24, 0x00	; 0
    302c:	11 f4       	brne	.+4      	; 0x3032 <lcd_8bit_send_char_data+0x26>
	{
		ret = E_NOT_OK;
    302e:	1a 82       	std	Y+2, r1	; 0x02
    3030:	32 c0       	rjmp	.+100    	; 0x3096 <lcd_8bit_send_char_data+0x8a>
	}
	else
	{
		ret = gpio_pin_write_logic(&(lcd->lcd_rs),GPIO_HIGH);
    3032:	8b 81       	ldd	r24, Y+3	; 0x03
    3034:	9c 81       	ldd	r25, Y+4	; 0x04
    3036:	61 e0       	ldi	r22, 0x01	; 1
    3038:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
    303c:	8a 83       	std	Y+2, r24	; 0x02
		for(l_pin_counter=ZERO_INIT;l_pin_counter<8;++l_pin_counter)
    303e:	19 82       	std	Y+1, r1	; 0x01
    3040:	22 c0       	rjmp	.+68     	; 0x3086 <lcd_8bit_send_char_data+0x7a>
		{
			ret = gpio_pin_write_logic(&(lcd->lcd_data[l_pin_counter]), (data>>l_pin_counter) & (uint8)0x01);
    3042:	8b 81       	ldd	r24, Y+3	; 0x03
    3044:	9c 81       	ldd	r25, Y+4	; 0x04
    3046:	9c 01       	movw	r18, r24
    3048:	2e 5f       	subi	r18, 0xFE	; 254
    304a:	3f 4f       	sbci	r19, 0xFF	; 255
    304c:	89 81       	ldd	r24, Y+1	; 0x01
    304e:	88 2f       	mov	r24, r24
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	a9 01       	movw	r20, r18
    3054:	48 0f       	add	r20, r24
    3056:	59 1f       	adc	r21, r25
    3058:	8d 81       	ldd	r24, Y+5	; 0x05
    305a:	28 2f       	mov	r18, r24
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	89 81       	ldd	r24, Y+1	; 0x01
    3060:	88 2f       	mov	r24, r24
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	b9 01       	movw	r22, r18
    3066:	02 c0       	rjmp	.+4      	; 0x306c <lcd_8bit_send_char_data+0x60>
    3068:	75 95       	asr	r23
    306a:	67 95       	ror	r22
    306c:	8a 95       	dec	r24
    306e:	e2 f7       	brpl	.-8      	; 0x3068 <lcd_8bit_send_char_data+0x5c>
    3070:	cb 01       	movw	r24, r22
    3072:	28 2f       	mov	r18, r24
    3074:	21 70       	andi	r18, 0x01	; 1
    3076:	ca 01       	movw	r24, r20
    3078:	62 2f       	mov	r22, r18
    307a:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
    307e:	8a 83       	std	Y+2, r24	; 0x02
		ret = E_NOT_OK;
	}
	else
	{
		ret = gpio_pin_write_logic(&(lcd->lcd_rs),GPIO_HIGH);
		for(l_pin_counter=ZERO_INIT;l_pin_counter<8;++l_pin_counter)
    3080:	89 81       	ldd	r24, Y+1	; 0x01
    3082:	8f 5f       	subi	r24, 0xFF	; 255
    3084:	89 83       	std	Y+1, r24	; 0x01
    3086:	89 81       	ldd	r24, Y+1	; 0x01
    3088:	88 30       	cpi	r24, 0x08	; 8
    308a:	d8 f2       	brcs	.-74     	; 0x3042 <lcd_8bit_send_char_data+0x36>
		{
			ret = gpio_pin_write_logic(&(lcd->lcd_data[l_pin_counter]), (data>>l_pin_counter) & (uint8)0x01);
		}
		ret = lcd_8bit_send_enable(lcd);
    308c:	8b 81       	ldd	r24, Y+3	; 0x03
    308e:	9c 81       	ldd	r25, Y+4	; 0x04
    3090:	0e 94 3d 1b 	call	0x367a	; 0x367a <lcd_8bit_send_enable>
    3094:	8a 83       	std	Y+2, r24	; 0x02
	}
	return ret;
    3096:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3098:	0f 90       	pop	r0
    309a:	0f 90       	pop	r0
    309c:	0f 90       	pop	r0
    309e:	0f 90       	pop	r0
    30a0:	0f 90       	pop	r0
    30a2:	cf 91       	pop	r28
    30a4:	df 91       	pop	r29
    30a6:	08 95       	ret

000030a8 <lcd_8bit_send_char_data_pos>:


STD_ReturnStatus lcd_8bit_send_char_data_pos(const chr_lcd_8bit_t *lcd,uint8 row,uint8 column,uint8 data)
{
    30a8:	df 93       	push	r29
    30aa:	cf 93       	push	r28
    30ac:	00 d0       	rcall	.+0      	; 0x30ae <lcd_8bit_send_char_data_pos+0x6>
    30ae:	00 d0       	rcall	.+0      	; 0x30b0 <lcd_8bit_send_char_data_pos+0x8>
    30b0:	00 d0       	rcall	.+0      	; 0x30b2 <lcd_8bit_send_char_data_pos+0xa>
    30b2:	cd b7       	in	r28, 0x3d	; 61
    30b4:	de b7       	in	r29, 0x3e	; 62
    30b6:	9b 83       	std	Y+3, r25	; 0x03
    30b8:	8a 83       	std	Y+2, r24	; 0x02
    30ba:	6c 83       	std	Y+4, r22	; 0x04
    30bc:	4d 83       	std	Y+5, r20	; 0x05
    30be:	2e 83       	std	Y+6, r18	; 0x06
	STD_ReturnStatus ret = E_OK;
    30c0:	81 e0       	ldi	r24, 0x01	; 1
    30c2:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==lcd)
    30c4:	8a 81       	ldd	r24, Y+2	; 0x02
    30c6:	9b 81       	ldd	r25, Y+3	; 0x03
    30c8:	00 97       	sbiw	r24, 0x00	; 0
    30ca:	11 f4       	brne	.+4      	; 0x30d0 <lcd_8bit_send_char_data_pos+0x28>
	{
		ret = E_NOT_OK;
    30cc:	19 82       	std	Y+1, r1	; 0x01
    30ce:	0c c0       	rjmp	.+24     	; 0x30e8 <lcd_8bit_send_char_data_pos+0x40>
	}
	else
	{
		lcd_8bit_set_cursor(lcd,row,column);
    30d0:	8a 81       	ldd	r24, Y+2	; 0x02
    30d2:	9b 81       	ldd	r25, Y+3	; 0x03
    30d4:	6c 81       	ldd	r22, Y+4	; 0x04
    30d6:	4d 81       	ldd	r20, Y+5	; 0x05
    30d8:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <lcd_8bit_set_cursor>
		ret = lcd_8bit_send_char_data(lcd,data);
    30dc:	8a 81       	ldd	r24, Y+2	; 0x02
    30de:	9b 81       	ldd	r25, Y+3	; 0x03
    30e0:	6e 81       	ldd	r22, Y+6	; 0x06
    30e2:	0e 94 06 18 	call	0x300c	; 0x300c <lcd_8bit_send_char_data>
    30e6:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    30e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    30ea:	26 96       	adiw	r28, 0x06	; 6
    30ec:	0f b6       	in	r0, 0x3f	; 63
    30ee:	f8 94       	cli
    30f0:	de bf       	out	0x3e, r29	; 62
    30f2:	0f be       	out	0x3f, r0	; 63
    30f4:	cd bf       	out	0x3d, r28	; 61
    30f6:	cf 91       	pop	r28
    30f8:	df 91       	pop	r29
    30fa:	08 95       	ret

000030fc <lcd_8bit_send_string>:
STD_ReturnStatus lcd_8bit_send_string(const chr_lcd_8bit_t *lcd,uint8* str)
{
    30fc:	df 93       	push	r29
    30fe:	cf 93       	push	r28
    3100:	00 d0       	rcall	.+0      	; 0x3102 <lcd_8bit_send_string+0x6>
    3102:	00 d0       	rcall	.+0      	; 0x3104 <lcd_8bit_send_string+0x8>
    3104:	0f 92       	push	r0
    3106:	cd b7       	in	r28, 0x3d	; 61
    3108:	de b7       	in	r29, 0x3e	; 62
    310a:	9b 83       	std	Y+3, r25	; 0x03
    310c:	8a 83       	std	Y+2, r24	; 0x02
    310e:	7d 83       	std	Y+5, r23	; 0x05
    3110:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_OK;
    3112:	81 e0       	ldi	r24, 0x01	; 1
    3114:	89 83       	std	Y+1, r24	; 0x01
	if((NULL==lcd)||(NULL==str))
    3116:	8a 81       	ldd	r24, Y+2	; 0x02
    3118:	9b 81       	ldd	r25, Y+3	; 0x03
    311a:	00 97       	sbiw	r24, 0x00	; 0
    311c:	21 f0       	breq	.+8      	; 0x3126 <lcd_8bit_send_string+0x2a>
    311e:	8c 81       	ldd	r24, Y+4	; 0x04
    3120:	9d 81       	ldd	r25, Y+5	; 0x05
    3122:	00 97       	sbiw	r24, 0x00	; 0
    3124:	81 f4       	brne	.+32     	; 0x3146 <lcd_8bit_send_string+0x4a>
	{
		ret = E_NOT_OK;
    3126:	19 82       	std	Y+1, r1	; 0x01
    3128:	13 c0       	rjmp	.+38     	; 0x3150 <lcd_8bit_send_string+0x54>
	}
	else
	{
		while(*str)
		{
			ret = lcd_8bit_send_char_data(lcd,*str++);
    312a:	ec 81       	ldd	r30, Y+4	; 0x04
    312c:	fd 81       	ldd	r31, Y+5	; 0x05
    312e:	20 81       	ld	r18, Z
    3130:	8c 81       	ldd	r24, Y+4	; 0x04
    3132:	9d 81       	ldd	r25, Y+5	; 0x05
    3134:	01 96       	adiw	r24, 0x01	; 1
    3136:	9d 83       	std	Y+5, r25	; 0x05
    3138:	8c 83       	std	Y+4, r24	; 0x04
    313a:	8a 81       	ldd	r24, Y+2	; 0x02
    313c:	9b 81       	ldd	r25, Y+3	; 0x03
    313e:	62 2f       	mov	r22, r18
    3140:	0e 94 06 18 	call	0x300c	; 0x300c <lcd_8bit_send_char_data>
    3144:	89 83       	std	Y+1, r24	; 0x01
	{
		ret = E_NOT_OK;
	}
	else
	{
		while(*str)
    3146:	ec 81       	ldd	r30, Y+4	; 0x04
    3148:	fd 81       	ldd	r31, Y+5	; 0x05
    314a:	80 81       	ld	r24, Z
    314c:	88 23       	and	r24, r24
    314e:	69 f7       	brne	.-38     	; 0x312a <lcd_8bit_send_string+0x2e>
		{
			ret = lcd_8bit_send_char_data(lcd,*str++);
		}
	}
	return ret;
    3150:	89 81       	ldd	r24, Y+1	; 0x01
}
    3152:	0f 90       	pop	r0
    3154:	0f 90       	pop	r0
    3156:	0f 90       	pop	r0
    3158:	0f 90       	pop	r0
    315a:	0f 90       	pop	r0
    315c:	cf 91       	pop	r28
    315e:	df 91       	pop	r29
    3160:	08 95       	ret

00003162 <lcd_8bit_send_string_pos>:
STD_ReturnStatus lcd_8bit_send_string_pos(const chr_lcd_8bit_t *lcd,uint8 row,uint8 column,uint8* str)
{
    3162:	df 93       	push	r29
    3164:	cf 93       	push	r28
    3166:	cd b7       	in	r28, 0x3d	; 61
    3168:	de b7       	in	r29, 0x3e	; 62
    316a:	27 97       	sbiw	r28, 0x07	; 7
    316c:	0f b6       	in	r0, 0x3f	; 63
    316e:	f8 94       	cli
    3170:	de bf       	out	0x3e, r29	; 62
    3172:	0f be       	out	0x3f, r0	; 63
    3174:	cd bf       	out	0x3d, r28	; 61
    3176:	9b 83       	std	Y+3, r25	; 0x03
    3178:	8a 83       	std	Y+2, r24	; 0x02
    317a:	6c 83       	std	Y+4, r22	; 0x04
    317c:	4d 83       	std	Y+5, r20	; 0x05
    317e:	3f 83       	std	Y+7, r19	; 0x07
    3180:	2e 83       	std	Y+6, r18	; 0x06
	STD_ReturnStatus ret = E_OK;
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	89 83       	std	Y+1, r24	; 0x01
	if((NULL==lcd)||(NULL==str))
    3186:	8a 81       	ldd	r24, Y+2	; 0x02
    3188:	9b 81       	ldd	r25, Y+3	; 0x03
    318a:	00 97       	sbiw	r24, 0x00	; 0
    318c:	21 f0       	breq	.+8      	; 0x3196 <lcd_8bit_send_string_pos+0x34>
    318e:	8e 81       	ldd	r24, Y+6	; 0x06
    3190:	9f 81       	ldd	r25, Y+7	; 0x07
    3192:	00 97       	sbiw	r24, 0x00	; 0
    3194:	11 f4       	brne	.+4      	; 0x319a <lcd_8bit_send_string_pos+0x38>
	{
		ret = E_NOT_OK;
    3196:	19 82       	std	Y+1, r1	; 0x01
    3198:	1b c0       	rjmp	.+54     	; 0x31d0 <lcd_8bit_send_string_pos+0x6e>
	}
	else
	{
		ret = lcd_8bit_set_cursor(lcd,row,column);
    319a:	8a 81       	ldd	r24, Y+2	; 0x02
    319c:	9b 81       	ldd	r25, Y+3	; 0x03
    319e:	6c 81       	ldd	r22, Y+4	; 0x04
    31a0:	4d 81       	ldd	r20, Y+5	; 0x05
    31a2:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <lcd_8bit_set_cursor>
    31a6:	89 83       	std	Y+1, r24	; 0x01
    31a8:	0e c0       	rjmp	.+28     	; 0x31c6 <lcd_8bit_send_string_pos+0x64>
		while(*str)
		{
			ret = lcd_8bit_send_char_data(lcd,*str++);
    31aa:	ee 81       	ldd	r30, Y+6	; 0x06
    31ac:	ff 81       	ldd	r31, Y+7	; 0x07
    31ae:	20 81       	ld	r18, Z
    31b0:	8e 81       	ldd	r24, Y+6	; 0x06
    31b2:	9f 81       	ldd	r25, Y+7	; 0x07
    31b4:	01 96       	adiw	r24, 0x01	; 1
    31b6:	9f 83       	std	Y+7, r25	; 0x07
    31b8:	8e 83       	std	Y+6, r24	; 0x06
    31ba:	8a 81       	ldd	r24, Y+2	; 0x02
    31bc:	9b 81       	ldd	r25, Y+3	; 0x03
    31be:	62 2f       	mov	r22, r18
    31c0:	0e 94 06 18 	call	0x300c	; 0x300c <lcd_8bit_send_char_data>
    31c4:	89 83       	std	Y+1, r24	; 0x01
		ret = E_NOT_OK;
	}
	else
	{
		ret = lcd_8bit_set_cursor(lcd,row,column);
		while(*str)
    31c6:	ee 81       	ldd	r30, Y+6	; 0x06
    31c8:	ff 81       	ldd	r31, Y+7	; 0x07
    31ca:	80 81       	ld	r24, Z
    31cc:	88 23       	and	r24, r24
    31ce:	69 f7       	brne	.-38     	; 0x31aa <lcd_8bit_send_string_pos+0x48>
		{
			ret = lcd_8bit_send_char_data(lcd,*str++);
		}
	}
	return ret;
    31d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    31d2:	27 96       	adiw	r28, 0x07	; 7
    31d4:	0f b6       	in	r0, 0x3f	; 63
    31d6:	f8 94       	cli
    31d8:	de bf       	out	0x3e, r29	; 62
    31da:	0f be       	out	0x3f, r0	; 63
    31dc:	cd bf       	out	0x3d, r28	; 61
    31de:	cf 91       	pop	r28
    31e0:	df 91       	pop	r29
    31e2:	08 95       	ret

000031e4 <lcd_8bit_send_custom_char>:
STD_ReturnStatus lcd_8bit_send_custom_char(const chr_lcd_8bit_t *lcd,uint8 row,uint8 column,uint8 _char[],uint8 mem_pos)
{
    31e4:	0f 93       	push	r16
    31e6:	df 93       	push	r29
    31e8:	cf 93       	push	r28
    31ea:	cd b7       	in	r28, 0x3d	; 61
    31ec:	de b7       	in	r29, 0x3e	; 62
    31ee:	29 97       	sbiw	r28, 0x09	; 9
    31f0:	0f b6       	in	r0, 0x3f	; 63
    31f2:	f8 94       	cli
    31f4:	de bf       	out	0x3e, r29	; 62
    31f6:	0f be       	out	0x3f, r0	; 63
    31f8:	cd bf       	out	0x3d, r28	; 61
    31fa:	9c 83       	std	Y+4, r25	; 0x04
    31fc:	8b 83       	std	Y+3, r24	; 0x03
    31fe:	6d 83       	std	Y+5, r22	; 0x05
    3200:	4e 83       	std	Y+6, r20	; 0x06
    3202:	38 87       	std	Y+8, r19	; 0x08
    3204:	2f 83       	std	Y+7, r18	; 0x07
    3206:	09 87       	std	Y+9, r16	; 0x09
	STD_ReturnStatus ret = E_OK;
    3208:	81 e0       	ldi	r24, 0x01	; 1
    320a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 lcd_counter = ZERO_INIT;
    320c:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==lcd)
    320e:	8b 81       	ldd	r24, Y+3	; 0x03
    3210:	9c 81       	ldd	r25, Y+4	; 0x04
    3212:	00 97       	sbiw	r24, 0x00	; 0
    3214:	11 f4       	brne	.+4      	; 0x321a <lcd_8bit_send_custom_char+0x36>
	{
		ret = E_NOT_OK;
    3216:	1a 82       	std	Y+2, r1	; 0x02
    3218:	30 c0       	rjmp	.+96     	; 0x327a <lcd_8bit_send_custom_char+0x96>
	}
	else
	{
		ret =  lcd_8bit_send_command(lcd,_LCD_CGRAM_START+(mem_pos*8));//mem_pos is the position addres oin cgram(1~8)
    321a:	89 85       	ldd	r24, Y+9	; 0x09
    321c:	88 2f       	mov	r24, r24
    321e:	90 e0       	ldi	r25, 0x00	; 0
    3220:	08 96       	adiw	r24, 0x08	; 8
    3222:	88 0f       	add	r24, r24
    3224:	99 1f       	adc	r25, r25
    3226:	88 0f       	add	r24, r24
    3228:	99 1f       	adc	r25, r25
    322a:	88 0f       	add	r24, r24
    322c:	99 1f       	adc	r25, r25
    322e:	28 2f       	mov	r18, r24
    3230:	8b 81       	ldd	r24, Y+3	; 0x03
    3232:	9c 81       	ldd	r25, Y+4	; 0x04
    3234:	62 2f       	mov	r22, r18
    3236:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <lcd_8bit_send_command>
    323a:	8a 83       	std	Y+2, r24	; 0x02
		for(lcd_counter=ZERO_INIT;lcd_counter<=7;++lcd_counter)
    323c:	19 82       	std	Y+1, r1	; 0x01
    323e:	12 c0       	rjmp	.+36     	; 0x3264 <lcd_8bit_send_custom_char+0x80>
		{
			ret = lcd_8bit_send_char_data(lcd,_char[lcd_counter]);
    3240:	89 81       	ldd	r24, Y+1	; 0x01
    3242:	28 2f       	mov	r18, r24
    3244:	30 e0       	ldi	r19, 0x00	; 0
    3246:	8f 81       	ldd	r24, Y+7	; 0x07
    3248:	98 85       	ldd	r25, Y+8	; 0x08
    324a:	fc 01       	movw	r30, r24
    324c:	e2 0f       	add	r30, r18
    324e:	f3 1f       	adc	r31, r19
    3250:	20 81       	ld	r18, Z
    3252:	8b 81       	ldd	r24, Y+3	; 0x03
    3254:	9c 81       	ldd	r25, Y+4	; 0x04
    3256:	62 2f       	mov	r22, r18
    3258:	0e 94 06 18 	call	0x300c	; 0x300c <lcd_8bit_send_char_data>
    325c:	8a 83       	std	Y+2, r24	; 0x02
		ret = E_NOT_OK;
	}
	else
	{
		ret =  lcd_8bit_send_command(lcd,_LCD_CGRAM_START+(mem_pos*8));//mem_pos is the position addres oin cgram(1~8)
		for(lcd_counter=ZERO_INIT;lcd_counter<=7;++lcd_counter)
    325e:	89 81       	ldd	r24, Y+1	; 0x01
    3260:	8f 5f       	subi	r24, 0xFF	; 255
    3262:	89 83       	std	Y+1, r24	; 0x01
    3264:	89 81       	ldd	r24, Y+1	; 0x01
    3266:	88 30       	cpi	r24, 0x08	; 8
    3268:	58 f3       	brcs	.-42     	; 0x3240 <lcd_8bit_send_custom_char+0x5c>
		{
			ret = lcd_8bit_send_char_data(lcd,_char[lcd_counter]);
		}
		ret = lcd_8bit_send_char_data_pos(lcd,row,column,mem_pos);
    326a:	8b 81       	ldd	r24, Y+3	; 0x03
    326c:	9c 81       	ldd	r25, Y+4	; 0x04
    326e:	6d 81       	ldd	r22, Y+5	; 0x05
    3270:	4e 81       	ldd	r20, Y+6	; 0x06
    3272:	29 85       	ldd	r18, Y+9	; 0x09
    3274:	0e 94 54 18 	call	0x30a8	; 0x30a8 <lcd_8bit_send_char_data_pos>
    3278:	8a 83       	std	Y+2, r24	; 0x02
	}
	return ret;
    327a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    327c:	29 96       	adiw	r28, 0x09	; 9
    327e:	0f b6       	in	r0, 0x3f	; 63
    3280:	f8 94       	cli
    3282:	de bf       	out	0x3e, r29	; 62
    3284:	0f be       	out	0x3f, r0	; 63
    3286:	cd bf       	out	0x3d, r28	; 61
    3288:	cf 91       	pop	r28
    328a:	df 91       	pop	r29
    328c:	0f 91       	pop	r16
    328e:	08 95       	ret

00003290 <convert_byte_to_string>:


STD_ReturnStatus convert_byte_to_string(uint8 value,uint8 *str)
{
    3290:	df 93       	push	r29
    3292:	cf 93       	push	r28
    3294:	00 d0       	rcall	.+0      	; 0x3296 <convert_byte_to_string+0x6>
    3296:	00 d0       	rcall	.+0      	; 0x3298 <convert_byte_to_string+0x8>
    3298:	cd b7       	in	r28, 0x3d	; 61
    329a:	de b7       	in	r29, 0x3e	; 62
    329c:	8a 83       	std	Y+2, r24	; 0x02
    329e:	7c 83       	std	Y+4, r23	; 0x04
    32a0:	6b 83       	std	Y+3, r22	; 0x03
	//since max of 8bits is 255 then we need 3 digits plus null terminator
	STD_ReturnStatus ret = E_OK;
    32a2:	81 e0       	ldi	r24, 0x01	; 1
    32a4:	89 83       	std	Y+1, r24	; 0x01
	if(str==NULL)
    32a6:	8b 81       	ldd	r24, Y+3	; 0x03
    32a8:	9c 81       	ldd	r25, Y+4	; 0x04
    32aa:	00 97       	sbiw	r24, 0x00	; 0
    32ac:	11 f4       	brne	.+4      	; 0x32b2 <convert_byte_to_string+0x22>
	{
		ret = E_NOT_OK;
    32ae:	19 82       	std	Y+1, r1	; 0x01
    32b0:	25 c0       	rjmp	.+74     	; 0x32fc <convert_byte_to_string+0x6c>
	}
	else
	{
		memset(str,'\n',4);
    32b2:	8b 81       	ldd	r24, Y+3	; 0x03
    32b4:	9c 81       	ldd	r25, Y+4	; 0x04
    32b6:	6a e0       	ldi	r22, 0x0A	; 10
    32b8:	70 e0       	ldi	r23, 0x00	; 0
    32ba:	44 e0       	ldi	r20, 0x04	; 4
    32bc:	50 e0       	ldi	r21, 0x00	; 0
    32be:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <memset>
		sprintf(str,"%i",value);
    32c2:	8a 81       	ldd	r24, Y+2	; 0x02
    32c4:	28 2f       	mov	r18, r24
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	00 d0       	rcall	.+0      	; 0x32ca <convert_byte_to_string+0x3a>
    32ca:	00 d0       	rcall	.+0      	; 0x32cc <convert_byte_to_string+0x3c>
    32cc:	00 d0       	rcall	.+0      	; 0x32ce <convert_byte_to_string+0x3e>
    32ce:	ed b7       	in	r30, 0x3d	; 61
    32d0:	fe b7       	in	r31, 0x3e	; 62
    32d2:	31 96       	adiw	r30, 0x01	; 1
    32d4:	8b 81       	ldd	r24, Y+3	; 0x03
    32d6:	9c 81       	ldd	r25, Y+4	; 0x04
    32d8:	91 83       	std	Z+1, r25	; 0x01
    32da:	80 83       	st	Z, r24
    32dc:	80 e6       	ldi	r24, 0x60	; 96
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	93 83       	std	Z+3, r25	; 0x03
    32e2:	82 83       	std	Z+2, r24	; 0x02
    32e4:	35 83       	std	Z+5, r19	; 0x05
    32e6:	24 83       	std	Z+4, r18	; 0x04
    32e8:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <sprintf>
    32ec:	8d b7       	in	r24, 0x3d	; 61
    32ee:	9e b7       	in	r25, 0x3e	; 62
    32f0:	06 96       	adiw	r24, 0x06	; 6
    32f2:	0f b6       	in	r0, 0x3f	; 63
    32f4:	f8 94       	cli
    32f6:	9e bf       	out	0x3e, r25	; 62
    32f8:	0f be       	out	0x3f, r0	; 63
    32fa:	8d bf       	out	0x3d, r24	; 61
	}
	return ret;
    32fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    32fe:	0f 90       	pop	r0
    3300:	0f 90       	pop	r0
    3302:	0f 90       	pop	r0
    3304:	0f 90       	pop	r0
    3306:	cf 91       	pop	r28
    3308:	df 91       	pop	r29
    330a:	08 95       	ret

0000330c <convert_string_to_byte>:
STD_ReturnStatus convert_string_to_byte(uint8 *value,uint8 *str)
{
    330c:	df 93       	push	r29
    330e:	cf 93       	push	r28
    3310:	00 d0       	rcall	.+0      	; 0x3312 <convert_string_to_byte+0x6>
    3312:	00 d0       	rcall	.+0      	; 0x3314 <convert_string_to_byte+0x8>
    3314:	00 d0       	rcall	.+0      	; 0x3316 <convert_string_to_byte+0xa>
    3316:	cd b7       	in	r28, 0x3d	; 61
    3318:	de b7       	in	r29, 0x3e	; 62
    331a:	9c 83       	std	Y+4, r25	; 0x04
    331c:	8b 83       	std	Y+3, r24	; 0x03
    331e:	7e 83       	std	Y+6, r23	; 0x06
    3320:	6d 83       	std	Y+5, r22	; 0x05
	STD_ReturnStatus ret = E_OK;
    3322:	81 e0       	ldi	r24, 0x01	; 1
    3324:	8a 83       	std	Y+2, r24	; 0x02
	if(str==NULL||NULL==value)
    3326:	8d 81       	ldd	r24, Y+5	; 0x05
    3328:	9e 81       	ldd	r25, Y+6	; 0x06
    332a:	00 97       	sbiw	r24, 0x00	; 0
    332c:	21 f0       	breq	.+8      	; 0x3336 <convert_string_to_byte+0x2a>
    332e:	8b 81       	ldd	r24, Y+3	; 0x03
    3330:	9c 81       	ldd	r25, Y+4	; 0x04
    3332:	00 97       	sbiw	r24, 0x00	; 0
    3334:	11 f4       	brne	.+4      	; 0x333a <convert_string_to_byte+0x2e>
	{
		ret = E_NOT_OK;
    3336:	1a 82       	std	Y+2, r1	; 0x02
    3338:	31 c0       	rjmp	.+98     	; 0x339c <convert_string_to_byte+0x90>
	}
	else
	{
		*value=0;
    333a:	eb 81       	ldd	r30, Y+3	; 0x03
    333c:	fc 81       	ldd	r31, Y+4	; 0x04
    333e:	10 82       	st	Z, r1
	    for (uint8 i = 0; str[i] != '\0'; i++) {
    3340:	19 82       	std	Y+1, r1	; 0x01
    3342:	21 c0       	rjmp	.+66     	; 0x3386 <convert_string_to_byte+0x7a>
	        *value = *value* 10 + (str[i] - 48);
    3344:	eb 81       	ldd	r30, Y+3	; 0x03
    3346:	fc 81       	ldd	r31, Y+4	; 0x04
    3348:	80 81       	ld	r24, Z
    334a:	88 2f       	mov	r24, r24
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	9c 01       	movw	r18, r24
    3350:	22 0f       	add	r18, r18
    3352:	33 1f       	adc	r19, r19
    3354:	c9 01       	movw	r24, r18
    3356:	88 0f       	add	r24, r24
    3358:	99 1f       	adc	r25, r25
    335a:	88 0f       	add	r24, r24
    335c:	99 1f       	adc	r25, r25
    335e:	82 0f       	add	r24, r18
    3360:	93 1f       	adc	r25, r19
    3362:	48 2f       	mov	r20, r24
    3364:	89 81       	ldd	r24, Y+1	; 0x01
    3366:	28 2f       	mov	r18, r24
    3368:	30 e0       	ldi	r19, 0x00	; 0
    336a:	8d 81       	ldd	r24, Y+5	; 0x05
    336c:	9e 81       	ldd	r25, Y+6	; 0x06
    336e:	fc 01       	movw	r30, r24
    3370:	e2 0f       	add	r30, r18
    3372:	f3 1f       	adc	r31, r19
    3374:	80 81       	ld	r24, Z
    3376:	84 0f       	add	r24, r20
    3378:	80 53       	subi	r24, 0x30	; 48
    337a:	eb 81       	ldd	r30, Y+3	; 0x03
    337c:	fc 81       	ldd	r31, Y+4	; 0x04
    337e:	80 83       	st	Z, r24
		ret = E_NOT_OK;
	}
	else
	{
		*value=0;
	    for (uint8 i = 0; str[i] != '\0'; i++) {
    3380:	89 81       	ldd	r24, Y+1	; 0x01
    3382:	8f 5f       	subi	r24, 0xFF	; 255
    3384:	89 83       	std	Y+1, r24	; 0x01
    3386:	89 81       	ldd	r24, Y+1	; 0x01
    3388:	28 2f       	mov	r18, r24
    338a:	30 e0       	ldi	r19, 0x00	; 0
    338c:	8d 81       	ldd	r24, Y+5	; 0x05
    338e:	9e 81       	ldd	r25, Y+6	; 0x06
    3390:	fc 01       	movw	r30, r24
    3392:	e2 0f       	add	r30, r18
    3394:	f3 1f       	adc	r31, r19
    3396:	80 81       	ld	r24, Z
    3398:	88 23       	and	r24, r24
    339a:	a1 f6       	brne	.-88     	; 0x3344 <convert_string_to_byte+0x38>
	        *value = *value* 10 + (str[i] - 48);
	    }
	}
	return ret;
    339c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    339e:	26 96       	adiw	r28, 0x06	; 6
    33a0:	0f b6       	in	r0, 0x3f	; 63
    33a2:	f8 94       	cli
    33a4:	de bf       	out	0x3e, r29	; 62
    33a6:	0f be       	out	0x3f, r0	; 63
    33a8:	cd bf       	out	0x3d, r28	; 61
    33aa:	cf 91       	pop	r28
    33ac:	df 91       	pop	r29
    33ae:	08 95       	ret

000033b0 <convert_short_to_string>:


STD_ReturnStatus convert_short_to_string(uint16 value,uint8 *str)
{
    33b0:	df 93       	push	r29
    33b2:	cf 93       	push	r28
    33b4:	00 d0       	rcall	.+0      	; 0x33b6 <convert_short_to_string+0x6>
    33b6:	00 d0       	rcall	.+0      	; 0x33b8 <convert_short_to_string+0x8>
    33b8:	0f 92       	push	r0
    33ba:	cd b7       	in	r28, 0x3d	; 61
    33bc:	de b7       	in	r29, 0x3e	; 62
    33be:	9b 83       	std	Y+3, r25	; 0x03
    33c0:	8a 83       	std	Y+2, r24	; 0x02
    33c2:	7d 83       	std	Y+5, r23	; 0x05
    33c4:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_OK;
    33c6:	81 e0       	ldi	r24, 0x01	; 1
    33c8:	89 83       	std	Y+1, r24	; 0x01
	if(str==NULL)
    33ca:	8c 81       	ldd	r24, Y+4	; 0x04
    33cc:	9d 81       	ldd	r25, Y+5	; 0x05
    33ce:	00 97       	sbiw	r24, 0x00	; 0
    33d0:	11 f4       	brne	.+4      	; 0x33d6 <convert_short_to_string+0x26>
	{
		ret = E_NOT_OK;
    33d2:	19 82       	std	Y+1, r1	; 0x01
    33d4:	24 c0       	rjmp	.+72     	; 0x341e <convert_short_to_string+0x6e>
	}
	else
	{
		memset(str,'\n',6);
    33d6:	8c 81       	ldd	r24, Y+4	; 0x04
    33d8:	9d 81       	ldd	r25, Y+5	; 0x05
    33da:	6a e0       	ldi	r22, 0x0A	; 10
    33dc:	70 e0       	ldi	r23, 0x00	; 0
    33de:	46 e0       	ldi	r20, 0x06	; 6
    33e0:	50 e0       	ldi	r21, 0x00	; 0
    33e2:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <memset>
		sprintf(str,"%i",value);
    33e6:	00 d0       	rcall	.+0      	; 0x33e8 <convert_short_to_string+0x38>
    33e8:	00 d0       	rcall	.+0      	; 0x33ea <convert_short_to_string+0x3a>
    33ea:	00 d0       	rcall	.+0      	; 0x33ec <convert_short_to_string+0x3c>
    33ec:	ed b7       	in	r30, 0x3d	; 61
    33ee:	fe b7       	in	r31, 0x3e	; 62
    33f0:	31 96       	adiw	r30, 0x01	; 1
    33f2:	8c 81       	ldd	r24, Y+4	; 0x04
    33f4:	9d 81       	ldd	r25, Y+5	; 0x05
    33f6:	91 83       	std	Z+1, r25	; 0x01
    33f8:	80 83       	st	Z, r24
    33fa:	80 e6       	ldi	r24, 0x60	; 96
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	93 83       	std	Z+3, r25	; 0x03
    3400:	82 83       	std	Z+2, r24	; 0x02
    3402:	8a 81       	ldd	r24, Y+2	; 0x02
    3404:	9b 81       	ldd	r25, Y+3	; 0x03
    3406:	95 83       	std	Z+5, r25	; 0x05
    3408:	84 83       	std	Z+4, r24	; 0x04
    340a:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <sprintf>
    340e:	8d b7       	in	r24, 0x3d	; 61
    3410:	9e b7       	in	r25, 0x3e	; 62
    3412:	06 96       	adiw	r24, 0x06	; 6
    3414:	0f b6       	in	r0, 0x3f	; 63
    3416:	f8 94       	cli
    3418:	9e bf       	out	0x3e, r25	; 62
    341a:	0f be       	out	0x3f, r0	; 63
    341c:	8d bf       	out	0x3d, r24	; 61
	}
	return ret;
    341e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3420:	0f 90       	pop	r0
    3422:	0f 90       	pop	r0
    3424:	0f 90       	pop	r0
    3426:	0f 90       	pop	r0
    3428:	0f 90       	pop	r0
    342a:	cf 91       	pop	r28
    342c:	df 91       	pop	r29
    342e:	08 95       	ret

00003430 <convert_int_to_string>:
STD_ReturnStatus convert_int_to_string(uint32 value,uint8 *str)
{
    3430:	df 93       	push	r29
    3432:	cf 93       	push	r28
    3434:	00 d0       	rcall	.+0      	; 0x3436 <convert_int_to_string+0x6>
    3436:	00 d0       	rcall	.+0      	; 0x3438 <convert_int_to_string+0x8>
    3438:	0f 92       	push	r0
    343a:	cd b7       	in	r28, 0x3d	; 61
    343c:	de b7       	in	r29, 0x3e	; 62
    343e:	9b 83       	std	Y+3, r25	; 0x03
    3440:	8a 83       	std	Y+2, r24	; 0x02
    3442:	7d 83       	std	Y+5, r23	; 0x05
    3444:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_OK;
    3446:	81 e0       	ldi	r24, 0x01	; 1
    3448:	89 83       	std	Y+1, r24	; 0x01
	if(str==NULL)
    344a:	8c 81       	ldd	r24, Y+4	; 0x04
    344c:	9d 81       	ldd	r25, Y+5	; 0x05
    344e:	00 97       	sbiw	r24, 0x00	; 0
    3450:	11 f4       	brne	.+4      	; 0x3456 <convert_int_to_string+0x26>
	{
		ret = E_NOT_OK;
    3452:	19 82       	std	Y+1, r1	; 0x01
    3454:	24 c0       	rjmp	.+72     	; 0x349e <convert_int_to_string+0x6e>
	}
	else
	{
		memset(str,'\n',11);
    3456:	8c 81       	ldd	r24, Y+4	; 0x04
    3458:	9d 81       	ldd	r25, Y+5	; 0x05
    345a:	6a e0       	ldi	r22, 0x0A	; 10
    345c:	70 e0       	ldi	r23, 0x00	; 0
    345e:	4b e0       	ldi	r20, 0x0B	; 11
    3460:	50 e0       	ldi	r21, 0x00	; 0
    3462:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <memset>
		sprintf(str,"%i",value);
    3466:	00 d0       	rcall	.+0      	; 0x3468 <convert_int_to_string+0x38>
    3468:	00 d0       	rcall	.+0      	; 0x346a <convert_int_to_string+0x3a>
    346a:	00 d0       	rcall	.+0      	; 0x346c <convert_int_to_string+0x3c>
    346c:	ed b7       	in	r30, 0x3d	; 61
    346e:	fe b7       	in	r31, 0x3e	; 62
    3470:	31 96       	adiw	r30, 0x01	; 1
    3472:	8c 81       	ldd	r24, Y+4	; 0x04
    3474:	9d 81       	ldd	r25, Y+5	; 0x05
    3476:	91 83       	std	Z+1, r25	; 0x01
    3478:	80 83       	st	Z, r24
    347a:	80 e6       	ldi	r24, 0x60	; 96
    347c:	90 e0       	ldi	r25, 0x00	; 0
    347e:	93 83       	std	Z+3, r25	; 0x03
    3480:	82 83       	std	Z+2, r24	; 0x02
    3482:	8a 81       	ldd	r24, Y+2	; 0x02
    3484:	9b 81       	ldd	r25, Y+3	; 0x03
    3486:	95 83       	std	Z+5, r25	; 0x05
    3488:	84 83       	std	Z+4, r24	; 0x04
    348a:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <sprintf>
    348e:	8d b7       	in	r24, 0x3d	; 61
    3490:	9e b7       	in	r25, 0x3e	; 62
    3492:	06 96       	adiw	r24, 0x06	; 6
    3494:	0f b6       	in	r0, 0x3f	; 63
    3496:	f8 94       	cli
    3498:	9e bf       	out	0x3e, r25	; 62
    349a:	0f be       	out	0x3f, r0	; 63
    349c:	8d bf       	out	0x3d, r24	; 61
	}
	return ret;
    349e:	89 81       	ldd	r24, Y+1	; 0x01
}
    34a0:	0f 90       	pop	r0
    34a2:	0f 90       	pop	r0
    34a4:	0f 90       	pop	r0
    34a6:	0f 90       	pop	r0
    34a8:	0f 90       	pop	r0
    34aa:	cf 91       	pop	r28
    34ac:	df 91       	pop	r29
    34ae:	08 95       	ret

000034b0 <lcd_send_4bits>:

static STD_ReturnStatus lcd_send_4bits(const chr_lcd_4bit_t *lcd,uint8 _data_command)
{
    34b0:	df 93       	push	r29
    34b2:	cf 93       	push	r28
    34b4:	00 d0       	rcall	.+0      	; 0x34b6 <lcd_send_4bits+0x6>
    34b6:	00 d0       	rcall	.+0      	; 0x34b8 <lcd_send_4bits+0x8>
    34b8:	cd b7       	in	r28, 0x3d	; 61
    34ba:	de b7       	in	r29, 0x3e	; 62
    34bc:	9b 83       	std	Y+3, r25	; 0x03
    34be:	8a 83       	std	Y+2, r24	; 0x02
    34c0:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_OK;
    34c2:	81 e0       	ldi	r24, 0x01	; 1
    34c4:	89 83       	std	Y+1, r24	; 0x01
	ret = gpio_pin_write_logic(&(lcd->lcd_data[0]), (_data_command >> 0) & (uint8)0x01);
    34c6:	8a 81       	ldd	r24, Y+2	; 0x02
    34c8:	9b 81       	ldd	r25, Y+3	; 0x03
    34ca:	9c 01       	movw	r18, r24
    34cc:	2e 5f       	subi	r18, 0xFE	; 254
    34ce:	3f 4f       	sbci	r19, 0xFF	; 255
    34d0:	8c 81       	ldd	r24, Y+4	; 0x04
    34d2:	48 2f       	mov	r20, r24
    34d4:	41 70       	andi	r20, 0x01	; 1
    34d6:	c9 01       	movw	r24, r18
    34d8:	64 2f       	mov	r22, r20
    34da:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
    34de:	89 83       	std	Y+1, r24	; 0x01
	ret = gpio_pin_write_logic(&(lcd->lcd_data[1]), (_data_command >> 1) & (uint8)0x01);
    34e0:	8a 81       	ldd	r24, Y+2	; 0x02
    34e2:	9b 81       	ldd	r25, Y+3	; 0x03
    34e4:	9c 01       	movw	r18, r24
    34e6:	2d 5f       	subi	r18, 0xFD	; 253
    34e8:	3f 4f       	sbci	r19, 0xFF	; 255
    34ea:	8c 81       	ldd	r24, Y+4	; 0x04
    34ec:	86 95       	lsr	r24
    34ee:	48 2f       	mov	r20, r24
    34f0:	41 70       	andi	r20, 0x01	; 1
    34f2:	c9 01       	movw	r24, r18
    34f4:	64 2f       	mov	r22, r20
    34f6:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
    34fa:	89 83       	std	Y+1, r24	; 0x01
	ret = gpio_pin_write_logic(&(lcd->lcd_data[2]), (_data_command >> 2) & (uint8)0x01);
    34fc:	8a 81       	ldd	r24, Y+2	; 0x02
    34fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3500:	9c 01       	movw	r18, r24
    3502:	2c 5f       	subi	r18, 0xFC	; 252
    3504:	3f 4f       	sbci	r19, 0xFF	; 255
    3506:	8c 81       	ldd	r24, Y+4	; 0x04
    3508:	86 95       	lsr	r24
    350a:	86 95       	lsr	r24
    350c:	48 2f       	mov	r20, r24
    350e:	41 70       	andi	r20, 0x01	; 1
    3510:	c9 01       	movw	r24, r18
    3512:	64 2f       	mov	r22, r20
    3514:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
    3518:	89 83       	std	Y+1, r24	; 0x01
	ret = gpio_pin_write_logic(&(lcd->lcd_data[3]), (_data_command >> 3) & (uint8)0x01);
    351a:	8a 81       	ldd	r24, Y+2	; 0x02
    351c:	9b 81       	ldd	r25, Y+3	; 0x03
    351e:	9c 01       	movw	r18, r24
    3520:	2b 5f       	subi	r18, 0xFB	; 251
    3522:	3f 4f       	sbci	r19, 0xFF	; 255
    3524:	8c 81       	ldd	r24, Y+4	; 0x04
    3526:	86 95       	lsr	r24
    3528:	86 95       	lsr	r24
    352a:	86 95       	lsr	r24
    352c:	48 2f       	mov	r20, r24
    352e:	41 70       	andi	r20, 0x01	; 1
    3530:	c9 01       	movw	r24, r18
    3532:	64 2f       	mov	r22, r20
    3534:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
    3538:	89 83       	std	Y+1, r24	; 0x01
	return ret;
    353a:	89 81       	ldd	r24, Y+1	; 0x01
}
    353c:	0f 90       	pop	r0
    353e:	0f 90       	pop	r0
    3540:	0f 90       	pop	r0
    3542:	0f 90       	pop	r0
    3544:	cf 91       	pop	r28
    3546:	df 91       	pop	r29
    3548:	08 95       	ret

0000354a <lcd_4bit_send_enable>:

static STD_ReturnStatus lcd_4bit_send_enable(const chr_lcd_4bit_t *lcd)
{
    354a:	df 93       	push	r29
    354c:	cf 93       	push	r28
    354e:	cd b7       	in	r28, 0x3d	; 61
    3550:	de b7       	in	r29, 0x3e	; 62
    3552:	61 97       	sbiw	r28, 0x11	; 17
    3554:	0f b6       	in	r0, 0x3f	; 63
    3556:	f8 94       	cli
    3558:	de bf       	out	0x3e, r29	; 62
    355a:	0f be       	out	0x3f, r0	; 63
    355c:	cd bf       	out	0x3d, r28	; 61
    355e:	99 8b       	std	Y+17, r25	; 0x11
    3560:	88 8b       	std	Y+16, r24	; 0x10
	STD_ReturnStatus ret = E_OK;
    3562:	81 e0       	ldi	r24, 0x01	; 1
    3564:	8f 87       	std	Y+15, r24	; 0x0f
	ret = gpio_pin_write_logic(&(lcd->lcd_en),GPIO_HIGH);
    3566:	88 89       	ldd	r24, Y+16	; 0x10
    3568:	99 89       	ldd	r25, Y+17	; 0x11
    356a:	01 96       	adiw	r24, 0x01	; 1
    356c:	61 e0       	ldi	r22, 0x01	; 1
    356e:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
    3572:	8f 87       	std	Y+15, r24	; 0x0f
    3574:	80 e0       	ldi	r24, 0x00	; 0
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	a0 ea       	ldi	r26, 0xA0	; 160
    357a:	b0 e4       	ldi	r27, 0x40	; 64
    357c:	8b 87       	std	Y+11, r24	; 0x0b
    357e:	9c 87       	std	Y+12, r25	; 0x0c
    3580:	ad 87       	std	Y+13, r26	; 0x0d
    3582:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3584:	6b 85       	ldd	r22, Y+11	; 0x0b
    3586:	7c 85       	ldd	r23, Y+12	; 0x0c
    3588:	8d 85       	ldd	r24, Y+13	; 0x0d
    358a:	9e 85       	ldd	r25, Y+14	; 0x0e
    358c:	20 e0       	ldi	r18, 0x00	; 0
    358e:	30 e0       	ldi	r19, 0x00	; 0
    3590:	4a ef       	ldi	r20, 0xFA	; 250
    3592:	54 e4       	ldi	r21, 0x44	; 68
    3594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3598:	dc 01       	movw	r26, r24
    359a:	cb 01       	movw	r24, r22
    359c:	8f 83       	std	Y+7, r24	; 0x07
    359e:	98 87       	std	Y+8, r25	; 0x08
    35a0:	a9 87       	std	Y+9, r26	; 0x09
    35a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35a4:	6f 81       	ldd	r22, Y+7	; 0x07
    35a6:	78 85       	ldd	r23, Y+8	; 0x08
    35a8:	89 85       	ldd	r24, Y+9	; 0x09
    35aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ac:	20 e0       	ldi	r18, 0x00	; 0
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	40 e8       	ldi	r20, 0x80	; 128
    35b2:	5f e3       	ldi	r21, 0x3F	; 63
    35b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35b8:	88 23       	and	r24, r24
    35ba:	2c f4       	brge	.+10     	; 0x35c6 <lcd_4bit_send_enable+0x7c>
		__ticks = 1;
    35bc:	81 e0       	ldi	r24, 0x01	; 1
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	9e 83       	std	Y+6, r25	; 0x06
    35c2:	8d 83       	std	Y+5, r24	; 0x05
    35c4:	3f c0       	rjmp	.+126    	; 0x3644 <lcd_4bit_send_enable+0xfa>
	else if (__tmp > 65535)
    35c6:	6f 81       	ldd	r22, Y+7	; 0x07
    35c8:	78 85       	ldd	r23, Y+8	; 0x08
    35ca:	89 85       	ldd	r24, Y+9	; 0x09
    35cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ce:	20 e0       	ldi	r18, 0x00	; 0
    35d0:	3f ef       	ldi	r19, 0xFF	; 255
    35d2:	4f e7       	ldi	r20, 0x7F	; 127
    35d4:	57 e4       	ldi	r21, 0x47	; 71
    35d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35da:	18 16       	cp	r1, r24
    35dc:	4c f5       	brge	.+82     	; 0x3630 <lcd_4bit_send_enable+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35de:	6b 85       	ldd	r22, Y+11	; 0x0b
    35e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    35e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    35e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    35e6:	20 e0       	ldi	r18, 0x00	; 0
    35e8:	30 e0       	ldi	r19, 0x00	; 0
    35ea:	40 e2       	ldi	r20, 0x20	; 32
    35ec:	51 e4       	ldi	r21, 0x41	; 65
    35ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f2:	dc 01       	movw	r26, r24
    35f4:	cb 01       	movw	r24, r22
    35f6:	bc 01       	movw	r22, r24
    35f8:	cd 01       	movw	r24, r26
    35fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35fe:	dc 01       	movw	r26, r24
    3600:	cb 01       	movw	r24, r22
    3602:	9e 83       	std	Y+6, r25	; 0x06
    3604:	8d 83       	std	Y+5, r24	; 0x05
    3606:	0f c0       	rjmp	.+30     	; 0x3626 <lcd_4bit_send_enable+0xdc>
    3608:	88 ec       	ldi	r24, 0xC8	; 200
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	9c 83       	std	Y+4, r25	; 0x04
    360e:	8b 83       	std	Y+3, r24	; 0x03
    3610:	8b 81       	ldd	r24, Y+3	; 0x03
    3612:	9c 81       	ldd	r25, Y+4	; 0x04
    3614:	01 97       	sbiw	r24, 0x01	; 1
    3616:	f1 f7       	brne	.-4      	; 0x3614 <lcd_4bit_send_enable+0xca>
    3618:	9c 83       	std	Y+4, r25	; 0x04
    361a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    361c:	8d 81       	ldd	r24, Y+5	; 0x05
    361e:	9e 81       	ldd	r25, Y+6	; 0x06
    3620:	01 97       	sbiw	r24, 0x01	; 1
    3622:	9e 83       	std	Y+6, r25	; 0x06
    3624:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3626:	8d 81       	ldd	r24, Y+5	; 0x05
    3628:	9e 81       	ldd	r25, Y+6	; 0x06
    362a:	00 97       	sbiw	r24, 0x00	; 0
    362c:	69 f7       	brne	.-38     	; 0x3608 <lcd_4bit_send_enable+0xbe>
    362e:	14 c0       	rjmp	.+40     	; 0x3658 <lcd_4bit_send_enable+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3630:	6f 81       	ldd	r22, Y+7	; 0x07
    3632:	78 85       	ldd	r23, Y+8	; 0x08
    3634:	89 85       	ldd	r24, Y+9	; 0x09
    3636:	9a 85       	ldd	r25, Y+10	; 0x0a
    3638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    363c:	dc 01       	movw	r26, r24
    363e:	cb 01       	movw	r24, r22
    3640:	9e 83       	std	Y+6, r25	; 0x06
    3642:	8d 83       	std	Y+5, r24	; 0x05
    3644:	8d 81       	ldd	r24, Y+5	; 0x05
    3646:	9e 81       	ldd	r25, Y+6	; 0x06
    3648:	9a 83       	std	Y+2, r25	; 0x02
    364a:	89 83       	std	Y+1, r24	; 0x01
    364c:	89 81       	ldd	r24, Y+1	; 0x01
    364e:	9a 81       	ldd	r25, Y+2	; 0x02
    3650:	01 97       	sbiw	r24, 0x01	; 1
    3652:	f1 f7       	brne	.-4      	; 0x3650 <lcd_4bit_send_enable+0x106>
    3654:	9a 83       	std	Y+2, r25	; 0x02
    3656:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	ret = gpio_pin_write_logic(&(lcd->lcd_en),GPIO_LOW);
    3658:	88 89       	ldd	r24, Y+16	; 0x10
    365a:	99 89       	ldd	r25, Y+17	; 0x11
    365c:	01 96       	adiw	r24, 0x01	; 1
    365e:	60 e0       	ldi	r22, 0x00	; 0
    3660:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
    3664:	8f 87       	std	Y+15, r24	; 0x0f
	return ret;
    3666:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3668:	61 96       	adiw	r28, 0x11	; 17
    366a:	0f b6       	in	r0, 0x3f	; 63
    366c:	f8 94       	cli
    366e:	de bf       	out	0x3e, r29	; 62
    3670:	0f be       	out	0x3f, r0	; 63
    3672:	cd bf       	out	0x3d, r28	; 61
    3674:	cf 91       	pop	r28
    3676:	df 91       	pop	r29
    3678:	08 95       	ret

0000367a <lcd_8bit_send_enable>:


static STD_ReturnStatus lcd_8bit_send_enable(const chr_lcd_8bit_t *lcd)
{
    367a:	df 93       	push	r29
    367c:	cf 93       	push	r28
    367e:	cd b7       	in	r28, 0x3d	; 61
    3680:	de b7       	in	r29, 0x3e	; 62
    3682:	61 97       	sbiw	r28, 0x11	; 17
    3684:	0f b6       	in	r0, 0x3f	; 63
    3686:	f8 94       	cli
    3688:	de bf       	out	0x3e, r29	; 62
    368a:	0f be       	out	0x3f, r0	; 63
    368c:	cd bf       	out	0x3d, r28	; 61
    368e:	99 8b       	std	Y+17, r25	; 0x11
    3690:	88 8b       	std	Y+16, r24	; 0x10
	STD_ReturnStatus ret = E_OK;
    3692:	81 e0       	ldi	r24, 0x01	; 1
    3694:	8f 87       	std	Y+15, r24	; 0x0f
	ret = gpio_pin_write_logic(&(lcd->lcd_en),GPIO_HIGH);
    3696:	88 89       	ldd	r24, Y+16	; 0x10
    3698:	99 89       	ldd	r25, Y+17	; 0x11
    369a:	01 96       	adiw	r24, 0x01	; 1
    369c:	61 e0       	ldi	r22, 0x01	; 1
    369e:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
    36a2:	8f 87       	std	Y+15, r24	; 0x0f
    36a4:	80 e0       	ldi	r24, 0x00	; 0
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	a0 ea       	ldi	r26, 0xA0	; 160
    36aa:	b0 e4       	ldi	r27, 0x40	; 64
    36ac:	8b 87       	std	Y+11, r24	; 0x0b
    36ae:	9c 87       	std	Y+12, r25	; 0x0c
    36b0:	ad 87       	std	Y+13, r26	; 0x0d
    36b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    36b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    36b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    36ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    36bc:	20 e0       	ldi	r18, 0x00	; 0
    36be:	30 e0       	ldi	r19, 0x00	; 0
    36c0:	4a ef       	ldi	r20, 0xFA	; 250
    36c2:	54 e4       	ldi	r21, 0x44	; 68
    36c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36c8:	dc 01       	movw	r26, r24
    36ca:	cb 01       	movw	r24, r22
    36cc:	8f 83       	std	Y+7, r24	; 0x07
    36ce:	98 87       	std	Y+8, r25	; 0x08
    36d0:	a9 87       	std	Y+9, r26	; 0x09
    36d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36d4:	6f 81       	ldd	r22, Y+7	; 0x07
    36d6:	78 85       	ldd	r23, Y+8	; 0x08
    36d8:	89 85       	ldd	r24, Y+9	; 0x09
    36da:	9a 85       	ldd	r25, Y+10	; 0x0a
    36dc:	20 e0       	ldi	r18, 0x00	; 0
    36de:	30 e0       	ldi	r19, 0x00	; 0
    36e0:	40 e8       	ldi	r20, 0x80	; 128
    36e2:	5f e3       	ldi	r21, 0x3F	; 63
    36e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36e8:	88 23       	and	r24, r24
    36ea:	2c f4       	brge	.+10     	; 0x36f6 <lcd_8bit_send_enable+0x7c>
		__ticks = 1;
    36ec:	81 e0       	ldi	r24, 0x01	; 1
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	9e 83       	std	Y+6, r25	; 0x06
    36f2:	8d 83       	std	Y+5, r24	; 0x05
    36f4:	3f c0       	rjmp	.+126    	; 0x3774 <lcd_8bit_send_enable+0xfa>
	else if (__tmp > 65535)
    36f6:	6f 81       	ldd	r22, Y+7	; 0x07
    36f8:	78 85       	ldd	r23, Y+8	; 0x08
    36fa:	89 85       	ldd	r24, Y+9	; 0x09
    36fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    36fe:	20 e0       	ldi	r18, 0x00	; 0
    3700:	3f ef       	ldi	r19, 0xFF	; 255
    3702:	4f e7       	ldi	r20, 0x7F	; 127
    3704:	57 e4       	ldi	r21, 0x47	; 71
    3706:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    370a:	18 16       	cp	r1, r24
    370c:	4c f5       	brge	.+82     	; 0x3760 <lcd_8bit_send_enable+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    370e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3710:	7c 85       	ldd	r23, Y+12	; 0x0c
    3712:	8d 85       	ldd	r24, Y+13	; 0x0d
    3714:	9e 85       	ldd	r25, Y+14	; 0x0e
    3716:	20 e0       	ldi	r18, 0x00	; 0
    3718:	30 e0       	ldi	r19, 0x00	; 0
    371a:	40 e2       	ldi	r20, 0x20	; 32
    371c:	51 e4       	ldi	r21, 0x41	; 65
    371e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3722:	dc 01       	movw	r26, r24
    3724:	cb 01       	movw	r24, r22
    3726:	bc 01       	movw	r22, r24
    3728:	cd 01       	movw	r24, r26
    372a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    372e:	dc 01       	movw	r26, r24
    3730:	cb 01       	movw	r24, r22
    3732:	9e 83       	std	Y+6, r25	; 0x06
    3734:	8d 83       	std	Y+5, r24	; 0x05
    3736:	0f c0       	rjmp	.+30     	; 0x3756 <lcd_8bit_send_enable+0xdc>
    3738:	88 ec       	ldi	r24, 0xC8	; 200
    373a:	90 e0       	ldi	r25, 0x00	; 0
    373c:	9c 83       	std	Y+4, r25	; 0x04
    373e:	8b 83       	std	Y+3, r24	; 0x03
    3740:	8b 81       	ldd	r24, Y+3	; 0x03
    3742:	9c 81       	ldd	r25, Y+4	; 0x04
    3744:	01 97       	sbiw	r24, 0x01	; 1
    3746:	f1 f7       	brne	.-4      	; 0x3744 <lcd_8bit_send_enable+0xca>
    3748:	9c 83       	std	Y+4, r25	; 0x04
    374a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    374c:	8d 81       	ldd	r24, Y+5	; 0x05
    374e:	9e 81       	ldd	r25, Y+6	; 0x06
    3750:	01 97       	sbiw	r24, 0x01	; 1
    3752:	9e 83       	std	Y+6, r25	; 0x06
    3754:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3756:	8d 81       	ldd	r24, Y+5	; 0x05
    3758:	9e 81       	ldd	r25, Y+6	; 0x06
    375a:	00 97       	sbiw	r24, 0x00	; 0
    375c:	69 f7       	brne	.-38     	; 0x3738 <lcd_8bit_send_enable+0xbe>
    375e:	14 c0       	rjmp	.+40     	; 0x3788 <lcd_8bit_send_enable+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3760:	6f 81       	ldd	r22, Y+7	; 0x07
    3762:	78 85       	ldd	r23, Y+8	; 0x08
    3764:	89 85       	ldd	r24, Y+9	; 0x09
    3766:	9a 85       	ldd	r25, Y+10	; 0x0a
    3768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    376c:	dc 01       	movw	r26, r24
    376e:	cb 01       	movw	r24, r22
    3770:	9e 83       	std	Y+6, r25	; 0x06
    3772:	8d 83       	std	Y+5, r24	; 0x05
    3774:	8d 81       	ldd	r24, Y+5	; 0x05
    3776:	9e 81       	ldd	r25, Y+6	; 0x06
    3778:	9a 83       	std	Y+2, r25	; 0x02
    377a:	89 83       	std	Y+1, r24	; 0x01
    377c:	89 81       	ldd	r24, Y+1	; 0x01
    377e:	9a 81       	ldd	r25, Y+2	; 0x02
    3780:	01 97       	sbiw	r24, 0x01	; 1
    3782:	f1 f7       	brne	.-4      	; 0x3780 <lcd_8bit_send_enable+0x106>
    3784:	9a 83       	std	Y+2, r25	; 0x02
    3786:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	ret = gpio_pin_write_logic(&(lcd->lcd_en),GPIO_LOW);
    3788:	88 89       	ldd	r24, Y+16	; 0x10
    378a:	99 89       	ldd	r25, Y+17	; 0x11
    378c:	01 96       	adiw	r24, 0x01	; 1
    378e:	60 e0       	ldi	r22, 0x00	; 0
    3790:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
    3794:	8f 87       	std	Y+15, r24	; 0x0f
	return ret;
    3796:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3798:	61 96       	adiw	r28, 0x11	; 17
    379a:	0f b6       	in	r0, 0x3f	; 63
    379c:	f8 94       	cli
    379e:	de bf       	out	0x3e, r29	; 62
    37a0:	0f be       	out	0x3f, r0	; 63
    37a2:	cd bf       	out	0x3d, r28	; 61
    37a4:	cf 91       	pop	r28
    37a6:	df 91       	pop	r29
    37a8:	08 95       	ret

000037aa <lcd_8bit_set_cursor>:

static STD_ReturnStatus lcd_8bit_set_cursor(const chr_lcd_8bit_t *lcd,uint8 row,uint8 column)
{
    37aa:	df 93       	push	r29
    37ac:	cf 93       	push	r28
    37ae:	cd b7       	in	r28, 0x3d	; 61
    37b0:	de b7       	in	r29, 0x3e	; 62
    37b2:	27 97       	sbiw	r28, 0x07	; 7
    37b4:	0f b6       	in	r0, 0x3f	; 63
    37b6:	f8 94       	cli
    37b8:	de bf       	out	0x3e, r29	; 62
    37ba:	0f be       	out	0x3f, r0	; 63
    37bc:	cd bf       	out	0x3d, r28	; 61
    37be:	9b 83       	std	Y+3, r25	; 0x03
    37c0:	8a 83       	std	Y+2, r24	; 0x02
    37c2:	6c 83       	std	Y+4, r22	; 0x04
    37c4:	4d 83       	std	Y+5, r20	; 0x05
	STD_ReturnStatus ret = E_OK;
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	89 83       	std	Y+1, r24	; 0x01
	column--;
    37ca:	8d 81       	ldd	r24, Y+5	; 0x05
    37cc:	81 50       	subi	r24, 0x01	; 1
    37ce:	8d 83       	std	Y+5, r24	; 0x05
	switch(row)
    37d0:	8c 81       	ldd	r24, Y+4	; 0x04
    37d2:	28 2f       	mov	r18, r24
    37d4:	30 e0       	ldi	r19, 0x00	; 0
    37d6:	3f 83       	std	Y+7, r19	; 0x07
    37d8:	2e 83       	std	Y+6, r18	; 0x06
    37da:	8e 81       	ldd	r24, Y+6	; 0x06
    37dc:	9f 81       	ldd	r25, Y+7	; 0x07
    37de:	81 30       	cpi	r24, 0x01	; 1
    37e0:	91 05       	cpc	r25, r1
    37e2:	31 f0       	breq	.+12     	; 0x37f0 <lcd_8bit_set_cursor+0x46>
    37e4:	2e 81       	ldd	r18, Y+6	; 0x06
    37e6:	3f 81       	ldd	r19, Y+7	; 0x07
    37e8:	22 30       	cpi	r18, 0x02	; 2
    37ea:	31 05       	cpc	r19, r1
    37ec:	59 f0       	breq	.+22     	; 0x3804 <lcd_8bit_set_cursor+0x5a>
    37ee:	13 c0       	rjmp	.+38     	; 0x3816 <lcd_8bit_set_cursor+0x6c>
	{
	case ROW1 : ret = lcd_8bit_send_command(lcd,0x80+column);break;
    37f0:	8d 81       	ldd	r24, Y+5	; 0x05
    37f2:	28 2f       	mov	r18, r24
    37f4:	20 58       	subi	r18, 0x80	; 128
    37f6:	8a 81       	ldd	r24, Y+2	; 0x02
    37f8:	9b 81       	ldd	r25, Y+3	; 0x03
    37fa:	62 2f       	mov	r22, r18
    37fc:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <lcd_8bit_send_command>
    3800:	89 83       	std	Y+1, r24	; 0x01
    3802:	09 c0       	rjmp	.+18     	; 0x3816 <lcd_8bit_set_cursor+0x6c>
	case ROW2 : ret = lcd_8bit_send_command(lcd,0xC0+column);break;
    3804:	8d 81       	ldd	r24, Y+5	; 0x05
    3806:	28 2f       	mov	r18, r24
    3808:	20 54       	subi	r18, 0x40	; 64
    380a:	8a 81       	ldd	r24, Y+2	; 0x02
    380c:	9b 81       	ldd	r25, Y+3	; 0x03
    380e:	62 2f       	mov	r22, r18
    3810:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <lcd_8bit_send_command>
    3814:	89 83       	std	Y+1, r24	; 0x01
	default : ;
	}
	return ret;
    3816:	89 81       	ldd	r24, Y+1	; 0x01
}
    3818:	27 96       	adiw	r28, 0x07	; 7
    381a:	0f b6       	in	r0, 0x3f	; 63
    381c:	f8 94       	cli
    381e:	de bf       	out	0x3e, r29	; 62
    3820:	0f be       	out	0x3f, r0	; 63
    3822:	cd bf       	out	0x3d, r28	; 61
    3824:	cf 91       	pop	r28
    3826:	df 91       	pop	r29
    3828:	08 95       	ret

0000382a <lcd_4bit_set_cursor>:
static STD_ReturnStatus lcd_4bit_set_cursor(const chr_lcd_4bit_t *lcd,uint8 row,uint8 column)
{
    382a:	df 93       	push	r29
    382c:	cf 93       	push	r28
    382e:	cd b7       	in	r28, 0x3d	; 61
    3830:	de b7       	in	r29, 0x3e	; 62
    3832:	27 97       	sbiw	r28, 0x07	; 7
    3834:	0f b6       	in	r0, 0x3f	; 63
    3836:	f8 94       	cli
    3838:	de bf       	out	0x3e, r29	; 62
    383a:	0f be       	out	0x3f, r0	; 63
    383c:	cd bf       	out	0x3d, r28	; 61
    383e:	9b 83       	std	Y+3, r25	; 0x03
    3840:	8a 83       	std	Y+2, r24	; 0x02
    3842:	6c 83       	std	Y+4, r22	; 0x04
    3844:	4d 83       	std	Y+5, r20	; 0x05
	STD_ReturnStatus ret = E_OK;
    3846:	81 e0       	ldi	r24, 0x01	; 1
    3848:	89 83       	std	Y+1, r24	; 0x01
	column--;
    384a:	8d 81       	ldd	r24, Y+5	; 0x05
    384c:	81 50       	subi	r24, 0x01	; 1
    384e:	8d 83       	std	Y+5, r24	; 0x05
	switch(row)
    3850:	8c 81       	ldd	r24, Y+4	; 0x04
    3852:	28 2f       	mov	r18, r24
    3854:	30 e0       	ldi	r19, 0x00	; 0
    3856:	3f 83       	std	Y+7, r19	; 0x07
    3858:	2e 83       	std	Y+6, r18	; 0x06
    385a:	8e 81       	ldd	r24, Y+6	; 0x06
    385c:	9f 81       	ldd	r25, Y+7	; 0x07
    385e:	81 30       	cpi	r24, 0x01	; 1
    3860:	91 05       	cpc	r25, r1
    3862:	31 f0       	breq	.+12     	; 0x3870 <lcd_4bit_set_cursor+0x46>
    3864:	2e 81       	ldd	r18, Y+6	; 0x06
    3866:	3f 81       	ldd	r19, Y+7	; 0x07
    3868:	22 30       	cpi	r18, 0x02	; 2
    386a:	31 05       	cpc	r19, r1
    386c:	59 f0       	breq	.+22     	; 0x3884 <lcd_4bit_set_cursor+0x5a>
    386e:	13 c0       	rjmp	.+38     	; 0x3896 <lcd_4bit_set_cursor+0x6c>
	{
	case ROW1 : ret = lcd_4bit_send_command(lcd,0x80+column);break;
    3870:	8d 81       	ldd	r24, Y+5	; 0x05
    3872:	28 2f       	mov	r18, r24
    3874:	20 58       	subi	r18, 0x80	; 128
    3876:	8a 81       	ldd	r24, Y+2	; 0x02
    3878:	9b 81       	ldd	r25, Y+3	; 0x03
    387a:	62 2f       	mov	r22, r18
    387c:	0e 94 cb 13 	call	0x2796	; 0x2796 <lcd_4bit_send_command>
    3880:	89 83       	std	Y+1, r24	; 0x01
    3882:	09 c0       	rjmp	.+18     	; 0x3896 <lcd_4bit_set_cursor+0x6c>
	case ROW2 : ret = lcd_4bit_send_command(lcd,0xC0+column);break;
    3884:	8d 81       	ldd	r24, Y+5	; 0x05
    3886:	28 2f       	mov	r18, r24
    3888:	20 54       	subi	r18, 0x40	; 64
    388a:	8a 81       	ldd	r24, Y+2	; 0x02
    388c:	9b 81       	ldd	r25, Y+3	; 0x03
    388e:	62 2f       	mov	r22, r18
    3890:	0e 94 cb 13 	call	0x2796	; 0x2796 <lcd_4bit_send_command>
    3894:	89 83       	std	Y+1, r24	; 0x01
	default : ;
	}
	return ret;
    3896:	89 81       	ldd	r24, Y+1	; 0x01
}
    3898:	27 96       	adiw	r28, 0x07	; 7
    389a:	0f b6       	in	r0, 0x3f	; 63
    389c:	f8 94       	cli
    389e:	de bf       	out	0x3e, r29	; 62
    38a0:	0f be       	out	0x3f, r0	; 63
    38a2:	cd bf       	out	0x3d, r28	; 61
    38a4:	cf 91       	pop	r28
    38a6:	df 91       	pop	r29
    38a8:	08 95       	ret

000038aa <keypad_initialize>:
 *
 * @param _keypad_obj
 * @return
 */
STD_ReturnStatus keypad_initialize(const keypad_t *_keypad_obj)
{
    38aa:	df 93       	push	r29
    38ac:	cf 93       	push	r28
    38ae:	00 d0       	rcall	.+0      	; 0x38b0 <keypad_initialize+0x6>
    38b0:	00 d0       	rcall	.+0      	; 0x38b2 <keypad_initialize+0x8>
    38b2:	0f 92       	push	r0
    38b4:	cd b7       	in	r28, 0x3d	; 61
    38b6:	de b7       	in	r29, 0x3e	; 62
    38b8:	9d 83       	std	Y+5, r25	; 0x05
    38ba:	8c 83       	std	Y+4, r24	; 0x04
	STD_ReturnStatus ret = E_OK;
    38bc:	81 e0       	ldi	r24, 0x01	; 1
    38be:	8b 83       	std	Y+3, r24	; 0x03
	uint8 rows_counter=ZERO_INIT,columns_counter=ZERO_INIT;
    38c0:	1a 82       	std	Y+2, r1	; 0x02
    38c2:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==_keypad_obj)
    38c4:	8c 81       	ldd	r24, Y+4	; 0x04
    38c6:	9d 81       	ldd	r25, Y+5	; 0x05
    38c8:	00 97       	sbiw	r24, 0x00	; 0
    38ca:	11 f4       	brne	.+4      	; 0x38d0 <keypad_initialize+0x26>
	{
		ret = E_NOT_OK;
    38cc:	1b 82       	std	Y+3, r1	; 0x03
    38ce:	27 c0       	rjmp	.+78     	; 0x391e <keypad_initialize+0x74>
	}
	else
	{
		for(rows_counter=ZERO_INIT;rows_counter<ECU_KEYPAD_ROWS;rows_counter++)
    38d0:	1a 82       	std	Y+2, r1	; 0x02
    38d2:	0d c0       	rjmp	.+26     	; 0x38ee <keypad_initialize+0x44>
		{
			ret = gpio_pin_initialize(&(_keypad_obj->keypad_row_pins[rows_counter]));
    38d4:	2c 81       	ldd	r18, Y+4	; 0x04
    38d6:	3d 81       	ldd	r19, Y+5	; 0x05
    38d8:	8a 81       	ldd	r24, Y+2	; 0x02
    38da:	88 2f       	mov	r24, r24
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	82 0f       	add	r24, r18
    38e0:	93 1f       	adc	r25, r19
    38e2:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <gpio_pin_initialize>
    38e6:	8b 83       	std	Y+3, r24	; 0x03
	{
		ret = E_NOT_OK;
	}
	else
	{
		for(rows_counter=ZERO_INIT;rows_counter<ECU_KEYPAD_ROWS;rows_counter++)
    38e8:	8a 81       	ldd	r24, Y+2	; 0x02
    38ea:	8f 5f       	subi	r24, 0xFF	; 255
    38ec:	8a 83       	std	Y+2, r24	; 0x02
    38ee:	8a 81       	ldd	r24, Y+2	; 0x02
    38f0:	84 30       	cpi	r24, 0x04	; 4
    38f2:	80 f3       	brcs	.-32     	; 0x38d4 <keypad_initialize+0x2a>
		{
			ret = gpio_pin_initialize(&(_keypad_obj->keypad_row_pins[rows_counter]));
		}

		for(columns_counter=ZERO_INIT;columns_counter<ECU_KEYPAD_COLUMNS;columns_counter++)
    38f4:	19 82       	std	Y+1, r1	; 0x01
    38f6:	10 c0       	rjmp	.+32     	; 0x3918 <keypad_initialize+0x6e>
		{
			ret = gpio_pin_direction_initialize(&(_keypad_obj->keypad_columns_pins[columns_counter]));
    38f8:	8c 81       	ldd	r24, Y+4	; 0x04
    38fa:	9d 81       	ldd	r25, Y+5	; 0x05
    38fc:	9c 01       	movw	r18, r24
    38fe:	2c 5f       	subi	r18, 0xFC	; 252
    3900:	3f 4f       	sbci	r19, 0xFF	; 255
    3902:	89 81       	ldd	r24, Y+1	; 0x01
    3904:	88 2f       	mov	r24, r24
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	82 0f       	add	r24, r18
    390a:	93 1f       	adc	r25, r19
    390c:	0e 94 84 0c 	call	0x1908	; 0x1908 <gpio_pin_direction_initialize>
    3910:	8b 83       	std	Y+3, r24	; 0x03
		for(rows_counter=ZERO_INIT;rows_counter<ECU_KEYPAD_ROWS;rows_counter++)
		{
			ret = gpio_pin_initialize(&(_keypad_obj->keypad_row_pins[rows_counter]));
		}

		for(columns_counter=ZERO_INIT;columns_counter<ECU_KEYPAD_COLUMNS;columns_counter++)
    3912:	89 81       	ldd	r24, Y+1	; 0x01
    3914:	8f 5f       	subi	r24, 0xFF	; 255
    3916:	89 83       	std	Y+1, r24	; 0x01
    3918:	89 81       	ldd	r24, Y+1	; 0x01
    391a:	84 30       	cpi	r24, 0x04	; 4
    391c:	68 f3       	brcs	.-38     	; 0x38f8 <keypad_initialize+0x4e>
		{
			ret = gpio_pin_direction_initialize(&(_keypad_obj->keypad_columns_pins[columns_counter]));
		}
	}
	return ret;
    391e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3920:	0f 90       	pop	r0
    3922:	0f 90       	pop	r0
    3924:	0f 90       	pop	r0
    3926:	0f 90       	pop	r0
    3928:	0f 90       	pop	r0
    392a:	cf 91       	pop	r28
    392c:	df 91       	pop	r29
    392e:	08 95       	ret

00003930 <keypad_get_value>:
 * @param _keypad_obj
 * @param value
 * @return
 */
STD_ReturnStatus keypad_get_value(const keypad_t *_keypad_obj,uint8 *value,uint8 *Key_pressed)
{
    3930:	df 93       	push	r29
    3932:	cf 93       	push	r28
    3934:	cd b7       	in	r28, 0x3d	; 61
    3936:	de b7       	in	r29, 0x3e	; 62
    3938:	69 97       	sbiw	r28, 0x19	; 25
    393a:	0f b6       	in	r0, 0x3f	; 63
    393c:	f8 94       	cli
    393e:	de bf       	out	0x3e, r29	; 62
    3940:	0f be       	out	0x3f, r0	; 63
    3942:	cd bf       	out	0x3d, r28	; 61
    3944:	9d 8b       	std	Y+21, r25	; 0x15
    3946:	8c 8b       	std	Y+20, r24	; 0x14
    3948:	7f 8b       	std	Y+23, r23	; 0x17
    394a:	6e 8b       	std	Y+22, r22	; 0x16
    394c:	59 8f       	std	Y+25, r21	; 0x19
    394e:	48 8f       	std	Y+24, r20	; 0x18
	STD_ReturnStatus ret = E_NOT_OK;
    3950:	1a 8a       	std	Y+18, r1	; 0x12
	*Key_pressed=KEY_NOT_PRESSED;
    3952:	e8 8d       	ldd	r30, Y+24	; 0x18
    3954:	f9 8d       	ldd	r31, Y+25	; 0x19
    3956:	10 82       	st	Z, r1
	uint8 l_rows_counter=ZERO_INIT,l_columns_counter=ZERO_INIT,l_counter=ZERO_INIT;
    3958:	19 8a       	std	Y+17, r1	; 0x11
    395a:	18 8a       	std	Y+16, r1	; 0x10
    395c:	1f 86       	std	Y+15, r1	; 0x0f
	uint8 column_logic=ZERO_INIT;
    395e:	1b 8a       	std	Y+19, r1	; 0x13
	if((NULL==_keypad_obj)||(NULL==value))
    3960:	8c 89       	ldd	r24, Y+20	; 0x14
    3962:	9d 89       	ldd	r25, Y+21	; 0x15
    3964:	00 97       	sbiw	r24, 0x00	; 0
    3966:	21 f0       	breq	.+8      	; 0x3970 <keypad_get_value+0x40>
    3968:	8e 89       	ldd	r24, Y+22	; 0x16
    396a:	9f 89       	ldd	r25, Y+23	; 0x17
    396c:	00 97       	sbiw	r24, 0x00	; 0
    396e:	11 f4       	brne	.+4      	; 0x3974 <keypad_get_value+0x44>
	{
		ret = E_NOT_OK;
    3970:	1a 8a       	std	Y+18, r1	; 0x12
    3972:	cf c0       	rjmp	.+414    	; 0x3b12 <keypad_get_value+0x1e2>
	}
	else
	{
		for(l_rows_counter=ZERO_INIT;l_rows_counter<ECU_KEYPAD_ROWS;l_rows_counter++)
    3974:	19 8a       	std	Y+17, r1	; 0x11
    3976:	c7 c0       	rjmp	.+398    	; 0x3b06 <keypad_get_value+0x1d6>
		{
			//3ayzen nekhaly kol el rows 3aleha zero volt ela awel wahd bas 3shan ne-check 3aleh
			//fa el awel hankhaly kol el kolo zero ba3daha nekhaly 5volt 3ala R1 w hakaza
			for(l_counter=ZERO_INIT;l_counter<ECU_KEYPAD_ROWS;l_counter++){
    3978:	1f 86       	std	Y+15, r1	; 0x0f
    397a:	0e c0       	rjmp	.+28     	; 0x3998 <keypad_get_value+0x68>
						ret = gpio_pin_write_logic(&(_keypad_obj->keypad_row_pins[l_counter]),GPIO_LOW);
    397c:	2c 89       	ldd	r18, Y+20	; 0x14
    397e:	3d 89       	ldd	r19, Y+21	; 0x15
    3980:	8f 85       	ldd	r24, Y+15	; 0x0f
    3982:	88 2f       	mov	r24, r24
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	82 0f       	add	r24, r18
    3988:	93 1f       	adc	r25, r19
    398a:	60 e0       	ldi	r22, 0x00	; 0
    398c:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
    3990:	8a 8b       	std	Y+18, r24	; 0x12
	{
		for(l_rows_counter=ZERO_INIT;l_rows_counter<ECU_KEYPAD_ROWS;l_rows_counter++)
		{
			//3ayzen nekhaly kol el rows 3aleha zero volt ela awel wahd bas 3shan ne-check 3aleh
			//fa el awel hankhaly kol el kolo zero ba3daha nekhaly 5volt 3ala R1 w hakaza
			for(l_counter=ZERO_INIT;l_counter<ECU_KEYPAD_ROWS;l_counter++){
    3992:	8f 85       	ldd	r24, Y+15	; 0x0f
    3994:	8f 5f       	subi	r24, 0xFF	; 255
    3996:	8f 87       	std	Y+15, r24	; 0x0f
    3998:	8f 85       	ldd	r24, Y+15	; 0x0f
    399a:	84 30       	cpi	r24, 0x04	; 4
    399c:	78 f3       	brcs	.-34     	; 0x397c <keypad_get_value+0x4c>
						ret = gpio_pin_write_logic(&(_keypad_obj->keypad_row_pins[l_counter]),GPIO_LOW);
					}
			//ba3d ma khalet kolo zero, hakhaly wahd wahd be 5 volt bel tarteeb 3shan keda akhat l_rows_counter fel loop el bara
			ret = gpio_pin_write_logic(&(_keypad_obj->keypad_row_pins[l_rows_counter]),GPIO_HIGH);
    399e:	2c 89       	ldd	r18, Y+20	; 0x14
    39a0:	3d 89       	ldd	r19, Y+21	; 0x15
    39a2:	89 89       	ldd	r24, Y+17	; 0x11
    39a4:	88 2f       	mov	r24, r24
    39a6:	90 e0       	ldi	r25, 0x00	; 0
    39a8:	82 0f       	add	r24, r18
    39aa:	93 1f       	adc	r25, r19
    39ac:	61 e0       	ldi	r22, 0x01	; 1
    39ae:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
    39b2:	8a 8b       	std	Y+18, r24	; 0x12
    39b4:	80 e0       	ldi	r24, 0x00	; 0
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	a0 e8       	ldi	r26, 0x80	; 128
    39ba:	bf e3       	ldi	r27, 0x3F	; 63
    39bc:	8b 87       	std	Y+11, r24	; 0x0b
    39be:	9c 87       	std	Y+12, r25	; 0x0c
    39c0:	ad 87       	std	Y+13, r26	; 0x0d
    39c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    39c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    39c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    39ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    39cc:	20 e0       	ldi	r18, 0x00	; 0
    39ce:	30 e0       	ldi	r19, 0x00	; 0
    39d0:	4a ef       	ldi	r20, 0xFA	; 250
    39d2:	54 e4       	ldi	r21, 0x44	; 68
    39d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39d8:	dc 01       	movw	r26, r24
    39da:	cb 01       	movw	r24, r22
    39dc:	8f 83       	std	Y+7, r24	; 0x07
    39de:	98 87       	std	Y+8, r25	; 0x08
    39e0:	a9 87       	std	Y+9, r26	; 0x09
    39e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39e4:	6f 81       	ldd	r22, Y+7	; 0x07
    39e6:	78 85       	ldd	r23, Y+8	; 0x08
    39e8:	89 85       	ldd	r24, Y+9	; 0x09
    39ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ec:	20 e0       	ldi	r18, 0x00	; 0
    39ee:	30 e0       	ldi	r19, 0x00	; 0
    39f0:	40 e8       	ldi	r20, 0x80	; 128
    39f2:	5f e3       	ldi	r21, 0x3F	; 63
    39f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39f8:	88 23       	and	r24, r24
    39fa:	2c f4       	brge	.+10     	; 0x3a06 <keypad_get_value+0xd6>
		__ticks = 1;
    39fc:	81 e0       	ldi	r24, 0x01	; 1
    39fe:	90 e0       	ldi	r25, 0x00	; 0
    3a00:	9e 83       	std	Y+6, r25	; 0x06
    3a02:	8d 83       	std	Y+5, r24	; 0x05
    3a04:	3f c0       	rjmp	.+126    	; 0x3a84 <keypad_get_value+0x154>
	else if (__tmp > 65535)
    3a06:	6f 81       	ldd	r22, Y+7	; 0x07
    3a08:	78 85       	ldd	r23, Y+8	; 0x08
    3a0a:	89 85       	ldd	r24, Y+9	; 0x09
    3a0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a0e:	20 e0       	ldi	r18, 0x00	; 0
    3a10:	3f ef       	ldi	r19, 0xFF	; 255
    3a12:	4f e7       	ldi	r20, 0x7F	; 127
    3a14:	57 e4       	ldi	r21, 0x47	; 71
    3a16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a1a:	18 16       	cp	r1, r24
    3a1c:	4c f5       	brge	.+82     	; 0x3a70 <keypad_get_value+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a20:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a22:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a24:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a26:	20 e0       	ldi	r18, 0x00	; 0
    3a28:	30 e0       	ldi	r19, 0x00	; 0
    3a2a:	40 e2       	ldi	r20, 0x20	; 32
    3a2c:	51 e4       	ldi	r21, 0x41	; 65
    3a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a32:	dc 01       	movw	r26, r24
    3a34:	cb 01       	movw	r24, r22
    3a36:	bc 01       	movw	r22, r24
    3a38:	cd 01       	movw	r24, r26
    3a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a3e:	dc 01       	movw	r26, r24
    3a40:	cb 01       	movw	r24, r22
    3a42:	9e 83       	std	Y+6, r25	; 0x06
    3a44:	8d 83       	std	Y+5, r24	; 0x05
    3a46:	0f c0       	rjmp	.+30     	; 0x3a66 <keypad_get_value+0x136>
    3a48:	88 ec       	ldi	r24, 0xC8	; 200
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	9c 83       	std	Y+4, r25	; 0x04
    3a4e:	8b 83       	std	Y+3, r24	; 0x03
    3a50:	8b 81       	ldd	r24, Y+3	; 0x03
    3a52:	9c 81       	ldd	r25, Y+4	; 0x04
    3a54:	01 97       	sbiw	r24, 0x01	; 1
    3a56:	f1 f7       	brne	.-4      	; 0x3a54 <keypad_get_value+0x124>
    3a58:	9c 83       	std	Y+4, r25	; 0x04
    3a5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a60:	01 97       	sbiw	r24, 0x01	; 1
    3a62:	9e 83       	std	Y+6, r25	; 0x06
    3a64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a66:	8d 81       	ldd	r24, Y+5	; 0x05
    3a68:	9e 81       	ldd	r25, Y+6	; 0x06
    3a6a:	00 97       	sbiw	r24, 0x00	; 0
    3a6c:	69 f7       	brne	.-38     	; 0x3a48 <keypad_get_value+0x118>
    3a6e:	14 c0       	rjmp	.+40     	; 0x3a98 <keypad_get_value+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a70:	6f 81       	ldd	r22, Y+7	; 0x07
    3a72:	78 85       	ldd	r23, Y+8	; 0x08
    3a74:	89 85       	ldd	r24, Y+9	; 0x09
    3a76:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a7c:	dc 01       	movw	r26, r24
    3a7e:	cb 01       	movw	r24, r22
    3a80:	9e 83       	std	Y+6, r25	; 0x06
    3a82:	8d 83       	std	Y+5, r24	; 0x05
    3a84:	8d 81       	ldd	r24, Y+5	; 0x05
    3a86:	9e 81       	ldd	r25, Y+6	; 0x06
    3a88:	9a 83       	std	Y+2, r25	; 0x02
    3a8a:	89 83       	std	Y+1, r24	; 0x01
    3a8c:	89 81       	ldd	r24, Y+1	; 0x01
    3a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a90:	01 97       	sbiw	r24, 0x01	; 1
    3a92:	f1 f7       	brne	.-4      	; 0x3a90 <keypad_get_value+0x160>
    3a94:	9a 83       	std	Y+2, r25	; 0x02
    3a96:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1);
			//columns Check
			for(l_columns_counter=ZERO_INIT;l_columns_counter<ECU_KEYPAD_COLUMNS;l_columns_counter++)
    3a98:	18 8a       	std	Y+16, r1	; 0x10
    3a9a:	2f c0       	rjmp	.+94     	; 0x3afa <keypad_get_value+0x1ca>
			{
				ret = gpio_pin_read_logic(&(_keypad_obj->keypad_columns_pins[l_columns_counter]),&column_logic);
    3a9c:	8c 89       	ldd	r24, Y+20	; 0x14
    3a9e:	9d 89       	ldd	r25, Y+21	; 0x15
    3aa0:	9c 01       	movw	r18, r24
    3aa2:	2c 5f       	subi	r18, 0xFC	; 252
    3aa4:	3f 4f       	sbci	r19, 0xFF	; 255
    3aa6:	88 89       	ldd	r24, Y+16	; 0x10
    3aa8:	88 2f       	mov	r24, r24
    3aaa:	90 e0       	ldi	r25, 0x00	; 0
    3aac:	82 0f       	add	r24, r18
    3aae:	93 1f       	adc	r25, r19
    3ab0:	9e 01       	movw	r18, r28
    3ab2:	2d 5e       	subi	r18, 0xED	; 237
    3ab4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ab6:	b9 01       	movw	r22, r18
    3ab8:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <gpio_pin_read_logic>
    3abc:	8a 8b       	std	Y+18, r24	; 0x12
				if(GPIO_HIGH==column_logic)
    3abe:	8b 89       	ldd	r24, Y+19	; 0x13
    3ac0:	81 30       	cpi	r24, 0x01	; 1
    3ac2:	c1 f4       	brne	.+48     	; 0x3af4 <keypad_get_value+0x1c4>
				{
					*value=btn_values_int[l_rows_counter][l_columns_counter];
    3ac4:	89 89       	ldd	r24, Y+17	; 0x11
    3ac6:	48 2f       	mov	r20, r24
    3ac8:	50 e0       	ldi	r21, 0x00	; 0
    3aca:	88 89       	ldd	r24, Y+16	; 0x10
    3acc:	28 2f       	mov	r18, r24
    3ace:	30 e0       	ldi	r19, 0x00	; 0
    3ad0:	ca 01       	movw	r24, r20
    3ad2:	88 0f       	add	r24, r24
    3ad4:	99 1f       	adc	r25, r25
    3ad6:	88 0f       	add	r24, r24
    3ad8:	99 1f       	adc	r25, r25
    3ada:	82 0f       	add	r24, r18
    3adc:	93 1f       	adc	r25, r19
    3ade:	fc 01       	movw	r30, r24
    3ae0:	e2 53       	subi	r30, 0x32	; 50
    3ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae4:	80 81       	ld	r24, Z
    3ae6:	ee 89       	ldd	r30, Y+22	; 0x16
    3ae8:	ff 89       	ldd	r31, Y+23	; 0x17
    3aea:	80 83       	st	Z, r24
					*Key_pressed=KEY_PRESSED;
    3aec:	e8 8d       	ldd	r30, Y+24	; 0x18
    3aee:	f9 8d       	ldd	r31, Y+25	; 0x19
    3af0:	81 e0       	ldi	r24, 0x01	; 1
    3af2:	80 83       	st	Z, r24
					}
			//ba3d ma khalet kolo zero, hakhaly wahd wahd be 5 volt bel tarteeb 3shan keda akhat l_rows_counter fel loop el bara
			ret = gpio_pin_write_logic(&(_keypad_obj->keypad_row_pins[l_rows_counter]),GPIO_HIGH);
			_delay_ms(1);
			//columns Check
			for(l_columns_counter=ZERO_INIT;l_columns_counter<ECU_KEYPAD_COLUMNS;l_columns_counter++)
    3af4:	88 89       	ldd	r24, Y+16	; 0x10
    3af6:	8f 5f       	subi	r24, 0xFF	; 255
    3af8:	88 8b       	std	Y+16, r24	; 0x10
    3afa:	88 89       	ldd	r24, Y+16	; 0x10
    3afc:	84 30       	cpi	r24, 0x04	; 4
    3afe:	70 f2       	brcs	.-100    	; 0x3a9c <keypad_get_value+0x16c>
	{
		ret = E_NOT_OK;
	}
	else
	{
		for(l_rows_counter=ZERO_INIT;l_rows_counter<ECU_KEYPAD_ROWS;l_rows_counter++)
    3b00:	89 89       	ldd	r24, Y+17	; 0x11
    3b02:	8f 5f       	subi	r24, 0xFF	; 255
    3b04:	89 8b       	std	Y+17, r24	; 0x11
    3b06:	89 89       	ldd	r24, Y+17	; 0x11
    3b08:	84 30       	cpi	r24, 0x04	; 4
    3b0a:	08 f4       	brcc	.+2      	; 0x3b0e <keypad_get_value+0x1de>
    3b0c:	35 cf       	rjmp	.-406    	; 0x3978 <keypad_get_value+0x48>
					*value=btn_values_int[l_rows_counter][l_columns_counter];
					*Key_pressed=KEY_PRESSED;
				}
			}
		}
		ret = E_OK;
    3b0e:	81 e0       	ldi	r24, 0x01	; 1
    3b10:	8a 8b       	std	Y+18, r24	; 0x12
	}
	return ret;
    3b12:	8a 89       	ldd	r24, Y+18	; 0x12
}
    3b14:	69 96       	adiw	r28, 0x19	; 25
    3b16:	0f b6       	in	r0, 0x3f	; 63
    3b18:	f8 94       	cli
    3b1a:	de bf       	out	0x3e, r29	; 62
    3b1c:	0f be       	out	0x3f, r0	; 63
    3b1e:	cd bf       	out	0x3d, r28	; 61
    3b20:	cf 91       	pop	r28
    3b22:	df 91       	pop	r29
    3b24:	08 95       	ret

00003b26 <seven_segment_initialize>:

#include "ECU_SEVEN_SEG.h"


STD_ReturnStatus seven_segment_initialize(const segment_t *seg)
{
    3b26:	df 93       	push	r29
    3b28:	cf 93       	push	r28
    3b2a:	00 d0       	rcall	.+0      	; 0x3b2c <seven_segment_initialize+0x6>
    3b2c:	0f 92       	push	r0
    3b2e:	cd b7       	in	r28, 0x3d	; 61
    3b30:	de b7       	in	r29, 0x3e	; 62
    3b32:	9b 83       	std	Y+3, r25	; 0x03
    3b34:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_OK;
    3b36:	81 e0       	ldi	r24, 0x01	; 1
    3b38:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==seg)
    3b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    3b3e:	00 97       	sbiw	r24, 0x00	; 0
    3b40:	11 f4       	brne	.+4      	; 0x3b46 <seven_segment_initialize+0x20>
	{
		ret = E_NOT_OK;
    3b42:	19 82       	std	Y+1, r1	; 0x01
    3b44:	22 c0       	rjmp	.+68     	; 0x3b8a <seven_segment_initialize+0x64>
	}
	else
	{
	gpio_pin_initialize(&(seg->segment_pins[0]));
    3b46:	8a 81       	ldd	r24, Y+2	; 0x02
    3b48:	9b 81       	ldd	r25, Y+3	; 0x03
    3b4a:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <gpio_pin_initialize>
	gpio_pin_initialize(&(seg->segment_pins[1]));
    3b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b50:	9b 81       	ldd	r25, Y+3	; 0x03
    3b52:	01 96       	adiw	r24, 0x01	; 1
    3b54:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <gpio_pin_initialize>
	gpio_pin_initialize(&(seg->segment_pins[2]));
    3b58:	8a 81       	ldd	r24, Y+2	; 0x02
    3b5a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b5c:	02 96       	adiw	r24, 0x02	; 2
    3b5e:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <gpio_pin_initialize>
	gpio_pin_initialize(&(seg->segment_pins[3]));
    3b62:	8a 81       	ldd	r24, Y+2	; 0x02
    3b64:	9b 81       	ldd	r25, Y+3	; 0x03
    3b66:	03 96       	adiw	r24, 0x03	; 3
    3b68:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <gpio_pin_initialize>
	gpio_pin_initialize(&(seg->segment_pins[4]));
    3b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b6e:	9b 81       	ldd	r25, Y+3	; 0x03
    3b70:	04 96       	adiw	r24, 0x04	; 4
    3b72:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <gpio_pin_initialize>
	gpio_pin_initialize(&(seg->segment_pins[5]));
    3b76:	8a 81       	ldd	r24, Y+2	; 0x02
    3b78:	9b 81       	ldd	r25, Y+3	; 0x03
    3b7a:	05 96       	adiw	r24, 0x05	; 5
    3b7c:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <gpio_pin_initialize>
	gpio_pin_initialize(&(seg->segment_pins[6]));
    3b80:	8a 81       	ldd	r24, Y+2	; 0x02
    3b82:	9b 81       	ldd	r25, Y+3	; 0x03
    3b84:	06 96       	adiw	r24, 0x06	; 6
    3b86:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <gpio_pin_initialize>
	}
	return ret;
    3b8a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b8c:	0f 90       	pop	r0
    3b8e:	0f 90       	pop	r0
    3b90:	0f 90       	pop	r0
    3b92:	cf 91       	pop	r28
    3b94:	df 91       	pop	r29
    3b96:	08 95       	ret

00003b98 <seven_segment_write_number>:
STD_ReturnStatus seven_segment_write_number(const segment_t *seg,uint8 num)
{
    3b98:	df 93       	push	r29
    3b9a:	cf 93       	push	r28
    3b9c:	00 d0       	rcall	.+0      	; 0x3b9e <seven_segment_write_number+0x6>
    3b9e:	00 d0       	rcall	.+0      	; 0x3ba0 <seven_segment_write_number+0x8>
    3ba0:	cd b7       	in	r28, 0x3d	; 61
    3ba2:	de b7       	in	r29, 0x3e	; 62
    3ba4:	9b 83       	std	Y+3, r25	; 0x03
    3ba6:	8a 83       	std	Y+2, r24	; 0x02
    3ba8:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_OK;
    3baa:	81 e0       	ldi	r24, 0x01	; 1
    3bac:	89 83       	std	Y+1, r24	; 0x01
	if((NULL==seg)&&(num>9))
    3bae:	8a 81       	ldd	r24, Y+2	; 0x02
    3bb0:	9b 81       	ldd	r25, Y+3	; 0x03
    3bb2:	00 97       	sbiw	r24, 0x00	; 0
    3bb4:	29 f4       	brne	.+10     	; 0x3bc0 <seven_segment_write_number+0x28>
    3bb6:	8c 81       	ldd	r24, Y+4	; 0x04
    3bb8:	8a 30       	cpi	r24, 0x0A	; 10
    3bba:	10 f0       	brcs	.+4      	; 0x3bc0 <seven_segment_write_number+0x28>
	{
		ret = E_NOT_OK;
    3bbc:	19 82       	std	Y+1, r1	; 0x01
    3bbe:	8a c0       	rjmp	.+276    	; 0x3cd4 <seven_segment_write_number+0x13c>
	}
	else
	{
		gpio_pin_write_logic(&(seg->segment_pins[0]),CommCathArr[num]&0x01);
    3bc0:	4a 81       	ldd	r20, Y+2	; 0x02
    3bc2:	5b 81       	ldd	r21, Y+3	; 0x03
    3bc4:	8c 81       	ldd	r24, Y+4	; 0x04
    3bc6:	88 2f       	mov	r24, r24
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	fc 01       	movw	r30, r24
    3bcc:	ed 57       	subi	r30, 0x7D	; 125
    3bce:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd0:	80 81       	ld	r24, Z
    3bd2:	28 2f       	mov	r18, r24
    3bd4:	21 70       	andi	r18, 0x01	; 1
    3bd6:	ca 01       	movw	r24, r20
    3bd8:	62 2f       	mov	r22, r18
    3bda:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
		gpio_pin_write_logic(&(seg->segment_pins[1]),(CommCathArr[num]>>1)&0x01);
    3bde:	8a 81       	ldd	r24, Y+2	; 0x02
    3be0:	9b 81       	ldd	r25, Y+3	; 0x03
    3be2:	ac 01       	movw	r20, r24
    3be4:	4f 5f       	subi	r20, 0xFF	; 255
    3be6:	5f 4f       	sbci	r21, 0xFF	; 255
    3be8:	8c 81       	ldd	r24, Y+4	; 0x04
    3bea:	88 2f       	mov	r24, r24
    3bec:	90 e0       	ldi	r25, 0x00	; 0
    3bee:	fc 01       	movw	r30, r24
    3bf0:	ed 57       	subi	r30, 0x7D	; 125
    3bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf4:	80 81       	ld	r24, Z
    3bf6:	86 95       	lsr	r24
    3bf8:	28 2f       	mov	r18, r24
    3bfa:	21 70       	andi	r18, 0x01	; 1
    3bfc:	ca 01       	movw	r24, r20
    3bfe:	62 2f       	mov	r22, r18
    3c00:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
		gpio_pin_write_logic(&(seg->segment_pins[2]),(CommCathArr[num]>>2)&0x01);
    3c04:	8a 81       	ldd	r24, Y+2	; 0x02
    3c06:	9b 81       	ldd	r25, Y+3	; 0x03
    3c08:	ac 01       	movw	r20, r24
    3c0a:	4e 5f       	subi	r20, 0xFE	; 254
    3c0c:	5f 4f       	sbci	r21, 0xFF	; 255
    3c0e:	8c 81       	ldd	r24, Y+4	; 0x04
    3c10:	88 2f       	mov	r24, r24
    3c12:	90 e0       	ldi	r25, 0x00	; 0
    3c14:	fc 01       	movw	r30, r24
    3c16:	ed 57       	subi	r30, 0x7D	; 125
    3c18:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1a:	80 81       	ld	r24, Z
    3c1c:	86 95       	lsr	r24
    3c1e:	86 95       	lsr	r24
    3c20:	28 2f       	mov	r18, r24
    3c22:	21 70       	andi	r18, 0x01	; 1
    3c24:	ca 01       	movw	r24, r20
    3c26:	62 2f       	mov	r22, r18
    3c28:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
		gpio_pin_write_logic(&(seg->segment_pins[3]),(CommCathArr[num]>>3)&0x01);
    3c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c2e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c30:	ac 01       	movw	r20, r24
    3c32:	4d 5f       	subi	r20, 0xFD	; 253
    3c34:	5f 4f       	sbci	r21, 0xFF	; 255
    3c36:	8c 81       	ldd	r24, Y+4	; 0x04
    3c38:	88 2f       	mov	r24, r24
    3c3a:	90 e0       	ldi	r25, 0x00	; 0
    3c3c:	fc 01       	movw	r30, r24
    3c3e:	ed 57       	subi	r30, 0x7D	; 125
    3c40:	ff 4f       	sbci	r31, 0xFF	; 255
    3c42:	80 81       	ld	r24, Z
    3c44:	86 95       	lsr	r24
    3c46:	86 95       	lsr	r24
    3c48:	86 95       	lsr	r24
    3c4a:	28 2f       	mov	r18, r24
    3c4c:	21 70       	andi	r18, 0x01	; 1
    3c4e:	ca 01       	movw	r24, r20
    3c50:	62 2f       	mov	r22, r18
    3c52:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
		gpio_pin_write_logic(&(seg->segment_pins[4]),(CommCathArr[num]>>4)&0x01);
    3c56:	8a 81       	ldd	r24, Y+2	; 0x02
    3c58:	9b 81       	ldd	r25, Y+3	; 0x03
    3c5a:	ac 01       	movw	r20, r24
    3c5c:	4c 5f       	subi	r20, 0xFC	; 252
    3c5e:	5f 4f       	sbci	r21, 0xFF	; 255
    3c60:	8c 81       	ldd	r24, Y+4	; 0x04
    3c62:	88 2f       	mov	r24, r24
    3c64:	90 e0       	ldi	r25, 0x00	; 0
    3c66:	fc 01       	movw	r30, r24
    3c68:	ed 57       	subi	r30, 0x7D	; 125
    3c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c6c:	80 81       	ld	r24, Z
    3c6e:	82 95       	swap	r24
    3c70:	8f 70       	andi	r24, 0x0F	; 15
    3c72:	28 2f       	mov	r18, r24
    3c74:	21 70       	andi	r18, 0x01	; 1
    3c76:	ca 01       	movw	r24, r20
    3c78:	62 2f       	mov	r22, r18
    3c7a:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
		gpio_pin_write_logic(&(seg->segment_pins[5]),(CommCathArr[num]>>5)&0x01);
    3c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c80:	9b 81       	ldd	r25, Y+3	; 0x03
    3c82:	ac 01       	movw	r20, r24
    3c84:	4b 5f       	subi	r20, 0xFB	; 251
    3c86:	5f 4f       	sbci	r21, 0xFF	; 255
    3c88:	8c 81       	ldd	r24, Y+4	; 0x04
    3c8a:	88 2f       	mov	r24, r24
    3c8c:	90 e0       	ldi	r25, 0x00	; 0
    3c8e:	fc 01       	movw	r30, r24
    3c90:	ed 57       	subi	r30, 0x7D	; 125
    3c92:	ff 4f       	sbci	r31, 0xFF	; 255
    3c94:	80 81       	ld	r24, Z
    3c96:	82 95       	swap	r24
    3c98:	86 95       	lsr	r24
    3c9a:	87 70       	andi	r24, 0x07	; 7
    3c9c:	28 2f       	mov	r18, r24
    3c9e:	21 70       	andi	r18, 0x01	; 1
    3ca0:	ca 01       	movw	r24, r20
    3ca2:	62 2f       	mov	r22, r18
    3ca4:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
		gpio_pin_write_logic(&(seg->segment_pins[6]),(CommCathArr[num]>>6)&0x01);
    3ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    3caa:	9b 81       	ldd	r25, Y+3	; 0x03
    3cac:	ac 01       	movw	r20, r24
    3cae:	4a 5f       	subi	r20, 0xFA	; 250
    3cb0:	5f 4f       	sbci	r21, 0xFF	; 255
    3cb2:	8c 81       	ldd	r24, Y+4	; 0x04
    3cb4:	88 2f       	mov	r24, r24
    3cb6:	90 e0       	ldi	r25, 0x00	; 0
    3cb8:	fc 01       	movw	r30, r24
    3cba:	ed 57       	subi	r30, 0x7D	; 125
    3cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cbe:	80 81       	ld	r24, Z
    3cc0:	82 95       	swap	r24
    3cc2:	86 95       	lsr	r24
    3cc4:	86 95       	lsr	r24
    3cc6:	83 70       	andi	r24, 0x03	; 3
    3cc8:	28 2f       	mov	r18, r24
    3cca:	21 70       	andi	r18, 0x01	; 1
    3ccc:	ca 01       	movw	r24, r20
    3cce:	62 2f       	mov	r22, r18
    3cd0:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
	}
	return ret;
    3cd4:	89 81       	ldd	r24, Y+1	; 0x01
}
    3cd6:	0f 90       	pop	r0
    3cd8:	0f 90       	pop	r0
    3cda:	0f 90       	pop	r0
    3cdc:	0f 90       	pop	r0
    3cde:	cf 91       	pop	r28
    3ce0:	df 91       	pop	r29
    3ce2:	08 95       	ret

00003ce4 <dc_motor_initialize>:
 *
 * @param _dc_motor
 * @return
 */
STD_ReturnStatus dc_motor_initialize(const dc_motor_t *_dc_motor)
{
    3ce4:	df 93       	push	r29
    3ce6:	cf 93       	push	r28
    3ce8:	00 d0       	rcall	.+0      	; 0x3cea <dc_motor_initialize+0x6>
    3cea:	0f 92       	push	r0
    3cec:	cd b7       	in	r28, 0x3d	; 61
    3cee:	de b7       	in	r29, 0x3e	; 62
    3cf0:	9b 83       	std	Y+3, r25	; 0x03
    3cf2:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_OK;
    3cf4:	81 e0       	ldi	r24, 0x01	; 1
    3cf6:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==_dc_motor)
    3cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cfa:	9b 81       	ldd	r25, Y+3	; 0x03
    3cfc:	00 97       	sbiw	r24, 0x00	; 0
    3cfe:	11 f4       	brne	.+4      	; 0x3d04 <dc_motor_initialize+0x20>
	{
		ret=E_NOT_OK;
    3d00:	19 82       	std	Y+1, r1	; 0x01
    3d02:	09 c0       	rjmp	.+18     	; 0x3d16 <dc_motor_initialize+0x32>
	}
	else
	{


		gpio_pin_initialize(&(_dc_motor->dc_motor_pin[0]));
    3d04:	8a 81       	ldd	r24, Y+2	; 0x02
    3d06:	9b 81       	ldd	r25, Y+3	; 0x03
    3d08:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <gpio_pin_initialize>
		gpio_pin_initialize(&(_dc_motor->dc_motor_pin[1]));
    3d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d0e:	9b 81       	ldd	r25, Y+3	; 0x03
    3d10:	01 96       	adiw	r24, 0x01	; 1
    3d12:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <gpio_pin_initialize>
	}
	return ret;
    3d16:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d18:	0f 90       	pop	r0
    3d1a:	0f 90       	pop	r0
    3d1c:	0f 90       	pop	r0
    3d1e:	cf 91       	pop	r28
    3d20:	df 91       	pop	r29
    3d22:	08 95       	ret

00003d24 <dc_motor_move_right>:
 *
 * @param _dc_motor
 * @return
 */
STD_ReturnStatus dc_motor_move_right(const dc_motor_t *_dc_motor)
{
    3d24:	df 93       	push	r29
    3d26:	cf 93       	push	r28
    3d28:	00 d0       	rcall	.+0      	; 0x3d2a <dc_motor_move_right+0x6>
    3d2a:	0f 92       	push	r0
    3d2c:	cd b7       	in	r28, 0x3d	; 61
    3d2e:	de b7       	in	r29, 0x3e	; 62
    3d30:	9b 83       	std	Y+3, r25	; 0x03
    3d32:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_OK;
    3d34:	81 e0       	ldi	r24, 0x01	; 1
    3d36:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==_dc_motor)
    3d38:	8a 81       	ldd	r24, Y+2	; 0x02
    3d3a:	9b 81       	ldd	r25, Y+3	; 0x03
    3d3c:	00 97       	sbiw	r24, 0x00	; 0
    3d3e:	11 f4       	brne	.+4      	; 0x3d44 <dc_motor_move_right+0x20>
	{
		ret=E_NOT_OK;
    3d40:	19 82       	std	Y+1, r1	; 0x01
    3d42:	0b c0       	rjmp	.+22     	; 0x3d5a <dc_motor_move_right+0x36>
	}
	else
	{
		gpio_pin_write_logic(&(_dc_motor->dc_motor_pin[0]),GPIO_HIGH);
    3d44:	8a 81       	ldd	r24, Y+2	; 0x02
    3d46:	9b 81       	ldd	r25, Y+3	; 0x03
    3d48:	61 e0       	ldi	r22, 0x01	; 1
    3d4a:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
		gpio_pin_write_logic(&(_dc_motor->dc_motor_pin[1]),GPIO_LOW);
    3d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d50:	9b 81       	ldd	r25, Y+3	; 0x03
    3d52:	01 96       	adiw	r24, 0x01	; 1
    3d54:	60 e0       	ldi	r22, 0x00	; 0
    3d56:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
	}
	return ret;
    3d5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d5c:	0f 90       	pop	r0
    3d5e:	0f 90       	pop	r0
    3d60:	0f 90       	pop	r0
    3d62:	cf 91       	pop	r28
    3d64:	df 91       	pop	r29
    3d66:	08 95       	ret

00003d68 <dc_motor_move_left>:
 *
 * @param _dc_motor
 * @return
 */
STD_ReturnStatus dc_motor_move_left(const dc_motor_t *_dc_motor)
{
    3d68:	df 93       	push	r29
    3d6a:	cf 93       	push	r28
    3d6c:	00 d0       	rcall	.+0      	; 0x3d6e <dc_motor_move_left+0x6>
    3d6e:	0f 92       	push	r0
    3d70:	cd b7       	in	r28, 0x3d	; 61
    3d72:	de b7       	in	r29, 0x3e	; 62
    3d74:	9b 83       	std	Y+3, r25	; 0x03
    3d76:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_OK;
    3d78:	81 e0       	ldi	r24, 0x01	; 1
    3d7a:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==_dc_motor)
    3d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d7e:	9b 81       	ldd	r25, Y+3	; 0x03
    3d80:	00 97       	sbiw	r24, 0x00	; 0
    3d82:	11 f4       	brne	.+4      	; 0x3d88 <dc_motor_move_left+0x20>
	{
		ret=E_NOT_OK;
    3d84:	19 82       	std	Y+1, r1	; 0x01
    3d86:	0b c0       	rjmp	.+22     	; 0x3d9e <dc_motor_move_left+0x36>
	}
	else
	{
		gpio_pin_write_logic(&(_dc_motor->dc_motor_pin[0]),GPIO_LOW);
    3d88:	8a 81       	ldd	r24, Y+2	; 0x02
    3d8a:	9b 81       	ldd	r25, Y+3	; 0x03
    3d8c:	60 e0       	ldi	r22, 0x00	; 0
    3d8e:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
		gpio_pin_write_logic(&(_dc_motor->dc_motor_pin[1]),GPIO_HIGH);
    3d92:	8a 81       	ldd	r24, Y+2	; 0x02
    3d94:	9b 81       	ldd	r25, Y+3	; 0x03
    3d96:	01 96       	adiw	r24, 0x01	; 1
    3d98:	61 e0       	ldi	r22, 0x01	; 1
    3d9a:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
	}
	return ret;
    3d9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3da0:	0f 90       	pop	r0
    3da2:	0f 90       	pop	r0
    3da4:	0f 90       	pop	r0
    3da6:	cf 91       	pop	r28
    3da8:	df 91       	pop	r29
    3daa:	08 95       	ret

00003dac <dc_motor_stop>:
 *
 * @param _dc_motor
 * @return
 */
STD_ReturnStatus dc_motor_stop(const dc_motor_t *_dc_motor)
{
    3dac:	df 93       	push	r29
    3dae:	cf 93       	push	r28
    3db0:	00 d0       	rcall	.+0      	; 0x3db2 <dc_motor_stop+0x6>
    3db2:	0f 92       	push	r0
    3db4:	cd b7       	in	r28, 0x3d	; 61
    3db6:	de b7       	in	r29, 0x3e	; 62
    3db8:	9b 83       	std	Y+3, r25	; 0x03
    3dba:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_OK;
    3dbc:	81 e0       	ldi	r24, 0x01	; 1
    3dbe:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==_dc_motor)
    3dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc2:	9b 81       	ldd	r25, Y+3	; 0x03
    3dc4:	00 97       	sbiw	r24, 0x00	; 0
    3dc6:	11 f4       	brne	.+4      	; 0x3dcc <dc_motor_stop+0x20>
	{
		ret=E_NOT_OK;
    3dc8:	19 82       	std	Y+1, r1	; 0x01
    3dca:	0b c0       	rjmp	.+22     	; 0x3de2 <dc_motor_stop+0x36>
	}
	else
	{
		gpio_pin_write_logic(&(_dc_motor->dc_motor_pin[0]),GPIO_LOW);
    3dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    3dce:	9b 81       	ldd	r25, Y+3	; 0x03
    3dd0:	60 e0       	ldi	r22, 0x00	; 0
    3dd2:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
		gpio_pin_write_logic(&(_dc_motor->dc_motor_pin[1]),GPIO_LOW);
    3dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    3dd8:	9b 81       	ldd	r25, Y+3	; 0x03
    3dda:	01 96       	adiw	r24, 0x01	; 1
    3ddc:	60 e0       	ldi	r22, 0x00	; 0
    3dde:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <gpio_pin_write_logic>
	}
	return ret;
    3de2:	89 81       	ldd	r24, Y+1	; 0x01
}
    3de4:	0f 90       	pop	r0
    3de6:	0f 90       	pop	r0
    3de8:	0f 90       	pop	r0
    3dea:	cf 91       	pop	r28
    3dec:	df 91       	pop	r29
    3dee:	08 95       	ret

00003df0 <ecu_layer_initialize>:
		.lcd_data[7].direction=DIRECTION_OUTPUT,
		.lcd_data[7].logic=GPIO_LOW
};

void ecu_layer_initialize()
{
    3df0:	df 93       	push	r29
    3df2:	cf 93       	push	r28
    3df4:	0f 92       	push	r0
    3df6:	cd b7       	in	r28, 0x3d	; 61
    3df8:	de b7       	in	r29, 0x3e	; 62
	STD_ReturnStatus ret = E_NOT_OK;
    3dfa:	19 82       	std	Y+1, r1	; 0x01
	ret = lcd_4bit_initialize(&lcd1);
    3dfc:	8f e9       	ldi	r24, 0x9F	; 159
    3dfe:	90 e0       	ldi	r25, 0x00	; 0
    3e00:	0e 94 70 12 	call	0x24e0	; 0x24e0 <lcd_4bit_initialize>
    3e04:	89 83       	std	Y+1, r24	; 0x01
	ret = keypad_initialize(&keypad1);
    3e06:	87 e9       	ldi	r24, 0x97	; 151
    3e08:	90 e0       	ldi	r25, 0x00	; 0
    3e0a:	0e 94 55 1c 	call	0x38aa	; 0x38aa <keypad_initialize>
    3e0e:	89 83       	std	Y+1, r24	; 0x01
}
    3e10:	0f 90       	pop	r0
    3e12:	cf 91       	pop	r28
    3e14:	df 91       	pop	r29
    3e16:	08 95       	ret

00003e18 <main>:




int main()
{
    3e18:	df 93       	push	r29
    3e1a:	cf 93       	push	r28
    3e1c:	cd b7       	in	r28, 0x3d	; 61
    3e1e:	de b7       	in	r29, 0x3e	; 62
	Application_initialize();
    3e20:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <Application_initialize>
	//lcd_4bit_send_string_pos(&lcd1,1,1,"Hello");
	while(1)
	{
		if(adc_req==0)
    3e24:	80 91 ec 00 	lds	r24, 0x00EC
    3e28:	88 23       	and	r24, r24
    3e2a:	41 f4       	brne	.+16     	; 0x3e3c <main+0x24>
		{
			ret = ADC_StartConversion_Interrupt(&adc1,ADC_CHANNEL_AN0);
    3e2c:	89 eb       	ldi	r24, 0xB9	; 185
    3e2e:	90 e0       	ldi	r25, 0x00	; 0
    3e30:	60 e0       	ldi	r22, 0x00	; 0
    3e32:	0e 94 82 0b 	call	0x1704	; 0x1704 <ADC_StartConversion_Interrupt>
    3e36:	80 93 ee 00 	sts	0x00EE, r24
    3e3a:	0b c0       	rjmp	.+22     	; 0x3e52 <main+0x3a>
		}
		else if(adc_req==1)
    3e3c:	80 91 ec 00 	lds	r24, 0x00EC
    3e40:	81 30       	cpi	r24, 0x01	; 1
    3e42:	39 f4       	brne	.+14     	; 0x3e52 <main+0x3a>
		{
			ret = ADC_StartConversion_Interrupt(&adc1,ADC_CHANNEL_AN1);
    3e44:	89 eb       	ldi	r24, 0xB9	; 185
    3e46:	90 e0       	ldi	r25, 0x00	; 0
    3e48:	61 e0       	ldi	r22, 0x01	; 1
    3e4a:	0e 94 82 0b 	call	0x1704	; 0x1704 <ADC_StartConversion_Interrupt>
    3e4e:	80 93 ee 00 	sts	0x00EE, r24
		}
		lcd_4bit_send_int_pos(&lcd1,2,1,(uint32)adc_res_2);
    3e52:	20 91 ea 00 	lds	r18, 0x00EA
    3e56:	30 91 eb 00 	lds	r19, 0x00EB
    3e5a:	8f e9       	ldi	r24, 0x9F	; 159
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	62 e0       	ldi	r22, 0x02	; 2
    3e60:	41 e0       	ldi	r20, 0x01	; 1
    3e62:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <lcd_4bit_send_int_pos>
		lcd_4bit_send_int_pos(&lcd1,1,1,(uint32)adc_res_1);
    3e66:	20 91 e8 00 	lds	r18, 0x00E8
    3e6a:	30 91 e9 00 	lds	r19, 0x00E9
    3e6e:	8f e9       	ldi	r24, 0x9F	; 159
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	61 e0       	ldi	r22, 0x01	; 1
    3e74:	41 e0       	ldi	r20, 0x01	; 1
    3e76:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <lcd_4bit_send_int_pos>
    3e7a:	d4 cf       	rjmp	.-88     	; 0x3e24 <main+0xc>

00003e7c <Application_initialize>:
	}

}

void Application_initialize()
{
    3e7c:	df 93       	push	r29
    3e7e:	cf 93       	push	r28
    3e80:	cd b7       	in	r28, 0x3d	; 61
    3e82:	de b7       	in	r29, 0x3e	; 62

	ecu_layer_initialize();
    3e84:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <ecu_layer_initialize>
	ret = ADC_Init(&adc1);
    3e88:	89 eb       	ldi	r24, 0xB9	; 185
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    3e8c:	0e 94 31 09 	call	0x1262	; 0x1262 <ADC_Init>
    3e90:	80 93 ee 00 	sts	0x00EE, r24
}
    3e94:	cf 91       	pop	r28
    3e96:	df 91       	pop	r29
    3e98:	08 95       	ret

00003e9a <ADC_DefaulInterruptHandler>:


void ADC_DefaulInterruptHandler(void)
{
    3e9a:	df 93       	push	r29
    3e9c:	cf 93       	push	r28
    3e9e:	cd b7       	in	r28, 0x3d	; 61
    3ea0:	de b7       	in	r29, 0x3e	; 62
	if(0==adc_req)
    3ea2:	80 91 ec 00 	lds	r24, 0x00EC
    3ea6:	88 23       	and	r24, r24
    3ea8:	79 f4       	brne	.+30     	; 0x3ec8 <ADC_DefaulInterruptHandler+0x2e>
	{
		adc_res_1=0;
    3eaa:	10 92 e9 00 	sts	0x00E9, r1
    3eae:	10 92 e8 00 	sts	0x00E8, r1
		ADC_GetConversionResult(&adc1,&adc_res_1);
    3eb2:	89 eb       	ldi	r24, 0xB9	; 185
    3eb4:	90 e0       	ldi	r25, 0x00	; 0
    3eb6:	28 ee       	ldi	r18, 0xE8	; 232
    3eb8:	30 e0       	ldi	r19, 0x00	; 0
    3eba:	b9 01       	movw	r22, r18
    3ebc:	0e 94 3f 0a 	call	0x147e	; 0x147e <ADC_GetConversionResult>
		adc_req=1;
    3ec0:	81 e0       	ldi	r24, 0x01	; 1
    3ec2:	80 93 ec 00 	sts	0x00EC, r24
    3ec6:	0d c0       	rjmp	.+26     	; 0x3ee2 <ADC_DefaulInterruptHandler+0x48>
	}
	else if(adc_req==1)
    3ec8:	80 91 ec 00 	lds	r24, 0x00EC
    3ecc:	81 30       	cpi	r24, 0x01	; 1
    3ece:	49 f4       	brne	.+18     	; 0x3ee2 <ADC_DefaulInterruptHandler+0x48>
	{
		ADC_GetConversionResult(&adc1,&adc_res_2);
    3ed0:	89 eb       	ldi	r24, 0xB9	; 185
    3ed2:	90 e0       	ldi	r25, 0x00	; 0
    3ed4:	2a ee       	ldi	r18, 0xEA	; 234
    3ed6:	30 e0       	ldi	r19, 0x00	; 0
    3ed8:	b9 01       	movw	r22, r18
    3eda:	0e 94 3f 0a 	call	0x147e	; 0x147e <ADC_GetConversionResult>
		adc_req=0;
    3ede:	10 92 ec 00 	sts	0x00EC, r1
	}
	else
	{

	}
}
    3ee2:	cf 91       	pop	r28
    3ee4:	df 91       	pop	r29
    3ee6:	08 95       	ret

00003ee8 <__udivmodqi4>:
    3ee8:	99 1b       	sub	r25, r25
    3eea:	79 e0       	ldi	r23, 0x09	; 9
    3eec:	04 c0       	rjmp	.+8      	; 0x3ef6 <__udivmodqi4_ep>

00003eee <__udivmodqi4_loop>:
    3eee:	99 1f       	adc	r25, r25
    3ef0:	96 17       	cp	r25, r22
    3ef2:	08 f0       	brcs	.+2      	; 0x3ef6 <__udivmodqi4_ep>
    3ef4:	96 1b       	sub	r25, r22

00003ef6 <__udivmodqi4_ep>:
    3ef6:	88 1f       	adc	r24, r24
    3ef8:	7a 95       	dec	r23
    3efa:	c9 f7       	brne	.-14     	; 0x3eee <__udivmodqi4_loop>
    3efc:	80 95       	com	r24
    3efe:	08 95       	ret

00003f00 <__udivmodhi4>:
    3f00:	aa 1b       	sub	r26, r26
    3f02:	bb 1b       	sub	r27, r27
    3f04:	51 e1       	ldi	r21, 0x11	; 17
    3f06:	07 c0       	rjmp	.+14     	; 0x3f16 <__udivmodhi4_ep>

00003f08 <__udivmodhi4_loop>:
    3f08:	aa 1f       	adc	r26, r26
    3f0a:	bb 1f       	adc	r27, r27
    3f0c:	a6 17       	cp	r26, r22
    3f0e:	b7 07       	cpc	r27, r23
    3f10:	10 f0       	brcs	.+4      	; 0x3f16 <__udivmodhi4_ep>
    3f12:	a6 1b       	sub	r26, r22
    3f14:	b7 0b       	sbc	r27, r23

00003f16 <__udivmodhi4_ep>:
    3f16:	88 1f       	adc	r24, r24
    3f18:	99 1f       	adc	r25, r25
    3f1a:	5a 95       	dec	r21
    3f1c:	a9 f7       	brne	.-22     	; 0x3f08 <__udivmodhi4_loop>
    3f1e:	80 95       	com	r24
    3f20:	90 95       	com	r25
    3f22:	bc 01       	movw	r22, r24
    3f24:	cd 01       	movw	r24, r26
    3f26:	08 95       	ret

00003f28 <__prologue_saves__>:
    3f28:	2f 92       	push	r2
    3f2a:	3f 92       	push	r3
    3f2c:	4f 92       	push	r4
    3f2e:	5f 92       	push	r5
    3f30:	6f 92       	push	r6
    3f32:	7f 92       	push	r7
    3f34:	8f 92       	push	r8
    3f36:	9f 92       	push	r9
    3f38:	af 92       	push	r10
    3f3a:	bf 92       	push	r11
    3f3c:	cf 92       	push	r12
    3f3e:	df 92       	push	r13
    3f40:	ef 92       	push	r14
    3f42:	ff 92       	push	r15
    3f44:	0f 93       	push	r16
    3f46:	1f 93       	push	r17
    3f48:	cf 93       	push	r28
    3f4a:	df 93       	push	r29
    3f4c:	cd b7       	in	r28, 0x3d	; 61
    3f4e:	de b7       	in	r29, 0x3e	; 62
    3f50:	ca 1b       	sub	r28, r26
    3f52:	db 0b       	sbc	r29, r27
    3f54:	0f b6       	in	r0, 0x3f	; 63
    3f56:	f8 94       	cli
    3f58:	de bf       	out	0x3e, r29	; 62
    3f5a:	0f be       	out	0x3f, r0	; 63
    3f5c:	cd bf       	out	0x3d, r28	; 61
    3f5e:	09 94       	ijmp

00003f60 <__epilogue_restores__>:
    3f60:	2a 88       	ldd	r2, Y+18	; 0x12
    3f62:	39 88       	ldd	r3, Y+17	; 0x11
    3f64:	48 88       	ldd	r4, Y+16	; 0x10
    3f66:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f68:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f6a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f6c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f6e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f70:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f72:	b9 84       	ldd	r11, Y+9	; 0x09
    3f74:	c8 84       	ldd	r12, Y+8	; 0x08
    3f76:	df 80       	ldd	r13, Y+7	; 0x07
    3f78:	ee 80       	ldd	r14, Y+6	; 0x06
    3f7a:	fd 80       	ldd	r15, Y+5	; 0x05
    3f7c:	0c 81       	ldd	r16, Y+4	; 0x04
    3f7e:	1b 81       	ldd	r17, Y+3	; 0x03
    3f80:	aa 81       	ldd	r26, Y+2	; 0x02
    3f82:	b9 81       	ldd	r27, Y+1	; 0x01
    3f84:	ce 0f       	add	r28, r30
    3f86:	d1 1d       	adc	r29, r1
    3f88:	0f b6       	in	r0, 0x3f	; 63
    3f8a:	f8 94       	cli
    3f8c:	de bf       	out	0x3e, r29	; 62
    3f8e:	0f be       	out	0x3f, r0	; 63
    3f90:	cd bf       	out	0x3d, r28	; 61
    3f92:	ed 01       	movw	r28, r26
    3f94:	08 95       	ret

00003f96 <memset>:
    3f96:	dc 01       	movw	r26, r24
    3f98:	01 c0       	rjmp	.+2      	; 0x3f9c <memset+0x6>
    3f9a:	6d 93       	st	X+, r22
    3f9c:	41 50       	subi	r20, 0x01	; 1
    3f9e:	50 40       	sbci	r21, 0x00	; 0
    3fa0:	e0 f7       	brcc	.-8      	; 0x3f9a <memset+0x4>
    3fa2:	08 95       	ret

00003fa4 <sprintf>:
    3fa4:	ae e0       	ldi	r26, 0x0E	; 14
    3fa6:	b0 e0       	ldi	r27, 0x00	; 0
    3fa8:	e8 ed       	ldi	r30, 0xD8	; 216
    3faa:	ff e1       	ldi	r31, 0x1F	; 31
    3fac:	0c 94 a2 1f 	jmp	0x3f44	; 0x3f44 <__prologue_saves__+0x1c>
    3fb0:	0d 89       	ldd	r16, Y+21	; 0x15
    3fb2:	1e 89       	ldd	r17, Y+22	; 0x16
    3fb4:	86 e0       	ldi	r24, 0x06	; 6
    3fb6:	8c 83       	std	Y+4, r24	; 0x04
    3fb8:	1a 83       	std	Y+2, r17	; 0x02
    3fba:	09 83       	std	Y+1, r16	; 0x01
    3fbc:	8f ef       	ldi	r24, 0xFF	; 255
    3fbe:	9f e7       	ldi	r25, 0x7F	; 127
    3fc0:	9e 83       	std	Y+6, r25	; 0x06
    3fc2:	8d 83       	std	Y+5, r24	; 0x05
    3fc4:	9e 01       	movw	r18, r28
    3fc6:	27 5e       	subi	r18, 0xE7	; 231
    3fc8:	3f 4f       	sbci	r19, 0xFF	; 255
    3fca:	ce 01       	movw	r24, r28
    3fcc:	01 96       	adiw	r24, 0x01	; 1
    3fce:	6f 89       	ldd	r22, Y+23	; 0x17
    3fd0:	78 8d       	ldd	r23, Y+24	; 0x18
    3fd2:	a9 01       	movw	r20, r18
    3fd4:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <vfprintf>
    3fd8:	2f 81       	ldd	r18, Y+7	; 0x07
    3fda:	38 85       	ldd	r19, Y+8	; 0x08
    3fdc:	02 0f       	add	r16, r18
    3fde:	13 1f       	adc	r17, r19
    3fe0:	f8 01       	movw	r30, r16
    3fe2:	10 82       	st	Z, r1
    3fe4:	2e 96       	adiw	r28, 0x0e	; 14
    3fe6:	e4 e0       	ldi	r30, 0x04	; 4
    3fe8:	0c 94 be 1f 	jmp	0x3f7c	; 0x3f7c <__epilogue_restores__+0x1c>

00003fec <vfprintf>:
    3fec:	ab e0       	ldi	r26, 0x0B	; 11
    3fee:	b0 e0       	ldi	r27, 0x00	; 0
    3ff0:	ec ef       	ldi	r30, 0xFC	; 252
    3ff2:	ff e1       	ldi	r31, 0x1F	; 31
    3ff4:	0c 94 94 1f 	jmp	0x3f28	; 0x3f28 <__prologue_saves__>
    3ff8:	3c 01       	movw	r6, r24
    3ffa:	2b 01       	movw	r4, r22
    3ffc:	5a 01       	movw	r10, r20
    3ffe:	fc 01       	movw	r30, r24
    4000:	17 82       	std	Z+7, r1	; 0x07
    4002:	16 82       	std	Z+6, r1	; 0x06
    4004:	83 81       	ldd	r24, Z+3	; 0x03
    4006:	81 fd       	sbrc	r24, 1
    4008:	03 c0       	rjmp	.+6      	; 0x4010 <vfprintf+0x24>
    400a:	6f ef       	ldi	r22, 0xFF	; 255
    400c:	7f ef       	ldi	r23, 0xFF	; 255
    400e:	c6 c1       	rjmp	.+908    	; 0x439c <vfprintf+0x3b0>
    4010:	9a e0       	ldi	r25, 0x0A	; 10
    4012:	89 2e       	mov	r8, r25
    4014:	1e 01       	movw	r2, r28
    4016:	08 94       	sec
    4018:	21 1c       	adc	r2, r1
    401a:	31 1c       	adc	r3, r1
    401c:	f3 01       	movw	r30, r6
    401e:	23 81       	ldd	r18, Z+3	; 0x03
    4020:	f2 01       	movw	r30, r4
    4022:	23 fd       	sbrc	r18, 3
    4024:	85 91       	lpm	r24, Z+
    4026:	23 ff       	sbrs	r18, 3
    4028:	81 91       	ld	r24, Z+
    402a:	2f 01       	movw	r4, r30
    402c:	88 23       	and	r24, r24
    402e:	09 f4       	brne	.+2      	; 0x4032 <vfprintf+0x46>
    4030:	b2 c1       	rjmp	.+868    	; 0x4396 <vfprintf+0x3aa>
    4032:	85 32       	cpi	r24, 0x25	; 37
    4034:	39 f4       	brne	.+14     	; 0x4044 <vfprintf+0x58>
    4036:	23 fd       	sbrc	r18, 3
    4038:	85 91       	lpm	r24, Z+
    403a:	23 ff       	sbrs	r18, 3
    403c:	81 91       	ld	r24, Z+
    403e:	2f 01       	movw	r4, r30
    4040:	85 32       	cpi	r24, 0x25	; 37
    4042:	29 f4       	brne	.+10     	; 0x404e <vfprintf+0x62>
    4044:	90 e0       	ldi	r25, 0x00	; 0
    4046:	b3 01       	movw	r22, r6
    4048:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <fputc>
    404c:	e7 cf       	rjmp	.-50     	; 0x401c <vfprintf+0x30>
    404e:	98 2f       	mov	r25, r24
    4050:	ff 24       	eor	r15, r15
    4052:	ee 24       	eor	r14, r14
    4054:	99 24       	eor	r9, r9
    4056:	ff e1       	ldi	r31, 0x1F	; 31
    4058:	ff 15       	cp	r31, r15
    405a:	d0 f0       	brcs	.+52     	; 0x4090 <vfprintf+0xa4>
    405c:	9b 32       	cpi	r25, 0x2B	; 43
    405e:	69 f0       	breq	.+26     	; 0x407a <vfprintf+0x8e>
    4060:	9c 32       	cpi	r25, 0x2C	; 44
    4062:	28 f4       	brcc	.+10     	; 0x406e <vfprintf+0x82>
    4064:	90 32       	cpi	r25, 0x20	; 32
    4066:	59 f0       	breq	.+22     	; 0x407e <vfprintf+0x92>
    4068:	93 32       	cpi	r25, 0x23	; 35
    406a:	91 f4       	brne	.+36     	; 0x4090 <vfprintf+0xa4>
    406c:	0e c0       	rjmp	.+28     	; 0x408a <vfprintf+0x9e>
    406e:	9d 32       	cpi	r25, 0x2D	; 45
    4070:	49 f0       	breq	.+18     	; 0x4084 <vfprintf+0x98>
    4072:	90 33       	cpi	r25, 0x30	; 48
    4074:	69 f4       	brne	.+26     	; 0x4090 <vfprintf+0xa4>
    4076:	41 e0       	ldi	r20, 0x01	; 1
    4078:	24 c0       	rjmp	.+72     	; 0x40c2 <vfprintf+0xd6>
    407a:	52 e0       	ldi	r21, 0x02	; 2
    407c:	f5 2a       	or	r15, r21
    407e:	84 e0       	ldi	r24, 0x04	; 4
    4080:	f8 2a       	or	r15, r24
    4082:	28 c0       	rjmp	.+80     	; 0x40d4 <vfprintf+0xe8>
    4084:	98 e0       	ldi	r25, 0x08	; 8
    4086:	f9 2a       	or	r15, r25
    4088:	25 c0       	rjmp	.+74     	; 0x40d4 <vfprintf+0xe8>
    408a:	e0 e1       	ldi	r30, 0x10	; 16
    408c:	fe 2a       	or	r15, r30
    408e:	22 c0       	rjmp	.+68     	; 0x40d4 <vfprintf+0xe8>
    4090:	f7 fc       	sbrc	r15, 7
    4092:	29 c0       	rjmp	.+82     	; 0x40e6 <vfprintf+0xfa>
    4094:	89 2f       	mov	r24, r25
    4096:	80 53       	subi	r24, 0x30	; 48
    4098:	8a 30       	cpi	r24, 0x0A	; 10
    409a:	70 f4       	brcc	.+28     	; 0x40b8 <vfprintf+0xcc>
    409c:	f6 fe       	sbrs	r15, 6
    409e:	05 c0       	rjmp	.+10     	; 0x40aa <vfprintf+0xbe>
    40a0:	98 9c       	mul	r9, r8
    40a2:	90 2c       	mov	r9, r0
    40a4:	11 24       	eor	r1, r1
    40a6:	98 0e       	add	r9, r24
    40a8:	15 c0       	rjmp	.+42     	; 0x40d4 <vfprintf+0xe8>
    40aa:	e8 9c       	mul	r14, r8
    40ac:	e0 2c       	mov	r14, r0
    40ae:	11 24       	eor	r1, r1
    40b0:	e8 0e       	add	r14, r24
    40b2:	f0 e2       	ldi	r31, 0x20	; 32
    40b4:	ff 2a       	or	r15, r31
    40b6:	0e c0       	rjmp	.+28     	; 0x40d4 <vfprintf+0xe8>
    40b8:	9e 32       	cpi	r25, 0x2E	; 46
    40ba:	29 f4       	brne	.+10     	; 0x40c6 <vfprintf+0xda>
    40bc:	f6 fc       	sbrc	r15, 6
    40be:	6b c1       	rjmp	.+726    	; 0x4396 <vfprintf+0x3aa>
    40c0:	40 e4       	ldi	r20, 0x40	; 64
    40c2:	f4 2a       	or	r15, r20
    40c4:	07 c0       	rjmp	.+14     	; 0x40d4 <vfprintf+0xe8>
    40c6:	9c 36       	cpi	r25, 0x6C	; 108
    40c8:	19 f4       	brne	.+6      	; 0x40d0 <vfprintf+0xe4>
    40ca:	50 e8       	ldi	r21, 0x80	; 128
    40cc:	f5 2a       	or	r15, r21
    40ce:	02 c0       	rjmp	.+4      	; 0x40d4 <vfprintf+0xe8>
    40d0:	98 36       	cpi	r25, 0x68	; 104
    40d2:	49 f4       	brne	.+18     	; 0x40e6 <vfprintf+0xfa>
    40d4:	f2 01       	movw	r30, r4
    40d6:	23 fd       	sbrc	r18, 3
    40d8:	95 91       	lpm	r25, Z+
    40da:	23 ff       	sbrs	r18, 3
    40dc:	91 91       	ld	r25, Z+
    40de:	2f 01       	movw	r4, r30
    40e0:	99 23       	and	r25, r25
    40e2:	09 f0       	breq	.+2      	; 0x40e6 <vfprintf+0xfa>
    40e4:	b8 cf       	rjmp	.-144    	; 0x4056 <vfprintf+0x6a>
    40e6:	89 2f       	mov	r24, r25
    40e8:	85 54       	subi	r24, 0x45	; 69
    40ea:	83 30       	cpi	r24, 0x03	; 3
    40ec:	18 f0       	brcs	.+6      	; 0x40f4 <vfprintf+0x108>
    40ee:	80 52       	subi	r24, 0x20	; 32
    40f0:	83 30       	cpi	r24, 0x03	; 3
    40f2:	38 f4       	brcc	.+14     	; 0x4102 <vfprintf+0x116>
    40f4:	44 e0       	ldi	r20, 0x04	; 4
    40f6:	50 e0       	ldi	r21, 0x00	; 0
    40f8:	a4 0e       	add	r10, r20
    40fa:	b5 1e       	adc	r11, r21
    40fc:	5f e3       	ldi	r21, 0x3F	; 63
    40fe:	59 83       	std	Y+1, r21	; 0x01
    4100:	0f c0       	rjmp	.+30     	; 0x4120 <vfprintf+0x134>
    4102:	93 36       	cpi	r25, 0x63	; 99
    4104:	31 f0       	breq	.+12     	; 0x4112 <vfprintf+0x126>
    4106:	93 37       	cpi	r25, 0x73	; 115
    4108:	79 f0       	breq	.+30     	; 0x4128 <vfprintf+0x13c>
    410a:	93 35       	cpi	r25, 0x53	; 83
    410c:	09 f0       	breq	.+2      	; 0x4110 <vfprintf+0x124>
    410e:	56 c0       	rjmp	.+172    	; 0x41bc <vfprintf+0x1d0>
    4110:	20 c0       	rjmp	.+64     	; 0x4152 <vfprintf+0x166>
    4112:	f5 01       	movw	r30, r10
    4114:	80 81       	ld	r24, Z
    4116:	89 83       	std	Y+1, r24	; 0x01
    4118:	42 e0       	ldi	r20, 0x02	; 2
    411a:	50 e0       	ldi	r21, 0x00	; 0
    411c:	a4 0e       	add	r10, r20
    411e:	b5 1e       	adc	r11, r21
    4120:	61 01       	movw	r12, r2
    4122:	01 e0       	ldi	r16, 0x01	; 1
    4124:	10 e0       	ldi	r17, 0x00	; 0
    4126:	12 c0       	rjmp	.+36     	; 0x414c <vfprintf+0x160>
    4128:	f5 01       	movw	r30, r10
    412a:	c0 80       	ld	r12, Z
    412c:	d1 80       	ldd	r13, Z+1	; 0x01
    412e:	f6 fc       	sbrc	r15, 6
    4130:	03 c0       	rjmp	.+6      	; 0x4138 <vfprintf+0x14c>
    4132:	6f ef       	ldi	r22, 0xFF	; 255
    4134:	7f ef       	ldi	r23, 0xFF	; 255
    4136:	02 c0       	rjmp	.+4      	; 0x413c <vfprintf+0x150>
    4138:	69 2d       	mov	r22, r9
    413a:	70 e0       	ldi	r23, 0x00	; 0
    413c:	42 e0       	ldi	r20, 0x02	; 2
    413e:	50 e0       	ldi	r21, 0x00	; 0
    4140:	a4 0e       	add	r10, r20
    4142:	b5 1e       	adc	r11, r21
    4144:	c6 01       	movw	r24, r12
    4146:	0e 94 de 21 	call	0x43bc	; 0x43bc <strnlen>
    414a:	8c 01       	movw	r16, r24
    414c:	5f e7       	ldi	r21, 0x7F	; 127
    414e:	f5 22       	and	r15, r21
    4150:	14 c0       	rjmp	.+40     	; 0x417a <vfprintf+0x18e>
    4152:	f5 01       	movw	r30, r10
    4154:	c0 80       	ld	r12, Z
    4156:	d1 80       	ldd	r13, Z+1	; 0x01
    4158:	f6 fc       	sbrc	r15, 6
    415a:	03 c0       	rjmp	.+6      	; 0x4162 <vfprintf+0x176>
    415c:	6f ef       	ldi	r22, 0xFF	; 255
    415e:	7f ef       	ldi	r23, 0xFF	; 255
    4160:	02 c0       	rjmp	.+4      	; 0x4166 <vfprintf+0x17a>
    4162:	69 2d       	mov	r22, r9
    4164:	70 e0       	ldi	r23, 0x00	; 0
    4166:	42 e0       	ldi	r20, 0x02	; 2
    4168:	50 e0       	ldi	r21, 0x00	; 0
    416a:	a4 0e       	add	r10, r20
    416c:	b5 1e       	adc	r11, r21
    416e:	c6 01       	movw	r24, r12
    4170:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <strnlen_P>
    4174:	8c 01       	movw	r16, r24
    4176:	50 e8       	ldi	r21, 0x80	; 128
    4178:	f5 2a       	or	r15, r21
    417a:	f3 fe       	sbrs	r15, 3
    417c:	07 c0       	rjmp	.+14     	; 0x418c <vfprintf+0x1a0>
    417e:	1a c0       	rjmp	.+52     	; 0x41b4 <vfprintf+0x1c8>
    4180:	80 e2       	ldi	r24, 0x20	; 32
    4182:	90 e0       	ldi	r25, 0x00	; 0
    4184:	b3 01       	movw	r22, r6
    4186:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <fputc>
    418a:	ea 94       	dec	r14
    418c:	8e 2d       	mov	r24, r14
    418e:	90 e0       	ldi	r25, 0x00	; 0
    4190:	08 17       	cp	r16, r24
    4192:	19 07       	cpc	r17, r25
    4194:	a8 f3       	brcs	.-22     	; 0x4180 <vfprintf+0x194>
    4196:	0e c0       	rjmp	.+28     	; 0x41b4 <vfprintf+0x1c8>
    4198:	f6 01       	movw	r30, r12
    419a:	f7 fc       	sbrc	r15, 7
    419c:	85 91       	lpm	r24, Z+
    419e:	f7 fe       	sbrs	r15, 7
    41a0:	81 91       	ld	r24, Z+
    41a2:	6f 01       	movw	r12, r30
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	b3 01       	movw	r22, r6
    41a8:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <fputc>
    41ac:	e1 10       	cpse	r14, r1
    41ae:	ea 94       	dec	r14
    41b0:	01 50       	subi	r16, 0x01	; 1
    41b2:	10 40       	sbci	r17, 0x00	; 0
    41b4:	01 15       	cp	r16, r1
    41b6:	11 05       	cpc	r17, r1
    41b8:	79 f7       	brne	.-34     	; 0x4198 <vfprintf+0x1ac>
    41ba:	ea c0       	rjmp	.+468    	; 0x4390 <vfprintf+0x3a4>
    41bc:	94 36       	cpi	r25, 0x64	; 100
    41be:	11 f0       	breq	.+4      	; 0x41c4 <vfprintf+0x1d8>
    41c0:	99 36       	cpi	r25, 0x69	; 105
    41c2:	69 f5       	brne	.+90     	; 0x421e <vfprintf+0x232>
    41c4:	f7 fe       	sbrs	r15, 7
    41c6:	08 c0       	rjmp	.+16     	; 0x41d8 <vfprintf+0x1ec>
    41c8:	f5 01       	movw	r30, r10
    41ca:	20 81       	ld	r18, Z
    41cc:	31 81       	ldd	r19, Z+1	; 0x01
    41ce:	42 81       	ldd	r20, Z+2	; 0x02
    41d0:	53 81       	ldd	r21, Z+3	; 0x03
    41d2:	84 e0       	ldi	r24, 0x04	; 4
    41d4:	90 e0       	ldi	r25, 0x00	; 0
    41d6:	0a c0       	rjmp	.+20     	; 0x41ec <vfprintf+0x200>
    41d8:	f5 01       	movw	r30, r10
    41da:	80 81       	ld	r24, Z
    41dc:	91 81       	ldd	r25, Z+1	; 0x01
    41de:	9c 01       	movw	r18, r24
    41e0:	44 27       	eor	r20, r20
    41e2:	37 fd       	sbrc	r19, 7
    41e4:	40 95       	com	r20
    41e6:	54 2f       	mov	r21, r20
    41e8:	82 e0       	ldi	r24, 0x02	; 2
    41ea:	90 e0       	ldi	r25, 0x00	; 0
    41ec:	a8 0e       	add	r10, r24
    41ee:	b9 1e       	adc	r11, r25
    41f0:	9f e6       	ldi	r25, 0x6F	; 111
    41f2:	f9 22       	and	r15, r25
    41f4:	57 ff       	sbrs	r21, 7
    41f6:	09 c0       	rjmp	.+18     	; 0x420a <vfprintf+0x21e>
    41f8:	50 95       	com	r21
    41fa:	40 95       	com	r20
    41fc:	30 95       	com	r19
    41fe:	21 95       	neg	r18
    4200:	3f 4f       	sbci	r19, 0xFF	; 255
    4202:	4f 4f       	sbci	r20, 0xFF	; 255
    4204:	5f 4f       	sbci	r21, 0xFF	; 255
    4206:	e0 e8       	ldi	r30, 0x80	; 128
    4208:	fe 2a       	or	r15, r30
    420a:	ca 01       	movw	r24, r20
    420c:	b9 01       	movw	r22, r18
    420e:	a1 01       	movw	r20, r2
    4210:	2a e0       	ldi	r18, 0x0A	; 10
    4212:	30 e0       	ldi	r19, 0x00	; 0
    4214:	0e 94 15 22 	call	0x442a	; 0x442a <__ultoa_invert>
    4218:	d8 2e       	mov	r13, r24
    421a:	d2 18       	sub	r13, r2
    421c:	40 c0       	rjmp	.+128    	; 0x429e <vfprintf+0x2b2>
    421e:	95 37       	cpi	r25, 0x75	; 117
    4220:	29 f4       	brne	.+10     	; 0x422c <vfprintf+0x240>
    4222:	1f 2d       	mov	r17, r15
    4224:	1f 7e       	andi	r17, 0xEF	; 239
    4226:	2a e0       	ldi	r18, 0x0A	; 10
    4228:	30 e0       	ldi	r19, 0x00	; 0
    422a:	1d c0       	rjmp	.+58     	; 0x4266 <vfprintf+0x27a>
    422c:	1f 2d       	mov	r17, r15
    422e:	19 7f       	andi	r17, 0xF9	; 249
    4230:	9f 36       	cpi	r25, 0x6F	; 111
    4232:	61 f0       	breq	.+24     	; 0x424c <vfprintf+0x260>
    4234:	90 37       	cpi	r25, 0x70	; 112
    4236:	20 f4       	brcc	.+8      	; 0x4240 <vfprintf+0x254>
    4238:	98 35       	cpi	r25, 0x58	; 88
    423a:	09 f0       	breq	.+2      	; 0x423e <vfprintf+0x252>
    423c:	ac c0       	rjmp	.+344    	; 0x4396 <vfprintf+0x3aa>
    423e:	0f c0       	rjmp	.+30     	; 0x425e <vfprintf+0x272>
    4240:	90 37       	cpi	r25, 0x70	; 112
    4242:	39 f0       	breq	.+14     	; 0x4252 <vfprintf+0x266>
    4244:	98 37       	cpi	r25, 0x78	; 120
    4246:	09 f0       	breq	.+2      	; 0x424a <vfprintf+0x25e>
    4248:	a6 c0       	rjmp	.+332    	; 0x4396 <vfprintf+0x3aa>
    424a:	04 c0       	rjmp	.+8      	; 0x4254 <vfprintf+0x268>
    424c:	28 e0       	ldi	r18, 0x08	; 8
    424e:	30 e0       	ldi	r19, 0x00	; 0
    4250:	0a c0       	rjmp	.+20     	; 0x4266 <vfprintf+0x27a>
    4252:	10 61       	ori	r17, 0x10	; 16
    4254:	14 fd       	sbrc	r17, 4
    4256:	14 60       	ori	r17, 0x04	; 4
    4258:	20 e1       	ldi	r18, 0x10	; 16
    425a:	30 e0       	ldi	r19, 0x00	; 0
    425c:	04 c0       	rjmp	.+8      	; 0x4266 <vfprintf+0x27a>
    425e:	14 fd       	sbrc	r17, 4
    4260:	16 60       	ori	r17, 0x06	; 6
    4262:	20 e1       	ldi	r18, 0x10	; 16
    4264:	32 e0       	ldi	r19, 0x02	; 2
    4266:	17 ff       	sbrs	r17, 7
    4268:	08 c0       	rjmp	.+16     	; 0x427a <vfprintf+0x28e>
    426a:	f5 01       	movw	r30, r10
    426c:	60 81       	ld	r22, Z
    426e:	71 81       	ldd	r23, Z+1	; 0x01
    4270:	82 81       	ldd	r24, Z+2	; 0x02
    4272:	93 81       	ldd	r25, Z+3	; 0x03
    4274:	44 e0       	ldi	r20, 0x04	; 4
    4276:	50 e0       	ldi	r21, 0x00	; 0
    4278:	08 c0       	rjmp	.+16     	; 0x428a <vfprintf+0x29e>
    427a:	f5 01       	movw	r30, r10
    427c:	80 81       	ld	r24, Z
    427e:	91 81       	ldd	r25, Z+1	; 0x01
    4280:	bc 01       	movw	r22, r24
    4282:	80 e0       	ldi	r24, 0x00	; 0
    4284:	90 e0       	ldi	r25, 0x00	; 0
    4286:	42 e0       	ldi	r20, 0x02	; 2
    4288:	50 e0       	ldi	r21, 0x00	; 0
    428a:	a4 0e       	add	r10, r20
    428c:	b5 1e       	adc	r11, r21
    428e:	a1 01       	movw	r20, r2
    4290:	0e 94 15 22 	call	0x442a	; 0x442a <__ultoa_invert>
    4294:	d8 2e       	mov	r13, r24
    4296:	d2 18       	sub	r13, r2
    4298:	8f e7       	ldi	r24, 0x7F	; 127
    429a:	f8 2e       	mov	r15, r24
    429c:	f1 22       	and	r15, r17
    429e:	f6 fe       	sbrs	r15, 6
    42a0:	0b c0       	rjmp	.+22     	; 0x42b8 <vfprintf+0x2cc>
    42a2:	5e ef       	ldi	r21, 0xFE	; 254
    42a4:	f5 22       	and	r15, r21
    42a6:	d9 14       	cp	r13, r9
    42a8:	38 f4       	brcc	.+14     	; 0x42b8 <vfprintf+0x2cc>
    42aa:	f4 fe       	sbrs	r15, 4
    42ac:	07 c0       	rjmp	.+14     	; 0x42bc <vfprintf+0x2d0>
    42ae:	f2 fc       	sbrc	r15, 2
    42b0:	05 c0       	rjmp	.+10     	; 0x42bc <vfprintf+0x2d0>
    42b2:	8f ee       	ldi	r24, 0xEF	; 239
    42b4:	f8 22       	and	r15, r24
    42b6:	02 c0       	rjmp	.+4      	; 0x42bc <vfprintf+0x2d0>
    42b8:	1d 2d       	mov	r17, r13
    42ba:	01 c0       	rjmp	.+2      	; 0x42be <vfprintf+0x2d2>
    42bc:	19 2d       	mov	r17, r9
    42be:	f4 fe       	sbrs	r15, 4
    42c0:	0d c0       	rjmp	.+26     	; 0x42dc <vfprintf+0x2f0>
    42c2:	fe 01       	movw	r30, r28
    42c4:	ed 0d       	add	r30, r13
    42c6:	f1 1d       	adc	r31, r1
    42c8:	80 81       	ld	r24, Z
    42ca:	80 33       	cpi	r24, 0x30	; 48
    42cc:	19 f4       	brne	.+6      	; 0x42d4 <vfprintf+0x2e8>
    42ce:	99 ee       	ldi	r25, 0xE9	; 233
    42d0:	f9 22       	and	r15, r25
    42d2:	08 c0       	rjmp	.+16     	; 0x42e4 <vfprintf+0x2f8>
    42d4:	1f 5f       	subi	r17, 0xFF	; 255
    42d6:	f2 fe       	sbrs	r15, 2
    42d8:	05 c0       	rjmp	.+10     	; 0x42e4 <vfprintf+0x2f8>
    42da:	03 c0       	rjmp	.+6      	; 0x42e2 <vfprintf+0x2f6>
    42dc:	8f 2d       	mov	r24, r15
    42de:	86 78       	andi	r24, 0x86	; 134
    42e0:	09 f0       	breq	.+2      	; 0x42e4 <vfprintf+0x2f8>
    42e2:	1f 5f       	subi	r17, 0xFF	; 255
    42e4:	0f 2d       	mov	r16, r15
    42e6:	f3 fc       	sbrc	r15, 3
    42e8:	14 c0       	rjmp	.+40     	; 0x4312 <vfprintf+0x326>
    42ea:	f0 fe       	sbrs	r15, 0
    42ec:	0f c0       	rjmp	.+30     	; 0x430c <vfprintf+0x320>
    42ee:	1e 15       	cp	r17, r14
    42f0:	10 f0       	brcs	.+4      	; 0x42f6 <vfprintf+0x30a>
    42f2:	9d 2c       	mov	r9, r13
    42f4:	0b c0       	rjmp	.+22     	; 0x430c <vfprintf+0x320>
    42f6:	9d 2c       	mov	r9, r13
    42f8:	9e 0c       	add	r9, r14
    42fa:	91 1a       	sub	r9, r17
    42fc:	1e 2d       	mov	r17, r14
    42fe:	06 c0       	rjmp	.+12     	; 0x430c <vfprintf+0x320>
    4300:	80 e2       	ldi	r24, 0x20	; 32
    4302:	90 e0       	ldi	r25, 0x00	; 0
    4304:	b3 01       	movw	r22, r6
    4306:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <fputc>
    430a:	1f 5f       	subi	r17, 0xFF	; 255
    430c:	1e 15       	cp	r17, r14
    430e:	c0 f3       	brcs	.-16     	; 0x4300 <vfprintf+0x314>
    4310:	04 c0       	rjmp	.+8      	; 0x431a <vfprintf+0x32e>
    4312:	1e 15       	cp	r17, r14
    4314:	10 f4       	brcc	.+4      	; 0x431a <vfprintf+0x32e>
    4316:	e1 1a       	sub	r14, r17
    4318:	01 c0       	rjmp	.+2      	; 0x431c <vfprintf+0x330>
    431a:	ee 24       	eor	r14, r14
    431c:	04 ff       	sbrs	r16, 4
    431e:	0f c0       	rjmp	.+30     	; 0x433e <vfprintf+0x352>
    4320:	80 e3       	ldi	r24, 0x30	; 48
    4322:	90 e0       	ldi	r25, 0x00	; 0
    4324:	b3 01       	movw	r22, r6
    4326:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <fputc>
    432a:	02 ff       	sbrs	r16, 2
    432c:	1d c0       	rjmp	.+58     	; 0x4368 <vfprintf+0x37c>
    432e:	01 fd       	sbrc	r16, 1
    4330:	03 c0       	rjmp	.+6      	; 0x4338 <vfprintf+0x34c>
    4332:	88 e7       	ldi	r24, 0x78	; 120
    4334:	90 e0       	ldi	r25, 0x00	; 0
    4336:	0e c0       	rjmp	.+28     	; 0x4354 <vfprintf+0x368>
    4338:	88 e5       	ldi	r24, 0x58	; 88
    433a:	90 e0       	ldi	r25, 0x00	; 0
    433c:	0b c0       	rjmp	.+22     	; 0x4354 <vfprintf+0x368>
    433e:	80 2f       	mov	r24, r16
    4340:	86 78       	andi	r24, 0x86	; 134
    4342:	91 f0       	breq	.+36     	; 0x4368 <vfprintf+0x37c>
    4344:	01 ff       	sbrs	r16, 1
    4346:	02 c0       	rjmp	.+4      	; 0x434c <vfprintf+0x360>
    4348:	8b e2       	ldi	r24, 0x2B	; 43
    434a:	01 c0       	rjmp	.+2      	; 0x434e <vfprintf+0x362>
    434c:	80 e2       	ldi	r24, 0x20	; 32
    434e:	f7 fc       	sbrc	r15, 7
    4350:	8d e2       	ldi	r24, 0x2D	; 45
    4352:	90 e0       	ldi	r25, 0x00	; 0
    4354:	b3 01       	movw	r22, r6
    4356:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <fputc>
    435a:	06 c0       	rjmp	.+12     	; 0x4368 <vfprintf+0x37c>
    435c:	80 e3       	ldi	r24, 0x30	; 48
    435e:	90 e0       	ldi	r25, 0x00	; 0
    4360:	b3 01       	movw	r22, r6
    4362:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <fputc>
    4366:	9a 94       	dec	r9
    4368:	d9 14       	cp	r13, r9
    436a:	c0 f3       	brcs	.-16     	; 0x435c <vfprintf+0x370>
    436c:	da 94       	dec	r13
    436e:	f1 01       	movw	r30, r2
    4370:	ed 0d       	add	r30, r13
    4372:	f1 1d       	adc	r31, r1
    4374:	80 81       	ld	r24, Z
    4376:	90 e0       	ldi	r25, 0x00	; 0
    4378:	b3 01       	movw	r22, r6
    437a:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <fputc>
    437e:	dd 20       	and	r13, r13
    4380:	a9 f7       	brne	.-22     	; 0x436c <vfprintf+0x380>
    4382:	06 c0       	rjmp	.+12     	; 0x4390 <vfprintf+0x3a4>
    4384:	80 e2       	ldi	r24, 0x20	; 32
    4386:	90 e0       	ldi	r25, 0x00	; 0
    4388:	b3 01       	movw	r22, r6
    438a:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <fputc>
    438e:	ea 94       	dec	r14
    4390:	ee 20       	and	r14, r14
    4392:	c1 f7       	brne	.-16     	; 0x4384 <vfprintf+0x398>
    4394:	43 ce       	rjmp	.-890    	; 0x401c <vfprintf+0x30>
    4396:	f3 01       	movw	r30, r6
    4398:	66 81       	ldd	r22, Z+6	; 0x06
    439a:	77 81       	ldd	r23, Z+7	; 0x07
    439c:	cb 01       	movw	r24, r22
    439e:	2b 96       	adiw	r28, 0x0b	; 11
    43a0:	e2 e1       	ldi	r30, 0x12	; 18
    43a2:	0c 94 b0 1f 	jmp	0x3f60	; 0x3f60 <__epilogue_restores__>

000043a6 <strnlen_P>:
    43a6:	fc 01       	movw	r30, r24
    43a8:	05 90       	lpm	r0, Z+
    43aa:	61 50       	subi	r22, 0x01	; 1
    43ac:	70 40       	sbci	r23, 0x00	; 0
    43ae:	01 10       	cpse	r0, r1
    43b0:	d8 f7       	brcc	.-10     	; 0x43a8 <strnlen_P+0x2>
    43b2:	80 95       	com	r24
    43b4:	90 95       	com	r25
    43b6:	8e 0f       	add	r24, r30
    43b8:	9f 1f       	adc	r25, r31
    43ba:	08 95       	ret

000043bc <strnlen>:
    43bc:	fc 01       	movw	r30, r24
    43be:	61 50       	subi	r22, 0x01	; 1
    43c0:	70 40       	sbci	r23, 0x00	; 0
    43c2:	01 90       	ld	r0, Z+
    43c4:	01 10       	cpse	r0, r1
    43c6:	d8 f7       	brcc	.-10     	; 0x43be <strnlen+0x2>
    43c8:	80 95       	com	r24
    43ca:	90 95       	com	r25
    43cc:	8e 0f       	add	r24, r30
    43ce:	9f 1f       	adc	r25, r31
    43d0:	08 95       	ret

000043d2 <fputc>:
    43d2:	0f 93       	push	r16
    43d4:	1f 93       	push	r17
    43d6:	cf 93       	push	r28
    43d8:	df 93       	push	r29
    43da:	8c 01       	movw	r16, r24
    43dc:	eb 01       	movw	r28, r22
    43de:	8b 81       	ldd	r24, Y+3	; 0x03
    43e0:	81 ff       	sbrs	r24, 1
    43e2:	1b c0       	rjmp	.+54     	; 0x441a <fputc+0x48>
    43e4:	82 ff       	sbrs	r24, 2
    43e6:	0d c0       	rjmp	.+26     	; 0x4402 <fputc+0x30>
    43e8:	2e 81       	ldd	r18, Y+6	; 0x06
    43ea:	3f 81       	ldd	r19, Y+7	; 0x07
    43ec:	8c 81       	ldd	r24, Y+4	; 0x04
    43ee:	9d 81       	ldd	r25, Y+5	; 0x05
    43f0:	28 17       	cp	r18, r24
    43f2:	39 07       	cpc	r19, r25
    43f4:	64 f4       	brge	.+24     	; 0x440e <fputc+0x3c>
    43f6:	e8 81       	ld	r30, Y
    43f8:	f9 81       	ldd	r31, Y+1	; 0x01
    43fa:	01 93       	st	Z+, r16
    43fc:	f9 83       	std	Y+1, r31	; 0x01
    43fe:	e8 83       	st	Y, r30
    4400:	06 c0       	rjmp	.+12     	; 0x440e <fputc+0x3c>
    4402:	e8 85       	ldd	r30, Y+8	; 0x08
    4404:	f9 85       	ldd	r31, Y+9	; 0x09
    4406:	80 2f       	mov	r24, r16
    4408:	09 95       	icall
    440a:	89 2b       	or	r24, r25
    440c:	31 f4       	brne	.+12     	; 0x441a <fputc+0x48>
    440e:	8e 81       	ldd	r24, Y+6	; 0x06
    4410:	9f 81       	ldd	r25, Y+7	; 0x07
    4412:	01 96       	adiw	r24, 0x01	; 1
    4414:	9f 83       	std	Y+7, r25	; 0x07
    4416:	8e 83       	std	Y+6, r24	; 0x06
    4418:	02 c0       	rjmp	.+4      	; 0x441e <fputc+0x4c>
    441a:	0f ef       	ldi	r16, 0xFF	; 255
    441c:	1f ef       	ldi	r17, 0xFF	; 255
    441e:	c8 01       	movw	r24, r16
    4420:	df 91       	pop	r29
    4422:	cf 91       	pop	r28
    4424:	1f 91       	pop	r17
    4426:	0f 91       	pop	r16
    4428:	08 95       	ret

0000442a <__ultoa_invert>:
    442a:	fa 01       	movw	r30, r20
    442c:	aa 27       	eor	r26, r26
    442e:	28 30       	cpi	r18, 0x08	; 8
    4430:	51 f1       	breq	.+84     	; 0x4486 <__ultoa_invert+0x5c>
    4432:	20 31       	cpi	r18, 0x10	; 16
    4434:	81 f1       	breq	.+96     	; 0x4496 <__ultoa_invert+0x6c>
    4436:	e8 94       	clt
    4438:	6f 93       	push	r22
    443a:	6e 7f       	andi	r22, 0xFE	; 254
    443c:	6e 5f       	subi	r22, 0xFE	; 254
    443e:	7f 4f       	sbci	r23, 0xFF	; 255
    4440:	8f 4f       	sbci	r24, 0xFF	; 255
    4442:	9f 4f       	sbci	r25, 0xFF	; 255
    4444:	af 4f       	sbci	r26, 0xFF	; 255
    4446:	b1 e0       	ldi	r27, 0x01	; 1
    4448:	3e d0       	rcall	.+124    	; 0x44c6 <__ultoa_invert+0x9c>
    444a:	b4 e0       	ldi	r27, 0x04	; 4
    444c:	3c d0       	rcall	.+120    	; 0x44c6 <__ultoa_invert+0x9c>
    444e:	67 0f       	add	r22, r23
    4450:	78 1f       	adc	r23, r24
    4452:	89 1f       	adc	r24, r25
    4454:	9a 1f       	adc	r25, r26
    4456:	a1 1d       	adc	r26, r1
    4458:	68 0f       	add	r22, r24
    445a:	79 1f       	adc	r23, r25
    445c:	8a 1f       	adc	r24, r26
    445e:	91 1d       	adc	r25, r1
    4460:	a1 1d       	adc	r26, r1
    4462:	6a 0f       	add	r22, r26
    4464:	71 1d       	adc	r23, r1
    4466:	81 1d       	adc	r24, r1
    4468:	91 1d       	adc	r25, r1
    446a:	a1 1d       	adc	r26, r1
    446c:	20 d0       	rcall	.+64     	; 0x44ae <__ultoa_invert+0x84>
    446e:	09 f4       	brne	.+2      	; 0x4472 <__ultoa_invert+0x48>
    4470:	68 94       	set
    4472:	3f 91       	pop	r19
    4474:	2a e0       	ldi	r18, 0x0A	; 10
    4476:	26 9f       	mul	r18, r22
    4478:	11 24       	eor	r1, r1
    447a:	30 19       	sub	r19, r0
    447c:	30 5d       	subi	r19, 0xD0	; 208
    447e:	31 93       	st	Z+, r19
    4480:	de f6       	brtc	.-74     	; 0x4438 <__ultoa_invert+0xe>
    4482:	cf 01       	movw	r24, r30
    4484:	08 95       	ret
    4486:	46 2f       	mov	r20, r22
    4488:	47 70       	andi	r20, 0x07	; 7
    448a:	40 5d       	subi	r20, 0xD0	; 208
    448c:	41 93       	st	Z+, r20
    448e:	b3 e0       	ldi	r27, 0x03	; 3
    4490:	0f d0       	rcall	.+30     	; 0x44b0 <__ultoa_invert+0x86>
    4492:	c9 f7       	brne	.-14     	; 0x4486 <__ultoa_invert+0x5c>
    4494:	f6 cf       	rjmp	.-20     	; 0x4482 <__ultoa_invert+0x58>
    4496:	46 2f       	mov	r20, r22
    4498:	4f 70       	andi	r20, 0x0F	; 15
    449a:	40 5d       	subi	r20, 0xD0	; 208
    449c:	4a 33       	cpi	r20, 0x3A	; 58
    449e:	18 f0       	brcs	.+6      	; 0x44a6 <__ultoa_invert+0x7c>
    44a0:	49 5d       	subi	r20, 0xD9	; 217
    44a2:	31 fd       	sbrc	r19, 1
    44a4:	40 52       	subi	r20, 0x20	; 32
    44a6:	41 93       	st	Z+, r20
    44a8:	02 d0       	rcall	.+4      	; 0x44ae <__ultoa_invert+0x84>
    44aa:	a9 f7       	brne	.-22     	; 0x4496 <__ultoa_invert+0x6c>
    44ac:	ea cf       	rjmp	.-44     	; 0x4482 <__ultoa_invert+0x58>
    44ae:	b4 e0       	ldi	r27, 0x04	; 4
    44b0:	a6 95       	lsr	r26
    44b2:	97 95       	ror	r25
    44b4:	87 95       	ror	r24
    44b6:	77 95       	ror	r23
    44b8:	67 95       	ror	r22
    44ba:	ba 95       	dec	r27
    44bc:	c9 f7       	brne	.-14     	; 0x44b0 <__ultoa_invert+0x86>
    44be:	00 97       	sbiw	r24, 0x00	; 0
    44c0:	61 05       	cpc	r22, r1
    44c2:	71 05       	cpc	r23, r1
    44c4:	08 95       	ret
    44c6:	9b 01       	movw	r18, r22
    44c8:	ac 01       	movw	r20, r24
    44ca:	0a 2e       	mov	r0, r26
    44cc:	06 94       	lsr	r0
    44ce:	57 95       	ror	r21
    44d0:	47 95       	ror	r20
    44d2:	37 95       	ror	r19
    44d4:	27 95       	ror	r18
    44d6:	ba 95       	dec	r27
    44d8:	c9 f7       	brne	.-14     	; 0x44cc <__ultoa_invert+0xa2>
    44da:	62 0f       	add	r22, r18
    44dc:	73 1f       	adc	r23, r19
    44de:	84 1f       	adc	r24, r20
    44e0:	95 1f       	adc	r25, r21
    44e2:	a0 1d       	adc	r26, r0
    44e4:	08 95       	ret

000044e6 <_exit>:
    44e6:	f8 94       	cli

000044e8 <__stop_program>:
    44e8:	ff cf       	rjmp	.-2      	; 0x44e8 <__stop_program>
