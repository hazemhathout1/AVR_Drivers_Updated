
Application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000047ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000017e  00800060  000047ac  00004840  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  008001de  008001de  000049be  2**0
                  ALLOC
  3 .stab         00006960  00000000  00000000  000049c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003a00  00000000  00000000  0000b320  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000ed20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000eec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000f0b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  000114bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00012843  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00013a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00013bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00013ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00014840  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__vector_1>
       8:	0c 94 27 0a 	jmp	0x144e	; 0x144e <__vector_2>
       c:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	f7 e4       	ldi	r31, 0x47	; 71
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3d       	cpi	r26, 0xDE	; 222
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae ed       	ldi	r26, 0xDE	; 222
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3f       	cpi	r26, 0xF3	; 243
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 80 20 	call	0x4100	; 0x4100 <main>
      8a:	0c 94 d4 23 	jmp	0x47a8	; 0x47a8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f5 20 	jmp	0x41ea	; 0x41ea <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e6       	ldi	r26, 0x63	; 99
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 11 21 	jmp	0x4222	; 0x4222 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 01 21 	jmp	0x4202	; 0x4202 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1d 21 	jmp	0x423a	; 0x423a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 01 21 	jmp	0x4202	; 0x4202 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1d 21 	jmp	0x423a	; 0x423a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f5 20 	jmp	0x41ea	; 0x41ea <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e6       	ldi	r24, 0x63	; 99
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 11 21 	jmp	0x4222	; 0x4222 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fd 20 	jmp	0x41fa	; 0x41fa <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 e6       	ldi	r22, 0x63	; 99
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 19 21 	jmp	0x4232	; 0x4232 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 01 21 	jmp	0x4202	; 0x4202 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 1d 21 	jmp	0x423a	; 0x423a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 01 21 	jmp	0x4202	; 0x4202 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 1d 21 	jmp	0x423a	; 0x423a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 01 21 	jmp	0x4202	; 0x4202 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 1d 21 	jmp	0x423a	; 0x423a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 05 21 	jmp	0x420a	; 0x420a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 21 21 	jmp	0x4242	; 0x4242 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 fd 20 	jmp	0x41fa	; 0x41fa <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 19 21 	jmp	0x4232	; 0x4232 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e5 59       	subi	r30, 0x95	; 149
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <interrupt_INTx_init>:
 *
 * @param int_obj
 * @return
 */
STD_ReturnStatus interrupt_INTx_init(const interrupt_INTx_t *int_obj)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <interrupt_INTx_init+0x6>
     e34:	0f 92       	push	r0
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	9b 83       	std	Y+3, r25	; 0x03
     e3c:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
     e3e:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==int_obj)
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	9b 81       	ldd	r25, Y+3	; 0x03
     e44:	00 97       	sbiw	r24, 0x00	; 0
     e46:	11 f4       	brne	.+4      	; 0xe4c <interrupt_INTx_init+0x1e>
	{
		ret = E_NOT_OK;
     e48:	19 82       	std	Y+1, r1	; 0x01
     e4a:	1e c0       	rjmp	.+60     	; 0xe88 <interrupt_INTx_init+0x5a>
	}
	else
	{
		/*	Disable the External Interrupt*/
		ret = interrupt_INTx_Disable(int_obj);
     e4c:	8a 81       	ldd	r24, Y+2	; 0x02
     e4e:	9b 81       	ldd	r25, Y+3	; 0x03
     e50:	0e 94 13 08 	call	0x1026	; 0x1026 <interrupt_INTx_Disable>
     e54:	89 83       	std	Y+1, r24	; 0x01
		/*	Clear Interrupt Flag : External interrupt did not occur*/
		ret = interrupt_INTx_Clear_Flag(int_obj);
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	9b 81       	ldd	r25, Y+3	; 0x03
     e5a:	0e 94 0f 09 	call	0x121e	; 0x121e <interrupt_INTx_Clear_Flag>
     e5e:	89 83       	std	Y+1, r24	; 0x01
		/*	configure External interrupt edge*/
		ret = interrupt_INTx_Edge_Init(int_obj);
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	9b 81       	ldd	r25, Y+3	; 0x03
     e64:	0e 94 60 08 	call	0x10c0	; 0x10c0 <interrupt_INTx_Edge_Init>
     e68:	89 83       	std	Y+1, r24	; 0x01
		/*	configure External interrupt I/O pin*/
		ret = interrupt_INTx_Pin_Init(int_obj);
     e6a:	8a 81       	ldd	r24, Y+2	; 0x02
     e6c:	9b 81       	ldd	r25, Y+3	; 0x03
     e6e:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <interrupt_INTx_Pin_Init>
     e72:	89 83       	std	Y+1, r24	; 0x01
		/*	configure Default Interrupt Call Back*/
		ret = interrupt_INTx_SetInterruptHandler(int_obj);
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	9b 81       	ldd	r25, Y+3	; 0x03
     e78:	0e 94 b6 09 	call	0x136c	; 0x136c <interrupt_INTx_SetInterruptHandler>
     e7c:	89 83       	std	Y+1, r24	; 0x01
		/*	Enable the External Interrupt*/
		ret = interrupt_INTx_Enable(int_obj);
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	9b 81       	ldd	r25, Y+3	; 0x03
     e82:	0e 94 b1 07 	call	0xf62	; 0xf62 <interrupt_INTx_Enable>
     e86:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
     e88:	89 81       	ldd	r24, Y+1	; 0x01
}
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <INT0_ISR>:


void INT0_ISR(void)
{
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
	/* Clear flag*/
	EXT_INT0_InterruptFlagClear();
     e9e:	aa e5       	ldi	r26, 0x5A	; 90
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	ea e5       	ldi	r30, 0x5A	; 90
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	80 64       	ori	r24, 0x40	; 64
     eaa:	8c 93       	st	X, r24
	/* Code */

	/*	call back */
	if(INT0_InterruptHandler)
     eac:	80 91 de 01 	lds	r24, 0x01DE
     eb0:	90 91 df 01 	lds	r25, 0x01DF
     eb4:	00 97       	sbiw	r24, 0x00	; 0
     eb6:	29 f0       	breq	.+10     	; 0xec2 <INT0_ISR+0x2c>
	{
		INT0_InterruptHandler();
     eb8:	e0 91 de 01 	lds	r30, 0x01DE
     ebc:	f0 91 df 01 	lds	r31, 0x01DF
     ec0:	09 95       	icall
	}
}
     ec2:	cf 91       	pop	r28
     ec4:	df 91       	pop	r29
     ec6:	08 95       	ret

00000ec8 <INT1_ISR>:


void INT1_ISR(void)
{
     ec8:	df 93       	push	r29
     eca:	cf 93       	push	r28
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
	/* Clear flag*/
	EXT_INT1_InterruptFlagClear();
     ed0:	aa e5       	ldi	r26, 0x5A	; 90
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	ea e5       	ldi	r30, 0x5A	; 90
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	80 68       	ori	r24, 0x80	; 128
     edc:	8c 93       	st	X, r24
	/* Code */

	/*	call back */
	if(INT1_InterruptHandler)
     ede:	80 91 e0 01 	lds	r24, 0x01E0
     ee2:	90 91 e1 01 	lds	r25, 0x01E1
     ee6:	00 97       	sbiw	r24, 0x00	; 0
     ee8:	29 f0       	breq	.+10     	; 0xef4 <INT1_ISR+0x2c>
	{
		INT1_InterruptHandler();
     eea:	e0 91 e0 01 	lds	r30, 0x01E0
     eee:	f0 91 e1 01 	lds	r31, 0x01E1
     ef2:	09 95       	icall
	}
}
     ef4:	cf 91       	pop	r28
     ef6:	df 91       	pop	r29
     ef8:	08 95       	ret

00000efa <INT2_ISR>:


void INT2_ISR(void)
{
     efa:	df 93       	push	r29
     efc:	cf 93       	push	r28
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
	/* Clear flag*/
	EXT_INT2_InterruptFlagClear();
     f02:	aa e5       	ldi	r26, 0x5A	; 90
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	ea e5       	ldi	r30, 0x5A	; 90
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	80 62       	ori	r24, 0x20	; 32
     f0e:	8c 93       	st	X, r24
	/* Code */

	/*	call back */
	if(INT2_InterruptHandler)
     f10:	80 91 e2 01 	lds	r24, 0x01E2
     f14:	90 91 e3 01 	lds	r25, 0x01E3
     f18:	00 97       	sbiw	r24, 0x00	; 0
     f1a:	29 f0       	breq	.+10     	; 0xf26 <INT2_ISR+0x2c>
	{
		INT2_InterruptHandler();
     f1c:	e0 91 e2 01 	lds	r30, 0x01E2
     f20:	f0 91 e3 01 	lds	r31, 0x01E3
     f24:	09 95       	icall
	}
}
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <interrupt_INTx_Deinit>:
 *
 * @param int_obj
 * @return
 */
STD_ReturnStatus interrupt_INTx_Deinit(const interrupt_INTx_t *int_obj)
{
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	00 d0       	rcall	.+0      	; 0xf32 <interrupt_INTx_Deinit+0x6>
     f32:	0f 92       	push	r0
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	9b 83       	std	Y+3, r25	; 0x03
     f3a:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
     f3c:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==int_obj)
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	9b 81       	ldd	r25, Y+3	; 0x03
     f42:	00 97       	sbiw	r24, 0x00	; 0
     f44:	11 f4       	brne	.+4      	; 0xf4a <interrupt_INTx_Deinit+0x1e>
	{
		ret = E_NOT_OK;
     f46:	19 82       	std	Y+1, r1	; 0x01
     f48:	05 c0       	rjmp	.+10     	; 0xf54 <interrupt_INTx_Deinit+0x28>
	}
	else
	{
		ret = interrupt_INTx_Disable(int_obj);
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	9b 81       	ldd	r25, Y+3	; 0x03
     f4e:	0e 94 13 08 	call	0x1026	; 0x1026 <interrupt_INTx_Disable>
     f52:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
     f54:	89 81       	ldd	r24, Y+1	; 0x01
}
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <interrupt_INTx_Enable>:


static STD_ReturnStatus interrupt_INTx_Enable(const interrupt_INTx_t *int_obj)
{
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	00 d0       	rcall	.+0      	; 0xf68 <interrupt_INTx_Enable+0x6>
     f68:	00 d0       	rcall	.+0      	; 0xf6a <interrupt_INTx_Enable+0x8>
     f6a:	0f 92       	push	r0
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	9b 83       	std	Y+3, r25	; 0x03
     f72:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
     f74:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==int_obj)
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	9b 81       	ldd	r25, Y+3	; 0x03
     f7a:	00 97       	sbiw	r24, 0x00	; 0
     f7c:	11 f4       	brne	.+4      	; 0xf82 <interrupt_INTx_Enable+0x20>
	{
		ret = E_NOT_OK;
     f7e:	19 82       	std	Y+1, r1	; 0x01
     f80:	49 c0       	rjmp	.+146    	; 0x1014 <interrupt_INTx_Enable+0xb2>
	}
	else
	{
		switch(int_obj->source)
     f82:	ea 81       	ldd	r30, Y+2	; 0x02
     f84:	fb 81       	ldd	r31, Y+3	; 0x03
     f86:	84 81       	ldd	r24, Z+4	; 0x04
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	3d 83       	std	Y+5, r19	; 0x05
     f8e:	2c 83       	std	Y+4, r18	; 0x04
     f90:	8c 81       	ldd	r24, Y+4	; 0x04
     f92:	9d 81       	ldd	r25, Y+5	; 0x05
     f94:	81 30       	cpi	r24, 0x01	; 1
     f96:	91 05       	cpc	r25, r1
     f98:	d1 f0       	breq	.+52     	; 0xfce <interrupt_INTx_Enable+0x6c>
     f9a:	2c 81       	ldd	r18, Y+4	; 0x04
     f9c:	3d 81       	ldd	r19, Y+5	; 0x05
     f9e:	22 30       	cpi	r18, 0x02	; 2
     fa0:	31 05       	cpc	r19, r1
     fa2:	31 f1       	breq	.+76     	; 0xff0 <interrupt_INTx_Enable+0x8e>
     fa4:	8c 81       	ldd	r24, Y+4	; 0x04
     fa6:	9d 81       	ldd	r25, Y+5	; 0x05
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	99 f5       	brne	.+102    	; 0x1012 <interrupt_INTx_Enable+0xb0>
		{
		case INTERRUPT_EXTERNAL_INT0:
			INTERRUPT_GlobalInterruptEnable();
     fac:	af e5       	ldi	r26, 0x5F	; 95
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	ef e5       	ldi	r30, 0x5F	; 95
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	80 68       	ori	r24, 0x80	; 128
     fb8:	8c 93       	st	X, r24
			EXT_INT0_InterruptEnable();
     fba:	ab e5       	ldi	r26, 0x5B	; 91
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	eb e5       	ldi	r30, 0x5B	; 91
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	80 64       	ori	r24, 0x40	; 64
     fc6:	8c 93       	st	X, r24
			ret = E_OK;
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	89 83       	std	Y+1, r24	; 0x01
     fcc:	23 c0       	rjmp	.+70     	; 0x1014 <interrupt_INTx_Enable+0xb2>
			break;
		case INTERRUPT_EXTERNAL_INT1:
			INTERRUPT_GlobalInterruptEnable();
     fce:	af e5       	ldi	r26, 0x5F	; 95
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	ef e5       	ldi	r30, 0x5F	; 95
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	80 68       	ori	r24, 0x80	; 128
     fda:	8c 93       	st	X, r24
			EXT_INT1_InterruptEnable();
     fdc:	ab e5       	ldi	r26, 0x5B	; 91
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	eb e5       	ldi	r30, 0x5B	; 91
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	80 68       	ori	r24, 0x80	; 128
     fe8:	8c 93       	st	X, r24
			ret = E_OK;
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	89 83       	std	Y+1, r24	; 0x01
     fee:	12 c0       	rjmp	.+36     	; 0x1014 <interrupt_INTx_Enable+0xb2>
			break;
		case INTERRUPT_EXTERNAL_INT2:
			INTERRUPT_GlobalInterruptEnable();
     ff0:	af e5       	ldi	r26, 0x5F	; 95
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	ef e5       	ldi	r30, 0x5F	; 95
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	80 68       	ori	r24, 0x80	; 128
     ffc:	8c 93       	st	X, r24
			EXT_INT2_InterruptEnable();
     ffe:	ab e5       	ldi	r26, 0x5B	; 91
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	eb e5       	ldi	r30, 0x5B	; 91
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	80 62       	ori	r24, 0x20	; 32
    100a:	8c 93       	st	X, r24
			ret = E_OK;
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	89 83       	std	Y+1, r24	; 0x01
    1010:	01 c0       	rjmp	.+2      	; 0x1014 <interrupt_INTx_Enable+0xb2>
			break;
		default:ret=E_NOT_OK;
    1012:	19 82       	std	Y+1, r1	; 0x01
		}

	}
	return ret;
    1014:	89 81       	ldd	r24, Y+1	; 0x01
}
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <interrupt_INTx_Disable>:


static STD_ReturnStatus interrupt_INTx_Disable(const interrupt_INTx_t *int_obj)
{
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	00 d0       	rcall	.+0      	; 0x102c <interrupt_INTx_Disable+0x6>
    102c:	00 d0       	rcall	.+0      	; 0x102e <interrupt_INTx_Disable+0x8>
    102e:	0f 92       	push	r0
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	9b 83       	std	Y+3, r25	; 0x03
    1036:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
    1038:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==int_obj)
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	9b 81       	ldd	r25, Y+3	; 0x03
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	11 f4       	brne	.+4      	; 0x1046 <interrupt_INTx_Disable+0x20>
	{
		ret = E_NOT_OK;
    1042:	19 82       	std	Y+1, r1	; 0x01
    1044:	34 c0       	rjmp	.+104    	; 0x10ae <interrupt_INTx_Disable+0x88>
	}
	else
	{
		switch(int_obj->source)
    1046:	ea 81       	ldd	r30, Y+2	; 0x02
    1048:	fb 81       	ldd	r31, Y+3	; 0x03
    104a:	84 81       	ldd	r24, Z+4	; 0x04
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	3d 83       	std	Y+5, r19	; 0x05
    1052:	2c 83       	std	Y+4, r18	; 0x04
    1054:	8c 81       	ldd	r24, Y+4	; 0x04
    1056:	9d 81       	ldd	r25, Y+5	; 0x05
    1058:	81 30       	cpi	r24, 0x01	; 1
    105a:	91 05       	cpc	r25, r1
    105c:	99 f0       	breq	.+38     	; 0x1084 <interrupt_INTx_Disable+0x5e>
    105e:	2c 81       	ldd	r18, Y+4	; 0x04
    1060:	3d 81       	ldd	r19, Y+5	; 0x05
    1062:	22 30       	cpi	r18, 0x02	; 2
    1064:	31 05       	cpc	r19, r1
    1066:	c1 f0       	breq	.+48     	; 0x1098 <interrupt_INTx_Disable+0x72>
    1068:	8c 81       	ldd	r24, Y+4	; 0x04
    106a:	9d 81       	ldd	r25, Y+5	; 0x05
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	f1 f4       	brne	.+60     	; 0x10ac <interrupt_INTx_Disable+0x86>
		{
		case INTERRUPT_EXTERNAL_INT0:
			EXT_INT0_InterruptDisable();
    1070:	ab e5       	ldi	r26, 0x5B	; 91
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	eb e5       	ldi	r30, 0x5B	; 91
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	8f 7b       	andi	r24, 0xBF	; 191
    107c:	8c 93       	st	X, r24
			ret = E_OK;
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	89 83       	std	Y+1, r24	; 0x01
    1082:	15 c0       	rjmp	.+42     	; 0x10ae <interrupt_INTx_Disable+0x88>
			break;
		case INTERRUPT_EXTERNAL_INT1:
			EXT_INT1_InterruptDisable();
    1084:	ab e5       	ldi	r26, 0x5B	; 91
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	eb e5       	ldi	r30, 0x5B	; 91
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	8f 77       	andi	r24, 0x7F	; 127
    1090:	8c 93       	st	X, r24
			ret = E_OK;
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	89 83       	std	Y+1, r24	; 0x01
    1096:	0b c0       	rjmp	.+22     	; 0x10ae <interrupt_INTx_Disable+0x88>
			break;
		case INTERRUPT_EXTERNAL_INT2:
			EXT_INT2_InterruptDisable();
    1098:	ab e5       	ldi	r26, 0x5B	; 91
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	eb e5       	ldi	r30, 0x5B	; 91
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	8f 7d       	andi	r24, 0xDF	; 223
    10a4:	8c 93       	st	X, r24
			ret = E_OK;
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	89 83       	std	Y+1, r24	; 0x01
    10aa:	01 c0       	rjmp	.+2      	; 0x10ae <interrupt_INTx_Disable+0x88>
			break;
		default:ret=E_NOT_OK;
    10ac:	19 82       	std	Y+1, r1	; 0x01
		}

	}
	return ret;
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <interrupt_INTx_Edge_Init>:


static STD_ReturnStatus interrupt_INTx_Edge_Init(const interrupt_INTx_t *int_obj)
{
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	00 d0       	rcall	.+0      	; 0x10c6 <interrupt_INTx_Edge_Init+0x6>
    10c6:	00 d0       	rcall	.+0      	; 0x10c8 <interrupt_INTx_Edge_Init+0x8>
    10c8:	0f 92       	push	r0
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
    10ce:	9b 83       	std	Y+3, r25	; 0x03
    10d0:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
    10d2:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==int_obj)
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	9b 81       	ldd	r25, Y+3	; 0x03
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	11 f4       	brne	.+4      	; 0x10e0 <interrupt_INTx_Edge_Init+0x20>
	{
		ret = E_NOT_OK;
    10dc:	19 82       	std	Y+1, r1	; 0x01
    10de:	7a c0       	rjmp	.+244    	; 0x11d4 <interrupt_INTx_Edge_Init+0x114>
	}
	else
	{
		switch(int_obj->source)
    10e0:	ea 81       	ldd	r30, Y+2	; 0x02
    10e2:	fb 81       	ldd	r31, Y+3	; 0x03
    10e4:	84 81       	ldd	r24, Z+4	; 0x04
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	3d 83       	std	Y+5, r19	; 0x05
    10ec:	2c 83       	std	Y+4, r18	; 0x04
    10ee:	8c 81       	ldd	r24, Y+4	; 0x04
    10f0:	9d 81       	ldd	r25, Y+5	; 0x05
    10f2:	81 30       	cpi	r24, 0x01	; 1
    10f4:	91 05       	cpc	r25, r1
    10f6:	71 f1       	breq	.+92     	; 0x1154 <interrupt_INTx_Edge_Init+0x94>
    10f8:	2c 81       	ldd	r18, Y+4	; 0x04
    10fa:	3d 81       	ldd	r19, Y+5	; 0x05
    10fc:	22 30       	cpi	r18, 0x02	; 2
    10fe:	31 05       	cpc	r19, r1
    1100:	09 f4       	brne	.+2      	; 0x1104 <interrupt_INTx_Edge_Init+0x44>
    1102:	4b c0       	rjmp	.+150    	; 0x119a <interrupt_INTx_Edge_Init+0xda>
    1104:	8c 81       	ldd	r24, Y+4	; 0x04
    1106:	9d 81       	ldd	r25, Y+5	; 0x05
    1108:	00 97       	sbiw	r24, 0x00	; 0
    110a:	09 f0       	breq	.+2      	; 0x110e <interrupt_INTx_Edge_Init+0x4e>
    110c:	62 c0       	rjmp	.+196    	; 0x11d2 <interrupt_INTx_Edge_Init+0x112>
				{
				case INTERRUPT_EXTERNAL_INT0:
					if(int_obj->edge==INTERRUPT_FALLING_EDGE){EXT_INT0_FallingEdgeSet(); }
    110e:	ea 81       	ldd	r30, Y+2	; 0x02
    1110:	fb 81       	ldd	r31, Y+3	; 0x03
    1112:	83 81       	ldd	r24, Z+3	; 0x03
    1114:	88 23       	and	r24, r24
    1116:	41 f4       	brne	.+16     	; 0x1128 <interrupt_INTx_Edge_Init+0x68>
    1118:	a5 e5       	ldi	r26, 0x55	; 85
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e5 e5       	ldi	r30, 0x55	; 85
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	82 60       	ori	r24, 0x02	; 2
    1124:	8c 93       	st	X, r24
    1126:	13 c0       	rjmp	.+38     	; 0x114e <interrupt_INTx_Edge_Init+0x8e>
					else if(int_obj->edge==INTERRUPT_RISING_EDGE){EXT_INT0_RisingEdgeSet();}
    1128:	ea 81       	ldd	r30, Y+2	; 0x02
    112a:	fb 81       	ldd	r31, Y+3	; 0x03
    112c:	83 81       	ldd	r24, Z+3	; 0x03
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	71 f4       	brne	.+28     	; 0x114e <interrupt_INTx_Edge_Init+0x8e>
    1132:	a5 e5       	ldi	r26, 0x55	; 85
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e5 e5       	ldi	r30, 0x55	; 85
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	81 60       	ori	r24, 0x01	; 1
    113e:	8c 93       	st	X, r24
    1140:	a5 e5       	ldi	r26, 0x55	; 85
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e5 e5       	ldi	r30, 0x55	; 85
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	82 60       	ori	r24, 0x02	; 2
    114c:	8c 93       	st	X, r24
					ret = E_OK;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	89 83       	std	Y+1, r24	; 0x01
    1152:	40 c0       	rjmp	.+128    	; 0x11d4 <interrupt_INTx_Edge_Init+0x114>
					break;
				case INTERRUPT_EXTERNAL_INT1:
					if(int_obj->edge==INTERRUPT_FALLING_EDGE){EXT_INT1_FallingEdgeSet(); }
    1154:	ea 81       	ldd	r30, Y+2	; 0x02
    1156:	fb 81       	ldd	r31, Y+3	; 0x03
    1158:	83 81       	ldd	r24, Z+3	; 0x03
    115a:	88 23       	and	r24, r24
    115c:	41 f4       	brne	.+16     	; 0x116e <interrupt_INTx_Edge_Init+0xae>
    115e:	a5 e5       	ldi	r26, 0x55	; 85
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e5 e5       	ldi	r30, 0x55	; 85
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	88 60       	ori	r24, 0x08	; 8
    116a:	8c 93       	st	X, r24
    116c:	13 c0       	rjmp	.+38     	; 0x1194 <interrupt_INTx_Edge_Init+0xd4>
					else if(int_obj->edge==INTERRUPT_RISING_EDGE){EXT_INT1_RisingEdgeSet();}
    116e:	ea 81       	ldd	r30, Y+2	; 0x02
    1170:	fb 81       	ldd	r31, Y+3	; 0x03
    1172:	83 81       	ldd	r24, Z+3	; 0x03
    1174:	81 30       	cpi	r24, 0x01	; 1
    1176:	71 f4       	brne	.+28     	; 0x1194 <interrupt_INTx_Edge_Init+0xd4>
    1178:	a5 e5       	ldi	r26, 0x55	; 85
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e5 e5       	ldi	r30, 0x55	; 85
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	84 60       	ori	r24, 0x04	; 4
    1184:	8c 93       	st	X, r24
    1186:	a5 e5       	ldi	r26, 0x55	; 85
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e5 e5       	ldi	r30, 0x55	; 85
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	88 60       	ori	r24, 0x08	; 8
    1192:	8c 93       	st	X, r24
					ret = E_OK;
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	1d c0       	rjmp	.+58     	; 0x11d4 <interrupt_INTx_Edge_Init+0x114>
					break;
				case INTERRUPT_EXTERNAL_INT2:
					if(int_obj->edge==INTERRUPT_FALLING_EDGE){EXT_INT2_FallingEdgeSet(); }
    119a:	ea 81       	ldd	r30, Y+2	; 0x02
    119c:	fb 81       	ldd	r31, Y+3	; 0x03
    119e:	83 81       	ldd	r24, Z+3	; 0x03
    11a0:	88 23       	and	r24, r24
    11a2:	41 f4       	brne	.+16     	; 0x11b4 <interrupt_INTx_Edge_Init+0xf4>
    11a4:	a4 e5       	ldi	r26, 0x54	; 84
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	e4 e5       	ldi	r30, 0x54	; 84
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	8f 7b       	andi	r24, 0xBF	; 191
    11b0:	8c 93       	st	X, r24
    11b2:	0c c0       	rjmp	.+24     	; 0x11cc <interrupt_INTx_Edge_Init+0x10c>
					else if(int_obj->edge==INTERRUPT_RISING_EDGE){EXT_INT2_RisingEdgeSet();}
    11b4:	ea 81       	ldd	r30, Y+2	; 0x02
    11b6:	fb 81       	ldd	r31, Y+3	; 0x03
    11b8:	83 81       	ldd	r24, Z+3	; 0x03
    11ba:	81 30       	cpi	r24, 0x01	; 1
    11bc:	39 f4       	brne	.+14     	; 0x11cc <interrupt_INTx_Edge_Init+0x10c>
    11be:	a4 e5       	ldi	r26, 0x54	; 84
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e4 e5       	ldi	r30, 0x54	; 84
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	80 64       	ori	r24, 0x40	; 64
    11ca:	8c 93       	st	X, r24
					ret = E_OK;
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	89 83       	std	Y+1, r24	; 0x01
    11d0:	01 c0       	rjmp	.+2      	; 0x11d4 <interrupt_INTx_Edge_Init+0x114>
					break;
				default:ret=E_NOT_OK;
    11d2:	19 82       	std	Y+1, r1	; 0x01
				}
	}
	return ret;
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <interrupt_INTx_Pin_Init>:

static STD_ReturnStatus interrupt_INTx_Pin_Init(const interrupt_INTx_t *int_obj)
{
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <interrupt_INTx_Pin_Init+0x6>
    11ec:	0f 92       	push	r0
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	9b 83       	std	Y+3, r25	; 0x03
    11f4:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
    11f6:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==int_obj)
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	9b 81       	ldd	r25, Y+3	; 0x03
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	11 f4       	brne	.+4      	; 0x1204 <interrupt_INTx_Pin_Init+0x1e>
	{
		ret = E_NOT_OK;
    1200:	19 82       	std	Y+1, r1	; 0x01
    1202:	06 c0       	rjmp	.+12     	; 0x1210 <interrupt_INTx_Pin_Init+0x2a>
	}
	else
	{
		ret = gpio_pin_direction_initialize(&(int_obj->mcu_pin));
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	9b 81       	ldd	r25, Y+3	; 0x03
    1208:	02 96       	adiw	r24, 0x02	; 2
    120a:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <gpio_pin_direction_initialize>
    120e:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    1210:	89 81       	ldd	r24, Y+1	; 0x01
}
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	08 95       	ret

0000121e <interrupt_INTx_Clear_Flag>:



static STD_ReturnStatus interrupt_INTx_Clear_Flag(const interrupt_INTx_t *int_obj)
{
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	00 d0       	rcall	.+0      	; 0x1224 <interrupt_INTx_Clear_Flag+0x6>
    1224:	00 d0       	rcall	.+0      	; 0x1226 <interrupt_INTx_Clear_Flag+0x8>
    1226:	0f 92       	push	r0
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	9b 83       	std	Y+3, r25	; 0x03
    122e:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
    1230:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==int_obj)
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	9b 81       	ldd	r25, Y+3	; 0x03
    1236:	00 97       	sbiw	r24, 0x00	; 0
    1238:	11 f4       	brne	.+4      	; 0x123e <interrupt_INTx_Clear_Flag+0x20>
	{
		ret = E_NOT_OK;
    123a:	19 82       	std	Y+1, r1	; 0x01
    123c:	34 c0       	rjmp	.+104    	; 0x12a6 <interrupt_INTx_Clear_Flag+0x88>
	}
	else
	{
		switch(int_obj->source)
    123e:	ea 81       	ldd	r30, Y+2	; 0x02
    1240:	fb 81       	ldd	r31, Y+3	; 0x03
    1242:	84 81       	ldd	r24, Z+4	; 0x04
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	3d 83       	std	Y+5, r19	; 0x05
    124a:	2c 83       	std	Y+4, r18	; 0x04
    124c:	8c 81       	ldd	r24, Y+4	; 0x04
    124e:	9d 81       	ldd	r25, Y+5	; 0x05
    1250:	81 30       	cpi	r24, 0x01	; 1
    1252:	91 05       	cpc	r25, r1
    1254:	99 f0       	breq	.+38     	; 0x127c <interrupt_INTx_Clear_Flag+0x5e>
    1256:	2c 81       	ldd	r18, Y+4	; 0x04
    1258:	3d 81       	ldd	r19, Y+5	; 0x05
    125a:	22 30       	cpi	r18, 0x02	; 2
    125c:	31 05       	cpc	r19, r1
    125e:	c1 f0       	breq	.+48     	; 0x1290 <interrupt_INTx_Clear_Flag+0x72>
    1260:	8c 81       	ldd	r24, Y+4	; 0x04
    1262:	9d 81       	ldd	r25, Y+5	; 0x05
    1264:	00 97       	sbiw	r24, 0x00	; 0
    1266:	f1 f4       	brne	.+60     	; 0x12a4 <interrupt_INTx_Clear_Flag+0x86>
				{
				case INTERRUPT_EXTERNAL_INT0:
					EXT_INT0_InterruptFlagClear();
    1268:	aa e5       	ldi	r26, 0x5A	; 90
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	ea e5       	ldi	r30, 0x5A	; 90
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	80 64       	ori	r24, 0x40	; 64
    1274:	8c 93       	st	X, r24
					ret = E_OK;
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	89 83       	std	Y+1, r24	; 0x01
    127a:	15 c0       	rjmp	.+42     	; 0x12a6 <interrupt_INTx_Clear_Flag+0x88>
					break;
				case INTERRUPT_EXTERNAL_INT1:
					EXT_INT1_InterruptFlagClear();
    127c:	aa e5       	ldi	r26, 0x5A	; 90
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	ea e5       	ldi	r30, 0x5A	; 90
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	80 68       	ori	r24, 0x80	; 128
    1288:	8c 93       	st	X, r24
					ret = E_OK;
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	89 83       	std	Y+1, r24	; 0x01
    128e:	0b c0       	rjmp	.+22     	; 0x12a6 <interrupt_INTx_Clear_Flag+0x88>
					break;
				case INTERRUPT_EXTERNAL_INT2:
					EXT_INT2_InterruptFlagClear();
    1290:	aa e5       	ldi	r26, 0x5A	; 90
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	ea e5       	ldi	r30, 0x5A	; 90
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	80 62       	ori	r24, 0x20	; 32
    129c:	8c 93       	st	X, r24
					ret = E_OK;
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	89 83       	std	Y+1, r24	; 0x01
    12a2:	01 c0       	rjmp	.+2      	; 0x12a6 <interrupt_INTx_Clear_Flag+0x88>
					break;
				default:ret=E_NOT_OK;
    12a4:	19 82       	std	Y+1, r1	; 0x01
				}
	}
	return ret;
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	cf 91       	pop	r28
    12b4:	df 91       	pop	r29
    12b6:	08 95       	ret

000012b8 <INT0_SetInterruptHandler>:




static STD_ReturnStatus INT0_SetInterruptHandler(void(*InterruptHandler)(void))
{
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	00 d0       	rcall	.+0      	; 0x12be <INT0_SetInterruptHandler+0x6>
    12be:	0f 92       	push	r0
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	9b 83       	std	Y+3, r25	; 0x03
    12c6:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
    12c8:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==InterruptHandler)
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	9b 81       	ldd	r25, Y+3	; 0x03
    12ce:	00 97       	sbiw	r24, 0x00	; 0
    12d0:	11 f4       	brne	.+4      	; 0x12d6 <INT0_SetInterruptHandler+0x1e>
	{
		ret = E_NOT_OK;
    12d2:	19 82       	std	Y+1, r1	; 0x01
    12d4:	08 c0       	rjmp	.+16     	; 0x12e6 <INT0_SetInterruptHandler+0x2e>
	}
	else
	{
		INT0_InterruptHandler = InterruptHandler;//hena hakhaly el address bta3 el func in app yeb2a shaylo el INT0_InterruptHandler
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	9b 81       	ldd	r25, Y+3	; 0x03
    12da:	90 93 df 01 	sts	0x01DF, r25
    12de:	80 93 de 01 	sts	0x01DE, r24
		//keda 3amalat callback be hes en function fel application layer a2dar astakhdemha dlw2ty fel MCAL layer
		ret = E_OK;
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <INT1_SetInterruptHandler>:
static STD_ReturnStatus INT1_SetInterruptHandler(void(*InterruptHandler)(void))
{
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <INT1_SetInterruptHandler+0x6>
    12fa:	0f 92       	push	r0
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	9b 83       	std	Y+3, r25	; 0x03
    1302:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
    1304:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==InterruptHandler)
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	9b 81       	ldd	r25, Y+3	; 0x03
    130a:	00 97       	sbiw	r24, 0x00	; 0
    130c:	11 f4       	brne	.+4      	; 0x1312 <INT1_SetInterruptHandler+0x1e>
	{
		ret = E_NOT_OK;
    130e:	19 82       	std	Y+1, r1	; 0x01
    1310:	08 c0       	rjmp	.+16     	; 0x1322 <INT1_SetInterruptHandler+0x2e>
	}
	else
	{
		INT1_InterruptHandler = InterruptHandler;//hena hakhaly el address bta3 el func in app yeb2a shaylo el INT0_InterruptHandler
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	9b 81       	ldd	r25, Y+3	; 0x03
    1316:	90 93 e1 01 	sts	0x01E1, r25
    131a:	80 93 e0 01 	sts	0x01E0, r24
		//keda 3amalat callback be hes en function fel application layer a2dar astakhdemha dlw2ty fel MCAL layer
		ret = E_OK;
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    1322:	89 81       	ldd	r24, Y+1	; 0x01
}
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <INT2_SetInterruptHandler>:
static STD_ReturnStatus INT2_SetInterruptHandler(void(*InterruptHandler)(void))
{
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	00 d0       	rcall	.+0      	; 0x1336 <INT2_SetInterruptHandler+0x6>
    1336:	0f 92       	push	r0
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	9b 83       	std	Y+3, r25	; 0x03
    133e:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
    1340:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==InterruptHandler)
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	9b 81       	ldd	r25, Y+3	; 0x03
    1346:	00 97       	sbiw	r24, 0x00	; 0
    1348:	11 f4       	brne	.+4      	; 0x134e <INT2_SetInterruptHandler+0x1e>
	{
		ret = E_NOT_OK;
    134a:	19 82       	std	Y+1, r1	; 0x01
    134c:	08 c0       	rjmp	.+16     	; 0x135e <INT2_SetInterruptHandler+0x2e>
	}
	else
	{
		INT2_InterruptHandler = InterruptHandler;//hena hakhaly el address bta3 el func in app yeb2a shaylo el INT0_InterruptHandler
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	9b 81       	ldd	r25, Y+3	; 0x03
    1352:	90 93 e3 01 	sts	0x01E3, r25
    1356:	80 93 e2 01 	sts	0x01E2, r24
		//keda 3amalat callback be hes en function fel application layer a2dar astakhdemha dlw2ty fel MCAL layer
		ret = E_OK;
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    135e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <interrupt_INTx_SetInterruptHandler>:
static STD_ReturnStatus interrupt_INTx_SetInterruptHandler(const interrupt_INTx_t *int_obj)
{
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	00 d0       	rcall	.+0      	; 0x1372 <interrupt_INTx_SetInterruptHandler+0x6>
    1372:	00 d0       	rcall	.+0      	; 0x1374 <interrupt_INTx_SetInterruptHandler+0x8>
    1374:	0f 92       	push	r0
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	9b 83       	std	Y+3, r25	; 0x03
    137c:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
    137e:	19 82       	std	Y+1, r1	; 0x01
		if(NULL==int_obj)
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	9b 81       	ldd	r25, Y+3	; 0x03
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	11 f4       	brne	.+4      	; 0x138c <interrupt_INTx_SetInterruptHandler+0x20>
		{
			ret = E_NOT_OK;
    1388:	19 82       	std	Y+1, r1	; 0x01
    138a:	2e c0       	rjmp	.+92     	; 0x13e8 <interrupt_INTx_SetInterruptHandler+0x7c>
		}
		else
		{
			switch(int_obj->source)
    138c:	ea 81       	ldd	r30, Y+2	; 0x02
    138e:	fb 81       	ldd	r31, Y+3	; 0x03
    1390:	84 81       	ldd	r24, Z+4	; 0x04
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	3d 83       	std	Y+5, r19	; 0x05
    1398:	2c 83       	std	Y+4, r18	; 0x04
    139a:	8c 81       	ldd	r24, Y+4	; 0x04
    139c:	9d 81       	ldd	r25, Y+5	; 0x05
    139e:	81 30       	cpi	r24, 0x01	; 1
    13a0:	91 05       	cpc	r25, r1
    13a2:	89 f0       	breq	.+34     	; 0x13c6 <interrupt_INTx_SetInterruptHandler+0x5a>
    13a4:	2c 81       	ldd	r18, Y+4	; 0x04
    13a6:	3d 81       	ldd	r19, Y+5	; 0x05
    13a8:	22 30       	cpi	r18, 0x02	; 2
    13aa:	31 05       	cpc	r19, r1
    13ac:	a1 f0       	breq	.+40     	; 0x13d6 <interrupt_INTx_SetInterruptHandler+0x6a>
    13ae:	8c 81       	ldd	r24, Y+4	; 0x04
    13b0:	9d 81       	ldd	r25, Y+5	; 0x05
    13b2:	00 97       	sbiw	r24, 0x00	; 0
    13b4:	c1 f4       	brne	.+48     	; 0x13e6 <interrupt_INTx_SetInterruptHandler+0x7a>
			{
			case INTERRUPT_EXTERNAL_INT0:
				ret = INT0_SetInterruptHandler(int_obj->EXT_INTERRUPTHANDLER);//hena ana ba3at el address bta3 el function bta3 el application
    13b6:	ea 81       	ldd	r30, Y+2	; 0x02
    13b8:	fb 81       	ldd	r31, Y+3	; 0x03
    13ba:	80 81       	ld	r24, Z
    13bc:	91 81       	ldd	r25, Z+1	; 0x01
    13be:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <INT0_SetInterruptHandler>
    13c2:	89 83       	std	Y+1, r24	; 0x01
    13c4:	11 c0       	rjmp	.+34     	; 0x13e8 <interrupt_INTx_SetInterruptHandler+0x7c>
				break;
			case INTERRUPT_EXTERNAL_INT1:
				ret = INT1_SetInterruptHandler(int_obj->EXT_INTERRUPTHANDLER);
    13c6:	ea 81       	ldd	r30, Y+2	; 0x02
    13c8:	fb 81       	ldd	r31, Y+3	; 0x03
    13ca:	80 81       	ld	r24, Z
    13cc:	91 81       	ldd	r25, Z+1	; 0x01
    13ce:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <INT1_SetInterruptHandler>
    13d2:	89 83       	std	Y+1, r24	; 0x01
    13d4:	09 c0       	rjmp	.+18     	; 0x13e8 <interrupt_INTx_SetInterruptHandler+0x7c>
				break;
			case INTERRUPT_EXTERNAL_INT2:
				ret = INT2_SetInterruptHandler(int_obj->EXT_INTERRUPTHANDLER);
    13d6:	ea 81       	ldd	r30, Y+2	; 0x02
    13d8:	fb 81       	ldd	r31, Y+3	; 0x03
    13da:	80 81       	ld	r24, Z
    13dc:	91 81       	ldd	r25, Z+1	; 0x01
    13de:	0e 94 98 09 	call	0x1330	; 0x1330 <INT2_SetInterruptHandler>
    13e2:	89 83       	std	Y+1, r24	; 0x01
    13e4:	01 c0       	rjmp	.+2      	; 0x13e8 <interrupt_INTx_SetInterruptHandler+0x7c>
				break;
			default:ret=E_NOT_OK;
    13e6:	19 82       	std	Y+1, r1	; 0x01
			}

		}
		return ret;
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <__vector_1>:
#include "../Interrupt/mcal_interrupt_manager.h"



ISR(INT0_vect)
{
    13fa:	1f 92       	push	r1
    13fc:	0f 92       	push	r0
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	0f 92       	push	r0
    1402:	11 24       	eor	r1, r1
    1404:	2f 93       	push	r18
    1406:	3f 93       	push	r19
    1408:	4f 93       	push	r20
    140a:	5f 93       	push	r21
    140c:	6f 93       	push	r22
    140e:	7f 93       	push	r23
    1410:	8f 93       	push	r24
    1412:	9f 93       	push	r25
    1414:	af 93       	push	r26
    1416:	bf 93       	push	r27
    1418:	ef 93       	push	r30
    141a:	ff 93       	push	r31
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
	INT0_ISR();
    1424:	0e 94 4b 07 	call	0xe96	; 0xe96 <INT0_ISR>
}
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	ff 91       	pop	r31
    142e:	ef 91       	pop	r30
    1430:	bf 91       	pop	r27
    1432:	af 91       	pop	r26
    1434:	9f 91       	pop	r25
    1436:	8f 91       	pop	r24
    1438:	7f 91       	pop	r23
    143a:	6f 91       	pop	r22
    143c:	5f 91       	pop	r21
    143e:	4f 91       	pop	r20
    1440:	3f 91       	pop	r19
    1442:	2f 91       	pop	r18
    1444:	0f 90       	pop	r0
    1446:	0f be       	out	0x3f, r0	; 63
    1448:	0f 90       	pop	r0
    144a:	1f 90       	pop	r1
    144c:	18 95       	reti

0000144e <__vector_2>:


ISR(INT1_vect)
{
    144e:	1f 92       	push	r1
    1450:	0f 92       	push	r0
    1452:	0f b6       	in	r0, 0x3f	; 63
    1454:	0f 92       	push	r0
    1456:	11 24       	eor	r1, r1
    1458:	2f 93       	push	r18
    145a:	3f 93       	push	r19
    145c:	4f 93       	push	r20
    145e:	5f 93       	push	r21
    1460:	6f 93       	push	r22
    1462:	7f 93       	push	r23
    1464:	8f 93       	push	r24
    1466:	9f 93       	push	r25
    1468:	af 93       	push	r26
    146a:	bf 93       	push	r27
    146c:	ef 93       	push	r30
    146e:	ff 93       	push	r31
    1470:	df 93       	push	r29
    1472:	cf 93       	push	r28
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
	INT1_ISR();
    1478:	0e 94 64 07 	call	0xec8	; 0xec8 <INT1_ISR>
}
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	ff 91       	pop	r31
    1482:	ef 91       	pop	r30
    1484:	bf 91       	pop	r27
    1486:	af 91       	pop	r26
    1488:	9f 91       	pop	r25
    148a:	8f 91       	pop	r24
    148c:	7f 91       	pop	r23
    148e:	6f 91       	pop	r22
    1490:	5f 91       	pop	r21
    1492:	4f 91       	pop	r20
    1494:	3f 91       	pop	r19
    1496:	2f 91       	pop	r18
    1498:	0f 90       	pop	r0
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	0f 90       	pop	r0
    149e:	1f 90       	pop	r1
    14a0:	18 95       	reti

000014a2 <__vector_3>:

ISR(INT2_vect)
{
    14a2:	1f 92       	push	r1
    14a4:	0f 92       	push	r0
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	0f 92       	push	r0
    14aa:	11 24       	eor	r1, r1
    14ac:	2f 93       	push	r18
    14ae:	3f 93       	push	r19
    14b0:	4f 93       	push	r20
    14b2:	5f 93       	push	r21
    14b4:	6f 93       	push	r22
    14b6:	7f 93       	push	r23
    14b8:	8f 93       	push	r24
    14ba:	9f 93       	push	r25
    14bc:	af 93       	push	r26
    14be:	bf 93       	push	r27
    14c0:	ef 93       	push	r30
    14c2:	ff 93       	push	r31
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
	INT2_ISR();
    14cc:	0e 94 7d 07 	call	0xefa	; 0xefa <INT2_ISR>
}
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	ff 91       	pop	r31
    14d6:	ef 91       	pop	r30
    14d8:	bf 91       	pop	r27
    14da:	af 91       	pop	r26
    14dc:	9f 91       	pop	r25
    14de:	8f 91       	pop	r24
    14e0:	7f 91       	pop	r23
    14e2:	6f 91       	pop	r22
    14e4:	5f 91       	pop	r21
    14e6:	4f 91       	pop	r20
    14e8:	3f 91       	pop	r19
    14ea:	2f 91       	pop	r18
    14ec:	0f 90       	pop	r0
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	0f 90       	pop	r0
    14f2:	1f 90       	pop	r1
    14f4:	18 95       	reti

000014f6 <__vector_16>:

ISR(ADC_vect)
{
    14f6:	1f 92       	push	r1
    14f8:	0f 92       	push	r0
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	0f 92       	push	r0
    14fe:	11 24       	eor	r1, r1
    1500:	2f 93       	push	r18
    1502:	3f 93       	push	r19
    1504:	4f 93       	push	r20
    1506:	5f 93       	push	r21
    1508:	6f 93       	push	r22
    150a:	7f 93       	push	r23
    150c:	8f 93       	push	r24
    150e:	9f 93       	push	r25
    1510:	af 93       	push	r26
    1512:	bf 93       	push	r27
    1514:	ef 93       	push	r30
    1516:	ff 93       	push	r31
    1518:	df 93       	push	r29
    151a:	cf 93       	push	r28
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
	ADC_ISR();
    1520:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <ADC_ISR>
}
    1524:	cf 91       	pop	r28
    1526:	df 91       	pop	r29
    1528:	ff 91       	pop	r31
    152a:	ef 91       	pop	r30
    152c:	bf 91       	pop	r27
    152e:	af 91       	pop	r26
    1530:	9f 91       	pop	r25
    1532:	8f 91       	pop	r24
    1534:	7f 91       	pop	r23
    1536:	6f 91       	pop	r22
    1538:	5f 91       	pop	r21
    153a:	4f 91       	pop	r20
    153c:	3f 91       	pop	r19
    153e:	2f 91       	pop	r18
    1540:	0f 90       	pop	r0
    1542:	0f be       	out	0x3f, r0	; 63
    1544:	0f 90       	pop	r0
    1546:	1f 90       	pop	r1
    1548:	18 95       	reti

0000154a <ADC_Init>:

static inline void adc_input_channel_port_configure(adc_channel_select_t channel);
static inline void select_result_format(const adc_conf_t*_adc);

STD_ReturnStatus ADC_Init(const adc_conf_t*_adc)
{
    154a:	df 93       	push	r29
    154c:	cf 93       	push	r28
    154e:	00 d0       	rcall	.+0      	; 0x1550 <ADC_Init+0x6>
    1550:	00 d0       	rcall	.+0      	; 0x1552 <ADC_Init+0x8>
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
    1556:	9c 83       	std	Y+4, r25	; 0x04
    1558:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret = E_NOT_OK;
    155a:	1a 82       	std	Y+2, r1	; 0x02
	uint8 l_channel;
	if(NULL==_adc)
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	9c 81       	ldd	r25, Y+4	; 0x04
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	11 f4       	brne	.+4      	; 0x1568 <ADC_Init+0x1e>
	{
		ret = E_NOT_OK;
    1564:	1a 82       	std	Y+2, r1	; 0x02
    1566:	58 c0       	rjmp	.+176    	; 0x1618 <ADC_Init+0xce>
	}
	else
	{
		/* Disable the ADC */
		ADC_CONVERTER_DISABLE();
    1568:	a6 e2       	ldi	r26, 0x26	; 38
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e6 e2       	ldi	r30, 0x26	; 38
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	8f 77       	andi	r24, 0x7F	; 127
    1574:	8c 93       	st	X, r24
		/* Configure the conversion clock */
		ADC_SETPRESCALAR(_adc->conversion_clock);
    1576:	a6 e2       	ldi	r26, 0x26	; 38
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e6 e2       	ldi	r30, 0x26	; 38
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	90 81       	ld	r25, Z
    1580:	eb 81       	ldd	r30, Y+3	; 0x03
    1582:	fc 81       	ldd	r31, Y+4	; 0x04
    1584:	82 81       	ldd	r24, Z+2	; 0x02
    1586:	89 2b       	or	r24, r25
    1588:	8c 93       	st	X, r24
		/* Configure the default channel*/
		l_channel=_adc->adc_channel;
    158a:	eb 81       	ldd	r30, Y+3	; 0x03
    158c:	fc 81       	ldd	r31, Y+4	; 0x04
    158e:	83 81       	ldd	r24, Z+3	; 0x03
    1590:	89 83       	std	Y+1, r24	; 0x01
		ADC_SETCHANNEL(l_channel);
    1592:	a7 e2       	ldi	r26, 0x27	; 39
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e7 e2       	ldi	r30, 0x27	; 39
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	80 7e       	andi	r24, 0xE0	; 224
    159e:	8c 93       	st	X, r24
    15a0:	a7 e2       	ldi	r26, 0x27	; 39
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e7 e2       	ldi	r30, 0x27	; 39
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	90 81       	ld	r25, Z
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	89 2b       	or	r24, r25
    15ae:	8c 93       	st	X, r24
		adc_input_channel_port_configure(_adc->adc_channel);
    15b0:	eb 81       	ldd	r30, Y+3	; 0x03
    15b2:	fc 81       	ldd	r31, Y+4	; 0x04
    15b4:	83 81       	ldd	r24, Z+3	; 0x03
    15b6:	0e 94 4f 0c 	call	0x189e	; 0x189e <adc_input_channel_port_configure>
		/* Configure the interrupt */
		#if ADC_INTERRUPT_FEATURE_ENABLE==INTERRUPT_FEATURE_ENABLE
		INTERRUPT_GlobalInterruptEnable();
    15ba:	af e5       	ldi	r26, 0x5F	; 95
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	ef e5       	ldi	r30, 0x5F	; 95
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	80 68       	ori	r24, 0x80	; 128
    15c6:	8c 93       	st	X, r24
		ADC_InterruptEnable();
    15c8:	a6 e2       	ldi	r26, 0x26	; 38
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e6 e2       	ldi	r30, 0x26	; 38
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	88 60       	ori	r24, 0x08	; 8
    15d4:	8c 93       	st	X, r24
		ADC_InterruptHandler = _adc->ADC_InterruptHandler;
    15d6:	eb 81       	ldd	r30, Y+3	; 0x03
    15d8:	fc 81       	ldd	r31, Y+4	; 0x04
    15da:	80 81       	ld	r24, Z
    15dc:	91 81       	ldd	r25, Z+1	; 0x01
    15de:	90 93 e5 01 	sts	0x01E5, r25
    15e2:	80 93 e4 01 	sts	0x01E4, r24
		#endif
		/* Configure the result format*/
		select_result_format(_adc);
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ea:	0e 94 cf 0c 	call	0x199e	; 0x199e <select_result_format>
		/* Configure the voltage reference*/
		ADC_DISABLE_VOLTAGE_REFERENCE();//make Vref the internal VDD-->5v
    15ee:	a7 e2       	ldi	r26, 0x27	; 39
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	e7 e2       	ldi	r30, 0x27	; 39
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	80 64       	ori	r24, 0x40	; 64
    15fa:	8c 93       	st	X, r24
    15fc:	a7 e2       	ldi	r26, 0x27	; 39
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e7 e2       	ldi	r30, 0x27	; 39
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	8f 77       	andi	r24, 0x7F	; 127
    1608:	8c 93       	st	X, r24
		/* Enable the ADC*/
		ADC_CONVERTER_ENABLE();
    160a:	a6 e2       	ldi	r26, 0x26	; 38
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e6 e2       	ldi	r30, 0x26	; 38
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	80 68       	ori	r24, 0x80	; 128
    1616:	8c 93       	st	X, r24
	}
	return ret;
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
}
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	08 95       	ret

00001628 <ADC_DeInit>:

STD_ReturnStatus ADC_DeInit(const adc_conf_t*_adc)
{
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	00 d0       	rcall	.+0      	; 0x162e <ADC_DeInit+0x6>
    162e:	0f 92       	push	r0
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	9b 83       	std	Y+3, r25	; 0x03
    1636:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
    1638:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==_adc)
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	9b 81       	ldd	r25, Y+3	; 0x03
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	11 f4       	brne	.+4      	; 0x1646 <ADC_DeInit+0x1e>
	{
		ret = E_NOT_OK;
    1642:	19 82       	std	Y+1, r1	; 0x01
    1644:	0e c0       	rjmp	.+28     	; 0x1662 <ADC_DeInit+0x3a>
	}
	else
	{
		/* Disable the ADC */
		ADC_CONVERTER_DISABLE();
    1646:	a6 e2       	ldi	r26, 0x26	; 38
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e6 e2       	ldi	r30, 0x26	; 38
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	8f 77       	andi	r24, 0x7F	; 127
    1652:	8c 93       	st	X, r24
		//Disable interrupt
		#if ADC_INTERRUPT_FEATURE_ENABLE==INTERRUPT_FEATURE_ENABLE
		ADC_InterruptDisable();
    1654:	a6 e2       	ldi	r26, 0x26	; 38
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e6 e2       	ldi	r30, 0x26	; 38
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	87 7f       	andi	r24, 0xF7	; 247
    1660:	8c 93       	st	X, r24
		#endif
	}
	return ret;
    1662:	89 81       	ldd	r24, Y+1	; 0x01
}
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <ADC_SelectChannel>:
STD_ReturnStatus ADC_SelectChannel(const adc_conf_t*_adc,adc_channel_select_t channel)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	00 d0       	rcall	.+0      	; 0x1676 <ADC_SelectChannel+0x6>
    1676:	00 d0       	rcall	.+0      	; 0x1678 <ADC_SelectChannel+0x8>
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	9b 83       	std	Y+3, r25	; 0x03
    167e:	8a 83       	std	Y+2, r24	; 0x02
    1680:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_NOT_OK;
    1682:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==_adc)
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	9b 81       	ldd	r25, Y+3	; 0x03
    1688:	00 97       	sbiw	r24, 0x00	; 0
    168a:	11 f4       	brne	.+4      	; 0x1690 <ADC_SelectChannel+0x20>
	{
		ret = E_NOT_OK;
    168c:	19 82       	std	Y+1, r1	; 0x01
    168e:	12 c0       	rjmp	.+36     	; 0x16b4 <ADC_SelectChannel+0x44>
	}
	else
	{
		/* Configure the default channel*/
		ADC_SETCHANNEL(channel);
    1690:	a7 e2       	ldi	r26, 0x27	; 39
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	e7 e2       	ldi	r30, 0x27	; 39
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	80 7e       	andi	r24, 0xE0	; 224
    169c:	8c 93       	st	X, r24
    169e:	a7 e2       	ldi	r26, 0x27	; 39
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	e7 e2       	ldi	r30, 0x27	; 39
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	90 81       	ld	r25, Z
    16a8:	8c 81       	ldd	r24, Y+4	; 0x04
    16aa:	89 2b       	or	r24, r25
    16ac:	8c 93       	st	X, r24
		adc_input_channel_port_configure(channel);
    16ae:	8c 81       	ldd	r24, Y+4	; 0x04
    16b0:	0e 94 4f 0c 	call	0x189e	; 0x189e <adc_input_channel_port_configure>
	}
	return ret;
    16b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	cf 91       	pop	r28
    16c0:	df 91       	pop	r29
    16c2:	08 95       	ret

000016c4 <ADC_StartConversion>:
STD_ReturnStatus ADC_StartConversion(const adc_conf_t*_adc)
{
    16c4:	df 93       	push	r29
    16c6:	cf 93       	push	r28
    16c8:	00 d0       	rcall	.+0      	; 0x16ca <ADC_StartConversion+0x6>
    16ca:	0f 92       	push	r0
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
    16d0:	9b 83       	std	Y+3, r25	; 0x03
    16d2:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_NOT_OK;
    16d4:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==_adc)
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	9b 81       	ldd	r25, Y+3	; 0x03
    16da:	00 97       	sbiw	r24, 0x00	; 0
    16dc:	11 f4       	brne	.+4      	; 0x16e2 <ADC_StartConversion+0x1e>
	{
		ret = E_NOT_OK;
    16de:	19 82       	std	Y+1, r1	; 0x01
    16e0:	07 c0       	rjmp	.+14     	; 0x16f0 <ADC_StartConversion+0x2c>
	}
	else
	{
		ADC_START_CONVERSION();
    16e2:	a6 e2       	ldi	r26, 0x26	; 38
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e6 e2       	ldi	r30, 0x26	; 38
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	80 64       	ori	r24, 0x40	; 64
    16ee:	8c 93       	st	X, r24
	}
	return ret;
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    16f2:	0f 90       	pop	r0
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	08 95       	ret

000016fe <ADC_IsConversionDone>:
 * @param conversion_status
 * @return true if conversion complete
 * 		   false if conversion is not complete
 */
STD_ReturnStatus ADC_IsConversionDone(const adc_conf_t*_adc,uint8 *conversion_status)
{
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	00 d0       	rcall	.+0      	; 0x1704 <ADC_IsConversionDone+0x6>
    1704:	00 d0       	rcall	.+0      	; 0x1706 <ADC_IsConversionDone+0x8>
    1706:	00 d0       	rcall	.+0      	; 0x1708 <ADC_IsConversionDone+0xa>
    1708:	cd b7       	in	r28, 0x3d	; 61
    170a:	de b7       	in	r29, 0x3e	; 62
    170c:	9b 83       	std	Y+3, r25	; 0x03
    170e:	8a 83       	std	Y+2, r24	; 0x02
    1710:	7d 83       	std	Y+5, r23	; 0x05
    1712:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_NOT_OK;
    1714:	19 82       	std	Y+1, r1	; 0x01
	if((NULL==_adc)&&(NULL==conversion_status))
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	9b 81       	ldd	r25, Y+3	; 0x03
    171a:	00 97       	sbiw	r24, 0x00	; 0
    171c:	31 f4       	brne	.+12     	; 0x172a <ADC_IsConversionDone+0x2c>
    171e:	8c 81       	ldd	r24, Y+4	; 0x04
    1720:	9d 81       	ldd	r25, Y+5	; 0x05
    1722:	00 97       	sbiw	r24, 0x00	; 0
    1724:	11 f4       	brne	.+4      	; 0x172a <ADC_IsConversionDone+0x2c>
	{
		ret = E_NOT_OK;
    1726:	19 82       	std	Y+1, r1	; 0x01
    1728:	14 c0       	rjmp	.+40     	; 0x1752 <ADC_IsConversionDone+0x54>
	}
	else
	{
		//if ADC_CONVERSION_STATUS() get value of 1 then the conversion is ongoing else the conversion is done
		*conversion_status=(uint8)(!ADC_CONVERSION_STATUS());//
    172a:	e6 e2       	ldi	r30, 0x26	; 38
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	82 95       	swap	r24
    1732:	86 95       	lsr	r24
    1734:	86 95       	lsr	r24
    1736:	83 70       	andi	r24, 0x03	; 3
    1738:	88 2f       	mov	r24, r24
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	81 70       	andi	r24, 0x01	; 1
    173e:	90 70       	andi	r25, 0x00	; 0
    1740:	1e 82       	std	Y+6, r1	; 0x06
    1742:	00 97       	sbiw	r24, 0x00	; 0
    1744:	11 f4       	brne	.+4      	; 0x174a <ADC_IsConversionDone+0x4c>
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	8e 83       	std	Y+6, r24	; 0x06
    174a:	ec 81       	ldd	r30, Y+4	; 0x04
    174c:	fd 81       	ldd	r31, Y+5	; 0x05
    174e:	8e 81       	ldd	r24, Y+6	; 0x06
    1750:	80 83       	st	Z, r24
	}
	return ret;
    1752:	89 81       	ldd	r24, Y+1	; 0x01
}
    1754:	26 96       	adiw	r28, 0x06	; 6
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	de bf       	out	0x3e, r29	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	cd bf       	out	0x3d, r28	; 61
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	08 95       	ret

00001766 <ADC_GetConversionResult>:
 * @param _adc
 * @param conversion_result
 * @return
 */
STD_ReturnStatus ADC_GetConversionResult(const adc_conf_t*_adc,adc_result_t *conversion_result)
{
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
    176e:	27 97       	sbiw	r28, 0x07	; 7
    1770:	0f b6       	in	r0, 0x3f	; 63
    1772:	f8 94       	cli
    1774:	de bf       	out	0x3e, r29	; 62
    1776:	0f be       	out	0x3f, r0	; 63
    1778:	cd bf       	out	0x3d, r28	; 61
    177a:	9d 83       	std	Y+5, r25	; 0x05
    177c:	8c 83       	std	Y+4, r24	; 0x04
    177e:	7f 83       	std	Y+7, r23	; 0x07
    1780:	6e 83       	std	Y+6, r22	; 0x06
	STD_ReturnStatus ret = E_NOT_OK;
    1782:	1b 82       	std	Y+3, r1	; 0x03
	uint16 low;
	if((NULL==_adc)&&(NULL==conversion_result))
    1784:	8c 81       	ldd	r24, Y+4	; 0x04
    1786:	9d 81       	ldd	r25, Y+5	; 0x05
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	31 f4       	brne	.+12     	; 0x1798 <ADC_GetConversionResult+0x32>
    178c:	8e 81       	ldd	r24, Y+6	; 0x06
    178e:	9f 81       	ldd	r25, Y+7	; 0x07
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	11 f4       	brne	.+4      	; 0x1798 <ADC_GetConversionResult+0x32>
	{
		ret = E_NOT_OK;
    1794:	1b 82       	std	Y+3, r1	; 0x03
    1796:	45 c0       	rjmp	.+138    	; 0x1822 <ADC_GetConversionResult+0xbc>
	}
	else
	{
		if(_adc->result_format==ADC_RIGHT_ADJUST)
    1798:	ec 81       	ldd	r30, Y+4	; 0x04
    179a:	fd 81       	ldd	r31, Y+5	; 0x05
    179c:	84 81       	ldd	r24, Z+4	; 0x04
    179e:	82 70       	andi	r24, 0x02	; 2
    17a0:	88 23       	and	r24, r24
    17a2:	f9 f4       	brne	.+62     	; 0x17e2 <ADC_GetConversionResult+0x7c>
		{
			low=(uint16)ADCL;
    17a4:	e4 e2       	ldi	r30, 0x24	; 36
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	88 2f       	mov	r24, r24
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	9a 83       	std	Y+2, r25	; 0x02
    17b0:	89 83       	std	Y+1, r24	; 0x01
//			*conversion_result=(adc_result_t)(ADCH<<8)+ADCL;
			*conversion_result=(uint16)ADCH*256;
    17b2:	e5 e2       	ldi	r30, 0x25	; 37
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	88 2f       	mov	r24, r24
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	98 2f       	mov	r25, r24
    17be:	88 27       	eor	r24, r24
    17c0:	ee 81       	ldd	r30, Y+6	; 0x06
    17c2:	ff 81       	ldd	r31, Y+7	; 0x07
    17c4:	91 83       	std	Z+1, r25	; 0x01
    17c6:	80 83       	st	Z, r24
			*conversion_result+=low;
    17c8:	ee 81       	ldd	r30, Y+6	; 0x06
    17ca:	ff 81       	ldd	r31, Y+7	; 0x07
    17cc:	20 81       	ld	r18, Z
    17ce:	31 81       	ldd	r19, Z+1	; 0x01
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	9a 81       	ldd	r25, Y+2	; 0x02
    17d4:	82 0f       	add	r24, r18
    17d6:	93 1f       	adc	r25, r19
    17d8:	ee 81       	ldd	r30, Y+6	; 0x06
    17da:	ff 81       	ldd	r31, Y+7	; 0x07
    17dc:	91 83       	std	Z+1, r25	; 0x01
    17de:	80 83       	st	Z, r24
    17e0:	20 c0       	rjmp	.+64     	; 0x1822 <ADC_GetConversionResult+0xbc>
		}
		else if(_adc->result_format==ADC_LEFT_ADJUST)
    17e2:	ec 81       	ldd	r30, Y+4	; 0x04
    17e4:	fd 81       	ldd	r31, Y+5	; 0x05
    17e6:	84 81       	ldd	r24, Z+4	; 0x04
    17e8:	82 70       	andi	r24, 0x02	; 2
    17ea:	88 23       	and	r24, r24
    17ec:	d1 f0       	breq	.+52     	; 0x1822 <ADC_GetConversionResult+0xbc>
		{
			*conversion_result=(adc_result_t)(((ADCH<<8)+ADCL)>>6);
    17ee:	e5 e2       	ldi	r30, 0x25	; 37
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	88 2f       	mov	r24, r24
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	38 2f       	mov	r19, r24
    17fa:	22 27       	eor	r18, r18
    17fc:	e4 e2       	ldi	r30, 0x24	; 36
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	88 2f       	mov	r24, r24
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	82 0f       	add	r24, r18
    1808:	93 1f       	adc	r25, r19
    180a:	08 2e       	mov	r0, r24
    180c:	89 2f       	mov	r24, r25
    180e:	00 0c       	add	r0, r0
    1810:	88 1f       	adc	r24, r24
    1812:	99 0b       	sbc	r25, r25
    1814:	00 0c       	add	r0, r0
    1816:	88 1f       	adc	r24, r24
    1818:	99 1f       	adc	r25, r25
    181a:	ee 81       	ldd	r30, Y+6	; 0x06
    181c:	ff 81       	ldd	r31, Y+7	; 0x07
    181e:	91 83       	std	Z+1, r25	; 0x01
    1820:	80 83       	st	Z, r24
		}
	}
	return ret;
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1824:	27 96       	adiw	r28, 0x07	; 7
    1826:	0f b6       	in	r0, 0x3f	; 63
    1828:	f8 94       	cli
    182a:	de bf       	out	0x3e, r29	; 62
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	cd bf       	out	0x3d, r28	; 61
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <ADC_GetConversion_Blocking>:
STD_ReturnStatus ADC_GetConversion_Blocking(const adc_conf_t*_adc,adc_channel_select_t channel,adc_result_t *conversion_result)
{
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	00 d0       	rcall	.+0      	; 0x183c <ADC_GetConversion_Blocking+0x6>
    183c:	00 d0       	rcall	.+0      	; 0x183e <ADC_GetConversion_Blocking+0x8>
    183e:	00 d0       	rcall	.+0      	; 0x1840 <ADC_GetConversion_Blocking+0xa>
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    1844:	9b 83       	std	Y+3, r25	; 0x03
    1846:	8a 83       	std	Y+2, r24	; 0x02
    1848:	6c 83       	std	Y+4, r22	; 0x04
    184a:	5e 83       	std	Y+6, r21	; 0x06
    184c:	4d 83       	std	Y+5, r20	; 0x05
	STD_ReturnStatus ret = E_NOT_OK;
    184e:	19 82       	std	Y+1, r1	; 0x01
	if((NULL==_adc)&&(NULL==conversion_result))
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	9b 81       	ldd	r25, Y+3	; 0x03
    1854:	00 97       	sbiw	r24, 0x00	; 0
    1856:	31 f4       	brne	.+12     	; 0x1864 <ADC_GetConversion_Blocking+0x2e>
    1858:	8d 81       	ldd	r24, Y+5	; 0x05
    185a:	9e 81       	ldd	r25, Y+6	; 0x06
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	11 f4       	brne	.+4      	; 0x1864 <ADC_GetConversion_Blocking+0x2e>
	{
		ret = E_NOT_OK;
    1860:	19 82       	std	Y+1, r1	; 0x01
    1862:	13 c0       	rjmp	.+38     	; 0x188a <ADC_GetConversion_Blocking+0x54>
	}
	else
	{
		/* Select channel */
		ret = ADC_SelectChannel(_adc,channel);
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	9b 81       	ldd	r25, Y+3	; 0x03
    1868:	6c 81       	ldd	r22, Y+4	; 0x04
    186a:	0e 94 38 0b 	call	0x1670	; 0x1670 <ADC_SelectChannel>
    186e:	89 83       	std	Y+1, r24	; 0x01
		/* Start adc conversion */
		ret = ADC_StartConversion(_adc);
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	9b 81       	ldd	r25, Y+3	; 0x03
    1874:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <ADC_StartConversion>
    1878:	89 83       	std	Y+1, r24	; 0x01
		/* check conversion*/
		while(ADSC==1);
		ret = ADC_GetConversionResult(_adc,conversion_result);
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	9b 81       	ldd	r25, Y+3	; 0x03
    187e:	2d 81       	ldd	r18, Y+5	; 0x05
    1880:	3e 81       	ldd	r19, Y+6	; 0x06
    1882:	b9 01       	movw	r22, r18
    1884:	0e 94 b3 0b 	call	0x1766	; 0x1766 <ADC_GetConversionResult>
    1888:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    188a:	89 81       	ldd	r24, Y+1	; 0x01
}
    188c:	26 96       	adiw	r28, 0x06	; 6
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	f8 94       	cli
    1892:	de bf       	out	0x3e, r29	; 62
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	cd bf       	out	0x3d, r28	; 61
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret

0000189e <adc_input_channel_port_configure>:



static inline void adc_input_channel_port_configure(adc_channel_select_t channel)
{
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	00 d0       	rcall	.+0      	; 0x18a4 <adc_input_channel_port_configure+0x6>
    18a4:	0f 92       	push	r0
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
    18aa:	89 83       	std	Y+1, r24	; 0x01
	switch(channel)
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	3b 83       	std	Y+3, r19	; 0x03
    18b4:	2a 83       	std	Y+2, r18	; 0x02
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	9b 81       	ldd	r25, Y+3	; 0x03
    18ba:	83 30       	cpi	r24, 0x03	; 3
    18bc:	91 05       	cpc	r25, r1
    18be:	09 f4       	brne	.+2      	; 0x18c2 <adc_input_channel_port_configure+0x24>
    18c0:	41 c0       	rjmp	.+130    	; 0x1944 <adc_input_channel_port_configure+0xa6>
    18c2:	2a 81       	ldd	r18, Y+2	; 0x02
    18c4:	3b 81       	ldd	r19, Y+3	; 0x03
    18c6:	24 30       	cpi	r18, 0x04	; 4
    18c8:	31 05       	cpc	r19, r1
    18ca:	7c f4       	brge	.+30     	; 0x18ea <adc_input_channel_port_configure+0x4c>
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	9b 81       	ldd	r25, Y+3	; 0x03
    18d0:	81 30       	cpi	r24, 0x01	; 1
    18d2:	91 05       	cpc	r25, r1
    18d4:	39 f1       	breq	.+78     	; 0x1924 <adc_input_channel_port_configure+0x86>
    18d6:	2a 81       	ldd	r18, Y+2	; 0x02
    18d8:	3b 81       	ldd	r19, Y+3	; 0x03
    18da:	22 30       	cpi	r18, 0x02	; 2
    18dc:	31 05       	cpc	r19, r1
    18de:	54 f5       	brge	.+84     	; 0x1934 <adc_input_channel_port_configure+0x96>
    18e0:	8a 81       	ldd	r24, Y+2	; 0x02
    18e2:	9b 81       	ldd	r25, Y+3	; 0x03
    18e4:	00 97       	sbiw	r24, 0x00	; 0
    18e6:	b1 f0       	breq	.+44     	; 0x1914 <adc_input_channel_port_configure+0x76>
    18e8:	54 c0       	rjmp	.+168    	; 0x1992 <adc_input_channel_port_configure+0xf4>
    18ea:	2a 81       	ldd	r18, Y+2	; 0x02
    18ec:	3b 81       	ldd	r19, Y+3	; 0x03
    18ee:	25 30       	cpi	r18, 0x05	; 5
    18f0:	31 05       	cpc	r19, r1
    18f2:	c1 f1       	breq	.+112    	; 0x1964 <adc_input_channel_port_configure+0xc6>
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	9b 81       	ldd	r25, Y+3	; 0x03
    18f8:	85 30       	cpi	r24, 0x05	; 5
    18fa:	91 05       	cpc	r25, r1
    18fc:	5c f1       	brlt	.+86     	; 0x1954 <adc_input_channel_port_configure+0xb6>
    18fe:	2a 81       	ldd	r18, Y+2	; 0x02
    1900:	3b 81       	ldd	r19, Y+3	; 0x03
    1902:	26 30       	cpi	r18, 0x06	; 6
    1904:	31 05       	cpc	r19, r1
    1906:	b1 f1       	breq	.+108    	; 0x1974 <adc_input_channel_port_configure+0xd6>
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	9b 81       	ldd	r25, Y+3	; 0x03
    190c:	87 30       	cpi	r24, 0x07	; 7
    190e:	91 05       	cpc	r25, r1
    1910:	c9 f1       	breq	.+114    	; 0x1984 <adc_input_channel_port_configure+0xe6>
    1912:	3f c0       	rjmp	.+126    	; 0x1992 <adc_input_channel_port_configure+0xf4>
	{
	case ADC_CHANNEL_AN0:	CLR_BIT(DDRA,PIN0);break;
    1914:	aa e3       	ldi	r26, 0x3A	; 58
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	ea e3       	ldi	r30, 0x3A	; 58
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	8e 7f       	andi	r24, 0xFE	; 254
    1920:	8c 93       	st	X, r24
    1922:	37 c0       	rjmp	.+110    	; 0x1992 <adc_input_channel_port_configure+0xf4>
	case ADC_CHANNEL_AN1:	CLR_BIT(DDRA,PIN1);break;
    1924:	aa e3       	ldi	r26, 0x3A	; 58
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	ea e3       	ldi	r30, 0x3A	; 58
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	8d 7f       	andi	r24, 0xFD	; 253
    1930:	8c 93       	st	X, r24
    1932:	2f c0       	rjmp	.+94     	; 0x1992 <adc_input_channel_port_configure+0xf4>
	case ADC_CHANNEL_AN2:	CLR_BIT(DDRA,PIN2);break;
    1934:	aa e3       	ldi	r26, 0x3A	; 58
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	ea e3       	ldi	r30, 0x3A	; 58
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	8b 7f       	andi	r24, 0xFB	; 251
    1940:	8c 93       	st	X, r24
    1942:	27 c0       	rjmp	.+78     	; 0x1992 <adc_input_channel_port_configure+0xf4>
	case ADC_CHANNEL_AN3:	CLR_BIT(DDRA,PIN3);break;
    1944:	aa e3       	ldi	r26, 0x3A	; 58
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	ea e3       	ldi	r30, 0x3A	; 58
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	87 7f       	andi	r24, 0xF7	; 247
    1950:	8c 93       	st	X, r24
    1952:	1f c0       	rjmp	.+62     	; 0x1992 <adc_input_channel_port_configure+0xf4>
	case ADC_CHANNEL_AN4:	CLR_BIT(DDRA,PIN4);break;
    1954:	aa e3       	ldi	r26, 0x3A	; 58
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	ea e3       	ldi	r30, 0x3A	; 58
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	8f 7e       	andi	r24, 0xEF	; 239
    1960:	8c 93       	st	X, r24
    1962:	17 c0       	rjmp	.+46     	; 0x1992 <adc_input_channel_port_configure+0xf4>
	case ADC_CHANNEL_AN5:	CLR_BIT(DDRA,PIN5);break;
    1964:	aa e3       	ldi	r26, 0x3A	; 58
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	ea e3       	ldi	r30, 0x3A	; 58
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	8f 7d       	andi	r24, 0xDF	; 223
    1970:	8c 93       	st	X, r24
    1972:	0f c0       	rjmp	.+30     	; 0x1992 <adc_input_channel_port_configure+0xf4>
	case ADC_CHANNEL_AN6:	CLR_BIT(DDRA,PIN6);break;
    1974:	aa e3       	ldi	r26, 0x3A	; 58
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	ea e3       	ldi	r30, 0x3A	; 58
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	8f 7b       	andi	r24, 0xBF	; 191
    1980:	8c 93       	st	X, r24
    1982:	07 c0       	rjmp	.+14     	; 0x1992 <adc_input_channel_port_configure+0xf4>
	case ADC_CHANNEL_AN7:	CLR_BIT(DDRA,PIN7);break;
    1984:	aa e3       	ldi	r26, 0x3A	; 58
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	ea e3       	ldi	r30, 0x3A	; 58
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	8f 77       	andi	r24, 0x7F	; 127
    1990:	8c 93       	st	X, r24
	}
}
    1992:	0f 90       	pop	r0
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	cf 91       	pop	r28
    199a:	df 91       	pop	r29
    199c:	08 95       	ret

0000199e <select_result_format>:


static inline void select_result_format(const adc_conf_t*_adc)
{
    199e:	df 93       	push	r29
    19a0:	cf 93       	push	r28
    19a2:	00 d0       	rcall	.+0      	; 0x19a4 <select_result_format+0x6>
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
    19a8:	9a 83       	std	Y+2, r25	; 0x02
    19aa:	89 83       	std	Y+1, r24	; 0x01
	if(_adc->result_format==ADC_RIGHT_ADJUST)
    19ac:	e9 81       	ldd	r30, Y+1	; 0x01
    19ae:	fa 81       	ldd	r31, Y+2	; 0x02
    19b0:	84 81       	ldd	r24, Z+4	; 0x04
    19b2:	82 70       	andi	r24, 0x02	; 2
    19b4:	88 23       	and	r24, r24
    19b6:	41 f4       	brne	.+16     	; 0x19c8 <select_result_format+0x2a>
	{
		ADC_RESULT_RIGHT_ADJUST();
    19b8:	a7 e2       	ldi	r26, 0x27	; 39
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	e7 e2       	ldi	r30, 0x27	; 39
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	8f 7d       	andi	r24, 0xDF	; 223
    19c4:	8c 93       	st	X, r24
    19c6:	0d c0       	rjmp	.+26     	; 0x19e2 <select_result_format+0x44>
	}
	else if(_adc->result_format==ADC_LEFT_ADJUST)
    19c8:	e9 81       	ldd	r30, Y+1	; 0x01
    19ca:	fa 81       	ldd	r31, Y+2	; 0x02
    19cc:	84 81       	ldd	r24, Z+4	; 0x04
    19ce:	82 70       	andi	r24, 0x02	; 2
    19d0:	88 23       	and	r24, r24
    19d2:	39 f0       	breq	.+14     	; 0x19e2 <select_result_format+0x44>
	{
		ADC_RESULT_LEFT_ADJUST();
    19d4:	a7 e2       	ldi	r26, 0x27	; 39
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	e7 e2       	ldi	r30, 0x27	; 39
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	80 62       	ori	r24, 0x20	; 32
    19e0:	8c 93       	st	X, r24
	}
}
    19e2:	0f 90       	pop	r0
    19e4:	0f 90       	pop	r0
    19e6:	cf 91       	pop	r28
    19e8:	df 91       	pop	r29
    19ea:	08 95       	ret

000019ec <ADC_StartConversion_Interrupt>:

STD_ReturnStatus ADC_StartConversion_Interrupt(const adc_conf_t*_adc,adc_channel_select_t channel)
{
    19ec:	df 93       	push	r29
    19ee:	cf 93       	push	r28
    19f0:	00 d0       	rcall	.+0      	; 0x19f2 <ADC_StartConversion_Interrupt+0x6>
    19f2:	00 d0       	rcall	.+0      	; 0x19f4 <ADC_StartConversion_Interrupt+0x8>
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
    19f8:	9b 83       	std	Y+3, r25	; 0x03
    19fa:	8a 83       	std	Y+2, r24	; 0x02
    19fc:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_NOT_OK;
    19fe:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==_adc)
    1a00:	8a 81       	ldd	r24, Y+2	; 0x02
    1a02:	9b 81       	ldd	r25, Y+3	; 0x03
    1a04:	00 97       	sbiw	r24, 0x00	; 0
    1a06:	11 f4       	brne	.+4      	; 0x1a0c <ADC_StartConversion_Interrupt+0x20>
	{
		ret = E_NOT_OK;
    1a08:	19 82       	std	Y+1, r1	; 0x01
    1a0a:	0b c0       	rjmp	.+22     	; 0x1a22 <ADC_StartConversion_Interrupt+0x36>
	}
	else
	{
		/* Select channel */
		ret = ADC_SelectChannel(_adc,channel);
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a10:	6c 81       	ldd	r22, Y+4	; 0x04
    1a12:	0e 94 38 0b 	call	0x1670	; 0x1670 <ADC_SelectChannel>
    1a16:	89 83       	std	Y+1, r24	; 0x01
		/* Start adc conversion */
		ret = ADC_StartConversion(_adc);
    1a18:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a1c:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <ADC_StartConversion>
    1a20:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	cf 91       	pop	r28
    1a2e:	df 91       	pop	r29
    1a30:	08 95       	ret

00001a32 <ADC_ISR>:

void ADC_ISR()
{
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
	/* clear flag*/
	ADC_InterruptFlagClear();
    1a3a:	a6 e2       	ldi	r26, 0x26	; 38
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	e6 e2       	ldi	r30, 0x26	; 38
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	80 61       	ori	r24, 0x10	; 16
    1a46:	8c 93       	st	X, r24
	if(ADC_InterruptHandler)
    1a48:	80 91 e4 01 	lds	r24, 0x01E4
    1a4c:	90 91 e5 01 	lds	r25, 0x01E5
    1a50:	00 97       	sbiw	r24, 0x00	; 0
    1a52:	29 f0       	breq	.+10     	; 0x1a5e <ADC_ISR+0x2c>
	{
		ADC_InterruptHandler();
    1a54:	e0 91 e4 01 	lds	r30, 0x01E4
    1a58:	f0 91 e5 01 	lds	r31, 0x01E5
    1a5c:	09 95       	icall
	}
}
    1a5e:	cf 91       	pop	r28
    1a60:	df 91       	pop	r29
    1a62:	08 95       	ret

00001a64 <Data_EEPROM_WriteByte>:

#include "MCAL_EEPROM.h"


STD_ReturnStatus Data_EEPROM_WriteByte(uint8 bAdd,uint8 bData)
{
    1a64:	df 93       	push	r29
    1a66:	cf 93       	push	r28
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
    1a6c:	63 97       	sbiw	r28, 0x13	; 19
    1a6e:	0f b6       	in	r0, 0x3f	; 63
    1a70:	f8 94       	cli
    1a72:	de bf       	out	0x3e, r29	; 62
    1a74:	0f be       	out	0x3f, r0	; 63
    1a76:	cd bf       	out	0x3d, r28	; 61
    1a78:	88 8b       	std	Y+16, r24	; 0x10
    1a7a:	69 8b       	std	Y+17, r22	; 0x11
	STD_ReturnStatus ret = E_OK;
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	8f 87       	std	Y+15, r24	; 0x0f
    while((EECR & 0x02) == 1) ;           // CHECK EEWE BIT
    1a80:	ec e3       	ldi	r30, 0x3C	; 60
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    while((SPMCR & 0x01 )== 1);          // CHECK SPMEN BIT
    1a86:	e7 e5       	ldi	r30, 0x57	; 87
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	88 2f       	mov	r24, r24
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	81 70       	andi	r24, 0x01	; 1
    1a92:	90 70       	andi	r25, 0x00	; 0
    1a94:	88 23       	and	r24, r24
    1a96:	b9 f7       	brne	.-18     	; 0x1a86 <Data_EEPROM_WriteByte+0x22>
    EEARH=0x00;                       // SET ADDRESS MSB BYTE
    1a98:	ef e3       	ldi	r30, 0x3F	; 63
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	10 82       	st	Z, r1
    EEARL = bAdd ;                 // SET LSB BYTE OF ADDRESS
    1a9e:	ee e3       	ldi	r30, 0x3E	; 62
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	88 89       	ldd	r24, Y+16	; 0x10
    1aa4:	80 83       	st	Z, r24
    EEDR = bData ;                     // WRITE data to be written to EEPROM
    1aa6:	ed e3       	ldi	r30, 0x3D	; 61
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	89 89       	ldd	r24, Y+17	; 0x11
    1aac:	80 83       	st	Z, r24
    EECR = 0x04 ;                       // SET EEMWE BIT
    1aae:	ec e3       	ldi	r30, 0x3C	; 60
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	84 e0       	ldi	r24, 0x04	; 4
    1ab4:	80 83       	st	Z, r24
    EECR = 0x06;                        // SET EEMWE & EEWE BITS
    1ab6:	ec e3       	ldi	r30, 0x3C	; 60
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	86 e0       	ldi	r24, 0x06	; 6
    1abc:	80 83       	st	Z, r24
    while((EECR & 0x04) == 1);           // CHECK EEMWE IS CLRED
    1abe:	ec e3       	ldi	r30, 0x3C	; 60
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	a0 e2       	ldi	r26, 0x20	; 32
    1aca:	b1 e4       	ldi	r27, 0x41	; 65
    1acc:	8b 87       	std	Y+11, r24	; 0x0b
    1ace:	9c 87       	std	Y+12, r25	; 0x0c
    1ad0:	ad 87       	std	Y+13, r26	; 0x0d
    1ad2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ada:	9e 85       	ldd	r25, Y+14	; 0x0e
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	4a ef       	ldi	r20, 0xFA	; 250
    1ae2:	54 e4       	ldi	r21, 0x44	; 68
    1ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	8f 83       	std	Y+7, r24	; 0x07
    1aee:	98 87       	std	Y+8, r25	; 0x08
    1af0:	a9 87       	std	Y+9, r26	; 0x09
    1af2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1af4:	6f 81       	ldd	r22, Y+7	; 0x07
    1af6:	78 85       	ldd	r23, Y+8	; 0x08
    1af8:	89 85       	ldd	r24, Y+9	; 0x09
    1afa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	40 e8       	ldi	r20, 0x80	; 128
    1b02:	5f e3       	ldi	r21, 0x3F	; 63
    1b04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b08:	88 23       	and	r24, r24
    1b0a:	2c f4       	brge	.+10     	; 0x1b16 <Data_EEPROM_WriteByte+0xb2>
		__ticks = 1;
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	9e 83       	std	Y+6, r25	; 0x06
    1b12:	8d 83       	std	Y+5, r24	; 0x05
    1b14:	3f c0       	rjmp	.+126    	; 0x1b94 <Data_EEPROM_WriteByte+0x130>
	else if (__tmp > 65535)
    1b16:	6f 81       	ldd	r22, Y+7	; 0x07
    1b18:	78 85       	ldd	r23, Y+8	; 0x08
    1b1a:	89 85       	ldd	r24, Y+9	; 0x09
    1b1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	3f ef       	ldi	r19, 0xFF	; 255
    1b22:	4f e7       	ldi	r20, 0x7F	; 127
    1b24:	57 e4       	ldi	r21, 0x47	; 71
    1b26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b2a:	18 16       	cp	r1, r24
    1b2c:	4c f5       	brge	.+82     	; 0x1b80 <Data_EEPROM_WriteByte+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b30:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	40 e2       	ldi	r20, 0x20	; 32
    1b3c:	51 e4       	ldi	r21, 0x41	; 65
    1b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	bc 01       	movw	r22, r24
    1b48:	cd 01       	movw	r24, r26
    1b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	9e 83       	std	Y+6, r25	; 0x06
    1b54:	8d 83       	std	Y+5, r24	; 0x05
    1b56:	0f c0       	rjmp	.+30     	; 0x1b76 <Data_EEPROM_WriteByte+0x112>
    1b58:	88 ec       	ldi	r24, 0xC8	; 200
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	9c 83       	std	Y+4, r25	; 0x04
    1b5e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	9c 81       	ldd	r25, Y+4	; 0x04
    1b64:	01 97       	sbiw	r24, 0x01	; 1
    1b66:	f1 f7       	brne	.-4      	; 0x1b64 <Data_EEPROM_WriteByte+0x100>
    1b68:	9c 83       	std	Y+4, r25	; 0x04
    1b6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	9e 83       	std	Y+6, r25	; 0x06
    1b74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b76:	8d 81       	ldd	r24, Y+5	; 0x05
    1b78:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7a:	00 97       	sbiw	r24, 0x00	; 0
    1b7c:	69 f7       	brne	.-38     	; 0x1b58 <Data_EEPROM_WriteByte+0xf4>
    1b7e:	14 c0       	rjmp	.+40     	; 0x1ba8 <Data_EEPROM_WriteByte+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b80:	6f 81       	ldd	r22, Y+7	; 0x07
    1b82:	78 85       	ldd	r23, Y+8	; 0x08
    1b84:	89 85       	ldd	r24, Y+9	; 0x09
    1b86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	9e 83       	std	Y+6, r25	; 0x06
    1b92:	8d 83       	std	Y+5, r24	; 0x05
    1b94:	8d 81       	ldd	r24, Y+5	; 0x05
    1b96:	9e 81       	ldd	r25, Y+6	; 0x06
    1b98:	9a 83       	std	Y+2, r25	; 0x02
    1b9a:	89 83       	std	Y+1, r24	; 0x01
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
    1b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	f1 f7       	brne	.-4      	; 0x1ba0 <Data_EEPROM_WriteByte+0x13c>
    1ba4:	9a 83       	std	Y+2, r25	; 0x02
    1ba6:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(10);
	return ret;
    1ba8:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1baa:	63 96       	adiw	r28, 0x13	; 19
    1bac:	0f b6       	in	r0, 0x3f	; 63
    1bae:	f8 94       	cli
    1bb0:	de bf       	out	0x3e, r29	; 62
    1bb2:	0f be       	out	0x3f, r0	; 63
    1bb4:	cd bf       	out	0x3d, r28	; 61
    1bb6:	cf 91       	pop	r28
    1bb8:	df 91       	pop	r29
    1bba:	08 95       	ret

00001bbc <Data_EEPROM_ReadByte>:
STD_ReturnStatus Data_EEPROM_ReadByte(uint16 bAdd,uint8 *bData)
{
    1bbc:	df 93       	push	r29
    1bbe:	cf 93       	push	r28
    1bc0:	00 d0       	rcall	.+0      	; 0x1bc2 <Data_EEPROM_ReadByte+0x6>
    1bc2:	00 d0       	rcall	.+0      	; 0x1bc4 <Data_EEPROM_ReadByte+0x8>
    1bc4:	0f 92       	push	r0
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    1bca:	9b 83       	std	Y+3, r25	; 0x03
    1bcc:	8a 83       	std	Y+2, r24	; 0x02
    1bce:	7d 83       	std	Y+5, r23	; 0x05
    1bd0:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_NOT_OK;
    1bd2:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==bData)
    1bd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd6:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd8:	00 97       	sbiw	r24, 0x00	; 0
    1bda:	09 f4       	brne	.+2      	; 0x1bde <Data_EEPROM_ReadByte+0x22>
	{
		ret = E_NOT_OK;
    1bdc:	19 82       	std	Y+1, r1	; 0x01
	}
	else
	{

	}
	return ret;
    1bde:	89 81       	ldd	r24, Y+1	; 0x01
}
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	0f 90       	pop	r0
    1bea:	cf 91       	pop	r28
    1bec:	df 91       	pop	r29
    1bee:	08 95       	ret

00001bf0 <gpio_pin_direction_initialize>:
/***
 *
 * @param _pin_config
 * @return
 */
STD_ReturnStatus gpio_pin_direction_initialize(const Pin_Config_t *_pin_config){
    1bf0:	df 93       	push	r29
    1bf2:	cf 93       	push	r28
    1bf4:	00 d0       	rcall	.+0      	; 0x1bf6 <gpio_pin_direction_initialize+0x6>
    1bf6:	00 d0       	rcall	.+0      	; 0x1bf8 <gpio_pin_direction_initialize+0x8>
    1bf8:	0f 92       	push	r0
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
    1bfe:	9b 83       	std	Y+3, r25	; 0x03
    1c00:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret=E_OK;
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==_pin_config||_pin_config->pin > PORT_PIN_MAX_NUMBER-1)
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	9b 81       	ldd	r25, Y+3	; 0x03
    1c0a:	00 97       	sbiw	r24, 0x00	; 0
    1c0c:	59 f0       	breq	.+22     	; 0x1c24 <gpio_pin_direction_initialize+0x34>
    1c0e:	ea 81       	ldd	r30, Y+2	; 0x02
    1c10:	fb 81       	ldd	r31, Y+3	; 0x03
    1c12:	80 81       	ld	r24, Z
    1c14:	86 95       	lsr	r24
    1c16:	86 95       	lsr	r24
    1c18:	87 70       	andi	r24, 0x07	; 7
    1c1a:	88 2f       	mov	r24, r24
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	88 30       	cpi	r24, 0x08	; 8
    1c20:	91 05       	cpc	r25, r1
    1c22:	14 f0       	brlt	.+4      	; 0x1c28 <gpio_pin_direction_initialize+0x38>
	{
		ret=E_NOT_OK;
    1c24:	19 82       	std	Y+1, r1	; 0x01
    1c26:	75 c0       	rjmp	.+234    	; 0x1d12 <gpio_pin_direction_initialize+0x122>
	}
	else
	{
		switch(_pin_config->direction)
    1c28:	ea 81       	ldd	r30, Y+2	; 0x02
    1c2a:	fb 81       	ldd	r31, Y+3	; 0x03
    1c2c:	80 81       	ld	r24, Z
    1c2e:	82 95       	swap	r24
    1c30:	86 95       	lsr	r24
    1c32:	87 70       	andi	r24, 0x07	; 7
    1c34:	81 70       	andi	r24, 0x01	; 1
    1c36:	28 2f       	mov	r18, r24
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	3d 83       	std	Y+5, r19	; 0x05
    1c3c:	2c 83       	std	Y+4, r18	; 0x04
    1c3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c40:	9d 81       	ldd	r25, Y+5	; 0x05
    1c42:	00 97       	sbiw	r24, 0x00	; 0
    1c44:	b1 f1       	breq	.+108    	; 0x1cb2 <gpio_pin_direction_initialize+0xc2>
    1c46:	2c 81       	ldd	r18, Y+4	; 0x04
    1c48:	3d 81       	ldd	r19, Y+5	; 0x05
    1c4a:	21 30       	cpi	r18, 0x01	; 1
    1c4c:	31 05       	cpc	r19, r1
    1c4e:	09 f0       	breq	.+2      	; 0x1c52 <gpio_pin_direction_initialize+0x62>
    1c50:	60 c0       	rjmp	.+192    	; 0x1d12 <gpio_pin_direction_initialize+0x122>
		{
		case DIRECTION_OUTPUT:		SET_BIT(*DDR_register[_pin_config->port],_pin_config->pin);break;
    1c52:	ea 81       	ldd	r30, Y+2	; 0x02
    1c54:	fb 81       	ldd	r31, Y+3	; 0x03
    1c56:	80 81       	ld	r24, Z
    1c58:	83 70       	andi	r24, 0x03	; 3
    1c5a:	88 2f       	mov	r24, r24
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	88 0f       	add	r24, r24
    1c60:	99 1f       	adc	r25, r25
    1c62:	fc 01       	movw	r30, r24
    1c64:	e5 59       	subi	r30, 0x95	; 149
    1c66:	fe 4f       	sbci	r31, 0xFE	; 254
    1c68:	a0 81       	ld	r26, Z
    1c6a:	b1 81       	ldd	r27, Z+1	; 0x01
    1c6c:	ea 81       	ldd	r30, Y+2	; 0x02
    1c6e:	fb 81       	ldd	r31, Y+3	; 0x03
    1c70:	80 81       	ld	r24, Z
    1c72:	83 70       	andi	r24, 0x03	; 3
    1c74:	88 2f       	mov	r24, r24
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	88 0f       	add	r24, r24
    1c7a:	99 1f       	adc	r25, r25
    1c7c:	fc 01       	movw	r30, r24
    1c7e:	e5 59       	subi	r30, 0x95	; 149
    1c80:	fe 4f       	sbci	r31, 0xFE	; 254
    1c82:	01 90       	ld	r0, Z+
    1c84:	f0 81       	ld	r31, Z
    1c86:	e0 2d       	mov	r30, r0
    1c88:	80 81       	ld	r24, Z
    1c8a:	48 2f       	mov	r20, r24
    1c8c:	ea 81       	ldd	r30, Y+2	; 0x02
    1c8e:	fb 81       	ldd	r31, Y+3	; 0x03
    1c90:	80 81       	ld	r24, Z
    1c92:	86 95       	lsr	r24
    1c94:	86 95       	lsr	r24
    1c96:	87 70       	andi	r24, 0x07	; 7
    1c98:	28 2f       	mov	r18, r24
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	02 2e       	mov	r0, r18
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <gpio_pin_direction_initialize+0xb8>
    1ca4:	88 0f       	add	r24, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	0a 94       	dec	r0
    1caa:	e2 f7       	brpl	.-8      	; 0x1ca4 <gpio_pin_direction_initialize+0xb4>
    1cac:	84 2b       	or	r24, r20
    1cae:	8c 93       	st	X, r24
    1cb0:	30 c0       	rjmp	.+96     	; 0x1d12 <gpio_pin_direction_initialize+0x122>
		case DIRECTION_INPUT: 		CLR_BIT(*DDR_register[_pin_config->port],_pin_config->pin);break;
    1cb2:	ea 81       	ldd	r30, Y+2	; 0x02
    1cb4:	fb 81       	ldd	r31, Y+3	; 0x03
    1cb6:	80 81       	ld	r24, Z
    1cb8:	83 70       	andi	r24, 0x03	; 3
    1cba:	88 2f       	mov	r24, r24
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	88 0f       	add	r24, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	e5 59       	subi	r30, 0x95	; 149
    1cc6:	fe 4f       	sbci	r31, 0xFE	; 254
    1cc8:	a0 81       	ld	r26, Z
    1cca:	b1 81       	ldd	r27, Z+1	; 0x01
    1ccc:	ea 81       	ldd	r30, Y+2	; 0x02
    1cce:	fb 81       	ldd	r31, Y+3	; 0x03
    1cd0:	80 81       	ld	r24, Z
    1cd2:	83 70       	andi	r24, 0x03	; 3
    1cd4:	88 2f       	mov	r24, r24
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	88 0f       	add	r24, r24
    1cda:	99 1f       	adc	r25, r25
    1cdc:	fc 01       	movw	r30, r24
    1cde:	e5 59       	subi	r30, 0x95	; 149
    1ce0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ce2:	01 90       	ld	r0, Z+
    1ce4:	f0 81       	ld	r31, Z
    1ce6:	e0 2d       	mov	r30, r0
    1ce8:	80 81       	ld	r24, Z
    1cea:	48 2f       	mov	r20, r24
    1cec:	ea 81       	ldd	r30, Y+2	; 0x02
    1cee:	fb 81       	ldd	r31, Y+3	; 0x03
    1cf0:	80 81       	ld	r24, Z
    1cf2:	86 95       	lsr	r24
    1cf4:	86 95       	lsr	r24
    1cf6:	87 70       	andi	r24, 0x07	; 7
    1cf8:	28 2f       	mov	r18, r24
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	02 2e       	mov	r0, r18
    1d02:	02 c0       	rjmp	.+4      	; 0x1d08 <gpio_pin_direction_initialize+0x118>
    1d04:	88 0f       	add	r24, r24
    1d06:	99 1f       	adc	r25, r25
    1d08:	0a 94       	dec	r0
    1d0a:	e2 f7       	brpl	.-8      	; 0x1d04 <gpio_pin_direction_initialize+0x114>
    1d0c:	80 95       	com	r24
    1d0e:	84 23       	and	r24, r20
    1d10:	8c 93       	st	X, r24
		}
	}
	return ret;
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d14:	0f 90       	pop	r0
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	cf 91       	pop	r28
    1d20:	df 91       	pop	r29
    1d22:	08 95       	ret

00001d24 <gpio_pin_get_direction_status>:
 * @param _pin_config
 * @param direction_status
 * @return
 */
STD_ReturnStatus gpio_pin_get_direction_status(const Pin_Config_t *_pin_config,direction_t *direction_status)
{
    1d24:	df 93       	push	r29
    1d26:	cf 93       	push	r28
    1d28:	00 d0       	rcall	.+0      	; 0x1d2a <gpio_pin_get_direction_status+0x6>
    1d2a:	00 d0       	rcall	.+0      	; 0x1d2c <gpio_pin_get_direction_status+0x8>
    1d2c:	0f 92       	push	r0
    1d2e:	cd b7       	in	r28, 0x3d	; 61
    1d30:	de b7       	in	r29, 0x3e	; 62
    1d32:	9b 83       	std	Y+3, r25	; 0x03
    1d34:	8a 83       	std	Y+2, r24	; 0x02
    1d36:	7d 83       	std	Y+5, r23	; 0x05
    1d38:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret=E_OK;
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	89 83       	std	Y+1, r24	; 0x01
		if(NULL==_pin_config || NULL==direction_status ||_pin_config->pin > PORT_PIN_MAX_NUMBER-1)
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	9b 81       	ldd	r25, Y+3	; 0x03
    1d42:	00 97       	sbiw	r24, 0x00	; 0
    1d44:	79 f0       	breq	.+30     	; 0x1d64 <gpio_pin_get_direction_status+0x40>
    1d46:	8c 81       	ldd	r24, Y+4	; 0x04
    1d48:	9d 81       	ldd	r25, Y+5	; 0x05
    1d4a:	00 97       	sbiw	r24, 0x00	; 0
    1d4c:	59 f0       	breq	.+22     	; 0x1d64 <gpio_pin_get_direction_status+0x40>
    1d4e:	ea 81       	ldd	r30, Y+2	; 0x02
    1d50:	fb 81       	ldd	r31, Y+3	; 0x03
    1d52:	80 81       	ld	r24, Z
    1d54:	86 95       	lsr	r24
    1d56:	86 95       	lsr	r24
    1d58:	87 70       	andi	r24, 0x07	; 7
    1d5a:	88 2f       	mov	r24, r24
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	88 30       	cpi	r24, 0x08	; 8
    1d60:	91 05       	cpc	r25, r1
    1d62:	14 f0       	brlt	.+4      	; 0x1d68 <gpio_pin_get_direction_status+0x44>
		{
			ret=E_NOT_OK;
    1d64:	19 82       	std	Y+1, r1	; 0x01
    1d66:	27 c0       	rjmp	.+78     	; 0x1db6 <gpio_pin_get_direction_status+0x92>
		}
		else
		{
			*direction_status=READ_BIT(*DDR_register[_pin_config->direction],_pin_config->pin);
    1d68:	ea 81       	ldd	r30, Y+2	; 0x02
    1d6a:	fb 81       	ldd	r31, Y+3	; 0x03
    1d6c:	80 81       	ld	r24, Z
    1d6e:	82 95       	swap	r24
    1d70:	86 95       	lsr	r24
    1d72:	87 70       	andi	r24, 0x07	; 7
    1d74:	81 70       	andi	r24, 0x01	; 1
    1d76:	88 2f       	mov	r24, r24
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	88 0f       	add	r24, r24
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	fc 01       	movw	r30, r24
    1d80:	e5 59       	subi	r30, 0x95	; 149
    1d82:	fe 4f       	sbci	r31, 0xFE	; 254
    1d84:	01 90       	ld	r0, Z+
    1d86:	f0 81       	ld	r31, Z
    1d88:	e0 2d       	mov	r30, r0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	28 2f       	mov	r18, r24
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	ea 81       	ldd	r30, Y+2	; 0x02
    1d92:	fb 81       	ldd	r31, Y+3	; 0x03
    1d94:	80 81       	ld	r24, Z
    1d96:	86 95       	lsr	r24
    1d98:	86 95       	lsr	r24
    1d9a:	87 70       	andi	r24, 0x07	; 7
    1d9c:	88 2f       	mov	r24, r24
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	a9 01       	movw	r20, r18
    1da2:	02 c0       	rjmp	.+4      	; 0x1da8 <gpio_pin_get_direction_status+0x84>
    1da4:	55 95       	asr	r21
    1da6:	47 95       	ror	r20
    1da8:	8a 95       	dec	r24
    1daa:	e2 f7       	brpl	.-8      	; 0x1da4 <gpio_pin_get_direction_status+0x80>
    1dac:	ca 01       	movw	r24, r20
    1dae:	81 70       	andi	r24, 0x01	; 1
    1db0:	ec 81       	ldd	r30, Y+4	; 0x04
    1db2:	fd 81       	ldd	r31, Y+5	; 0x05
    1db4:	80 83       	st	Z, r24
		}
		return ret;
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1db8:	0f 90       	pop	r0
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	0f 90       	pop	r0
    1dc0:	0f 90       	pop	r0
    1dc2:	cf 91       	pop	r28
    1dc4:	df 91       	pop	r29
    1dc6:	08 95       	ret

00001dc8 <gpio_pin_write_logic>:
 * @param _pin_config
 * @param logic
 * @return
 */
STD_ReturnStatus gpio_pin_write_logic(const Pin_Config_t *_pin_config,Logic_t logic)
{
    1dc8:	df 93       	push	r29
    1dca:	cf 93       	push	r28
    1dcc:	00 d0       	rcall	.+0      	; 0x1dce <gpio_pin_write_logic+0x6>
    1dce:	00 d0       	rcall	.+0      	; 0x1dd0 <gpio_pin_write_logic+0x8>
    1dd0:	00 d0       	rcall	.+0      	; 0x1dd2 <gpio_pin_write_logic+0xa>
    1dd2:	cd b7       	in	r28, 0x3d	; 61
    1dd4:	de b7       	in	r29, 0x3e	; 62
    1dd6:	9b 83       	std	Y+3, r25	; 0x03
    1dd8:	8a 83       	std	Y+2, r24	; 0x02
    1dda:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret=E_OK;
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	89 83       	std	Y+1, r24	; 0x01
		if(NULL==_pin_config||_pin_config->pin > PORT_PIN_MAX_NUMBER-1)
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
    1de2:	9b 81       	ldd	r25, Y+3	; 0x03
    1de4:	00 97       	sbiw	r24, 0x00	; 0
    1de6:	59 f0       	breq	.+22     	; 0x1dfe <gpio_pin_write_logic+0x36>
    1de8:	ea 81       	ldd	r30, Y+2	; 0x02
    1dea:	fb 81       	ldd	r31, Y+3	; 0x03
    1dec:	80 81       	ld	r24, Z
    1dee:	86 95       	lsr	r24
    1df0:	86 95       	lsr	r24
    1df2:	87 70       	andi	r24, 0x07	; 7
    1df4:	88 2f       	mov	r24, r24
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	88 30       	cpi	r24, 0x08	; 8
    1dfa:	91 05       	cpc	r25, r1
    1dfc:	14 f0       	brlt	.+4      	; 0x1e02 <gpio_pin_write_logic+0x3a>
		{
			ret=E_NOT_OK;
    1dfe:	19 82       	std	Y+1, r1	; 0x01
    1e00:	6f c0       	rjmp	.+222    	; 0x1ee0 <gpio_pin_write_logic+0x118>
		}
		else
		{
			switch(logic)
    1e02:	8c 81       	ldd	r24, Y+4	; 0x04
    1e04:	28 2f       	mov	r18, r24
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	3e 83       	std	Y+6, r19	; 0x06
    1e0a:	2d 83       	std	Y+5, r18	; 0x05
    1e0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e10:	00 97       	sbiw	r24, 0x00	; 0
    1e12:	b1 f1       	breq	.+108    	; 0x1e80 <gpio_pin_write_logic+0xb8>
    1e14:	2d 81       	ldd	r18, Y+5	; 0x05
    1e16:	3e 81       	ldd	r19, Y+6	; 0x06
    1e18:	21 30       	cpi	r18, 0x01	; 1
    1e1a:	31 05       	cpc	r19, r1
    1e1c:	09 f0       	breq	.+2      	; 0x1e20 <gpio_pin_write_logic+0x58>
    1e1e:	60 c0       	rjmp	.+192    	; 0x1ee0 <gpio_pin_write_logic+0x118>
			{
			case GPIO_HIGH:			SET_BIT(*PORT_register[_pin_config->port],_pin_config->pin);break;
    1e20:	ea 81       	ldd	r30, Y+2	; 0x02
    1e22:	fb 81       	ldd	r31, Y+3	; 0x03
    1e24:	80 81       	ld	r24, Z
    1e26:	83 70       	andi	r24, 0x03	; 3
    1e28:	88 2f       	mov	r24, r24
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	88 0f       	add	r24, r24
    1e2e:	99 1f       	adc	r25, r25
    1e30:	fc 01       	movw	r30, r24
    1e32:	ed 58       	subi	r30, 0x8D	; 141
    1e34:	fe 4f       	sbci	r31, 0xFE	; 254
    1e36:	a0 81       	ld	r26, Z
    1e38:	b1 81       	ldd	r27, Z+1	; 0x01
    1e3a:	ea 81       	ldd	r30, Y+2	; 0x02
    1e3c:	fb 81       	ldd	r31, Y+3	; 0x03
    1e3e:	80 81       	ld	r24, Z
    1e40:	83 70       	andi	r24, 0x03	; 3
    1e42:	88 2f       	mov	r24, r24
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	88 0f       	add	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	ed 58       	subi	r30, 0x8D	; 141
    1e4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e50:	01 90       	ld	r0, Z+
    1e52:	f0 81       	ld	r31, Z
    1e54:	e0 2d       	mov	r30, r0
    1e56:	80 81       	ld	r24, Z
    1e58:	48 2f       	mov	r20, r24
    1e5a:	ea 81       	ldd	r30, Y+2	; 0x02
    1e5c:	fb 81       	ldd	r31, Y+3	; 0x03
    1e5e:	80 81       	ld	r24, Z
    1e60:	86 95       	lsr	r24
    1e62:	86 95       	lsr	r24
    1e64:	87 70       	andi	r24, 0x07	; 7
    1e66:	28 2f       	mov	r18, r24
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	02 2e       	mov	r0, r18
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <gpio_pin_write_logic+0xae>
    1e72:	88 0f       	add	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	0a 94       	dec	r0
    1e78:	e2 f7       	brpl	.-8      	; 0x1e72 <gpio_pin_write_logic+0xaa>
    1e7a:	84 2b       	or	r24, r20
    1e7c:	8c 93       	st	X, r24
    1e7e:	30 c0       	rjmp	.+96     	; 0x1ee0 <gpio_pin_write_logic+0x118>
			case GPIO_LOW:			CLR_BIT(*PORT_register[_pin_config->port],_pin_config->pin);break;
    1e80:	ea 81       	ldd	r30, Y+2	; 0x02
    1e82:	fb 81       	ldd	r31, Y+3	; 0x03
    1e84:	80 81       	ld	r24, Z
    1e86:	83 70       	andi	r24, 0x03	; 3
    1e88:	88 2f       	mov	r24, r24
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	88 0f       	add	r24, r24
    1e8e:	99 1f       	adc	r25, r25
    1e90:	fc 01       	movw	r30, r24
    1e92:	ed 58       	subi	r30, 0x8D	; 141
    1e94:	fe 4f       	sbci	r31, 0xFE	; 254
    1e96:	a0 81       	ld	r26, Z
    1e98:	b1 81       	ldd	r27, Z+1	; 0x01
    1e9a:	ea 81       	ldd	r30, Y+2	; 0x02
    1e9c:	fb 81       	ldd	r31, Y+3	; 0x03
    1e9e:	80 81       	ld	r24, Z
    1ea0:	83 70       	andi	r24, 0x03	; 3
    1ea2:	88 2f       	mov	r24, r24
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	88 0f       	add	r24, r24
    1ea8:	99 1f       	adc	r25, r25
    1eaa:	fc 01       	movw	r30, r24
    1eac:	ed 58       	subi	r30, 0x8D	; 141
    1eae:	fe 4f       	sbci	r31, 0xFE	; 254
    1eb0:	01 90       	ld	r0, Z+
    1eb2:	f0 81       	ld	r31, Z
    1eb4:	e0 2d       	mov	r30, r0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	48 2f       	mov	r20, r24
    1eba:	ea 81       	ldd	r30, Y+2	; 0x02
    1ebc:	fb 81       	ldd	r31, Y+3	; 0x03
    1ebe:	80 81       	ld	r24, Z
    1ec0:	86 95       	lsr	r24
    1ec2:	86 95       	lsr	r24
    1ec4:	87 70       	andi	r24, 0x07	; 7
    1ec6:	28 2f       	mov	r18, r24
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	02 2e       	mov	r0, r18
    1ed0:	02 c0       	rjmp	.+4      	; 0x1ed6 <gpio_pin_write_logic+0x10e>
    1ed2:	88 0f       	add	r24, r24
    1ed4:	99 1f       	adc	r25, r25
    1ed6:	0a 94       	dec	r0
    1ed8:	e2 f7       	brpl	.-8      	; 0x1ed2 <gpio_pin_write_logic+0x10a>
    1eda:	80 95       	com	r24
    1edc:	84 23       	and	r24, r20
    1ede:	8c 93       	st	X, r24
			}
		}
		return ret;
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ee2:	26 96       	adiw	r28, 0x06	; 6
    1ee4:	0f b6       	in	r0, 0x3f	; 63
    1ee6:	f8 94       	cli
    1ee8:	de bf       	out	0x3e, r29	; 62
    1eea:	0f be       	out	0x3f, r0	; 63
    1eec:	cd bf       	out	0x3d, r28	; 61
    1eee:	cf 91       	pop	r28
    1ef0:	df 91       	pop	r29
    1ef2:	08 95       	ret

00001ef4 <gpio_pin_read_logic>:
 * @param _pin_config
 * @param logic
 * @return
 */
STD_ReturnStatus gpio_pin_read_logic(const Pin_Config_t *_pin_config,Logic_t *logic)
{
    1ef4:	df 93       	push	r29
    1ef6:	cf 93       	push	r28
    1ef8:	00 d0       	rcall	.+0      	; 0x1efa <gpio_pin_read_logic+0x6>
    1efa:	00 d0       	rcall	.+0      	; 0x1efc <gpio_pin_read_logic+0x8>
    1efc:	0f 92       	push	r0
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
    1f02:	9b 83       	std	Y+3, r25	; 0x03
    1f04:	8a 83       	std	Y+2, r24	; 0x02
    1f06:	7d 83       	std	Y+5, r23	; 0x05
    1f08:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret=E_OK;
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	89 83       	std	Y+1, r24	; 0x01
		if(NULL==_pin_config|| NULL== logic||_pin_config->pin > PORT_PIN_MAX_NUMBER-1)
    1f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f10:	9b 81       	ldd	r25, Y+3	; 0x03
    1f12:	00 97       	sbiw	r24, 0x00	; 0
    1f14:	79 f0       	breq	.+30     	; 0x1f34 <gpio_pin_read_logic+0x40>
    1f16:	8c 81       	ldd	r24, Y+4	; 0x04
    1f18:	9d 81       	ldd	r25, Y+5	; 0x05
    1f1a:	00 97       	sbiw	r24, 0x00	; 0
    1f1c:	59 f0       	breq	.+22     	; 0x1f34 <gpio_pin_read_logic+0x40>
    1f1e:	ea 81       	ldd	r30, Y+2	; 0x02
    1f20:	fb 81       	ldd	r31, Y+3	; 0x03
    1f22:	80 81       	ld	r24, Z
    1f24:	86 95       	lsr	r24
    1f26:	86 95       	lsr	r24
    1f28:	87 70       	andi	r24, 0x07	; 7
    1f2a:	88 2f       	mov	r24, r24
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	88 30       	cpi	r24, 0x08	; 8
    1f30:	91 05       	cpc	r25, r1
    1f32:	14 f0       	brlt	.+4      	; 0x1f38 <gpio_pin_read_logic+0x44>
		{
			ret=E_NOT_OK;
    1f34:	19 82       	std	Y+1, r1	; 0x01
    1f36:	24 c0       	rjmp	.+72     	; 0x1f80 <gpio_pin_read_logic+0x8c>
		}
		else
		{
			*logic=READ_BIT(*PIN_register[_pin_config->port],_pin_config->pin);
    1f38:	ea 81       	ldd	r30, Y+2	; 0x02
    1f3a:	fb 81       	ldd	r31, Y+3	; 0x03
    1f3c:	80 81       	ld	r24, Z
    1f3e:	83 70       	andi	r24, 0x03	; 3
    1f40:	88 2f       	mov	r24, r24
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	88 0f       	add	r24, r24
    1f46:	99 1f       	adc	r25, r25
    1f48:	fc 01       	movw	r30, r24
    1f4a:	e5 58       	subi	r30, 0x85	; 133
    1f4c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f4e:	01 90       	ld	r0, Z+
    1f50:	f0 81       	ld	r31, Z
    1f52:	e0 2d       	mov	r30, r0
    1f54:	80 81       	ld	r24, Z
    1f56:	28 2f       	mov	r18, r24
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	ea 81       	ldd	r30, Y+2	; 0x02
    1f5c:	fb 81       	ldd	r31, Y+3	; 0x03
    1f5e:	80 81       	ld	r24, Z
    1f60:	86 95       	lsr	r24
    1f62:	86 95       	lsr	r24
    1f64:	87 70       	andi	r24, 0x07	; 7
    1f66:	88 2f       	mov	r24, r24
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	a9 01       	movw	r20, r18
    1f6c:	02 c0       	rjmp	.+4      	; 0x1f72 <gpio_pin_read_logic+0x7e>
    1f6e:	55 95       	asr	r21
    1f70:	47 95       	ror	r20
    1f72:	8a 95       	dec	r24
    1f74:	e2 f7       	brpl	.-8      	; 0x1f6e <gpio_pin_read_logic+0x7a>
    1f76:	ca 01       	movw	r24, r20
    1f78:	81 70       	andi	r24, 0x01	; 1
    1f7a:	ec 81       	ldd	r30, Y+4	; 0x04
    1f7c:	fd 81       	ldd	r31, Y+5	; 0x05
    1f7e:	80 83       	st	Z, r24
		}
		return ret;
    1f80:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	08 95       	ret

00001f92 <gpio_pin_toggle_logic>:
 *
 * @param _pin_config
 * @return
 */
STD_ReturnStatus gpio_pin_toggle_logic(const Pin_Config_t *_pin_config)
{
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	00 d0       	rcall	.+0      	; 0x1f98 <gpio_pin_toggle_logic+0x6>
    1f98:	0f 92       	push	r0
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62
    1f9e:	9b 83       	std	Y+3, r25	; 0x03
    1fa0:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret=E_OK;
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	89 83       	std	Y+1, r24	; 0x01
		if(NULL==_pin_config||_pin_config->pin > PORT_PIN_MAX_NUMBER-1)
    1fa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa8:	9b 81       	ldd	r25, Y+3	; 0x03
    1faa:	00 97       	sbiw	r24, 0x00	; 0
    1fac:	59 f0       	breq	.+22     	; 0x1fc4 <gpio_pin_toggle_logic+0x32>
    1fae:	ea 81       	ldd	r30, Y+2	; 0x02
    1fb0:	fb 81       	ldd	r31, Y+3	; 0x03
    1fb2:	80 81       	ld	r24, Z
    1fb4:	86 95       	lsr	r24
    1fb6:	86 95       	lsr	r24
    1fb8:	87 70       	andi	r24, 0x07	; 7
    1fba:	88 2f       	mov	r24, r24
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	88 30       	cpi	r24, 0x08	; 8
    1fc0:	91 05       	cpc	r25, r1
    1fc2:	14 f0       	brlt	.+4      	; 0x1fc8 <gpio_pin_toggle_logic+0x36>
		{
			ret=E_NOT_OK;
    1fc4:	19 82       	std	Y+1, r1	; 0x01
    1fc6:	2f c0       	rjmp	.+94     	; 0x2026 <gpio_pin_toggle_logic+0x94>
		}
		else
		{
			TOGGLE_BIT(*PORT_register[_pin_config->port],_pin_config->pin);
    1fc8:	ea 81       	ldd	r30, Y+2	; 0x02
    1fca:	fb 81       	ldd	r31, Y+3	; 0x03
    1fcc:	80 81       	ld	r24, Z
    1fce:	83 70       	andi	r24, 0x03	; 3
    1fd0:	88 2f       	mov	r24, r24
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	88 0f       	add	r24, r24
    1fd6:	99 1f       	adc	r25, r25
    1fd8:	fc 01       	movw	r30, r24
    1fda:	ed 58       	subi	r30, 0x8D	; 141
    1fdc:	fe 4f       	sbci	r31, 0xFE	; 254
    1fde:	a0 81       	ld	r26, Z
    1fe0:	b1 81       	ldd	r27, Z+1	; 0x01
    1fe2:	ea 81       	ldd	r30, Y+2	; 0x02
    1fe4:	fb 81       	ldd	r31, Y+3	; 0x03
    1fe6:	80 81       	ld	r24, Z
    1fe8:	83 70       	andi	r24, 0x03	; 3
    1fea:	88 2f       	mov	r24, r24
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	88 0f       	add	r24, r24
    1ff0:	99 1f       	adc	r25, r25
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	ed 58       	subi	r30, 0x8D	; 141
    1ff6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ff8:	01 90       	ld	r0, Z+
    1ffa:	f0 81       	ld	r31, Z
    1ffc:	e0 2d       	mov	r30, r0
    1ffe:	80 81       	ld	r24, Z
    2000:	48 2f       	mov	r20, r24
    2002:	ea 81       	ldd	r30, Y+2	; 0x02
    2004:	fb 81       	ldd	r31, Y+3	; 0x03
    2006:	80 81       	ld	r24, Z
    2008:	86 95       	lsr	r24
    200a:	86 95       	lsr	r24
    200c:	87 70       	andi	r24, 0x07	; 7
    200e:	28 2f       	mov	r18, r24
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	02 2e       	mov	r0, r18
    2018:	02 c0       	rjmp	.+4      	; 0x201e <gpio_pin_toggle_logic+0x8c>
    201a:	88 0f       	add	r24, r24
    201c:	99 1f       	adc	r25, r25
    201e:	0a 94       	dec	r0
    2020:	e2 f7       	brpl	.-8      	; 0x201a <gpio_pin_toggle_logic+0x88>
    2022:	84 27       	eor	r24, r20
    2024:	8c 93       	st	X, r24
		}
		return ret;
    2026:	89 81       	ldd	r24, Y+1	; 0x01
}
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	0f 90       	pop	r0
    202e:	cf 91       	pop	r28
    2030:	df 91       	pop	r29
    2032:	08 95       	ret

00002034 <gpio_pin_initialize>:
 *
 * @param _pin_config
 * @return
 */
STD_ReturnStatus gpio_pin_initialize(const Pin_Config_t *_pin_config)
{
    2034:	df 93       	push	r29
    2036:	cf 93       	push	r28
    2038:	00 d0       	rcall	.+0      	; 0x203a <gpio_pin_initialize+0x6>
    203a:	0f 92       	push	r0
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	9b 83       	std	Y+3, r25	; 0x03
    2042:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_OK;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==_pin_config)
    2048:	8a 81       	ldd	r24, Y+2	; 0x02
    204a:	9b 81       	ldd	r25, Y+3	; 0x03
    204c:	00 97       	sbiw	r24, 0x00	; 0
    204e:	11 f4       	brne	.+4      	; 0x2054 <gpio_pin_initialize+0x20>
	{
		ret=E_NOT_OK;
    2050:	19 82       	std	Y+1, r1	; 0x01
    2052:	14 c0       	rjmp	.+40     	; 0x207c <gpio_pin_initialize+0x48>
	}
	else
	{
		ret= gpio_pin_direction_initialize(_pin_config);
    2054:	8a 81       	ldd	r24, Y+2	; 0x02
    2056:	9b 81       	ldd	r25, Y+3	; 0x03
    2058:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <gpio_pin_direction_initialize>
    205c:	89 83       	std	Y+1, r24	; 0x01
		ret= gpio_pin_write_logic(_pin_config,_pin_config->logic);
    205e:	ea 81       	ldd	r30, Y+2	; 0x02
    2060:	fb 81       	ldd	r31, Y+3	; 0x03
    2062:	80 81       	ld	r24, Z
    2064:	82 95       	swap	r24
    2066:	86 95       	lsr	r24
    2068:	86 95       	lsr	r24
    206a:	83 70       	andi	r24, 0x03	; 3
    206c:	81 70       	andi	r24, 0x01	; 1
    206e:	28 2f       	mov	r18, r24
    2070:	8a 81       	ldd	r24, Y+2	; 0x02
    2072:	9b 81       	ldd	r25, Y+3	; 0x03
    2074:	62 2f       	mov	r22, r18
    2076:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
    207a:	89 83       	std	Y+1, r24	; 0x01
	}

	return ret;
    207c:	89 81       	ldd	r24, Y+1	; 0x01
}
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	cf 91       	pop	r28
    2086:	df 91       	pop	r29
    2088:	08 95       	ret

0000208a <gpio_port_direction_initialize>:
 * @param port
 * @param direction
 * @return
 */
STD_ReturnStatus gpio_port_direction_initialize(port_index_t port,uint8 direction)
{
    208a:	df 93       	push	r29
    208c:	cf 93       	push	r28
    208e:	00 d0       	rcall	.+0      	; 0x2090 <gpio_port_direction_initialize+0x6>
    2090:	0f 92       	push	r0
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
    2096:	8a 83       	std	Y+2, r24	; 0x02
    2098:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnStatus ret=E_OK;
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	89 83       	std	Y+1, r24	; 0x01
	if(port>PORT_MAX_NUMBER-1)
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	84 30       	cpi	r24, 0x04	; 4
    20a2:	10 f0       	brcs	.+4      	; 0x20a8 <gpio_port_direction_initialize+0x1e>
	{
		ret=E_NOT_OK;
    20a4:	19 82       	std	Y+1, r1	; 0x01
    20a6:	0d c0       	rjmp	.+26     	; 0x20c2 <gpio_port_direction_initialize+0x38>
	}
	else
	{
		*DDR_register[port]=direction;
    20a8:	8a 81       	ldd	r24, Y+2	; 0x02
    20aa:	88 2f       	mov	r24, r24
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	88 0f       	add	r24, r24
    20b0:	99 1f       	adc	r25, r25
    20b2:	fc 01       	movw	r30, r24
    20b4:	e5 59       	subi	r30, 0x95	; 149
    20b6:	fe 4f       	sbci	r31, 0xFE	; 254
    20b8:	01 90       	ld	r0, Z+
    20ba:	f0 81       	ld	r31, Z
    20bc:	e0 2d       	mov	r30, r0
    20be:	8b 81       	ldd	r24, Y+3	; 0x03
    20c0:	80 83       	st	Z, r24
	}

	return ret;
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
    20c8:	0f 90       	pop	r0
    20ca:	cf 91       	pop	r28
    20cc:	df 91       	pop	r29
    20ce:	08 95       	ret

000020d0 <gpio_port_get_direction_status>:
STD_ReturnStatus gpio_port_get_direction_status(port_index_t port,uint8 *direction_status)
{
    20d0:	df 93       	push	r29
    20d2:	cf 93       	push	r28
    20d4:	00 d0       	rcall	.+0      	; 0x20d6 <gpio_port_get_direction_status+0x6>
    20d6:	00 d0       	rcall	.+0      	; 0x20d8 <gpio_port_get_direction_status+0x8>
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
    20dc:	8a 83       	std	Y+2, r24	; 0x02
    20de:	7c 83       	std	Y+4, r23	; 0x04
    20e0:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnStatus ret=E_OK;
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==direction_status && port>PORT_MAX_NUMBER-1)
    20e6:	8b 81       	ldd	r24, Y+3	; 0x03
    20e8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ea:	00 97       	sbiw	r24, 0x00	; 0
    20ec:	29 f4       	brne	.+10     	; 0x20f8 <gpio_port_get_direction_status+0x28>
    20ee:	8a 81       	ldd	r24, Y+2	; 0x02
    20f0:	84 30       	cpi	r24, 0x04	; 4
    20f2:	10 f0       	brcs	.+4      	; 0x20f8 <gpio_port_get_direction_status+0x28>
	{
		ret=E_NOT_OK;
    20f4:	19 82       	std	Y+1, r1	; 0x01
    20f6:	0f c0       	rjmp	.+30     	; 0x2116 <gpio_port_get_direction_status+0x46>
	}
	else
	{
		*direction_status=*DDR_register[port];
    20f8:	8a 81       	ldd	r24, Y+2	; 0x02
    20fa:	88 2f       	mov	r24, r24
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	88 0f       	add	r24, r24
    2100:	99 1f       	adc	r25, r25
    2102:	fc 01       	movw	r30, r24
    2104:	e5 59       	subi	r30, 0x95	; 149
    2106:	fe 4f       	sbci	r31, 0xFE	; 254
    2108:	01 90       	ld	r0, Z+
    210a:	f0 81       	ld	r31, Z
    210c:	e0 2d       	mov	r30, r0
    210e:	80 81       	ld	r24, Z
    2110:	eb 81       	ldd	r30, Y+3	; 0x03
    2112:	fc 81       	ldd	r31, Y+4	; 0x04
    2114:	80 83       	st	Z, r24
	}

	return ret;
    2116:	89 81       	ldd	r24, Y+1	; 0x01
}
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	0f 90       	pop	r0
    2120:	cf 91       	pop	r28
    2122:	df 91       	pop	r29
    2124:	08 95       	ret

00002126 <gpio_port_write_logic>:
 * @param port
 * @param logic
 * @return
 */
STD_ReturnStatus gpio_port_write_logic(port_index_t port,uint8 logic)
{
    2126:	df 93       	push	r29
    2128:	cf 93       	push	r28
    212a:	00 d0       	rcall	.+0      	; 0x212c <gpio_port_write_logic+0x6>
    212c:	0f 92       	push	r0
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    2132:	8a 83       	std	Y+2, r24	; 0x02
    2134:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnStatus ret=E_OK;
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	89 83       	std	Y+1, r24	; 0x01
	if(port>PORT_MAX_NUMBER-1)
    213a:	8a 81       	ldd	r24, Y+2	; 0x02
    213c:	84 30       	cpi	r24, 0x04	; 4
    213e:	10 f0       	brcs	.+4      	; 0x2144 <gpio_port_write_logic+0x1e>
		{
			ret=E_NOT_OK;
    2140:	19 82       	std	Y+1, r1	; 0x01
    2142:	0d c0       	rjmp	.+26     	; 0x215e <gpio_port_write_logic+0x38>
		}
		else
		{
			*PORT_register[port]=logic;
    2144:	8a 81       	ldd	r24, Y+2	; 0x02
    2146:	88 2f       	mov	r24, r24
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	88 0f       	add	r24, r24
    214c:	99 1f       	adc	r25, r25
    214e:	fc 01       	movw	r30, r24
    2150:	ed 58       	subi	r30, 0x8D	; 141
    2152:	fe 4f       	sbci	r31, 0xFE	; 254
    2154:	01 90       	ld	r0, Z+
    2156:	f0 81       	ld	r31, Z
    2158:	e0 2d       	mov	r30, r0
    215a:	8b 81       	ldd	r24, Y+3	; 0x03
    215c:	80 83       	st	Z, r24
		}

	return ret;
    215e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2160:	0f 90       	pop	r0
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	cf 91       	pop	r28
    2168:	df 91       	pop	r29
    216a:	08 95       	ret

0000216c <gpio_port_read_logic>:
STD_ReturnStatus gpio_port_read_logic(port_index_t port,Logic_t *logic)
{
    216c:	df 93       	push	r29
    216e:	cf 93       	push	r28
    2170:	00 d0       	rcall	.+0      	; 0x2172 <gpio_port_read_logic+0x6>
    2172:	00 d0       	rcall	.+0      	; 0x2174 <gpio_port_read_logic+0x8>
    2174:	cd b7       	in	r28, 0x3d	; 61
    2176:	de b7       	in	r29, 0x3e	; 62
    2178:	8a 83       	std	Y+2, r24	; 0x02
    217a:	7c 83       	std	Y+4, r23	; 0x04
    217c:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnStatus ret=E_OK;
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==logic && port>PORT_MAX_NUMBER-1)
    2182:	8b 81       	ldd	r24, Y+3	; 0x03
    2184:	9c 81       	ldd	r25, Y+4	; 0x04
    2186:	00 97       	sbiw	r24, 0x00	; 0
    2188:	29 f4       	brne	.+10     	; 0x2194 <gpio_port_read_logic+0x28>
    218a:	8a 81       	ldd	r24, Y+2	; 0x02
    218c:	84 30       	cpi	r24, 0x04	; 4
    218e:	10 f0       	brcs	.+4      	; 0x2194 <gpio_port_read_logic+0x28>
	{
		ret=E_NOT_OK;
    2190:	19 82       	std	Y+1, r1	; 0x01
    2192:	0f c0       	rjmp	.+30     	; 0x21b2 <gpio_port_read_logic+0x46>
	}
	else
	{
		*logic=*PORT_register[port];
    2194:	8a 81       	ldd	r24, Y+2	; 0x02
    2196:	88 2f       	mov	r24, r24
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	88 0f       	add	r24, r24
    219c:	99 1f       	adc	r25, r25
    219e:	fc 01       	movw	r30, r24
    21a0:	ed 58       	subi	r30, 0x8D	; 141
    21a2:	fe 4f       	sbci	r31, 0xFE	; 254
    21a4:	01 90       	ld	r0, Z+
    21a6:	f0 81       	ld	r31, Z
    21a8:	e0 2d       	mov	r30, r0
    21aa:	80 81       	ld	r24, Z
    21ac:	eb 81       	ldd	r30, Y+3	; 0x03
    21ae:	fc 81       	ldd	r31, Y+4	; 0x04
    21b0:	80 83       	st	Z, r24
	}

	return ret;
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	0f 90       	pop	r0
    21bc:	cf 91       	pop	r28
    21be:	df 91       	pop	r29
    21c0:	08 95       	ret

000021c2 <gpio_port_toggle_logic>:
 *
 * @param port
 * @return
 */
STD_ReturnStatus gpio_port_toggle_logic(port_index_t port)
{
    21c2:	df 93       	push	r29
    21c4:	cf 93       	push	r28
    21c6:	00 d0       	rcall	.+0      	; 0x21c8 <gpio_port_toggle_logic+0x6>
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
    21cc:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret=E_OK;
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	89 83       	std	Y+1, r24	; 0x01
	if(port>PORT_MAX_NUMBER-1)
    21d2:	8a 81       	ldd	r24, Y+2	; 0x02
    21d4:	84 30       	cpi	r24, 0x04	; 4
    21d6:	10 f0       	brcs	.+4      	; 0x21dc <gpio_port_toggle_logic+0x1a>
	{
		ret=E_NOT_OK;
    21d8:	19 82       	std	Y+1, r1	; 0x01
    21da:	18 c0       	rjmp	.+48     	; 0x220c <gpio_port_toggle_logic+0x4a>
	}
	else
	{
		*PORT_register[port]^=0xff;
    21dc:	8a 81       	ldd	r24, Y+2	; 0x02
    21de:	88 2f       	mov	r24, r24
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	88 0f       	add	r24, r24
    21e4:	99 1f       	adc	r25, r25
    21e6:	fc 01       	movw	r30, r24
    21e8:	ed 58       	subi	r30, 0x8D	; 141
    21ea:	fe 4f       	sbci	r31, 0xFE	; 254
    21ec:	a0 81       	ld	r26, Z
    21ee:	b1 81       	ldd	r27, Z+1	; 0x01
    21f0:	8a 81       	ldd	r24, Y+2	; 0x02
    21f2:	88 2f       	mov	r24, r24
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	88 0f       	add	r24, r24
    21f8:	99 1f       	adc	r25, r25
    21fa:	fc 01       	movw	r30, r24
    21fc:	ed 58       	subi	r30, 0x8D	; 141
    21fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2200:	01 90       	ld	r0, Z+
    2202:	f0 81       	ld	r31, Z
    2204:	e0 2d       	mov	r30, r0
    2206:	80 81       	ld	r24, Z
    2208:	80 95       	com	r24
    220a:	8c 93       	st	X, r24
	}


	return ret;
    220c:	89 81       	ldd	r24, Y+1	; 0x01
}
    220e:	0f 90       	pop	r0
    2210:	0f 90       	pop	r0
    2212:	cf 91       	pop	r28
    2214:	df 91       	pop	r29
    2216:	08 95       	ret

00002218 <relay_initialize>:
 *      Author: hazem
 */
#include "ECU_RELAY.h"

STD_ReturnStatus relay_initialize(const relay_t *_relay)
{
    2218:	df 93       	push	r29
    221a:	cf 93       	push	r28
    221c:	00 d0       	rcall	.+0      	; 0x221e <relay_initialize+0x6>
    221e:	00 d0       	rcall	.+0      	; 0x2220 <relay_initialize+0x8>
    2220:	cd b7       	in	r28, 0x3d	; 61
    2222:	de b7       	in	r29, 0x3e	; 62
    2224:	9c 83       	std	Y+4, r25	; 0x04
    2226:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret = E_OK;
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == _relay)
    222c:	8b 81       	ldd	r24, Y+3	; 0x03
    222e:	9c 81       	ldd	r25, Y+4	; 0x04
    2230:	00 97       	sbiw	r24, 0x00	; 0
    2232:	11 f4       	brne	.+4      	; 0x2238 <relay_initialize+0x20>
	{
		ret = E_NOT_OK;
    2234:	19 82       	std	Y+1, r1	; 0x01
    2236:	34 c0       	rjmp	.+104    	; 0x22a0 <relay_initialize+0x88>
		Pin_Config_t pin_obj={
				.port= _relay->relay_port,
				.pin=_relay->relay_pin,
				.direction=DIRECTION_OUTPUT,
				.logic=_relay->relay_status
		};
    2238:	eb 81       	ldd	r30, Y+3	; 0x03
    223a:	fc 81       	ldd	r31, Y+4	; 0x04
    223c:	80 81       	ld	r24, Z
    223e:	8f 70       	andi	r24, 0x0F	; 15
    2240:	28 2f       	mov	r18, r24
    2242:	23 70       	andi	r18, 0x03	; 3
    2244:	eb 81       	ldd	r30, Y+3	; 0x03
    2246:	fc 81       	ldd	r31, Y+4	; 0x04
    2248:	80 81       	ld	r24, Z
    224a:	98 2f       	mov	r25, r24
    224c:	92 95       	swap	r25
    224e:	9f 70       	andi	r25, 0x0F	; 15
    2250:	97 70       	andi	r25, 0x07	; 7
    2252:	eb 81       	ldd	r30, Y+3	; 0x03
    2254:	fc 81       	ldd	r31, Y+4	; 0x04
    2256:	80 81       	ld	r24, Z
    2258:	38 2f       	mov	r19, r24
    225a:	33 1f       	adc	r19, r19
    225c:	33 27       	eor	r19, r19
    225e:	33 1f       	adc	r19, r19
    2260:	23 70       	andi	r18, 0x03	; 3
    2262:	8a 81       	ldd	r24, Y+2	; 0x02
    2264:	8c 7f       	andi	r24, 0xFC	; 252
    2266:	82 2b       	or	r24, r18
    2268:	8a 83       	std	Y+2, r24	; 0x02
    226a:	89 2f       	mov	r24, r25
    226c:	87 70       	andi	r24, 0x07	; 7
    226e:	98 2f       	mov	r25, r24
    2270:	99 0f       	add	r25, r25
    2272:	99 0f       	add	r25, r25
    2274:	8a 81       	ldd	r24, Y+2	; 0x02
    2276:	83 7e       	andi	r24, 0xE3	; 227
    2278:	89 2b       	or	r24, r25
    227a:	8a 83       	std	Y+2, r24	; 0x02
    227c:	8a 81       	ldd	r24, Y+2	; 0x02
    227e:	80 62       	ori	r24, 0x20	; 32
    2280:	8a 83       	std	Y+2, r24	; 0x02
    2282:	83 2f       	mov	r24, r19
    2284:	81 70       	andi	r24, 0x01	; 1
    2286:	98 2f       	mov	r25, r24
    2288:	92 95       	swap	r25
    228a:	99 0f       	add	r25, r25
    228c:	99 0f       	add	r25, r25
    228e:	90 7c       	andi	r25, 0xC0	; 192
    2290:	8a 81       	ldd	r24, Y+2	; 0x02
    2292:	8f 7b       	andi	r24, 0xBF	; 191
    2294:	89 2b       	or	r24, r25
    2296:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_initialize(&pin_obj);
    2298:	ce 01       	movw	r24, r28
    229a:	02 96       	adiw	r24, 0x02	; 2
    229c:	0e 94 1a 10 	call	0x2034	; 0x2034 <gpio_pin_initialize>
	}

	return ret;
    22a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    22a2:	0f 90       	pop	r0
    22a4:	0f 90       	pop	r0
    22a6:	0f 90       	pop	r0
    22a8:	0f 90       	pop	r0
    22aa:	cf 91       	pop	r28
    22ac:	df 91       	pop	r29
    22ae:	08 95       	ret

000022b0 <relay_turn_on>:



STD_ReturnStatus relay_turn_on(const relay_t *_relay)
{
    22b0:	df 93       	push	r29
    22b2:	cf 93       	push	r28
    22b4:	00 d0       	rcall	.+0      	; 0x22b6 <relay_turn_on+0x6>
    22b6:	00 d0       	rcall	.+0      	; 0x22b8 <relay_turn_on+0x8>
    22b8:	cd b7       	in	r28, 0x3d	; 61
    22ba:	de b7       	in	r29, 0x3e	; 62
    22bc:	9c 83       	std	Y+4, r25	; 0x04
    22be:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret = E_OK;
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == _relay)
    22c4:	8b 81       	ldd	r24, Y+3	; 0x03
    22c6:	9c 81       	ldd	r25, Y+4	; 0x04
    22c8:	00 97       	sbiw	r24, 0x00	; 0
    22ca:	11 f4       	brne	.+4      	; 0x22d0 <relay_turn_on+0x20>
	{
		ret = E_NOT_OK;
    22cc:	19 82       	std	Y+1, r1	; 0x01
    22ce:	35 c0       	rjmp	.+106    	; 0x233a <relay_turn_on+0x8a>
		Pin_Config_t pin_obj={
				.port= _relay->relay_port,
				.pin=_relay->relay_pin,
				.direction=DIRECTION_OUTPUT,
				.logic=_relay->relay_status
		};
    22d0:	eb 81       	ldd	r30, Y+3	; 0x03
    22d2:	fc 81       	ldd	r31, Y+4	; 0x04
    22d4:	80 81       	ld	r24, Z
    22d6:	8f 70       	andi	r24, 0x0F	; 15
    22d8:	28 2f       	mov	r18, r24
    22da:	23 70       	andi	r18, 0x03	; 3
    22dc:	eb 81       	ldd	r30, Y+3	; 0x03
    22de:	fc 81       	ldd	r31, Y+4	; 0x04
    22e0:	80 81       	ld	r24, Z
    22e2:	98 2f       	mov	r25, r24
    22e4:	92 95       	swap	r25
    22e6:	9f 70       	andi	r25, 0x0F	; 15
    22e8:	97 70       	andi	r25, 0x07	; 7
    22ea:	eb 81       	ldd	r30, Y+3	; 0x03
    22ec:	fc 81       	ldd	r31, Y+4	; 0x04
    22ee:	80 81       	ld	r24, Z
    22f0:	38 2f       	mov	r19, r24
    22f2:	33 1f       	adc	r19, r19
    22f4:	33 27       	eor	r19, r19
    22f6:	33 1f       	adc	r19, r19
    22f8:	23 70       	andi	r18, 0x03	; 3
    22fa:	8a 81       	ldd	r24, Y+2	; 0x02
    22fc:	8c 7f       	andi	r24, 0xFC	; 252
    22fe:	82 2b       	or	r24, r18
    2300:	8a 83       	std	Y+2, r24	; 0x02
    2302:	89 2f       	mov	r24, r25
    2304:	87 70       	andi	r24, 0x07	; 7
    2306:	98 2f       	mov	r25, r24
    2308:	99 0f       	add	r25, r25
    230a:	99 0f       	add	r25, r25
    230c:	8a 81       	ldd	r24, Y+2	; 0x02
    230e:	83 7e       	andi	r24, 0xE3	; 227
    2310:	89 2b       	or	r24, r25
    2312:	8a 83       	std	Y+2, r24	; 0x02
    2314:	8a 81       	ldd	r24, Y+2	; 0x02
    2316:	80 62       	ori	r24, 0x20	; 32
    2318:	8a 83       	std	Y+2, r24	; 0x02
    231a:	83 2f       	mov	r24, r19
    231c:	81 70       	andi	r24, 0x01	; 1
    231e:	98 2f       	mov	r25, r24
    2320:	92 95       	swap	r25
    2322:	99 0f       	add	r25, r25
    2324:	99 0f       	add	r25, r25
    2326:	90 7c       	andi	r25, 0xC0	; 192
    2328:	8a 81       	ldd	r24, Y+2	; 0x02
    232a:	8f 7b       	andi	r24, 0xBF	; 191
    232c:	89 2b       	or	r24, r25
    232e:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_write_logic(&pin_obj,GPIO_HIGH);
    2330:	ce 01       	movw	r24, r28
    2332:	02 96       	adiw	r24, 0x02	; 2
    2334:	61 e0       	ldi	r22, 0x01	; 1
    2336:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
	}


	return ret;
    233a:	89 81       	ldd	r24, Y+1	; 0x01
}
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	cf 91       	pop	r28
    2346:	df 91       	pop	r29
    2348:	08 95       	ret

0000234a <relay_turn_off>:
STD_ReturnStatus relay_turn_off(const relay_t *_relay)
{
    234a:	df 93       	push	r29
    234c:	cf 93       	push	r28
    234e:	00 d0       	rcall	.+0      	; 0x2350 <relay_turn_off+0x6>
    2350:	00 d0       	rcall	.+0      	; 0x2352 <relay_turn_off+0x8>
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
    2356:	9c 83       	std	Y+4, r25	; 0x04
    2358:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret = E_OK;
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == _relay)
    235e:	8b 81       	ldd	r24, Y+3	; 0x03
    2360:	9c 81       	ldd	r25, Y+4	; 0x04
    2362:	00 97       	sbiw	r24, 0x00	; 0
    2364:	11 f4       	brne	.+4      	; 0x236a <relay_turn_off+0x20>
	{
		ret = E_NOT_OK;
    2366:	19 82       	std	Y+1, r1	; 0x01
    2368:	35 c0       	rjmp	.+106    	; 0x23d4 <relay_turn_off+0x8a>
		Pin_Config_t pin_obj={
				.port= _relay->relay_port,
				.pin=_relay->relay_pin,
				.direction=DIRECTION_OUTPUT,
				.logic=_relay->relay_status
		};
    236a:	eb 81       	ldd	r30, Y+3	; 0x03
    236c:	fc 81       	ldd	r31, Y+4	; 0x04
    236e:	80 81       	ld	r24, Z
    2370:	8f 70       	andi	r24, 0x0F	; 15
    2372:	28 2f       	mov	r18, r24
    2374:	23 70       	andi	r18, 0x03	; 3
    2376:	eb 81       	ldd	r30, Y+3	; 0x03
    2378:	fc 81       	ldd	r31, Y+4	; 0x04
    237a:	80 81       	ld	r24, Z
    237c:	98 2f       	mov	r25, r24
    237e:	92 95       	swap	r25
    2380:	9f 70       	andi	r25, 0x0F	; 15
    2382:	97 70       	andi	r25, 0x07	; 7
    2384:	eb 81       	ldd	r30, Y+3	; 0x03
    2386:	fc 81       	ldd	r31, Y+4	; 0x04
    2388:	80 81       	ld	r24, Z
    238a:	38 2f       	mov	r19, r24
    238c:	33 1f       	adc	r19, r19
    238e:	33 27       	eor	r19, r19
    2390:	33 1f       	adc	r19, r19
    2392:	23 70       	andi	r18, 0x03	; 3
    2394:	8a 81       	ldd	r24, Y+2	; 0x02
    2396:	8c 7f       	andi	r24, 0xFC	; 252
    2398:	82 2b       	or	r24, r18
    239a:	8a 83       	std	Y+2, r24	; 0x02
    239c:	89 2f       	mov	r24, r25
    239e:	87 70       	andi	r24, 0x07	; 7
    23a0:	98 2f       	mov	r25, r24
    23a2:	99 0f       	add	r25, r25
    23a4:	99 0f       	add	r25, r25
    23a6:	8a 81       	ldd	r24, Y+2	; 0x02
    23a8:	83 7e       	andi	r24, 0xE3	; 227
    23aa:	89 2b       	or	r24, r25
    23ac:	8a 83       	std	Y+2, r24	; 0x02
    23ae:	8a 81       	ldd	r24, Y+2	; 0x02
    23b0:	80 62       	ori	r24, 0x20	; 32
    23b2:	8a 83       	std	Y+2, r24	; 0x02
    23b4:	83 2f       	mov	r24, r19
    23b6:	81 70       	andi	r24, 0x01	; 1
    23b8:	98 2f       	mov	r25, r24
    23ba:	92 95       	swap	r25
    23bc:	99 0f       	add	r25, r25
    23be:	99 0f       	add	r25, r25
    23c0:	90 7c       	andi	r25, 0xC0	; 192
    23c2:	8a 81       	ldd	r24, Y+2	; 0x02
    23c4:	8f 7b       	andi	r24, 0xBF	; 191
    23c6:	89 2b       	or	r24, r25
    23c8:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_write_logic(&pin_obj,GPIO_LOW);
    23ca:	ce 01       	movw	r24, r28
    23cc:	02 96       	adiw	r24, 0x02	; 2
    23ce:	60 e0       	ldi	r22, 0x00	; 0
    23d0:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
	}


	return ret;
    23d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    23d6:	0f 90       	pop	r0
    23d8:	0f 90       	pop	r0
    23da:	0f 90       	pop	r0
    23dc:	0f 90       	pop	r0
    23de:	cf 91       	pop	r28
    23e0:	df 91       	pop	r29
    23e2:	08 95       	ret

000023e4 <relay_toggle>:




STD_ReturnStatus relay_toggle(const relay_t *_relay)
{
    23e4:	df 93       	push	r29
    23e6:	cf 93       	push	r28
    23e8:	00 d0       	rcall	.+0      	; 0x23ea <relay_toggle+0x6>
    23ea:	00 d0       	rcall	.+0      	; 0x23ec <relay_toggle+0x8>
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
    23f0:	9c 83       	std	Y+4, r25	; 0x04
    23f2:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret = E_OK;
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == _relay)
    23f8:	8b 81       	ldd	r24, Y+3	; 0x03
    23fa:	9c 81       	ldd	r25, Y+4	; 0x04
    23fc:	00 97       	sbiw	r24, 0x00	; 0
    23fe:	11 f4       	brne	.+4      	; 0x2404 <relay_toggle+0x20>
	{
		ret = E_NOT_OK;
    2400:	19 82       	std	Y+1, r1	; 0x01
    2402:	34 c0       	rjmp	.+104    	; 0x246c <relay_toggle+0x88>
		Pin_Config_t pin_obj={
				.port= _relay->relay_port,
				.pin=_relay->relay_pin,
				.direction=DIRECTION_OUTPUT,
				.logic=_relay->relay_status
		};
    2404:	eb 81       	ldd	r30, Y+3	; 0x03
    2406:	fc 81       	ldd	r31, Y+4	; 0x04
    2408:	80 81       	ld	r24, Z
    240a:	8f 70       	andi	r24, 0x0F	; 15
    240c:	28 2f       	mov	r18, r24
    240e:	23 70       	andi	r18, 0x03	; 3
    2410:	eb 81       	ldd	r30, Y+3	; 0x03
    2412:	fc 81       	ldd	r31, Y+4	; 0x04
    2414:	80 81       	ld	r24, Z
    2416:	98 2f       	mov	r25, r24
    2418:	92 95       	swap	r25
    241a:	9f 70       	andi	r25, 0x0F	; 15
    241c:	97 70       	andi	r25, 0x07	; 7
    241e:	eb 81       	ldd	r30, Y+3	; 0x03
    2420:	fc 81       	ldd	r31, Y+4	; 0x04
    2422:	80 81       	ld	r24, Z
    2424:	38 2f       	mov	r19, r24
    2426:	33 1f       	adc	r19, r19
    2428:	33 27       	eor	r19, r19
    242a:	33 1f       	adc	r19, r19
    242c:	23 70       	andi	r18, 0x03	; 3
    242e:	8a 81       	ldd	r24, Y+2	; 0x02
    2430:	8c 7f       	andi	r24, 0xFC	; 252
    2432:	82 2b       	or	r24, r18
    2434:	8a 83       	std	Y+2, r24	; 0x02
    2436:	89 2f       	mov	r24, r25
    2438:	87 70       	andi	r24, 0x07	; 7
    243a:	98 2f       	mov	r25, r24
    243c:	99 0f       	add	r25, r25
    243e:	99 0f       	add	r25, r25
    2440:	8a 81       	ldd	r24, Y+2	; 0x02
    2442:	83 7e       	andi	r24, 0xE3	; 227
    2444:	89 2b       	or	r24, r25
    2446:	8a 83       	std	Y+2, r24	; 0x02
    2448:	8a 81       	ldd	r24, Y+2	; 0x02
    244a:	80 62       	ori	r24, 0x20	; 32
    244c:	8a 83       	std	Y+2, r24	; 0x02
    244e:	83 2f       	mov	r24, r19
    2450:	81 70       	andi	r24, 0x01	; 1
    2452:	98 2f       	mov	r25, r24
    2454:	92 95       	swap	r25
    2456:	99 0f       	add	r25, r25
    2458:	99 0f       	add	r25, r25
    245a:	90 7c       	andi	r25, 0xC0	; 192
    245c:	8a 81       	ldd	r24, Y+2	; 0x02
    245e:	8f 7b       	andi	r24, 0xBF	; 191
    2460:	89 2b       	or	r24, r25
    2462:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_toggle_logic(&pin_obj);
    2464:	ce 01       	movw	r24, r28
    2466:	02 96       	adiw	r24, 0x02	; 2
    2468:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <gpio_pin_toggle_logic>
	}


	return ret;
    246c:	89 81       	ldd	r24, Y+1	; 0x01
}
    246e:	0f 90       	pop	r0
    2470:	0f 90       	pop	r0
    2472:	0f 90       	pop	r0
    2474:	0f 90       	pop	r0
    2476:	cf 91       	pop	r28
    2478:	df 91       	pop	r29
    247a:	08 95       	ret

0000247c <button_initialize>:
 *
 * @param btn
 * @return
 */
STD_ReturnStatus button_initialize(const button_t *btn)
{
    247c:	df 93       	push	r29
    247e:	cf 93       	push	r28
    2480:	00 d0       	rcall	.+0      	; 0x2482 <button_initialize+0x6>
    2482:	0f 92       	push	r0
    2484:	cd b7       	in	r28, 0x3d	; 61
    2486:	de b7       	in	r29, 0x3e	; 62
    2488:	9b 83       	std	Y+3, r25	; 0x03
    248a:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret=E_OK;
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==btn)
    2490:	8a 81       	ldd	r24, Y+2	; 0x02
    2492:	9b 81       	ldd	r25, Y+3	; 0x03
    2494:	00 97       	sbiw	r24, 0x00	; 0
    2496:	11 f4       	brne	.+4      	; 0x249c <button_initialize+0x20>
	{
		ret = E_NOT_OK;
    2498:	19 82       	std	Y+1, r1	; 0x01
    249a:	05 c0       	rjmp	.+10     	; 0x24a6 <button_initialize+0x2a>
	}
	else
	{
		ret = gpio_pin_direction_initialize(&(btn->button_pin));
    249c:	8a 81       	ldd	r24, Y+2	; 0x02
    249e:	9b 81       	ldd	r25, Y+3	; 0x03
    24a0:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <gpio_pin_direction_initialize>
    24a4:	89 83       	std	Y+1, r24	; 0x01
	}


	return ret;
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    24a8:	0f 90       	pop	r0
    24aa:	0f 90       	pop	r0
    24ac:	0f 90       	pop	r0
    24ae:	cf 91       	pop	r28
    24b0:	df 91       	pop	r29
    24b2:	08 95       	ret

000024b4 <button_read_state>:
 * @param btn
 * @param btn_state
 * @return
 */
STD_ReturnStatus button_read_state(const button_t *btn,button_status_t *btn_state)
{
    24b4:	df 93       	push	r29
    24b6:	cf 93       	push	r28
    24b8:	00 d0       	rcall	.+0      	; 0x24ba <button_read_state+0x6>
    24ba:	00 d0       	rcall	.+0      	; 0x24bc <button_read_state+0x8>
    24bc:	00 d0       	rcall	.+0      	; 0x24be <button_read_state+0xa>
    24be:	cd b7       	in	r28, 0x3d	; 61
    24c0:	de b7       	in	r29, 0x3e	; 62
    24c2:	9c 83       	std	Y+4, r25	; 0x04
    24c4:	8b 83       	std	Y+3, r24	; 0x03
    24c6:	7e 83       	std	Y+6, r23	; 0x06
    24c8:	6d 83       	std	Y+5, r22	; 0x05
	STD_ReturnStatus ret=E_NOT_OK;
    24ca:	19 82       	std	Y+1, r1	; 0x01
	Logic_t pin_logic_status=GPIO_LOW;
    24cc:	1a 82       	std	Y+2, r1	; 0x02
	if((NULL==btn)||(NULL==btn_state))
    24ce:	8b 81       	ldd	r24, Y+3	; 0x03
    24d0:	9c 81       	ldd	r25, Y+4	; 0x04
    24d2:	00 97       	sbiw	r24, 0x00	; 0
    24d4:	21 f0       	breq	.+8      	; 0x24de <button_read_state+0x2a>
    24d6:	8d 81       	ldd	r24, Y+5	; 0x05
    24d8:	9e 81       	ldd	r25, Y+6	; 0x06
    24da:	00 97       	sbiw	r24, 0x00	; 0
    24dc:	11 f4       	brne	.+4      	; 0x24e2 <button_read_state+0x2e>
	{
		ret = E_NOT_OK;
    24de:	19 82       	std	Y+1, r1	; 0x01
    24e0:	2b c0       	rjmp	.+86     	; 0x2538 <button_read_state+0x84>
	}
	else
	{
		gpio_pin_read_logic(&(btn->button_pin),&pin_logic_status);
    24e2:	8b 81       	ldd	r24, Y+3	; 0x03
    24e4:	9c 81       	ldd	r25, Y+4	; 0x04
    24e6:	9e 01       	movw	r18, r28
    24e8:	2e 5f       	subi	r18, 0xFE	; 254
    24ea:	3f 4f       	sbci	r19, 0xFF	; 255
    24ec:	b9 01       	movw	r22, r18
    24ee:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <gpio_pin_read_logic>
		if(BUTTON_ACTIVE_HIGH == btn->button_connection)
    24f2:	eb 81       	ldd	r30, Y+3	; 0x03
    24f4:	fc 81       	ldd	r31, Y+4	; 0x04
    24f6:	82 81       	ldd	r24, Z+2	; 0x02
    24f8:	88 23       	and	r24, r24
    24fa:	61 f4       	brne	.+24     	; 0x2514 <button_read_state+0x60>
		{
			if(GPIO_HIGH==pin_logic_status)
    24fc:	8a 81       	ldd	r24, Y+2	; 0x02
    24fe:	81 30       	cpi	r24, 0x01	; 1
    2500:	21 f4       	brne	.+8      	; 0x250a <button_read_state+0x56>
			{
				*btn_state=BUTTON_PRESSED;
    2502:	ed 81       	ldd	r30, Y+5	; 0x05
    2504:	fe 81       	ldd	r31, Y+6	; 0x06
    2506:	10 82       	st	Z, r1
    2508:	15 c0       	rjmp	.+42     	; 0x2534 <button_read_state+0x80>
			}
			else
			{
				*btn_state=BUTTON_RELEASED;
    250a:	ed 81       	ldd	r30, Y+5	; 0x05
    250c:	fe 81       	ldd	r31, Y+6	; 0x06
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	80 83       	st	Z, r24
    2512:	10 c0       	rjmp	.+32     	; 0x2534 <button_read_state+0x80>
			}
		}
		else if(BUTTON_ACTIVE_LOW == btn->button_connection)
    2514:	eb 81       	ldd	r30, Y+3	; 0x03
    2516:	fc 81       	ldd	r31, Y+4	; 0x04
    2518:	82 81       	ldd	r24, Z+2	; 0x02
    251a:	81 30       	cpi	r24, 0x01	; 1
    251c:	59 f4       	brne	.+22     	; 0x2534 <button_read_state+0x80>
		{
			if(GPIO_LOW==pin_logic_status)
    251e:	8a 81       	ldd	r24, Y+2	; 0x02
    2520:	88 23       	and	r24, r24
    2522:	21 f4       	brne	.+8      	; 0x252c <button_read_state+0x78>
			{
				*btn_state=BUTTON_PRESSED;
    2524:	ed 81       	ldd	r30, Y+5	; 0x05
    2526:	fe 81       	ldd	r31, Y+6	; 0x06
    2528:	10 82       	st	Z, r1
    252a:	04 c0       	rjmp	.+8      	; 0x2534 <button_read_state+0x80>
			}
			else
			{
				*btn_state=BUTTON_RELEASED;
    252c:	ed 81       	ldd	r30, Y+5	; 0x05
    252e:	fe 81       	ldd	r31, Y+6	; 0x06
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	80 83       	st	Z, r24
			}
		}
		ret = E_OK;
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	89 83       	std	Y+1, r24	; 0x01
	}


	return ret;
    2538:	89 81       	ldd	r24, Y+1	; 0x01
}
    253a:	26 96       	adiw	r28, 0x06	; 6
    253c:	0f b6       	in	r0, 0x3f	; 63
    253e:	f8 94       	cli
    2540:	de bf       	out	0x3e, r29	; 62
    2542:	0f be       	out	0x3f, r0	; 63
    2544:	cd bf       	out	0x3d, r28	; 61
    2546:	cf 91       	pop	r28
    2548:	df 91       	pop	r29
    254a:	08 95       	ret

0000254c <led_initialize>:
 *
 * @param led
 * @return
 */
STD_ReturnStatus led_initialize(const led_t *led)
{
    254c:	df 93       	push	r29
    254e:	cf 93       	push	r28
    2550:	00 d0       	rcall	.+0      	; 0x2552 <led_initialize+0x6>
    2552:	00 d0       	rcall	.+0      	; 0x2554 <led_initialize+0x8>
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
    2558:	9c 83       	std	Y+4, r25	; 0x04
    255a:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret=E_OK;
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==led)
    2560:	8b 81       	ldd	r24, Y+3	; 0x03
    2562:	9c 81       	ldd	r25, Y+4	; 0x04
    2564:	00 97       	sbiw	r24, 0x00	; 0
    2566:	11 f4       	brne	.+4      	; 0x256c <led_initialize+0x20>
	{
		ret= E_NOT_OK;
    2568:	19 82       	std	Y+1, r1	; 0x01
    256a:	37 c0       	rjmp	.+110    	; 0x25da <led_initialize+0x8e>
	}
	else
	{
		Pin_Config_t pin_obj={.port=led->port_name,.pin=led->pin,.direction=DIRECTION_OUTPUT,.logic=led->led_status};
    256c:	eb 81       	ldd	r30, Y+3	; 0x03
    256e:	fc 81       	ldd	r31, Y+4	; 0x04
    2570:	80 81       	ld	r24, Z
    2572:	87 70       	andi	r24, 0x07	; 7
    2574:	28 2f       	mov	r18, r24
    2576:	23 70       	andi	r18, 0x03	; 3
    2578:	eb 81       	ldd	r30, Y+3	; 0x03
    257a:	fc 81       	ldd	r31, Y+4	; 0x04
    257c:	80 81       	ld	r24, Z
    257e:	98 2f       	mov	r25, r24
    2580:	96 95       	lsr	r25
    2582:	96 95       	lsr	r25
    2584:	96 95       	lsr	r25
    2586:	97 70       	andi	r25, 0x07	; 7
    2588:	eb 81       	ldd	r30, Y+3	; 0x03
    258a:	fc 81       	ldd	r31, Y+4	; 0x04
    258c:	80 81       	ld	r24, Z
    258e:	38 2f       	mov	r19, r24
    2590:	32 95       	swap	r19
    2592:	36 95       	lsr	r19
    2594:	36 95       	lsr	r19
    2596:	33 70       	andi	r19, 0x03	; 3
    2598:	31 70       	andi	r19, 0x01	; 1
    259a:	23 70       	andi	r18, 0x03	; 3
    259c:	8a 81       	ldd	r24, Y+2	; 0x02
    259e:	8c 7f       	andi	r24, 0xFC	; 252
    25a0:	82 2b       	or	r24, r18
    25a2:	8a 83       	std	Y+2, r24	; 0x02
    25a4:	89 2f       	mov	r24, r25
    25a6:	87 70       	andi	r24, 0x07	; 7
    25a8:	98 2f       	mov	r25, r24
    25aa:	99 0f       	add	r25, r25
    25ac:	99 0f       	add	r25, r25
    25ae:	8a 81       	ldd	r24, Y+2	; 0x02
    25b0:	83 7e       	andi	r24, 0xE3	; 227
    25b2:	89 2b       	or	r24, r25
    25b4:	8a 83       	std	Y+2, r24	; 0x02
    25b6:	8a 81       	ldd	r24, Y+2	; 0x02
    25b8:	80 62       	ori	r24, 0x20	; 32
    25ba:	8a 83       	std	Y+2, r24	; 0x02
    25bc:	83 2f       	mov	r24, r19
    25be:	81 70       	andi	r24, 0x01	; 1
    25c0:	98 2f       	mov	r25, r24
    25c2:	92 95       	swap	r25
    25c4:	99 0f       	add	r25, r25
    25c6:	99 0f       	add	r25, r25
    25c8:	90 7c       	andi	r25, 0xC0	; 192
    25ca:	8a 81       	ldd	r24, Y+2	; 0x02
    25cc:	8f 7b       	andi	r24, 0xBF	; 191
    25ce:	89 2b       	or	r24, r25
    25d0:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_initialize(&pin_obj);
    25d2:	ce 01       	movw	r24, r28
    25d4:	02 96       	adiw	r24, 0x02	; 2
    25d6:	0e 94 1a 10 	call	0x2034	; 0x2034 <gpio_pin_initialize>
	}

	return ret;
    25da:	89 81       	ldd	r24, Y+1	; 0x01
}
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	0f 90       	pop	r0
    25e2:	0f 90       	pop	r0
    25e4:	cf 91       	pop	r28
    25e6:	df 91       	pop	r29
    25e8:	08 95       	ret

000025ea <led_turn_on>:
 *
 * @param led
 * @return
 */
STD_ReturnStatus led_turn_on(const led_t *led)
{
    25ea:	df 93       	push	r29
    25ec:	cf 93       	push	r28
    25ee:	00 d0       	rcall	.+0      	; 0x25f0 <led_turn_on+0x6>
    25f0:	00 d0       	rcall	.+0      	; 0x25f2 <led_turn_on+0x8>
    25f2:	cd b7       	in	r28, 0x3d	; 61
    25f4:	de b7       	in	r29, 0x3e	; 62
    25f6:	9c 83       	std	Y+4, r25	; 0x04
    25f8:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret=E_OK;
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==led)
    25fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2600:	9c 81       	ldd	r25, Y+4	; 0x04
    2602:	00 97       	sbiw	r24, 0x00	; 0
    2604:	11 f4       	brne	.+4      	; 0x260a <led_turn_on+0x20>
	{
		ret= E_NOT_OK;
    2606:	19 82       	std	Y+1, r1	; 0x01
    2608:	38 c0       	rjmp	.+112    	; 0x267a <led_turn_on+0x90>
	}
	else
	{
		Pin_Config_t pin_obj={.port=led->port_name,.pin=led->pin,.direction=DIRECTION_OUTPUT,.logic=led->led_status};
    260a:	eb 81       	ldd	r30, Y+3	; 0x03
    260c:	fc 81       	ldd	r31, Y+4	; 0x04
    260e:	80 81       	ld	r24, Z
    2610:	87 70       	andi	r24, 0x07	; 7
    2612:	28 2f       	mov	r18, r24
    2614:	23 70       	andi	r18, 0x03	; 3
    2616:	eb 81       	ldd	r30, Y+3	; 0x03
    2618:	fc 81       	ldd	r31, Y+4	; 0x04
    261a:	80 81       	ld	r24, Z
    261c:	98 2f       	mov	r25, r24
    261e:	96 95       	lsr	r25
    2620:	96 95       	lsr	r25
    2622:	96 95       	lsr	r25
    2624:	97 70       	andi	r25, 0x07	; 7
    2626:	eb 81       	ldd	r30, Y+3	; 0x03
    2628:	fc 81       	ldd	r31, Y+4	; 0x04
    262a:	80 81       	ld	r24, Z
    262c:	38 2f       	mov	r19, r24
    262e:	32 95       	swap	r19
    2630:	36 95       	lsr	r19
    2632:	36 95       	lsr	r19
    2634:	33 70       	andi	r19, 0x03	; 3
    2636:	31 70       	andi	r19, 0x01	; 1
    2638:	23 70       	andi	r18, 0x03	; 3
    263a:	8a 81       	ldd	r24, Y+2	; 0x02
    263c:	8c 7f       	andi	r24, 0xFC	; 252
    263e:	82 2b       	or	r24, r18
    2640:	8a 83       	std	Y+2, r24	; 0x02
    2642:	89 2f       	mov	r24, r25
    2644:	87 70       	andi	r24, 0x07	; 7
    2646:	98 2f       	mov	r25, r24
    2648:	99 0f       	add	r25, r25
    264a:	99 0f       	add	r25, r25
    264c:	8a 81       	ldd	r24, Y+2	; 0x02
    264e:	83 7e       	andi	r24, 0xE3	; 227
    2650:	89 2b       	or	r24, r25
    2652:	8a 83       	std	Y+2, r24	; 0x02
    2654:	8a 81       	ldd	r24, Y+2	; 0x02
    2656:	80 62       	ori	r24, 0x20	; 32
    2658:	8a 83       	std	Y+2, r24	; 0x02
    265a:	83 2f       	mov	r24, r19
    265c:	81 70       	andi	r24, 0x01	; 1
    265e:	98 2f       	mov	r25, r24
    2660:	92 95       	swap	r25
    2662:	99 0f       	add	r25, r25
    2664:	99 0f       	add	r25, r25
    2666:	90 7c       	andi	r25, 0xC0	; 192
    2668:	8a 81       	ldd	r24, Y+2	; 0x02
    266a:	8f 7b       	andi	r24, 0xBF	; 191
    266c:	89 2b       	or	r24, r25
    266e:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_write_logic(&pin_obj,GPIO_HIGH);
    2670:	ce 01       	movw	r24, r28
    2672:	02 96       	adiw	r24, 0x02	; 2
    2674:	61 e0       	ldi	r22, 0x01	; 1
    2676:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
	}

	return ret;
    267a:	89 81       	ldd	r24, Y+1	; 0x01
}
    267c:	0f 90       	pop	r0
    267e:	0f 90       	pop	r0
    2680:	0f 90       	pop	r0
    2682:	0f 90       	pop	r0
    2684:	cf 91       	pop	r28
    2686:	df 91       	pop	r29
    2688:	08 95       	ret

0000268a <led_turn_off>:
 *
 * @param led
 * @return
 */
STD_ReturnStatus led_turn_off(const led_t *led)
{
    268a:	df 93       	push	r29
    268c:	cf 93       	push	r28
    268e:	00 d0       	rcall	.+0      	; 0x2690 <led_turn_off+0x6>
    2690:	00 d0       	rcall	.+0      	; 0x2692 <led_turn_off+0x8>
    2692:	cd b7       	in	r28, 0x3d	; 61
    2694:	de b7       	in	r29, 0x3e	; 62
    2696:	9c 83       	std	Y+4, r25	; 0x04
    2698:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret=E_OK;
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==led)
    269e:	8b 81       	ldd	r24, Y+3	; 0x03
    26a0:	9c 81       	ldd	r25, Y+4	; 0x04
    26a2:	00 97       	sbiw	r24, 0x00	; 0
    26a4:	11 f4       	brne	.+4      	; 0x26aa <led_turn_off+0x20>
	{
		ret= E_NOT_OK;
    26a6:	19 82       	std	Y+1, r1	; 0x01
    26a8:	38 c0       	rjmp	.+112    	; 0x271a <led_turn_off+0x90>
	}
	else
	{
		Pin_Config_t pin_obj={.port=led->port_name,.pin=led->pin,.direction=DIRECTION_OUTPUT,.logic=led->led_status};
    26aa:	eb 81       	ldd	r30, Y+3	; 0x03
    26ac:	fc 81       	ldd	r31, Y+4	; 0x04
    26ae:	80 81       	ld	r24, Z
    26b0:	87 70       	andi	r24, 0x07	; 7
    26b2:	28 2f       	mov	r18, r24
    26b4:	23 70       	andi	r18, 0x03	; 3
    26b6:	eb 81       	ldd	r30, Y+3	; 0x03
    26b8:	fc 81       	ldd	r31, Y+4	; 0x04
    26ba:	80 81       	ld	r24, Z
    26bc:	98 2f       	mov	r25, r24
    26be:	96 95       	lsr	r25
    26c0:	96 95       	lsr	r25
    26c2:	96 95       	lsr	r25
    26c4:	97 70       	andi	r25, 0x07	; 7
    26c6:	eb 81       	ldd	r30, Y+3	; 0x03
    26c8:	fc 81       	ldd	r31, Y+4	; 0x04
    26ca:	80 81       	ld	r24, Z
    26cc:	38 2f       	mov	r19, r24
    26ce:	32 95       	swap	r19
    26d0:	36 95       	lsr	r19
    26d2:	36 95       	lsr	r19
    26d4:	33 70       	andi	r19, 0x03	; 3
    26d6:	31 70       	andi	r19, 0x01	; 1
    26d8:	23 70       	andi	r18, 0x03	; 3
    26da:	8a 81       	ldd	r24, Y+2	; 0x02
    26dc:	8c 7f       	andi	r24, 0xFC	; 252
    26de:	82 2b       	or	r24, r18
    26e0:	8a 83       	std	Y+2, r24	; 0x02
    26e2:	89 2f       	mov	r24, r25
    26e4:	87 70       	andi	r24, 0x07	; 7
    26e6:	98 2f       	mov	r25, r24
    26e8:	99 0f       	add	r25, r25
    26ea:	99 0f       	add	r25, r25
    26ec:	8a 81       	ldd	r24, Y+2	; 0x02
    26ee:	83 7e       	andi	r24, 0xE3	; 227
    26f0:	89 2b       	or	r24, r25
    26f2:	8a 83       	std	Y+2, r24	; 0x02
    26f4:	8a 81       	ldd	r24, Y+2	; 0x02
    26f6:	80 62       	ori	r24, 0x20	; 32
    26f8:	8a 83       	std	Y+2, r24	; 0x02
    26fa:	83 2f       	mov	r24, r19
    26fc:	81 70       	andi	r24, 0x01	; 1
    26fe:	98 2f       	mov	r25, r24
    2700:	92 95       	swap	r25
    2702:	99 0f       	add	r25, r25
    2704:	99 0f       	add	r25, r25
    2706:	90 7c       	andi	r25, 0xC0	; 192
    2708:	8a 81       	ldd	r24, Y+2	; 0x02
    270a:	8f 7b       	andi	r24, 0xBF	; 191
    270c:	89 2b       	or	r24, r25
    270e:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_write_logic(&pin_obj,GPIO_LOW);
    2710:	ce 01       	movw	r24, r28
    2712:	02 96       	adiw	r24, 0x02	; 2
    2714:	60 e0       	ldi	r22, 0x00	; 0
    2716:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
	}

	return ret;
    271a:	89 81       	ldd	r24, Y+1	; 0x01
}
    271c:	0f 90       	pop	r0
    271e:	0f 90       	pop	r0
    2720:	0f 90       	pop	r0
    2722:	0f 90       	pop	r0
    2724:	cf 91       	pop	r28
    2726:	df 91       	pop	r29
    2728:	08 95       	ret

0000272a <led_turn_toggle>:
 *
 * @param led
 * @return
 */
STD_ReturnStatus led_turn_toggle(const led_t *led)
{
    272a:	df 93       	push	r29
    272c:	cf 93       	push	r28
    272e:	00 d0       	rcall	.+0      	; 0x2730 <led_turn_toggle+0x6>
    2730:	00 d0       	rcall	.+0      	; 0x2732 <led_turn_toggle+0x8>
    2732:	cd b7       	in	r28, 0x3d	; 61
    2734:	de b7       	in	r29, 0x3e	; 62
    2736:	9c 83       	std	Y+4, r25	; 0x04
    2738:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret=E_OK;
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==led)
    273e:	8b 81       	ldd	r24, Y+3	; 0x03
    2740:	9c 81       	ldd	r25, Y+4	; 0x04
    2742:	00 97       	sbiw	r24, 0x00	; 0
    2744:	11 f4       	brne	.+4      	; 0x274a <led_turn_toggle+0x20>
	{
		ret= E_NOT_OK;
    2746:	19 82       	std	Y+1, r1	; 0x01
    2748:	37 c0       	rjmp	.+110    	; 0x27b8 <led_turn_toggle+0x8e>
	}
	else
	{
		Pin_Config_t pin_obj={.port=led->port_name,.pin=led->pin,.direction=DIRECTION_OUTPUT,.logic=led->led_status};
    274a:	eb 81       	ldd	r30, Y+3	; 0x03
    274c:	fc 81       	ldd	r31, Y+4	; 0x04
    274e:	80 81       	ld	r24, Z
    2750:	87 70       	andi	r24, 0x07	; 7
    2752:	28 2f       	mov	r18, r24
    2754:	23 70       	andi	r18, 0x03	; 3
    2756:	eb 81       	ldd	r30, Y+3	; 0x03
    2758:	fc 81       	ldd	r31, Y+4	; 0x04
    275a:	80 81       	ld	r24, Z
    275c:	98 2f       	mov	r25, r24
    275e:	96 95       	lsr	r25
    2760:	96 95       	lsr	r25
    2762:	96 95       	lsr	r25
    2764:	97 70       	andi	r25, 0x07	; 7
    2766:	eb 81       	ldd	r30, Y+3	; 0x03
    2768:	fc 81       	ldd	r31, Y+4	; 0x04
    276a:	80 81       	ld	r24, Z
    276c:	38 2f       	mov	r19, r24
    276e:	32 95       	swap	r19
    2770:	36 95       	lsr	r19
    2772:	36 95       	lsr	r19
    2774:	33 70       	andi	r19, 0x03	; 3
    2776:	31 70       	andi	r19, 0x01	; 1
    2778:	23 70       	andi	r18, 0x03	; 3
    277a:	8a 81       	ldd	r24, Y+2	; 0x02
    277c:	8c 7f       	andi	r24, 0xFC	; 252
    277e:	82 2b       	or	r24, r18
    2780:	8a 83       	std	Y+2, r24	; 0x02
    2782:	89 2f       	mov	r24, r25
    2784:	87 70       	andi	r24, 0x07	; 7
    2786:	98 2f       	mov	r25, r24
    2788:	99 0f       	add	r25, r25
    278a:	99 0f       	add	r25, r25
    278c:	8a 81       	ldd	r24, Y+2	; 0x02
    278e:	83 7e       	andi	r24, 0xE3	; 227
    2790:	89 2b       	or	r24, r25
    2792:	8a 83       	std	Y+2, r24	; 0x02
    2794:	8a 81       	ldd	r24, Y+2	; 0x02
    2796:	80 62       	ori	r24, 0x20	; 32
    2798:	8a 83       	std	Y+2, r24	; 0x02
    279a:	83 2f       	mov	r24, r19
    279c:	81 70       	andi	r24, 0x01	; 1
    279e:	98 2f       	mov	r25, r24
    27a0:	92 95       	swap	r25
    27a2:	99 0f       	add	r25, r25
    27a4:	99 0f       	add	r25, r25
    27a6:	90 7c       	andi	r25, 0xC0	; 192
    27a8:	8a 81       	ldd	r24, Y+2	; 0x02
    27aa:	8f 7b       	andi	r24, 0xBF	; 191
    27ac:	89 2b       	or	r24, r25
    27ae:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_toggle_logic(&pin_obj);
    27b0:	ce 01       	movw	r24, r28
    27b2:	02 96       	adiw	r24, 0x02	; 2
    27b4:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <gpio_pin_toggle_logic>
	}

	return ret;
    27b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    27ba:	0f 90       	pop	r0
    27bc:	0f 90       	pop	r0
    27be:	0f 90       	pop	r0
    27c0:	0f 90       	pop	r0
    27c2:	cf 91       	pop	r28
    27c4:	df 91       	pop	r29
    27c6:	08 95       	ret

000027c8 <lcd_4bit_initialize>:




STD_ReturnStatus lcd_4bit_initialize(const chr_lcd_4bit_t *lcd)
{
    27c8:	df 93       	push	r29
    27ca:	cf 93       	push	r28
    27cc:	cd b7       	in	r28, 0x3d	; 61
    27ce:	de b7       	in	r29, 0x3e	; 62
    27d0:	a0 97       	sbiw	r28, 0x20	; 32
    27d2:	0f b6       	in	r0, 0x3f	; 63
    27d4:	f8 94       	cli
    27d6:	de bf       	out	0x3e, r29	; 62
    27d8:	0f be       	out	0x3f, r0	; 63
    27da:	cd bf       	out	0x3d, r28	; 61
    27dc:	98 a3       	std	Y+32, r25	; 0x20
    27de:	8f 8f       	std	Y+31, r24	; 0x1f
	STD_ReturnStatus ret = E_OK;
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 l_data_pins_counter = ZERO_INIT;
    27e4:	1d 8e       	std	Y+29, r1	; 0x1d
	if(NULL==lcd)
    27e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27e8:	98 a1       	ldd	r25, Y+32	; 0x20
    27ea:	00 97       	sbiw	r24, 0x00	; 0
    27ec:	11 f4       	brne	.+4      	; 0x27f2 <lcd_4bit_initialize+0x2a>
	{
		ret = E_NOT_OK;
    27ee:	1e 8e       	std	Y+30, r1	; 0x1e
    27f0:	3c c1       	rjmp	.+632    	; 0x2a6a <lcd_4bit_initialize+0x2a2>
	}
	else
	{
		ret = gpio_pin_initialize(&(lcd->lcd_rs));
    27f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27f4:	98 a1       	ldd	r25, Y+32	; 0x20
    27f6:	0e 94 1a 10 	call	0x2034	; 0x2034 <gpio_pin_initialize>
    27fa:	8e 8f       	std	Y+30, r24	; 0x1e
		ret = gpio_pin_initialize(&(lcd->lcd_en));
    27fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27fe:	98 a1       	ldd	r25, Y+32	; 0x20
    2800:	01 96       	adiw	r24, 0x01	; 1
    2802:	0e 94 1a 10 	call	0x2034	; 0x2034 <gpio_pin_initialize>
    2806:	8e 8f       	std	Y+30, r24	; 0x1e
		for(l_data_pins_counter=ZERO_INIT;l_data_pins_counter<4;l_data_pins_counter++)
    2808:	1d 8e       	std	Y+29, r1	; 0x1d
    280a:	10 c0       	rjmp	.+32     	; 0x282c <lcd_4bit_initialize+0x64>
		{
			ret = gpio_pin_initialize(&(lcd->lcd_data[l_data_pins_counter]));
    280c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    280e:	98 a1       	ldd	r25, Y+32	; 0x20
    2810:	9c 01       	movw	r18, r24
    2812:	2e 5f       	subi	r18, 0xFE	; 254
    2814:	3f 4f       	sbci	r19, 0xFF	; 255
    2816:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2818:	88 2f       	mov	r24, r24
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	82 0f       	add	r24, r18
    281e:	93 1f       	adc	r25, r19
    2820:	0e 94 1a 10 	call	0x2034	; 0x2034 <gpio_pin_initialize>
    2824:	8e 8f       	std	Y+30, r24	; 0x1e
	}
	else
	{
		ret = gpio_pin_initialize(&(lcd->lcd_rs));
		ret = gpio_pin_initialize(&(lcd->lcd_en));
		for(l_data_pins_counter=ZERO_INIT;l_data_pins_counter<4;l_data_pins_counter++)
    2826:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2828:	8f 5f       	subi	r24, 0xFF	; 255
    282a:	8d 8f       	std	Y+29, r24	; 0x1d
    282c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    282e:	84 30       	cpi	r24, 0x04	; 4
    2830:	68 f3       	brcs	.-38     	; 0x280c <lcd_4bit_initialize+0x44>
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	a0 e2       	ldi	r26, 0x20	; 32
    2838:	b2 e4       	ldi	r27, 0x42	; 66
    283a:	89 8f       	std	Y+25, r24	; 0x19
    283c:	9a 8f       	std	Y+26, r25	; 0x1a
    283e:	ab 8f       	std	Y+27, r26	; 0x1b
    2840:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2842:	69 8d       	ldd	r22, Y+25	; 0x19
    2844:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2846:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2848:	9c 8d       	ldd	r25, Y+28	; 0x1c
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	4a ef       	ldi	r20, 0xFA	; 250
    2850:	54 e4       	ldi	r21, 0x44	; 68
    2852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	8d 8b       	std	Y+21, r24	; 0x15
    285c:	9e 8b       	std	Y+22, r25	; 0x16
    285e:	af 8b       	std	Y+23, r26	; 0x17
    2860:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2862:	6d 89       	ldd	r22, Y+21	; 0x15
    2864:	7e 89       	ldd	r23, Y+22	; 0x16
    2866:	8f 89       	ldd	r24, Y+23	; 0x17
    2868:	98 8d       	ldd	r25, Y+24	; 0x18
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	40 e8       	ldi	r20, 0x80	; 128
    2870:	5f e3       	ldi	r21, 0x3F	; 63
    2872:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2876:	88 23       	and	r24, r24
    2878:	2c f4       	brge	.+10     	; 0x2884 <lcd_4bit_initialize+0xbc>
		__ticks = 1;
    287a:	81 e0       	ldi	r24, 0x01	; 1
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	9c 8b       	std	Y+20, r25	; 0x14
    2880:	8b 8b       	std	Y+19, r24	; 0x13
    2882:	3f c0       	rjmp	.+126    	; 0x2902 <lcd_4bit_initialize+0x13a>
	else if (__tmp > 65535)
    2884:	6d 89       	ldd	r22, Y+21	; 0x15
    2886:	7e 89       	ldd	r23, Y+22	; 0x16
    2888:	8f 89       	ldd	r24, Y+23	; 0x17
    288a:	98 8d       	ldd	r25, Y+24	; 0x18
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	3f ef       	ldi	r19, 0xFF	; 255
    2890:	4f e7       	ldi	r20, 0x7F	; 127
    2892:	57 e4       	ldi	r21, 0x47	; 71
    2894:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2898:	18 16       	cp	r1, r24
    289a:	4c f5       	brge	.+82     	; 0x28ee <lcd_4bit_initialize+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    289c:	69 8d       	ldd	r22, Y+25	; 0x19
    289e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	40 e2       	ldi	r20, 0x20	; 32
    28aa:	51 e4       	ldi	r21, 0x41	; 65
    28ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	bc 01       	movw	r22, r24
    28b6:	cd 01       	movw	r24, r26
    28b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	9c 8b       	std	Y+20, r25	; 0x14
    28c2:	8b 8b       	std	Y+19, r24	; 0x13
    28c4:	0f c0       	rjmp	.+30     	; 0x28e4 <lcd_4bit_initialize+0x11c>
    28c6:	88 ec       	ldi	r24, 0xC8	; 200
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	9a 8b       	std	Y+18, r25	; 0x12
    28cc:	89 8b       	std	Y+17, r24	; 0x11
    28ce:	89 89       	ldd	r24, Y+17	; 0x11
    28d0:	9a 89       	ldd	r25, Y+18	; 0x12
    28d2:	01 97       	sbiw	r24, 0x01	; 1
    28d4:	f1 f7       	brne	.-4      	; 0x28d2 <lcd_4bit_initialize+0x10a>
    28d6:	9a 8b       	std	Y+18, r25	; 0x12
    28d8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28da:	8b 89       	ldd	r24, Y+19	; 0x13
    28dc:	9c 89       	ldd	r25, Y+20	; 0x14
    28de:	01 97       	sbiw	r24, 0x01	; 1
    28e0:	9c 8b       	std	Y+20, r25	; 0x14
    28e2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e4:	8b 89       	ldd	r24, Y+19	; 0x13
    28e6:	9c 89       	ldd	r25, Y+20	; 0x14
    28e8:	00 97       	sbiw	r24, 0x00	; 0
    28ea:	69 f7       	brne	.-38     	; 0x28c6 <lcd_4bit_initialize+0xfe>
    28ec:	14 c0       	rjmp	.+40     	; 0x2916 <lcd_4bit_initialize+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ee:	6d 89       	ldd	r22, Y+21	; 0x15
    28f0:	7e 89       	ldd	r23, Y+22	; 0x16
    28f2:	8f 89       	ldd	r24, Y+23	; 0x17
    28f4:	98 8d       	ldd	r25, Y+24	; 0x18
    28f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fa:	dc 01       	movw	r26, r24
    28fc:	cb 01       	movw	r24, r22
    28fe:	9c 8b       	std	Y+20, r25	; 0x14
    2900:	8b 8b       	std	Y+19, r24	; 0x13
    2902:	8b 89       	ldd	r24, Y+19	; 0x13
    2904:	9c 89       	ldd	r25, Y+20	; 0x14
    2906:	98 8b       	std	Y+16, r25	; 0x10
    2908:	8f 87       	std	Y+15, r24	; 0x0f
    290a:	8f 85       	ldd	r24, Y+15	; 0x0f
    290c:	98 89       	ldd	r25, Y+16	; 0x10
    290e:	01 97       	sbiw	r24, 0x01	; 1
    2910:	f1 f7       	brne	.-4      	; 0x290e <lcd_4bit_initialize+0x146>
    2912:	98 8b       	std	Y+16, r25	; 0x10
    2914:	8f 87       	std	Y+15, r24	; 0x0f
//		_delay_ms(3);
//		ret = lcd_4bit_send_command(lcd,0x00);
//		ret = lcd_4bit_send_command(lcd,0x40);
//		_delay_ms(2);
//		ret = lcd_4bit_send_command(lcd,0x80);
	    lcd_send_4bits(lcd, 0x03);  // Send 0x03 command (Function Set - 8-bit mode)
    2916:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2918:	98 a1       	ldd	r25, Y+32	; 0x20
    291a:	63 e0       	ldi	r22, 0x03	; 3
    291c:	0e 94 cc 1b 	call	0x3798	; 0x3798 <lcd_send_4bits>
	    lcd_4bit_send_enable(lcd);
    2920:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2922:	98 a1       	ldd	r25, Y+32	; 0x20
    2924:	0e 94 19 1c 	call	0x3832	; 0x3832 <lcd_4bit_send_enable>

	    // Delay for at least 4.1ms or follow the LCD module datasheet recommendations

	    lcd_send_4bits(lcd, 0x03);  // Send 0x03 command (Function Set - 8-bit mode)
    2928:	8f 8d       	ldd	r24, Y+31	; 0x1f
    292a:	98 a1       	ldd	r25, Y+32	; 0x20
    292c:	63 e0       	ldi	r22, 0x03	; 3
    292e:	0e 94 cc 1b 	call	0x3798	; 0x3798 <lcd_send_4bits>
	    lcd_4bit_send_enable(lcd);
    2932:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2934:	98 a1       	ldd	r25, Y+32	; 0x20
    2936:	0e 94 19 1c 	call	0x3832	; 0x3832 <lcd_4bit_send_enable>

	    // Delay for at least 100μs or follow the LCD module datasheet recommendations

	    lcd_send_4bits(lcd, 0x03);  // Send 0x03 command (Function Set - 8-bit mode)
    293a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    293c:	98 a1       	ldd	r25, Y+32	; 0x20
    293e:	63 e0       	ldi	r22, 0x03	; 3
    2940:	0e 94 cc 1b 	call	0x3798	; 0x3798 <lcd_send_4bits>
	    lcd_4bit_send_enable(lcd);
    2944:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2946:	98 a1       	ldd	r25, Y+32	; 0x20
    2948:	0e 94 19 1c 	call	0x3832	; 0x3832 <lcd_4bit_send_enable>

	    // Switch to 4-bit mode
	    lcd_send_4bits(lcd, 0x02);  // Send 0x02 command (Function Set - 4-bit mode)
    294c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    294e:	98 a1       	ldd	r25, Y+32	; 0x20
    2950:	62 e0       	ldi	r22, 0x02	; 2
    2952:	0e 94 cc 1b 	call	0x3798	; 0x3798 <lcd_send_4bits>
	    lcd_4bit_send_enable(lcd);
    2956:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2958:	98 a1       	ldd	r25, Y+32	; 0x20
    295a:	0e 94 19 1c 	call	0x3832	; 0x3832 <lcd_4bit_send_enable>

	    // Configure the LCD module
	    lcd_4bit_send_command(lcd, 0x28);  // 0x28 command (Function Set - 4-bit mode, 2 lines, 5x8 dots)
    295e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2960:	98 a1       	ldd	r25, Y+32	; 0x20
    2962:	68 e2       	ldi	r22, 0x28	; 40
    2964:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <lcd_4bit_send_command>
	    lcd_4bit_send_command(lcd, 0x0C);  // 0x0C command (Display On/Off - Display on, Cursor off, Blink off)
    2968:	8f 8d       	ldd	r24, Y+31	; 0x1f
    296a:	98 a1       	ldd	r25, Y+32	; 0x20
    296c:	6c e0       	ldi	r22, 0x0C	; 12
    296e:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <lcd_4bit_send_command>
	    lcd_4bit_send_command(lcd, 0x06);  // 0x06 command (Entry Mode Set - Increment cursor, No display shift)
    2972:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2974:	98 a1       	ldd	r25, Y+32	; 0x20
    2976:	66 e0       	ldi	r22, 0x06	; 6
    2978:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <lcd_4bit_send_command>
	    lcd_4bit_send_command(lcd, 0x01);  // 0x01 command (Clear Display)
    297c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    297e:	98 a1       	ldd	r25, Y+32	; 0x20
    2980:	61 e0       	ldi	r22, 0x01	; 1
    2982:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <lcd_4bit_send_command>
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	a0 e4       	ldi	r26, 0x40	; 64
    298c:	b0 e4       	ldi	r27, 0x40	; 64
    298e:	8b 87       	std	Y+11, r24	; 0x0b
    2990:	9c 87       	std	Y+12, r25	; 0x0c
    2992:	ad 87       	std	Y+13, r26	; 0x0d
    2994:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2996:	6b 85       	ldd	r22, Y+11	; 0x0b
    2998:	7c 85       	ldd	r23, Y+12	; 0x0c
    299a:	8d 85       	ldd	r24, Y+13	; 0x0d
    299c:	9e 85       	ldd	r25, Y+14	; 0x0e
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	4a ef       	ldi	r20, 0xFA	; 250
    29a4:	54 e4       	ldi	r21, 0x44	; 68
    29a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	8f 83       	std	Y+7, r24	; 0x07
    29b0:	98 87       	std	Y+8, r25	; 0x08
    29b2:	a9 87       	std	Y+9, r26	; 0x09
    29b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29b6:	6f 81       	ldd	r22, Y+7	; 0x07
    29b8:	78 85       	ldd	r23, Y+8	; 0x08
    29ba:	89 85       	ldd	r24, Y+9	; 0x09
    29bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	40 e8       	ldi	r20, 0x80	; 128
    29c4:	5f e3       	ldi	r21, 0x3F	; 63
    29c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29ca:	88 23       	and	r24, r24
    29cc:	2c f4       	brge	.+10     	; 0x29d8 <lcd_4bit_initialize+0x210>
		__ticks = 1;
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	9e 83       	std	Y+6, r25	; 0x06
    29d4:	8d 83       	std	Y+5, r24	; 0x05
    29d6:	3f c0       	rjmp	.+126    	; 0x2a56 <lcd_4bit_initialize+0x28e>
	else if (__tmp > 65535)
    29d8:	6f 81       	ldd	r22, Y+7	; 0x07
    29da:	78 85       	ldd	r23, Y+8	; 0x08
    29dc:	89 85       	ldd	r24, Y+9	; 0x09
    29de:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	3f ef       	ldi	r19, 0xFF	; 255
    29e4:	4f e7       	ldi	r20, 0x7F	; 127
    29e6:	57 e4       	ldi	r21, 0x47	; 71
    29e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29ec:	18 16       	cp	r1, r24
    29ee:	4c f5       	brge	.+82     	; 0x2a42 <lcd_4bit_initialize+0x27a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    29f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    29f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    29f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	40 e2       	ldi	r20, 0x20	; 32
    29fe:	51 e4       	ldi	r21, 0x41	; 65
    2a00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	bc 01       	movw	r22, r24
    2a0a:	cd 01       	movw	r24, r26
    2a0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a10:	dc 01       	movw	r26, r24
    2a12:	cb 01       	movw	r24, r22
    2a14:	9e 83       	std	Y+6, r25	; 0x06
    2a16:	8d 83       	std	Y+5, r24	; 0x05
    2a18:	0f c0       	rjmp	.+30     	; 0x2a38 <lcd_4bit_initialize+0x270>
    2a1a:	88 ec       	ldi	r24, 0xC8	; 200
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	9c 83       	std	Y+4, r25	; 0x04
    2a20:	8b 83       	std	Y+3, r24	; 0x03
    2a22:	8b 81       	ldd	r24, Y+3	; 0x03
    2a24:	9c 81       	ldd	r25, Y+4	; 0x04
    2a26:	01 97       	sbiw	r24, 0x01	; 1
    2a28:	f1 f7       	brne	.-4      	; 0x2a26 <lcd_4bit_initialize+0x25e>
    2a2a:	9c 83       	std	Y+4, r25	; 0x04
    2a2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a30:	9e 81       	ldd	r25, Y+6	; 0x06
    2a32:	01 97       	sbiw	r24, 0x01	; 1
    2a34:	9e 83       	std	Y+6, r25	; 0x06
    2a36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a38:	8d 81       	ldd	r24, Y+5	; 0x05
    2a3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a3c:	00 97       	sbiw	r24, 0x00	; 0
    2a3e:	69 f7       	brne	.-38     	; 0x2a1a <lcd_4bit_initialize+0x252>
    2a40:	14 c0       	rjmp	.+40     	; 0x2a6a <lcd_4bit_initialize+0x2a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a42:	6f 81       	ldd	r22, Y+7	; 0x07
    2a44:	78 85       	ldd	r23, Y+8	; 0x08
    2a46:	89 85       	ldd	r24, Y+9	; 0x09
    2a48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a4e:	dc 01       	movw	r26, r24
    2a50:	cb 01       	movw	r24, r22
    2a52:	9e 83       	std	Y+6, r25	; 0x06
    2a54:	8d 83       	std	Y+5, r24	; 0x05
    2a56:	8d 81       	ldd	r24, Y+5	; 0x05
    2a58:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5a:	9a 83       	std	Y+2, r25	; 0x02
    2a5c:	89 83       	std	Y+1, r24	; 0x01
    2a5e:	89 81       	ldd	r24, Y+1	; 0x01
    2a60:	9a 81       	ldd	r25, Y+2	; 0x02
    2a62:	01 97       	sbiw	r24, 0x01	; 1
    2a64:	f1 f7       	brne	.-4      	; 0x2a62 <lcd_4bit_initialize+0x29a>
    2a66:	9a 83       	std	Y+2, r25	; 0x02
    2a68:	89 83       	std	Y+1, r24	; 0x01

	    // Delay for at least 1.5ms or follow the LCD module datasheet recommendations
	    _delay_ms(3);
	    // LCD module is now initialized and ready to use
	}
	return ret;
    2a6a:	8e 8d       	ldd	r24, Y+30	; 0x1e
}
    2a6c:	a0 96       	adiw	r28, 0x20	; 32
    2a6e:	0f b6       	in	r0, 0x3f	; 63
    2a70:	f8 94       	cli
    2a72:	de bf       	out	0x3e, r29	; 62
    2a74:	0f be       	out	0x3f, r0	; 63
    2a76:	cd bf       	out	0x3d, r28	; 61
    2a78:	cf 91       	pop	r28
    2a7a:	df 91       	pop	r29
    2a7c:	08 95       	ret

00002a7e <lcd_4bit_send_command>:


STD_ReturnStatus lcd_4bit_send_command(const chr_lcd_4bit_t *lcd,uint8 command)
{
    2a7e:	df 93       	push	r29
    2a80:	cf 93       	push	r28
    2a82:	00 d0       	rcall	.+0      	; 0x2a84 <lcd_4bit_send_command+0x6>
    2a84:	00 d0       	rcall	.+0      	; 0x2a86 <lcd_4bit_send_command+0x8>
    2a86:	cd b7       	in	r28, 0x3d	; 61
    2a88:	de b7       	in	r29, 0x3e	; 62
    2a8a:	9b 83       	std	Y+3, r25	; 0x03
    2a8c:	8a 83       	std	Y+2, r24	; 0x02
    2a8e:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_OK;
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==lcd)
    2a94:	8a 81       	ldd	r24, Y+2	; 0x02
    2a96:	9b 81       	ldd	r25, Y+3	; 0x03
    2a98:	00 97       	sbiw	r24, 0x00	; 0
    2a9a:	11 f4       	brne	.+4      	; 0x2aa0 <lcd_4bit_send_command+0x22>
	{
		ret = E_NOT_OK;
    2a9c:	19 82       	std	Y+1, r1	; 0x01
    2a9e:	20 c0       	rjmp	.+64     	; 0x2ae0 <lcd_4bit_send_command+0x62>
	}
	else
	{
		ret = gpio_pin_write_logic(&(lcd->lcd_rs),GPIO_LOW);
    2aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa2:	9b 81       	ldd	r25, Y+3	; 0x03
    2aa4:	60 e0       	ldi	r22, 0x00	; 0
    2aa6:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
    2aaa:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_send_4bits(lcd,command>>4);
    2aac:	8c 81       	ldd	r24, Y+4	; 0x04
    2aae:	28 2f       	mov	r18, r24
    2ab0:	22 95       	swap	r18
    2ab2:	2f 70       	andi	r18, 0x0F	; 15
    2ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ab8:	62 2f       	mov	r22, r18
    2aba:	0e 94 cc 1b 	call	0x3798	; 0x3798 <lcd_send_4bits>
    2abe:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_4bit_send_enable(lcd);
    2ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ac4:	0e 94 19 1c 	call	0x3832	; 0x3832 <lcd_4bit_send_enable>
    2ac8:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_send_4bits(lcd,command);
    2aca:	8a 81       	ldd	r24, Y+2	; 0x02
    2acc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ace:	6c 81       	ldd	r22, Y+4	; 0x04
    2ad0:	0e 94 cc 1b 	call	0x3798	; 0x3798 <lcd_send_4bits>
    2ad4:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_4bit_send_enable(lcd);
    2ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad8:	9b 81       	ldd	r25, Y+3	; 0x03
    2ada:	0e 94 19 1c 	call	0x3832	; 0x3832 <lcd_4bit_send_enable>
    2ade:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    2ae0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ae2:	0f 90       	pop	r0
    2ae4:	0f 90       	pop	r0
    2ae6:	0f 90       	pop	r0
    2ae8:	0f 90       	pop	r0
    2aea:	cf 91       	pop	r28
    2aec:	df 91       	pop	r29
    2aee:	08 95       	ret

00002af0 <lcd_4bit_send_char_data>:


STD_ReturnStatus lcd_4bit_send_char_data(const chr_lcd_4bit_t *lcd,uint8 data)
{
    2af0:	df 93       	push	r29
    2af2:	cf 93       	push	r28
    2af4:	00 d0       	rcall	.+0      	; 0x2af6 <lcd_4bit_send_char_data+0x6>
    2af6:	00 d0       	rcall	.+0      	; 0x2af8 <lcd_4bit_send_char_data+0x8>
    2af8:	cd b7       	in	r28, 0x3d	; 61
    2afa:	de b7       	in	r29, 0x3e	; 62
    2afc:	9b 83       	std	Y+3, r25	; 0x03
    2afe:	8a 83       	std	Y+2, r24	; 0x02
    2b00:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_OK;
    2b02:	81 e0       	ldi	r24, 0x01	; 1
    2b04:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==lcd)
    2b06:	8a 81       	ldd	r24, Y+2	; 0x02
    2b08:	9b 81       	ldd	r25, Y+3	; 0x03
    2b0a:	00 97       	sbiw	r24, 0x00	; 0
    2b0c:	11 f4       	brne	.+4      	; 0x2b12 <lcd_4bit_send_char_data+0x22>
	{
		ret = E_NOT_OK;
    2b0e:	19 82       	std	Y+1, r1	; 0x01
    2b10:	20 c0       	rjmp	.+64     	; 0x2b52 <lcd_4bit_send_char_data+0x62>
	}
	else
	{
		ret = gpio_pin_write_logic(&(lcd->lcd_rs),GPIO_HIGH);
    2b12:	8a 81       	ldd	r24, Y+2	; 0x02
    2b14:	9b 81       	ldd	r25, Y+3	; 0x03
    2b16:	61 e0       	ldi	r22, 0x01	; 1
    2b18:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
    2b1c:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_send_4bits(lcd,data>>4);
    2b1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b20:	28 2f       	mov	r18, r24
    2b22:	22 95       	swap	r18
    2b24:	2f 70       	andi	r18, 0x0F	; 15
    2b26:	8a 81       	ldd	r24, Y+2	; 0x02
    2b28:	9b 81       	ldd	r25, Y+3	; 0x03
    2b2a:	62 2f       	mov	r22, r18
    2b2c:	0e 94 cc 1b 	call	0x3798	; 0x3798 <lcd_send_4bits>
    2b30:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_4bit_send_enable(lcd);
    2b32:	8a 81       	ldd	r24, Y+2	; 0x02
    2b34:	9b 81       	ldd	r25, Y+3	; 0x03
    2b36:	0e 94 19 1c 	call	0x3832	; 0x3832 <lcd_4bit_send_enable>
    2b3a:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_send_4bits(lcd,data);
    2b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b40:	6c 81       	ldd	r22, Y+4	; 0x04
    2b42:	0e 94 cc 1b 	call	0x3798	; 0x3798 <lcd_send_4bits>
    2b46:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_4bit_send_enable(lcd);
    2b48:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b4c:	0e 94 19 1c 	call	0x3832	; 0x3832 <lcd_4bit_send_enable>
    2b50:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    2b52:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b54:	0f 90       	pop	r0
    2b56:	0f 90       	pop	r0
    2b58:	0f 90       	pop	r0
    2b5a:	0f 90       	pop	r0
    2b5c:	cf 91       	pop	r28
    2b5e:	df 91       	pop	r29
    2b60:	08 95       	ret

00002b62 <lcd_4bit_send_char_data_pos>:


STD_ReturnStatus lcd_4bit_send_char_data_pos(const chr_lcd_4bit_t *lcd,uint8 row,uint8 column,uint8 data)
{
    2b62:	df 93       	push	r29
    2b64:	cf 93       	push	r28
    2b66:	00 d0       	rcall	.+0      	; 0x2b68 <lcd_4bit_send_char_data_pos+0x6>
    2b68:	00 d0       	rcall	.+0      	; 0x2b6a <lcd_4bit_send_char_data_pos+0x8>
    2b6a:	00 d0       	rcall	.+0      	; 0x2b6c <lcd_4bit_send_char_data_pos+0xa>
    2b6c:	cd b7       	in	r28, 0x3d	; 61
    2b6e:	de b7       	in	r29, 0x3e	; 62
    2b70:	9b 83       	std	Y+3, r25	; 0x03
    2b72:	8a 83       	std	Y+2, r24	; 0x02
    2b74:	6c 83       	std	Y+4, r22	; 0x04
    2b76:	4d 83       	std	Y+5, r20	; 0x05
    2b78:	2e 83       	std	Y+6, r18	; 0x06
	STD_ReturnStatus ret = E_OK;
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==lcd)
    2b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b80:	9b 81       	ldd	r25, Y+3	; 0x03
    2b82:	00 97       	sbiw	r24, 0x00	; 0
    2b84:	11 f4       	brne	.+4      	; 0x2b8a <lcd_4bit_send_char_data_pos+0x28>
	{
		ret = E_NOT_OK;
    2b86:	19 82       	std	Y+1, r1	; 0x01
    2b88:	0b c0       	rjmp	.+22     	; 0x2ba0 <lcd_4bit_send_char_data_pos+0x3e>
	}
	else
	{
		lcd_4bit_set_cursor(lcd,row,column);
    2b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b8e:	6c 81       	ldd	r22, Y+4	; 0x04
    2b90:	4d 81       	ldd	r20, Y+5	; 0x05
    2b92:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <lcd_4bit_set_cursor>
		lcd_4bit_send_char_data(lcd,data);
    2b96:	8a 81       	ldd	r24, Y+2	; 0x02
    2b98:	9b 81       	ldd	r25, Y+3	; 0x03
    2b9a:	6e 81       	ldd	r22, Y+6	; 0x06
    2b9c:	0e 94 78 15 	call	0x2af0	; 0x2af0 <lcd_4bit_send_char_data>
	}
	return ret;
    2ba0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ba2:	26 96       	adiw	r28, 0x06	; 6
    2ba4:	0f b6       	in	r0, 0x3f	; 63
    2ba6:	f8 94       	cli
    2ba8:	de bf       	out	0x3e, r29	; 62
    2baa:	0f be       	out	0x3f, r0	; 63
    2bac:	cd bf       	out	0x3d, r28	; 61
    2bae:	cf 91       	pop	r28
    2bb0:	df 91       	pop	r29
    2bb2:	08 95       	ret

00002bb4 <lcd_4bit_send_string>:


STD_ReturnStatus lcd_4bit_send_string(const chr_lcd_4bit_t *lcd,uint8* str)
{
    2bb4:	df 93       	push	r29
    2bb6:	cf 93       	push	r28
    2bb8:	00 d0       	rcall	.+0      	; 0x2bba <lcd_4bit_send_string+0x6>
    2bba:	00 d0       	rcall	.+0      	; 0x2bbc <lcd_4bit_send_string+0x8>
    2bbc:	0f 92       	push	r0
    2bbe:	cd b7       	in	r28, 0x3d	; 61
    2bc0:	de b7       	in	r29, 0x3e	; 62
    2bc2:	9b 83       	std	Y+3, r25	; 0x03
    2bc4:	8a 83       	std	Y+2, r24	; 0x02
    2bc6:	7d 83       	std	Y+5, r23	; 0x05
    2bc8:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_OK;
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	89 83       	std	Y+1, r24	; 0x01
	if((NULL==lcd)||(NULL==str))
    2bce:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd0:	9b 81       	ldd	r25, Y+3	; 0x03
    2bd2:	00 97       	sbiw	r24, 0x00	; 0
    2bd4:	21 f0       	breq	.+8      	; 0x2bde <lcd_4bit_send_string+0x2a>
    2bd6:	8c 81       	ldd	r24, Y+4	; 0x04
    2bd8:	9d 81       	ldd	r25, Y+5	; 0x05
    2bda:	00 97       	sbiw	r24, 0x00	; 0
    2bdc:	81 f4       	brne	.+32     	; 0x2bfe <lcd_4bit_send_string+0x4a>
	{
		ret = E_NOT_OK;
    2bde:	19 82       	std	Y+1, r1	; 0x01
    2be0:	13 c0       	rjmp	.+38     	; 0x2c08 <lcd_4bit_send_string+0x54>
	}
	else
	{
		while(*str)
		{
			ret = lcd_4bit_send_char_data(lcd,*str++);
    2be2:	ec 81       	ldd	r30, Y+4	; 0x04
    2be4:	fd 81       	ldd	r31, Y+5	; 0x05
    2be6:	20 81       	ld	r18, Z
    2be8:	8c 81       	ldd	r24, Y+4	; 0x04
    2bea:	9d 81       	ldd	r25, Y+5	; 0x05
    2bec:	01 96       	adiw	r24, 0x01	; 1
    2bee:	9d 83       	std	Y+5, r25	; 0x05
    2bf0:	8c 83       	std	Y+4, r24	; 0x04
    2bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf4:	9b 81       	ldd	r25, Y+3	; 0x03
    2bf6:	62 2f       	mov	r22, r18
    2bf8:	0e 94 78 15 	call	0x2af0	; 0x2af0 <lcd_4bit_send_char_data>
    2bfc:	89 83       	std	Y+1, r24	; 0x01
	{
		ret = E_NOT_OK;
	}
	else
	{
		while(*str)
    2bfe:	ec 81       	ldd	r30, Y+4	; 0x04
    2c00:	fd 81       	ldd	r31, Y+5	; 0x05
    2c02:	80 81       	ld	r24, Z
    2c04:	88 23       	and	r24, r24
    2c06:	69 f7       	brne	.-38     	; 0x2be2 <lcd_4bit_send_string+0x2e>
		{
			ret = lcd_4bit_send_char_data(lcd,*str++);
		}
	}
	return ret;
    2c08:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c0a:	0f 90       	pop	r0
    2c0c:	0f 90       	pop	r0
    2c0e:	0f 90       	pop	r0
    2c10:	0f 90       	pop	r0
    2c12:	0f 90       	pop	r0
    2c14:	cf 91       	pop	r28
    2c16:	df 91       	pop	r29
    2c18:	08 95       	ret

00002c1a <lcd_4bit_send_string_pos>:


STD_ReturnStatus lcd_4bit_send_string_pos(const chr_lcd_4bit_t *lcd,uint8 row,uint8 column,uint8* str){
    2c1a:	df 93       	push	r29
    2c1c:	cf 93       	push	r28
    2c1e:	cd b7       	in	r28, 0x3d	; 61
    2c20:	de b7       	in	r29, 0x3e	; 62
    2c22:	27 97       	sbiw	r28, 0x07	; 7
    2c24:	0f b6       	in	r0, 0x3f	; 63
    2c26:	f8 94       	cli
    2c28:	de bf       	out	0x3e, r29	; 62
    2c2a:	0f be       	out	0x3f, r0	; 63
    2c2c:	cd bf       	out	0x3d, r28	; 61
    2c2e:	9b 83       	std	Y+3, r25	; 0x03
    2c30:	8a 83       	std	Y+2, r24	; 0x02
    2c32:	6c 83       	std	Y+4, r22	; 0x04
    2c34:	4d 83       	std	Y+5, r20	; 0x05
    2c36:	3f 83       	std	Y+7, r19	; 0x07
    2c38:	2e 83       	std	Y+6, r18	; 0x06

	STD_ReturnStatus ret = E_OK;
    2c3a:	81 e0       	ldi	r24, 0x01	; 1
    2c3c:	89 83       	std	Y+1, r24	; 0x01
	if((NULL==lcd)||(NULL==str))
    2c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c40:	9b 81       	ldd	r25, Y+3	; 0x03
    2c42:	00 97       	sbiw	r24, 0x00	; 0
    2c44:	21 f0       	breq	.+8      	; 0x2c4e <lcd_4bit_send_string_pos+0x34>
    2c46:	8e 81       	ldd	r24, Y+6	; 0x06
    2c48:	9f 81       	ldd	r25, Y+7	; 0x07
    2c4a:	00 97       	sbiw	r24, 0x00	; 0
    2c4c:	11 f4       	brne	.+4      	; 0x2c52 <lcd_4bit_send_string_pos+0x38>
	{
		ret = E_NOT_OK;
    2c4e:	19 82       	std	Y+1, r1	; 0x01
    2c50:	1b c0       	rjmp	.+54     	; 0x2c88 <lcd_4bit_send_string_pos+0x6e>
	}
	else
	{
		ret = lcd_4bit_set_cursor(lcd,row,column);
    2c52:	8a 81       	ldd	r24, Y+2	; 0x02
    2c54:	9b 81       	ldd	r25, Y+3	; 0x03
    2c56:	6c 81       	ldd	r22, Y+4	; 0x04
    2c58:	4d 81       	ldd	r20, Y+5	; 0x05
    2c5a:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <lcd_4bit_set_cursor>
    2c5e:	89 83       	std	Y+1, r24	; 0x01
    2c60:	0e c0       	rjmp	.+28     	; 0x2c7e <lcd_4bit_send_string_pos+0x64>
		while(*str)
		{
			ret = lcd_4bit_send_char_data(lcd,*str++);
    2c62:	ee 81       	ldd	r30, Y+6	; 0x06
    2c64:	ff 81       	ldd	r31, Y+7	; 0x07
    2c66:	20 81       	ld	r18, Z
    2c68:	8e 81       	ldd	r24, Y+6	; 0x06
    2c6a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c6c:	01 96       	adiw	r24, 0x01	; 1
    2c6e:	9f 83       	std	Y+7, r25	; 0x07
    2c70:	8e 83       	std	Y+6, r24	; 0x06
    2c72:	8a 81       	ldd	r24, Y+2	; 0x02
    2c74:	9b 81       	ldd	r25, Y+3	; 0x03
    2c76:	62 2f       	mov	r22, r18
    2c78:	0e 94 78 15 	call	0x2af0	; 0x2af0 <lcd_4bit_send_char_data>
    2c7c:	89 83       	std	Y+1, r24	; 0x01
		ret = E_NOT_OK;
	}
	else
	{
		ret = lcd_4bit_set_cursor(lcd,row,column);
		while(*str)
    2c7e:	ee 81       	ldd	r30, Y+6	; 0x06
    2c80:	ff 81       	ldd	r31, Y+7	; 0x07
    2c82:	80 81       	ld	r24, Z
    2c84:	88 23       	and	r24, r24
    2c86:	69 f7       	brne	.-38     	; 0x2c62 <lcd_4bit_send_string_pos+0x48>
		{
			ret = lcd_4bit_send_char_data(lcd,*str++);
		}
	}
	return ret;
    2c88:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c8a:	27 96       	adiw	r28, 0x07	; 7
    2c8c:	0f b6       	in	r0, 0x3f	; 63
    2c8e:	f8 94       	cli
    2c90:	de bf       	out	0x3e, r29	; 62
    2c92:	0f be       	out	0x3f, r0	; 63
    2c94:	cd bf       	out	0x3d, r28	; 61
    2c96:	cf 91       	pop	r28
    2c98:	df 91       	pop	r29
    2c9a:	08 95       	ret

00002c9c <lcd_4bit_send_custom_char>:


STD_ReturnStatus lcd_4bit_send_custom_char(const chr_lcd_4bit_t *lcd,uint8 row,uint8 column,uint8 _char[],uint8 mem_pos)
{
    2c9c:	0f 93       	push	r16
    2c9e:	df 93       	push	r29
    2ca0:	cf 93       	push	r28
    2ca2:	cd b7       	in	r28, 0x3d	; 61
    2ca4:	de b7       	in	r29, 0x3e	; 62
    2ca6:	29 97       	sbiw	r28, 0x09	; 9
    2ca8:	0f b6       	in	r0, 0x3f	; 63
    2caa:	f8 94       	cli
    2cac:	de bf       	out	0x3e, r29	; 62
    2cae:	0f be       	out	0x3f, r0	; 63
    2cb0:	cd bf       	out	0x3d, r28	; 61
    2cb2:	9c 83       	std	Y+4, r25	; 0x04
    2cb4:	8b 83       	std	Y+3, r24	; 0x03
    2cb6:	6d 83       	std	Y+5, r22	; 0x05
    2cb8:	4e 83       	std	Y+6, r20	; 0x06
    2cba:	38 87       	std	Y+8, r19	; 0x08
    2cbc:	2f 83       	std	Y+7, r18	; 0x07
    2cbe:	09 87       	std	Y+9, r16	; 0x09
	STD_ReturnStatus ret = E_OK;
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 lcd_counter = ZERO_INIT;
    2cc4:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==lcd)
    2cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cca:	00 97       	sbiw	r24, 0x00	; 0
    2ccc:	11 f4       	brne	.+4      	; 0x2cd2 <lcd_4bit_send_custom_char+0x36>
	{
		ret = E_NOT_OK;
    2cce:	1a 82       	std	Y+2, r1	; 0x02
    2cd0:	30 c0       	rjmp	.+96     	; 0x2d32 <lcd_4bit_send_custom_char+0x96>
	}
	else
	{
		ret =  lcd_4bit_send_command(lcd,_LCD_CGRAM_START+(mem_pos*8));//mem_pos is the position addres oin cgram(1~8)
    2cd2:	89 85       	ldd	r24, Y+9	; 0x09
    2cd4:	88 2f       	mov	r24, r24
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	08 96       	adiw	r24, 0x08	; 8
    2cda:	88 0f       	add	r24, r24
    2cdc:	99 1f       	adc	r25, r25
    2cde:	88 0f       	add	r24, r24
    2ce0:	99 1f       	adc	r25, r25
    2ce2:	88 0f       	add	r24, r24
    2ce4:	99 1f       	adc	r25, r25
    2ce6:	28 2f       	mov	r18, r24
    2ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cea:	9c 81       	ldd	r25, Y+4	; 0x04
    2cec:	62 2f       	mov	r22, r18
    2cee:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <lcd_4bit_send_command>
    2cf2:	8a 83       	std	Y+2, r24	; 0x02
		for(lcd_counter=ZERO_INIT;lcd_counter<=7;++lcd_counter)
    2cf4:	19 82       	std	Y+1, r1	; 0x01
    2cf6:	12 c0       	rjmp	.+36     	; 0x2d1c <lcd_4bit_send_custom_char+0x80>
		{
			ret = lcd_4bit_send_char_data(lcd,_char[lcd_counter]);
    2cf8:	89 81       	ldd	r24, Y+1	; 0x01
    2cfa:	28 2f       	mov	r18, r24
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	8f 81       	ldd	r24, Y+7	; 0x07
    2d00:	98 85       	ldd	r25, Y+8	; 0x08
    2d02:	fc 01       	movw	r30, r24
    2d04:	e2 0f       	add	r30, r18
    2d06:	f3 1f       	adc	r31, r19
    2d08:	20 81       	ld	r18, Z
    2d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d0e:	62 2f       	mov	r22, r18
    2d10:	0e 94 78 15 	call	0x2af0	; 0x2af0 <lcd_4bit_send_char_data>
    2d14:	8a 83       	std	Y+2, r24	; 0x02
		ret = E_NOT_OK;
	}
	else
	{
		ret =  lcd_4bit_send_command(lcd,_LCD_CGRAM_START+(mem_pos*8));//mem_pos is the position addres oin cgram(1~8)
		for(lcd_counter=ZERO_INIT;lcd_counter<=7;++lcd_counter)
    2d16:	89 81       	ldd	r24, Y+1	; 0x01
    2d18:	8f 5f       	subi	r24, 0xFF	; 255
    2d1a:	89 83       	std	Y+1, r24	; 0x01
    2d1c:	89 81       	ldd	r24, Y+1	; 0x01
    2d1e:	88 30       	cpi	r24, 0x08	; 8
    2d20:	58 f3       	brcs	.-42     	; 0x2cf8 <lcd_4bit_send_custom_char+0x5c>
		{
			ret = lcd_4bit_send_char_data(lcd,_char[lcd_counter]);
		}
		ret = lcd_4bit_send_char_data_pos(lcd,row,column,mem_pos);
    2d22:	8b 81       	ldd	r24, Y+3	; 0x03
    2d24:	9c 81       	ldd	r25, Y+4	; 0x04
    2d26:	6d 81       	ldd	r22, Y+5	; 0x05
    2d28:	4e 81       	ldd	r20, Y+6	; 0x06
    2d2a:	29 85       	ldd	r18, Y+9	; 0x09
    2d2c:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <lcd_4bit_send_char_data_pos>
    2d30:	8a 83       	std	Y+2, r24	; 0x02
	}
	return ret;
    2d32:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2d34:	29 96       	adiw	r28, 0x09	; 9
    2d36:	0f b6       	in	r0, 0x3f	; 63
    2d38:	f8 94       	cli
    2d3a:	de bf       	out	0x3e, r29	; 62
    2d3c:	0f be       	out	0x3f, r0	; 63
    2d3e:	cd bf       	out	0x3d, r28	; 61
    2d40:	cf 91       	pop	r28
    2d42:	df 91       	pop	r29
    2d44:	0f 91       	pop	r16
    2d46:	08 95       	ret

00002d48 <lcd_4bit_send_int>:

STD_ReturnStatus lcd_4bit_send_int(const chr_lcd_4bit_t *lcd,uint8 Num)
{
    2d48:	df 93       	push	r29
    2d4a:	cf 93       	push	r28
    2d4c:	00 d0       	rcall	.+0      	; 0x2d4e <lcd_4bit_send_int+0x6>
    2d4e:	00 d0       	rcall	.+0      	; 0x2d50 <lcd_4bit_send_int+0x8>
    2d50:	cd b7       	in	r28, 0x3d	; 61
    2d52:	de b7       	in	r29, 0x3e	; 62
    2d54:	9a 83       	std	Y+2, r25	; 0x02
    2d56:	89 83       	std	Y+1, r24	; 0x01
    2d58:	6b 83       	std	Y+3, r22	; 0x03
	if(Num!=0)
    2d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5c:	88 23       	and	r24, r24
    2d5e:	c1 f0       	breq	.+48     	; 0x2d90 <lcd_4bit_send_int+0x48>
	{
		lcd_4bit_send_int(lcd,Num/10);
    2d60:	8b 81       	ldd	r24, Y+3	; 0x03
    2d62:	9a e0       	ldi	r25, 0x0A	; 10
    2d64:	69 2f       	mov	r22, r25
    2d66:	0e 94 d5 20 	call	0x41aa	; 0x41aa <__udivmodqi4>
    2d6a:	28 2f       	mov	r18, r24
    2d6c:	89 81       	ldd	r24, Y+1	; 0x01
    2d6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d70:	62 2f       	mov	r22, r18
    2d72:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <lcd_4bit_send_int>
		lcd_4bit_send_char_data(lcd,(Num%10)+48);
    2d76:	8b 81       	ldd	r24, Y+3	; 0x03
    2d78:	9a e0       	ldi	r25, 0x0A	; 10
    2d7a:	69 2f       	mov	r22, r25
    2d7c:	0e 94 d5 20 	call	0x41aa	; 0x41aa <__udivmodqi4>
    2d80:	89 2f       	mov	r24, r25
    2d82:	28 2f       	mov	r18, r24
    2d84:	20 5d       	subi	r18, 0xD0	; 208
    2d86:	89 81       	ldd	r24, Y+1	; 0x01
    2d88:	9a 81       	ldd	r25, Y+2	; 0x02
    2d8a:	62 2f       	mov	r22, r18
    2d8c:	0e 94 78 15 	call	0x2af0	; 0x2af0 <lcd_4bit_send_char_data>
	}
}
    2d90:	0f 90       	pop	r0
    2d92:	0f 90       	pop	r0
    2d94:	0f 90       	pop	r0
    2d96:	0f 90       	pop	r0
    2d98:	cf 91       	pop	r28
    2d9a:	df 91       	pop	r29
    2d9c:	08 95       	ret

00002d9e <lcd_4bit_send_int_pos>:

STD_ReturnStatus lcd_4bit_send_int_pos(const chr_lcd_4bit_t *lcd,uint8 row,uint8 column,uint32 Num)
{
    2d9e:	df 93       	push	r29
    2da0:	cf 93       	push	r28
    2da2:	cd b7       	in	r28, 0x3d	; 61
    2da4:	de b7       	in	r29, 0x3e	; 62
    2da6:	27 97       	sbiw	r28, 0x07	; 7
    2da8:	0f b6       	in	r0, 0x3f	; 63
    2daa:	f8 94       	cli
    2dac:	de bf       	out	0x3e, r29	; 62
    2dae:	0f be       	out	0x3f, r0	; 63
    2db0:	cd bf       	out	0x3d, r28	; 61
    2db2:	9a 83       	std	Y+2, r25	; 0x02
    2db4:	89 83       	std	Y+1, r24	; 0x01
    2db6:	6b 83       	std	Y+3, r22	; 0x03
    2db8:	4c 83       	std	Y+4, r20	; 0x04
    2dba:	3e 83       	std	Y+6, r19	; 0x06
    2dbc:	2d 83       	std	Y+5, r18	; 0x05
	lcd_4bit_set_cursor(lcd,row,column);
    2dbe:	89 81       	ldd	r24, Y+1	; 0x01
    2dc0:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc2:	6b 81       	ldd	r22, Y+3	; 0x03
    2dc4:	4c 81       	ldd	r20, Y+4	; 0x04
    2dc6:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <lcd_4bit_set_cursor>
	if(Num!=0)
    2dca:	8d 81       	ldd	r24, Y+5	; 0x05
    2dcc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dce:	00 97       	sbiw	r24, 0x00	; 0
    2dd0:	e1 f0       	breq	.+56     	; 0x2e0a <lcd_4bit_send_int_pos+0x6c>
	{
		lcd_4bit_send_int(lcd,Num/10);
    2dd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd4:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd6:	2a e0       	ldi	r18, 0x0A	; 10
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	b9 01       	movw	r22, r18
    2ddc:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <__udivmodhi4>
    2de0:	cb 01       	movw	r24, r22
    2de2:	28 2f       	mov	r18, r24
    2de4:	89 81       	ldd	r24, Y+1	; 0x01
    2de6:	9a 81       	ldd	r25, Y+2	; 0x02
    2de8:	62 2f       	mov	r22, r18
    2dea:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <lcd_4bit_send_int>
		lcd_4bit_send_char_data(lcd,(Num%10)+48);
    2dee:	8d 81       	ldd	r24, Y+5	; 0x05
    2df0:	9e 81       	ldd	r25, Y+6	; 0x06
    2df2:	2a e0       	ldi	r18, 0x0A	; 10
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	b9 01       	movw	r22, r18
    2df8:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <__udivmodhi4>
    2dfc:	28 2f       	mov	r18, r24
    2dfe:	20 5d       	subi	r18, 0xD0	; 208
    2e00:	89 81       	ldd	r24, Y+1	; 0x01
    2e02:	9a 81       	ldd	r25, Y+2	; 0x02
    2e04:	62 2f       	mov	r22, r18
    2e06:	0e 94 78 15 	call	0x2af0	; 0x2af0 <lcd_4bit_send_char_data>
	}
}
    2e0a:	27 96       	adiw	r28, 0x07	; 7
    2e0c:	0f b6       	in	r0, 0x3f	; 63
    2e0e:	f8 94       	cli
    2e10:	de bf       	out	0x3e, r29	; 62
    2e12:	0f be       	out	0x3f, r0	; 63
    2e14:	cd bf       	out	0x3d, r28	; 61
    2e16:	cf 91       	pop	r28
    2e18:	df 91       	pop	r29
    2e1a:	08 95       	ret

00002e1c <lcd_8bit_initialize>:
STD_ReturnStatus lcd_8bit_initialize(const chr_lcd_8bit_t *lcd)
{
    2e1c:	df 93       	push	r29
    2e1e:	cf 93       	push	r28
    2e20:	cd b7       	in	r28, 0x3d	; 61
    2e22:	de b7       	in	r29, 0x3e	; 62
    2e24:	ec 97       	sbiw	r28, 0x3c	; 60
    2e26:	0f b6       	in	r0, 0x3f	; 63
    2e28:	f8 94       	cli
    2e2a:	de bf       	out	0x3e, r29	; 62
    2e2c:	0f be       	out	0x3f, r0	; 63
    2e2e:	cd bf       	out	0x3d, r28	; 61
    2e30:	9c af       	std	Y+60, r25	; 0x3c
    2e32:	8b af       	std	Y+59, r24	; 0x3b
	STD_ReturnStatus ret = E_OK;
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	8a af       	std	Y+58, r24	; 0x3a
	uint8 l_data_pins_counter = ZERO_INIT;
    2e38:	19 ae       	std	Y+57, r1	; 0x39
	if(NULL==lcd)
    2e3a:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e3c:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e3e:	00 97       	sbiw	r24, 0x00	; 0
    2e40:	11 f4       	brne	.+4      	; 0x2e46 <lcd_8bit_initialize+0x2a>
	{
		ret = E_NOT_OK;
    2e42:	1a ae       	std	Y+58, r1	; 0x3a
    2e44:	ff c1       	rjmp	.+1022   	; 0x3244 <lcd_8bit_initialize+0x428>
	}
	else
	{
		ret = gpio_pin_initialize(&(lcd->lcd_rs));
    2e46:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e48:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e4a:	0e 94 1a 10 	call	0x2034	; 0x2034 <gpio_pin_initialize>
    2e4e:	8a af       	std	Y+58, r24	; 0x3a
		ret = gpio_pin_initialize(&(lcd->lcd_en));
    2e50:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e52:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e54:	01 96       	adiw	r24, 0x01	; 1
    2e56:	0e 94 1a 10 	call	0x2034	; 0x2034 <gpio_pin_initialize>
    2e5a:	8a af       	std	Y+58, r24	; 0x3a
		for(l_data_pins_counter=0;l_data_pins_counter<8;l_data_pins_counter++)
    2e5c:	19 ae       	std	Y+57, r1	; 0x39
    2e5e:	0f c0       	rjmp	.+30     	; 0x2e7e <lcd_8bit_initialize+0x62>
		{
			gpio_pin_initialize(&(lcd->lcd_data[l_data_pins_counter]));
    2e60:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e62:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e64:	9c 01       	movw	r18, r24
    2e66:	2e 5f       	subi	r18, 0xFE	; 254
    2e68:	3f 4f       	sbci	r19, 0xFF	; 255
    2e6a:	89 ad       	ldd	r24, Y+57	; 0x39
    2e6c:	88 2f       	mov	r24, r24
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	82 0f       	add	r24, r18
    2e72:	93 1f       	adc	r25, r19
    2e74:	0e 94 1a 10 	call	0x2034	; 0x2034 <gpio_pin_initialize>
	}
	else
	{
		ret = gpio_pin_initialize(&(lcd->lcd_rs));
		ret = gpio_pin_initialize(&(lcd->lcd_en));
		for(l_data_pins_counter=0;l_data_pins_counter<8;l_data_pins_counter++)
    2e78:	89 ad       	ldd	r24, Y+57	; 0x39
    2e7a:	8f 5f       	subi	r24, 0xFF	; 255
    2e7c:	89 af       	std	Y+57, r24	; 0x39
    2e7e:	89 ad       	ldd	r24, Y+57	; 0x39
    2e80:	88 30       	cpi	r24, 0x08	; 8
    2e82:	70 f3       	brcs	.-36     	; 0x2e60 <lcd_8bit_initialize+0x44>
    2e84:	80 e0       	ldi	r24, 0x00	; 0
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	a0 e2       	ldi	r26, 0x20	; 32
    2e8a:	b2 e4       	ldi	r27, 0x42	; 66
    2e8c:	8d ab       	std	Y+53, r24	; 0x35
    2e8e:	9e ab       	std	Y+54, r25	; 0x36
    2e90:	af ab       	std	Y+55, r26	; 0x37
    2e92:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e94:	6d a9       	ldd	r22, Y+53	; 0x35
    2e96:	7e a9       	ldd	r23, Y+54	; 0x36
    2e98:	8f a9       	ldd	r24, Y+55	; 0x37
    2e9a:	98 ad       	ldd	r25, Y+56	; 0x38
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	4a ef       	ldi	r20, 0xFA	; 250
    2ea2:	54 e4       	ldi	r21, 0x44	; 68
    2ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea8:	dc 01       	movw	r26, r24
    2eaa:	cb 01       	movw	r24, r22
    2eac:	89 ab       	std	Y+49, r24	; 0x31
    2eae:	9a ab       	std	Y+50, r25	; 0x32
    2eb0:	ab ab       	std	Y+51, r26	; 0x33
    2eb2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2eb4:	69 a9       	ldd	r22, Y+49	; 0x31
    2eb6:	7a a9       	ldd	r23, Y+50	; 0x32
    2eb8:	8b a9       	ldd	r24, Y+51	; 0x33
    2eba:	9c a9       	ldd	r25, Y+52	; 0x34
    2ebc:	20 e0       	ldi	r18, 0x00	; 0
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    2ec0:	40 e8       	ldi	r20, 0x80	; 128
    2ec2:	5f e3       	ldi	r21, 0x3F	; 63
    2ec4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ec8:	88 23       	and	r24, r24
    2eca:	2c f4       	brge	.+10     	; 0x2ed6 <lcd_8bit_initialize+0xba>
		__ticks = 1;
    2ecc:	81 e0       	ldi	r24, 0x01	; 1
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	98 ab       	std	Y+48, r25	; 0x30
    2ed2:	8f a7       	std	Y+47, r24	; 0x2f
    2ed4:	3f c0       	rjmp	.+126    	; 0x2f54 <lcd_8bit_initialize+0x138>
	else if (__tmp > 65535)
    2ed6:	69 a9       	ldd	r22, Y+49	; 0x31
    2ed8:	7a a9       	ldd	r23, Y+50	; 0x32
    2eda:	8b a9       	ldd	r24, Y+51	; 0x33
    2edc:	9c a9       	ldd	r25, Y+52	; 0x34
    2ede:	20 e0       	ldi	r18, 0x00	; 0
    2ee0:	3f ef       	ldi	r19, 0xFF	; 255
    2ee2:	4f e7       	ldi	r20, 0x7F	; 127
    2ee4:	57 e4       	ldi	r21, 0x47	; 71
    2ee6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eea:	18 16       	cp	r1, r24
    2eec:	4c f5       	brge	.+82     	; 0x2f40 <lcd_8bit_initialize+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eee:	6d a9       	ldd	r22, Y+53	; 0x35
    2ef0:	7e a9       	ldd	r23, Y+54	; 0x36
    2ef2:	8f a9       	ldd	r24, Y+55	; 0x37
    2ef4:	98 ad       	ldd	r25, Y+56	; 0x38
    2ef6:	20 e0       	ldi	r18, 0x00	; 0
    2ef8:	30 e0       	ldi	r19, 0x00	; 0
    2efa:	40 e2       	ldi	r20, 0x20	; 32
    2efc:	51 e4       	ldi	r21, 0x41	; 65
    2efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f02:	dc 01       	movw	r26, r24
    2f04:	cb 01       	movw	r24, r22
    2f06:	bc 01       	movw	r22, r24
    2f08:	cd 01       	movw	r24, r26
    2f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0e:	dc 01       	movw	r26, r24
    2f10:	cb 01       	movw	r24, r22
    2f12:	98 ab       	std	Y+48, r25	; 0x30
    2f14:	8f a7       	std	Y+47, r24	; 0x2f
    2f16:	0f c0       	rjmp	.+30     	; 0x2f36 <lcd_8bit_initialize+0x11a>
    2f18:	88 ec       	ldi	r24, 0xC8	; 200
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	9e a7       	std	Y+46, r25	; 0x2e
    2f1e:	8d a7       	std	Y+45, r24	; 0x2d
    2f20:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f22:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f24:	01 97       	sbiw	r24, 0x01	; 1
    2f26:	f1 f7       	brne	.-4      	; 0x2f24 <lcd_8bit_initialize+0x108>
    2f28:	9e a7       	std	Y+46, r25	; 0x2e
    2f2a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f2e:	98 a9       	ldd	r25, Y+48	; 0x30
    2f30:	01 97       	sbiw	r24, 0x01	; 1
    2f32:	98 ab       	std	Y+48, r25	; 0x30
    2f34:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f36:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f38:	98 a9       	ldd	r25, Y+48	; 0x30
    2f3a:	00 97       	sbiw	r24, 0x00	; 0
    2f3c:	69 f7       	brne	.-38     	; 0x2f18 <lcd_8bit_initialize+0xfc>
    2f3e:	14 c0       	rjmp	.+40     	; 0x2f68 <lcd_8bit_initialize+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f40:	69 a9       	ldd	r22, Y+49	; 0x31
    2f42:	7a a9       	ldd	r23, Y+50	; 0x32
    2f44:	8b a9       	ldd	r24, Y+51	; 0x33
    2f46:	9c a9       	ldd	r25, Y+52	; 0x34
    2f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f4c:	dc 01       	movw	r26, r24
    2f4e:	cb 01       	movw	r24, r22
    2f50:	98 ab       	std	Y+48, r25	; 0x30
    2f52:	8f a7       	std	Y+47, r24	; 0x2f
    2f54:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f56:	98 a9       	ldd	r25, Y+48	; 0x30
    2f58:	9c a7       	std	Y+44, r25	; 0x2c
    2f5a:	8b a7       	std	Y+43, r24	; 0x2b
    2f5c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f5e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f60:	01 97       	sbiw	r24, 0x01	; 1
    2f62:	f1 f7       	brne	.-4      	; 0x2f60 <lcd_8bit_initialize+0x144>
    2f64:	9c a7       	std	Y+44, r25	; 0x2c
    2f66:	8b a7       	std	Y+43, r24	; 0x2b
		{
			gpio_pin_initialize(&(lcd->lcd_data[l_data_pins_counter]));
		}
		_delay_ms(40);
		ret = lcd_8bit_send_command(lcd,0x38);
    2f68:	8b ad       	ldd	r24, Y+59	; 0x3b
    2f6a:	9c ad       	ldd	r25, Y+60	; 0x3c
    2f6c:	68 e3       	ldi	r22, 0x38	; 56
    2f6e:	0e 94 2c 19 	call	0x3258	; 0x3258 <lcd_8bit_send_command>
    2f72:	8a af       	std	Y+58, r24	; 0x3a
    2f74:	80 e0       	ldi	r24, 0x00	; 0
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	a0 e8       	ldi	r26, 0x80	; 128
    2f7a:	bf e3       	ldi	r27, 0x3F	; 63
    2f7c:	8f a3       	std	Y+39, r24	; 0x27
    2f7e:	98 a7       	std	Y+40, r25	; 0x28
    2f80:	a9 a7       	std	Y+41, r26	; 0x29
    2f82:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f84:	6f a1       	ldd	r22, Y+39	; 0x27
    2f86:	78 a5       	ldd	r23, Y+40	; 0x28
    2f88:	89 a5       	ldd	r24, Y+41	; 0x29
    2f8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	4a ef       	ldi	r20, 0xFA	; 250
    2f92:	54 e4       	ldi	r21, 0x44	; 68
    2f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	8b a3       	std	Y+35, r24	; 0x23
    2f9e:	9c a3       	std	Y+36, r25	; 0x24
    2fa0:	ad a3       	std	Y+37, r26	; 0x25
    2fa2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2fa4:	6b a1       	ldd	r22, Y+35	; 0x23
    2fa6:	7c a1       	ldd	r23, Y+36	; 0x24
    2fa8:	8d a1       	ldd	r24, Y+37	; 0x25
    2faa:	9e a1       	ldd	r25, Y+38	; 0x26
    2fac:	20 e0       	ldi	r18, 0x00	; 0
    2fae:	30 e0       	ldi	r19, 0x00	; 0
    2fb0:	40 e8       	ldi	r20, 0x80	; 128
    2fb2:	5f e3       	ldi	r21, 0x3F	; 63
    2fb4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fb8:	88 23       	and	r24, r24
    2fba:	2c f4       	brge	.+10     	; 0x2fc6 <lcd_8bit_initialize+0x1aa>
		__ticks = 1;
    2fbc:	81 e0       	ldi	r24, 0x01	; 1
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	9a a3       	std	Y+34, r25	; 0x22
    2fc2:	89 a3       	std	Y+33, r24	; 0x21
    2fc4:	3f c0       	rjmp	.+126    	; 0x3044 <lcd_8bit_initialize+0x228>
	else if (__tmp > 65535)
    2fc6:	6b a1       	ldd	r22, Y+35	; 0x23
    2fc8:	7c a1       	ldd	r23, Y+36	; 0x24
    2fca:	8d a1       	ldd	r24, Y+37	; 0x25
    2fcc:	9e a1       	ldd	r25, Y+38	; 0x26
    2fce:	20 e0       	ldi	r18, 0x00	; 0
    2fd0:	3f ef       	ldi	r19, 0xFF	; 255
    2fd2:	4f e7       	ldi	r20, 0x7F	; 127
    2fd4:	57 e4       	ldi	r21, 0x47	; 71
    2fd6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fda:	18 16       	cp	r1, r24
    2fdc:	4c f5       	brge	.+82     	; 0x3030 <lcd_8bit_initialize+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fde:	6f a1       	ldd	r22, Y+39	; 0x27
    2fe0:	78 a5       	ldd	r23, Y+40	; 0x28
    2fe2:	89 a5       	ldd	r24, Y+41	; 0x29
    2fe4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fe6:	20 e0       	ldi	r18, 0x00	; 0
    2fe8:	30 e0       	ldi	r19, 0x00	; 0
    2fea:	40 e2       	ldi	r20, 0x20	; 32
    2fec:	51 e4       	ldi	r21, 0x41	; 65
    2fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff2:	dc 01       	movw	r26, r24
    2ff4:	cb 01       	movw	r24, r22
    2ff6:	bc 01       	movw	r22, r24
    2ff8:	cd 01       	movw	r24, r26
    2ffa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ffe:	dc 01       	movw	r26, r24
    3000:	cb 01       	movw	r24, r22
    3002:	9a a3       	std	Y+34, r25	; 0x22
    3004:	89 a3       	std	Y+33, r24	; 0x21
    3006:	0f c0       	rjmp	.+30     	; 0x3026 <lcd_8bit_initialize+0x20a>
    3008:	88 ec       	ldi	r24, 0xC8	; 200
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	98 a3       	std	Y+32, r25	; 0x20
    300e:	8f 8f       	std	Y+31, r24	; 0x1f
    3010:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3012:	98 a1       	ldd	r25, Y+32	; 0x20
    3014:	01 97       	sbiw	r24, 0x01	; 1
    3016:	f1 f7       	brne	.-4      	; 0x3014 <lcd_8bit_initialize+0x1f8>
    3018:	98 a3       	std	Y+32, r25	; 0x20
    301a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    301c:	89 a1       	ldd	r24, Y+33	; 0x21
    301e:	9a a1       	ldd	r25, Y+34	; 0x22
    3020:	01 97       	sbiw	r24, 0x01	; 1
    3022:	9a a3       	std	Y+34, r25	; 0x22
    3024:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3026:	89 a1       	ldd	r24, Y+33	; 0x21
    3028:	9a a1       	ldd	r25, Y+34	; 0x22
    302a:	00 97       	sbiw	r24, 0x00	; 0
    302c:	69 f7       	brne	.-38     	; 0x3008 <lcd_8bit_initialize+0x1ec>
    302e:	14 c0       	rjmp	.+40     	; 0x3058 <lcd_8bit_initialize+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3030:	6b a1       	ldd	r22, Y+35	; 0x23
    3032:	7c a1       	ldd	r23, Y+36	; 0x24
    3034:	8d a1       	ldd	r24, Y+37	; 0x25
    3036:	9e a1       	ldd	r25, Y+38	; 0x26
    3038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    303c:	dc 01       	movw	r26, r24
    303e:	cb 01       	movw	r24, r22
    3040:	9a a3       	std	Y+34, r25	; 0x22
    3042:	89 a3       	std	Y+33, r24	; 0x21
    3044:	89 a1       	ldd	r24, Y+33	; 0x21
    3046:	9a a1       	ldd	r25, Y+34	; 0x22
    3048:	9e 8f       	std	Y+30, r25	; 0x1e
    304a:	8d 8f       	std	Y+29, r24	; 0x1d
    304c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    304e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3050:	01 97       	sbiw	r24, 0x01	; 1
    3052:	f1 f7       	brne	.-4      	; 0x3050 <lcd_8bit_initialize+0x234>
    3054:	9e 8f       	std	Y+30, r25	; 0x1e
    3056:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		ret = lcd_8bit_send_command(lcd,0x0C);
    3058:	8b ad       	ldd	r24, Y+59	; 0x3b
    305a:	9c ad       	ldd	r25, Y+60	; 0x3c
    305c:	6c e0       	ldi	r22, 0x0C	; 12
    305e:	0e 94 2c 19 	call	0x3258	; 0x3258 <lcd_8bit_send_command>
    3062:	8a af       	std	Y+58, r24	; 0x3a
    3064:	80 e0       	ldi	r24, 0x00	; 0
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	a0 e0       	ldi	r26, 0x00	; 0
    306a:	b0 e4       	ldi	r27, 0x40	; 64
    306c:	89 8f       	std	Y+25, r24	; 0x19
    306e:	9a 8f       	std	Y+26, r25	; 0x1a
    3070:	ab 8f       	std	Y+27, r26	; 0x1b
    3072:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3074:	69 8d       	ldd	r22, Y+25	; 0x19
    3076:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3078:	8b 8d       	ldd	r24, Y+27	; 0x1b
    307a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    307c:	20 e0       	ldi	r18, 0x00	; 0
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	4a ef       	ldi	r20, 0xFA	; 250
    3082:	54 e4       	ldi	r21, 0x44	; 68
    3084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3088:	dc 01       	movw	r26, r24
    308a:	cb 01       	movw	r24, r22
    308c:	8d 8b       	std	Y+21, r24	; 0x15
    308e:	9e 8b       	std	Y+22, r25	; 0x16
    3090:	af 8b       	std	Y+23, r26	; 0x17
    3092:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3094:	6d 89       	ldd	r22, Y+21	; 0x15
    3096:	7e 89       	ldd	r23, Y+22	; 0x16
    3098:	8f 89       	ldd	r24, Y+23	; 0x17
    309a:	98 8d       	ldd	r25, Y+24	; 0x18
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	40 e8       	ldi	r20, 0x80	; 128
    30a2:	5f e3       	ldi	r21, 0x3F	; 63
    30a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30a8:	88 23       	and	r24, r24
    30aa:	2c f4       	brge	.+10     	; 0x30b6 <lcd_8bit_initialize+0x29a>
		__ticks = 1;
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	9c 8b       	std	Y+20, r25	; 0x14
    30b2:	8b 8b       	std	Y+19, r24	; 0x13
    30b4:	3f c0       	rjmp	.+126    	; 0x3134 <lcd_8bit_initialize+0x318>
	else if (__tmp > 65535)
    30b6:	6d 89       	ldd	r22, Y+21	; 0x15
    30b8:	7e 89       	ldd	r23, Y+22	; 0x16
    30ba:	8f 89       	ldd	r24, Y+23	; 0x17
    30bc:	98 8d       	ldd	r25, Y+24	; 0x18
    30be:	20 e0       	ldi	r18, 0x00	; 0
    30c0:	3f ef       	ldi	r19, 0xFF	; 255
    30c2:	4f e7       	ldi	r20, 0x7F	; 127
    30c4:	57 e4       	ldi	r21, 0x47	; 71
    30c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30ca:	18 16       	cp	r1, r24
    30cc:	4c f5       	brge	.+82     	; 0x3120 <lcd_8bit_initialize+0x304>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ce:	69 8d       	ldd	r22, Y+25	; 0x19
    30d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30d6:	20 e0       	ldi	r18, 0x00	; 0
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	40 e2       	ldi	r20, 0x20	; 32
    30dc:	51 e4       	ldi	r21, 0x41	; 65
    30de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e2:	dc 01       	movw	r26, r24
    30e4:	cb 01       	movw	r24, r22
    30e6:	bc 01       	movw	r22, r24
    30e8:	cd 01       	movw	r24, r26
    30ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ee:	dc 01       	movw	r26, r24
    30f0:	cb 01       	movw	r24, r22
    30f2:	9c 8b       	std	Y+20, r25	; 0x14
    30f4:	8b 8b       	std	Y+19, r24	; 0x13
    30f6:	0f c0       	rjmp	.+30     	; 0x3116 <lcd_8bit_initialize+0x2fa>
    30f8:	88 ec       	ldi	r24, 0xC8	; 200
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	9a 8b       	std	Y+18, r25	; 0x12
    30fe:	89 8b       	std	Y+17, r24	; 0x11
    3100:	89 89       	ldd	r24, Y+17	; 0x11
    3102:	9a 89       	ldd	r25, Y+18	; 0x12
    3104:	01 97       	sbiw	r24, 0x01	; 1
    3106:	f1 f7       	brne	.-4      	; 0x3104 <lcd_8bit_initialize+0x2e8>
    3108:	9a 8b       	std	Y+18, r25	; 0x12
    310a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    310c:	8b 89       	ldd	r24, Y+19	; 0x13
    310e:	9c 89       	ldd	r25, Y+20	; 0x14
    3110:	01 97       	sbiw	r24, 0x01	; 1
    3112:	9c 8b       	std	Y+20, r25	; 0x14
    3114:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3116:	8b 89       	ldd	r24, Y+19	; 0x13
    3118:	9c 89       	ldd	r25, Y+20	; 0x14
    311a:	00 97       	sbiw	r24, 0x00	; 0
    311c:	69 f7       	brne	.-38     	; 0x30f8 <lcd_8bit_initialize+0x2dc>
    311e:	14 c0       	rjmp	.+40     	; 0x3148 <lcd_8bit_initialize+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3120:	6d 89       	ldd	r22, Y+21	; 0x15
    3122:	7e 89       	ldd	r23, Y+22	; 0x16
    3124:	8f 89       	ldd	r24, Y+23	; 0x17
    3126:	98 8d       	ldd	r25, Y+24	; 0x18
    3128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    312c:	dc 01       	movw	r26, r24
    312e:	cb 01       	movw	r24, r22
    3130:	9c 8b       	std	Y+20, r25	; 0x14
    3132:	8b 8b       	std	Y+19, r24	; 0x13
    3134:	8b 89       	ldd	r24, Y+19	; 0x13
    3136:	9c 89       	ldd	r25, Y+20	; 0x14
    3138:	98 8b       	std	Y+16, r25	; 0x10
    313a:	8f 87       	std	Y+15, r24	; 0x0f
    313c:	8f 85       	ldd	r24, Y+15	; 0x0f
    313e:	98 89       	ldd	r25, Y+16	; 0x10
    3140:	01 97       	sbiw	r24, 0x01	; 1
    3142:	f1 f7       	brne	.-4      	; 0x3140 <lcd_8bit_initialize+0x324>
    3144:	98 8b       	std	Y+16, r25	; 0x10
    3146:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		//ret = lcd_8bit_send_command(lcd,_LCD_8BIT_MODE_2_LINE);
		ret = lcd_8bit_send_command(lcd, _LCD_CLEAR);
    3148:	8b ad       	ldd	r24, Y+59	; 0x3b
    314a:	9c ad       	ldd	r25, Y+60	; 0x3c
    314c:	61 e0       	ldi	r22, 0x01	; 1
    314e:	0e 94 2c 19 	call	0x3258	; 0x3258 <lcd_8bit_send_command>
    3152:	8a af       	std	Y+58, r24	; 0x3a
    3154:	80 e0       	ldi	r24, 0x00	; 0
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	a0 e0       	ldi	r26, 0x00	; 0
    315a:	b0 e4       	ldi	r27, 0x40	; 64
    315c:	8b 87       	std	Y+11, r24	; 0x0b
    315e:	9c 87       	std	Y+12, r25	; 0x0c
    3160:	ad 87       	std	Y+13, r26	; 0x0d
    3162:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3164:	6b 85       	ldd	r22, Y+11	; 0x0b
    3166:	7c 85       	ldd	r23, Y+12	; 0x0c
    3168:	8d 85       	ldd	r24, Y+13	; 0x0d
    316a:	9e 85       	ldd	r25, Y+14	; 0x0e
    316c:	20 e0       	ldi	r18, 0x00	; 0
    316e:	30 e0       	ldi	r19, 0x00	; 0
    3170:	4a ef       	ldi	r20, 0xFA	; 250
    3172:	54 e4       	ldi	r21, 0x44	; 68
    3174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3178:	dc 01       	movw	r26, r24
    317a:	cb 01       	movw	r24, r22
    317c:	8f 83       	std	Y+7, r24	; 0x07
    317e:	98 87       	std	Y+8, r25	; 0x08
    3180:	a9 87       	std	Y+9, r26	; 0x09
    3182:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3184:	6f 81       	ldd	r22, Y+7	; 0x07
    3186:	78 85       	ldd	r23, Y+8	; 0x08
    3188:	89 85       	ldd	r24, Y+9	; 0x09
    318a:	9a 85       	ldd	r25, Y+10	; 0x0a
    318c:	20 e0       	ldi	r18, 0x00	; 0
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	40 e8       	ldi	r20, 0x80	; 128
    3192:	5f e3       	ldi	r21, 0x3F	; 63
    3194:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3198:	88 23       	and	r24, r24
    319a:	2c f4       	brge	.+10     	; 0x31a6 <lcd_8bit_initialize+0x38a>
		__ticks = 1;
    319c:	81 e0       	ldi	r24, 0x01	; 1
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	9e 83       	std	Y+6, r25	; 0x06
    31a2:	8d 83       	std	Y+5, r24	; 0x05
    31a4:	3f c0       	rjmp	.+126    	; 0x3224 <lcd_8bit_initialize+0x408>
	else if (__tmp > 65535)
    31a6:	6f 81       	ldd	r22, Y+7	; 0x07
    31a8:	78 85       	ldd	r23, Y+8	; 0x08
    31aa:	89 85       	ldd	r24, Y+9	; 0x09
    31ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ae:	20 e0       	ldi	r18, 0x00	; 0
    31b0:	3f ef       	ldi	r19, 0xFF	; 255
    31b2:	4f e7       	ldi	r20, 0x7F	; 127
    31b4:	57 e4       	ldi	r21, 0x47	; 71
    31b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31ba:	18 16       	cp	r1, r24
    31bc:	4c f5       	brge	.+82     	; 0x3210 <lcd_8bit_initialize+0x3f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31be:	6b 85       	ldd	r22, Y+11	; 0x0b
    31c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    31c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    31c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    31c6:	20 e0       	ldi	r18, 0x00	; 0
    31c8:	30 e0       	ldi	r19, 0x00	; 0
    31ca:	40 e2       	ldi	r20, 0x20	; 32
    31cc:	51 e4       	ldi	r21, 0x41	; 65
    31ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d2:	dc 01       	movw	r26, r24
    31d4:	cb 01       	movw	r24, r22
    31d6:	bc 01       	movw	r22, r24
    31d8:	cd 01       	movw	r24, r26
    31da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31de:	dc 01       	movw	r26, r24
    31e0:	cb 01       	movw	r24, r22
    31e2:	9e 83       	std	Y+6, r25	; 0x06
    31e4:	8d 83       	std	Y+5, r24	; 0x05
    31e6:	0f c0       	rjmp	.+30     	; 0x3206 <lcd_8bit_initialize+0x3ea>
    31e8:	88 ec       	ldi	r24, 0xC8	; 200
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	9c 83       	std	Y+4, r25	; 0x04
    31ee:	8b 83       	std	Y+3, r24	; 0x03
    31f0:	8b 81       	ldd	r24, Y+3	; 0x03
    31f2:	9c 81       	ldd	r25, Y+4	; 0x04
    31f4:	01 97       	sbiw	r24, 0x01	; 1
    31f6:	f1 f7       	brne	.-4      	; 0x31f4 <lcd_8bit_initialize+0x3d8>
    31f8:	9c 83       	std	Y+4, r25	; 0x04
    31fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31fc:	8d 81       	ldd	r24, Y+5	; 0x05
    31fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3200:	01 97       	sbiw	r24, 0x01	; 1
    3202:	9e 83       	std	Y+6, r25	; 0x06
    3204:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3206:	8d 81       	ldd	r24, Y+5	; 0x05
    3208:	9e 81       	ldd	r25, Y+6	; 0x06
    320a:	00 97       	sbiw	r24, 0x00	; 0
    320c:	69 f7       	brne	.-38     	; 0x31e8 <lcd_8bit_initialize+0x3cc>
    320e:	14 c0       	rjmp	.+40     	; 0x3238 <lcd_8bit_initialize+0x41c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3210:	6f 81       	ldd	r22, Y+7	; 0x07
    3212:	78 85       	ldd	r23, Y+8	; 0x08
    3214:	89 85       	ldd	r24, Y+9	; 0x09
    3216:	9a 85       	ldd	r25, Y+10	; 0x0a
    3218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    321c:	dc 01       	movw	r26, r24
    321e:	cb 01       	movw	r24, r22
    3220:	9e 83       	std	Y+6, r25	; 0x06
    3222:	8d 83       	std	Y+5, r24	; 0x05
    3224:	8d 81       	ldd	r24, Y+5	; 0x05
    3226:	9e 81       	ldd	r25, Y+6	; 0x06
    3228:	9a 83       	std	Y+2, r25	; 0x02
    322a:	89 83       	std	Y+1, r24	; 0x01
    322c:	89 81       	ldd	r24, Y+1	; 0x01
    322e:	9a 81       	ldd	r25, Y+2	; 0x02
    3230:	01 97       	sbiw	r24, 0x01	; 1
    3232:	f1 f7       	brne	.-4      	; 0x3230 <lcd_8bit_initialize+0x414>
    3234:	9a 83       	std	Y+2, r25	; 0x02
    3236:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		//ret = lcd_8bit_send_command(lcd, _LCD_RETURN_HOME);
		//ret = lcd_8bit_send_command(lcd, _LCD_ENTRY_MODE);
		//ret = lcd_8bit_send_command(lcd, _LCD_CURSER_OFF_DISPLAY_ON);
		//ret = lcd_8bit_send_command(lcd,_LCD_8BIT_MODE_2_LINE);
		ret = lcd_8bit_send_command(lcd,0x80);
    3238:	8b ad       	ldd	r24, Y+59	; 0x3b
    323a:	9c ad       	ldd	r25, Y+60	; 0x3c
    323c:	60 e8       	ldi	r22, 0x80	; 128
    323e:	0e 94 2c 19 	call	0x3258	; 0x3258 <lcd_8bit_send_command>
    3242:	8a af       	std	Y+58, r24	; 0x3a
		//ret = lcd_8bit_send_command(lcd,0x04);
	}
	return ret;
    3244:	8a ad       	ldd	r24, Y+58	; 0x3a
}
    3246:	ec 96       	adiw	r28, 0x3c	; 60
    3248:	0f b6       	in	r0, 0x3f	; 63
    324a:	f8 94       	cli
    324c:	de bf       	out	0x3e, r29	; 62
    324e:	0f be       	out	0x3f, r0	; 63
    3250:	cd bf       	out	0x3d, r28	; 61
    3252:	cf 91       	pop	r28
    3254:	df 91       	pop	r29
    3256:	08 95       	ret

00003258 <lcd_8bit_send_command>:
STD_ReturnStatus lcd_8bit_send_command(const chr_lcd_8bit_t *lcd,uint8 command)
{
    3258:	df 93       	push	r29
    325a:	cf 93       	push	r28
    325c:	00 d0       	rcall	.+0      	; 0x325e <lcd_8bit_send_command+0x6>
    325e:	00 d0       	rcall	.+0      	; 0x3260 <lcd_8bit_send_command+0x8>
    3260:	0f 92       	push	r0
    3262:	cd b7       	in	r28, 0x3d	; 61
    3264:	de b7       	in	r29, 0x3e	; 62
    3266:	9c 83       	std	Y+4, r25	; 0x04
    3268:	8b 83       	std	Y+3, r24	; 0x03
    326a:	6d 83       	std	Y+5, r22	; 0x05
	STD_ReturnStatus ret = E_OK;
    326c:	81 e0       	ldi	r24, 0x01	; 1
    326e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 l_pin_counter=ZERO_INIT;
    3270:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==lcd)
    3272:	8b 81       	ldd	r24, Y+3	; 0x03
    3274:	9c 81       	ldd	r25, Y+4	; 0x04
    3276:	00 97       	sbiw	r24, 0x00	; 0
    3278:	11 f4       	brne	.+4      	; 0x327e <lcd_8bit_send_command+0x26>
	{
		ret = E_NOT_OK;
    327a:	1a 82       	std	Y+2, r1	; 0x02
    327c:	32 c0       	rjmp	.+100    	; 0x32e2 <lcd_8bit_send_command+0x8a>
	}
	else
	{
		ret = gpio_pin_write_logic(&(lcd->lcd_rs),GPIO_LOW);
    327e:	8b 81       	ldd	r24, Y+3	; 0x03
    3280:	9c 81       	ldd	r25, Y+4	; 0x04
    3282:	60 e0       	ldi	r22, 0x00	; 0
    3284:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
    3288:	8a 83       	std	Y+2, r24	; 0x02
		for(l_pin_counter=0;l_pin_counter<8;++l_pin_counter)
    328a:	19 82       	std	Y+1, r1	; 0x01
    328c:	22 c0       	rjmp	.+68     	; 0x32d2 <lcd_8bit_send_command+0x7a>
		{
			ret = gpio_pin_write_logic(&(lcd->lcd_data[l_pin_counter]), (command>>l_pin_counter) & (uint8)0x01);
    328e:	8b 81       	ldd	r24, Y+3	; 0x03
    3290:	9c 81       	ldd	r25, Y+4	; 0x04
    3292:	9c 01       	movw	r18, r24
    3294:	2e 5f       	subi	r18, 0xFE	; 254
    3296:	3f 4f       	sbci	r19, 0xFF	; 255
    3298:	89 81       	ldd	r24, Y+1	; 0x01
    329a:	88 2f       	mov	r24, r24
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	a9 01       	movw	r20, r18
    32a0:	48 0f       	add	r20, r24
    32a2:	59 1f       	adc	r21, r25
    32a4:	8d 81       	ldd	r24, Y+5	; 0x05
    32a6:	28 2f       	mov	r18, r24
    32a8:	30 e0       	ldi	r19, 0x00	; 0
    32aa:	89 81       	ldd	r24, Y+1	; 0x01
    32ac:	88 2f       	mov	r24, r24
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	b9 01       	movw	r22, r18
    32b2:	02 c0       	rjmp	.+4      	; 0x32b8 <lcd_8bit_send_command+0x60>
    32b4:	75 95       	asr	r23
    32b6:	67 95       	ror	r22
    32b8:	8a 95       	dec	r24
    32ba:	e2 f7       	brpl	.-8      	; 0x32b4 <lcd_8bit_send_command+0x5c>
    32bc:	cb 01       	movw	r24, r22
    32be:	28 2f       	mov	r18, r24
    32c0:	21 70       	andi	r18, 0x01	; 1
    32c2:	ca 01       	movw	r24, r20
    32c4:	62 2f       	mov	r22, r18
    32c6:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
    32ca:	8a 83       	std	Y+2, r24	; 0x02
		ret = E_NOT_OK;
	}
	else
	{
		ret = gpio_pin_write_logic(&(lcd->lcd_rs),GPIO_LOW);
		for(l_pin_counter=0;l_pin_counter<8;++l_pin_counter)
    32cc:	89 81       	ldd	r24, Y+1	; 0x01
    32ce:	8f 5f       	subi	r24, 0xFF	; 255
    32d0:	89 83       	std	Y+1, r24	; 0x01
    32d2:	89 81       	ldd	r24, Y+1	; 0x01
    32d4:	88 30       	cpi	r24, 0x08	; 8
    32d6:	d8 f2       	brcs	.-74     	; 0x328e <lcd_8bit_send_command+0x36>
		{
			ret = gpio_pin_write_logic(&(lcd->lcd_data[l_pin_counter]), (command>>l_pin_counter) & (uint8)0x01);
		}
		ret = lcd_8bit_send_enable(lcd);
    32d8:	8b 81       	ldd	r24, Y+3	; 0x03
    32da:	9c 81       	ldd	r25, Y+4	; 0x04
    32dc:	0e 94 b1 1c 	call	0x3962	; 0x3962 <lcd_8bit_send_enable>
    32e0:	8a 83       	std	Y+2, r24	; 0x02
	}
	return ret;
    32e2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    32e4:	0f 90       	pop	r0
    32e6:	0f 90       	pop	r0
    32e8:	0f 90       	pop	r0
    32ea:	0f 90       	pop	r0
    32ec:	0f 90       	pop	r0
    32ee:	cf 91       	pop	r28
    32f0:	df 91       	pop	r29
    32f2:	08 95       	ret

000032f4 <lcd_8bit_send_char_data>:
STD_ReturnStatus lcd_8bit_send_char_data(const chr_lcd_8bit_t *lcd,uint8 data)
{
    32f4:	df 93       	push	r29
    32f6:	cf 93       	push	r28
    32f8:	00 d0       	rcall	.+0      	; 0x32fa <lcd_8bit_send_char_data+0x6>
    32fa:	00 d0       	rcall	.+0      	; 0x32fc <lcd_8bit_send_char_data+0x8>
    32fc:	0f 92       	push	r0
    32fe:	cd b7       	in	r28, 0x3d	; 61
    3300:	de b7       	in	r29, 0x3e	; 62
    3302:	9c 83       	std	Y+4, r25	; 0x04
    3304:	8b 83       	std	Y+3, r24	; 0x03
    3306:	6d 83       	std	Y+5, r22	; 0x05
	STD_ReturnStatus ret = E_OK;
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 l_pin_counter=ZERO_INIT;
    330c:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==lcd)
    330e:	8b 81       	ldd	r24, Y+3	; 0x03
    3310:	9c 81       	ldd	r25, Y+4	; 0x04
    3312:	00 97       	sbiw	r24, 0x00	; 0
    3314:	11 f4       	brne	.+4      	; 0x331a <lcd_8bit_send_char_data+0x26>
	{
		ret = E_NOT_OK;
    3316:	1a 82       	std	Y+2, r1	; 0x02
    3318:	32 c0       	rjmp	.+100    	; 0x337e <lcd_8bit_send_char_data+0x8a>
	}
	else
	{
		ret = gpio_pin_write_logic(&(lcd->lcd_rs),GPIO_HIGH);
    331a:	8b 81       	ldd	r24, Y+3	; 0x03
    331c:	9c 81       	ldd	r25, Y+4	; 0x04
    331e:	61 e0       	ldi	r22, 0x01	; 1
    3320:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
    3324:	8a 83       	std	Y+2, r24	; 0x02
		for(l_pin_counter=ZERO_INIT;l_pin_counter<8;++l_pin_counter)
    3326:	19 82       	std	Y+1, r1	; 0x01
    3328:	22 c0       	rjmp	.+68     	; 0x336e <lcd_8bit_send_char_data+0x7a>
		{
			ret = gpio_pin_write_logic(&(lcd->lcd_data[l_pin_counter]), (data>>l_pin_counter) & (uint8)0x01);
    332a:	8b 81       	ldd	r24, Y+3	; 0x03
    332c:	9c 81       	ldd	r25, Y+4	; 0x04
    332e:	9c 01       	movw	r18, r24
    3330:	2e 5f       	subi	r18, 0xFE	; 254
    3332:	3f 4f       	sbci	r19, 0xFF	; 255
    3334:	89 81       	ldd	r24, Y+1	; 0x01
    3336:	88 2f       	mov	r24, r24
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	a9 01       	movw	r20, r18
    333c:	48 0f       	add	r20, r24
    333e:	59 1f       	adc	r21, r25
    3340:	8d 81       	ldd	r24, Y+5	; 0x05
    3342:	28 2f       	mov	r18, r24
    3344:	30 e0       	ldi	r19, 0x00	; 0
    3346:	89 81       	ldd	r24, Y+1	; 0x01
    3348:	88 2f       	mov	r24, r24
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	b9 01       	movw	r22, r18
    334e:	02 c0       	rjmp	.+4      	; 0x3354 <lcd_8bit_send_char_data+0x60>
    3350:	75 95       	asr	r23
    3352:	67 95       	ror	r22
    3354:	8a 95       	dec	r24
    3356:	e2 f7       	brpl	.-8      	; 0x3350 <lcd_8bit_send_char_data+0x5c>
    3358:	cb 01       	movw	r24, r22
    335a:	28 2f       	mov	r18, r24
    335c:	21 70       	andi	r18, 0x01	; 1
    335e:	ca 01       	movw	r24, r20
    3360:	62 2f       	mov	r22, r18
    3362:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
    3366:	8a 83       	std	Y+2, r24	; 0x02
		ret = E_NOT_OK;
	}
	else
	{
		ret = gpio_pin_write_logic(&(lcd->lcd_rs),GPIO_HIGH);
		for(l_pin_counter=ZERO_INIT;l_pin_counter<8;++l_pin_counter)
    3368:	89 81       	ldd	r24, Y+1	; 0x01
    336a:	8f 5f       	subi	r24, 0xFF	; 255
    336c:	89 83       	std	Y+1, r24	; 0x01
    336e:	89 81       	ldd	r24, Y+1	; 0x01
    3370:	88 30       	cpi	r24, 0x08	; 8
    3372:	d8 f2       	brcs	.-74     	; 0x332a <lcd_8bit_send_char_data+0x36>
		{
			ret = gpio_pin_write_logic(&(lcd->lcd_data[l_pin_counter]), (data>>l_pin_counter) & (uint8)0x01);
		}
		ret = lcd_8bit_send_enable(lcd);
    3374:	8b 81       	ldd	r24, Y+3	; 0x03
    3376:	9c 81       	ldd	r25, Y+4	; 0x04
    3378:	0e 94 b1 1c 	call	0x3962	; 0x3962 <lcd_8bit_send_enable>
    337c:	8a 83       	std	Y+2, r24	; 0x02
	}
	return ret;
    337e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3380:	0f 90       	pop	r0
    3382:	0f 90       	pop	r0
    3384:	0f 90       	pop	r0
    3386:	0f 90       	pop	r0
    3388:	0f 90       	pop	r0
    338a:	cf 91       	pop	r28
    338c:	df 91       	pop	r29
    338e:	08 95       	ret

00003390 <lcd_8bit_send_char_data_pos>:


STD_ReturnStatus lcd_8bit_send_char_data_pos(const chr_lcd_8bit_t *lcd,uint8 row,uint8 column,uint8 data)
{
    3390:	df 93       	push	r29
    3392:	cf 93       	push	r28
    3394:	00 d0       	rcall	.+0      	; 0x3396 <lcd_8bit_send_char_data_pos+0x6>
    3396:	00 d0       	rcall	.+0      	; 0x3398 <lcd_8bit_send_char_data_pos+0x8>
    3398:	00 d0       	rcall	.+0      	; 0x339a <lcd_8bit_send_char_data_pos+0xa>
    339a:	cd b7       	in	r28, 0x3d	; 61
    339c:	de b7       	in	r29, 0x3e	; 62
    339e:	9b 83       	std	Y+3, r25	; 0x03
    33a0:	8a 83       	std	Y+2, r24	; 0x02
    33a2:	6c 83       	std	Y+4, r22	; 0x04
    33a4:	4d 83       	std	Y+5, r20	; 0x05
    33a6:	2e 83       	std	Y+6, r18	; 0x06
	STD_ReturnStatus ret = E_OK;
    33a8:	81 e0       	ldi	r24, 0x01	; 1
    33aa:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==lcd)
    33ac:	8a 81       	ldd	r24, Y+2	; 0x02
    33ae:	9b 81       	ldd	r25, Y+3	; 0x03
    33b0:	00 97       	sbiw	r24, 0x00	; 0
    33b2:	11 f4       	brne	.+4      	; 0x33b8 <lcd_8bit_send_char_data_pos+0x28>
	{
		ret = E_NOT_OK;
    33b4:	19 82       	std	Y+1, r1	; 0x01
    33b6:	0c c0       	rjmp	.+24     	; 0x33d0 <lcd_8bit_send_char_data_pos+0x40>
	}
	else
	{
		lcd_8bit_set_cursor(lcd,row,column);
    33b8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ba:	9b 81       	ldd	r25, Y+3	; 0x03
    33bc:	6c 81       	ldd	r22, Y+4	; 0x04
    33be:	4d 81       	ldd	r20, Y+5	; 0x05
    33c0:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <lcd_8bit_set_cursor>
		ret = lcd_8bit_send_char_data(lcd,data);
    33c4:	8a 81       	ldd	r24, Y+2	; 0x02
    33c6:	9b 81       	ldd	r25, Y+3	; 0x03
    33c8:	6e 81       	ldd	r22, Y+6	; 0x06
    33ca:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <lcd_8bit_send_char_data>
    33ce:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    33d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    33d2:	26 96       	adiw	r28, 0x06	; 6
    33d4:	0f b6       	in	r0, 0x3f	; 63
    33d6:	f8 94       	cli
    33d8:	de bf       	out	0x3e, r29	; 62
    33da:	0f be       	out	0x3f, r0	; 63
    33dc:	cd bf       	out	0x3d, r28	; 61
    33de:	cf 91       	pop	r28
    33e0:	df 91       	pop	r29
    33e2:	08 95       	ret

000033e4 <lcd_8bit_send_string>:
STD_ReturnStatus lcd_8bit_send_string(const chr_lcd_8bit_t *lcd,uint8* str)
{
    33e4:	df 93       	push	r29
    33e6:	cf 93       	push	r28
    33e8:	00 d0       	rcall	.+0      	; 0x33ea <lcd_8bit_send_string+0x6>
    33ea:	00 d0       	rcall	.+0      	; 0x33ec <lcd_8bit_send_string+0x8>
    33ec:	0f 92       	push	r0
    33ee:	cd b7       	in	r28, 0x3d	; 61
    33f0:	de b7       	in	r29, 0x3e	; 62
    33f2:	9b 83       	std	Y+3, r25	; 0x03
    33f4:	8a 83       	std	Y+2, r24	; 0x02
    33f6:	7d 83       	std	Y+5, r23	; 0x05
    33f8:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_OK;
    33fa:	81 e0       	ldi	r24, 0x01	; 1
    33fc:	89 83       	std	Y+1, r24	; 0x01
	if((NULL==lcd)||(NULL==str))
    33fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3400:	9b 81       	ldd	r25, Y+3	; 0x03
    3402:	00 97       	sbiw	r24, 0x00	; 0
    3404:	21 f0       	breq	.+8      	; 0x340e <lcd_8bit_send_string+0x2a>
    3406:	8c 81       	ldd	r24, Y+4	; 0x04
    3408:	9d 81       	ldd	r25, Y+5	; 0x05
    340a:	00 97       	sbiw	r24, 0x00	; 0
    340c:	81 f4       	brne	.+32     	; 0x342e <lcd_8bit_send_string+0x4a>
	{
		ret = E_NOT_OK;
    340e:	19 82       	std	Y+1, r1	; 0x01
    3410:	13 c0       	rjmp	.+38     	; 0x3438 <lcd_8bit_send_string+0x54>
	}
	else
	{
		while(*str)
		{
			ret = lcd_8bit_send_char_data(lcd,*str++);
    3412:	ec 81       	ldd	r30, Y+4	; 0x04
    3414:	fd 81       	ldd	r31, Y+5	; 0x05
    3416:	20 81       	ld	r18, Z
    3418:	8c 81       	ldd	r24, Y+4	; 0x04
    341a:	9d 81       	ldd	r25, Y+5	; 0x05
    341c:	01 96       	adiw	r24, 0x01	; 1
    341e:	9d 83       	std	Y+5, r25	; 0x05
    3420:	8c 83       	std	Y+4, r24	; 0x04
    3422:	8a 81       	ldd	r24, Y+2	; 0x02
    3424:	9b 81       	ldd	r25, Y+3	; 0x03
    3426:	62 2f       	mov	r22, r18
    3428:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <lcd_8bit_send_char_data>
    342c:	89 83       	std	Y+1, r24	; 0x01
	{
		ret = E_NOT_OK;
	}
	else
	{
		while(*str)
    342e:	ec 81       	ldd	r30, Y+4	; 0x04
    3430:	fd 81       	ldd	r31, Y+5	; 0x05
    3432:	80 81       	ld	r24, Z
    3434:	88 23       	and	r24, r24
    3436:	69 f7       	brne	.-38     	; 0x3412 <lcd_8bit_send_string+0x2e>
		{
			ret = lcd_8bit_send_char_data(lcd,*str++);
		}
	}
	return ret;
    3438:	89 81       	ldd	r24, Y+1	; 0x01
}
    343a:	0f 90       	pop	r0
    343c:	0f 90       	pop	r0
    343e:	0f 90       	pop	r0
    3440:	0f 90       	pop	r0
    3442:	0f 90       	pop	r0
    3444:	cf 91       	pop	r28
    3446:	df 91       	pop	r29
    3448:	08 95       	ret

0000344a <lcd_8bit_send_string_pos>:
STD_ReturnStatus lcd_8bit_send_string_pos(const chr_lcd_8bit_t *lcd,uint8 row,uint8 column,uint8* str)
{
    344a:	df 93       	push	r29
    344c:	cf 93       	push	r28
    344e:	cd b7       	in	r28, 0x3d	; 61
    3450:	de b7       	in	r29, 0x3e	; 62
    3452:	27 97       	sbiw	r28, 0x07	; 7
    3454:	0f b6       	in	r0, 0x3f	; 63
    3456:	f8 94       	cli
    3458:	de bf       	out	0x3e, r29	; 62
    345a:	0f be       	out	0x3f, r0	; 63
    345c:	cd bf       	out	0x3d, r28	; 61
    345e:	9b 83       	std	Y+3, r25	; 0x03
    3460:	8a 83       	std	Y+2, r24	; 0x02
    3462:	6c 83       	std	Y+4, r22	; 0x04
    3464:	4d 83       	std	Y+5, r20	; 0x05
    3466:	3f 83       	std	Y+7, r19	; 0x07
    3468:	2e 83       	std	Y+6, r18	; 0x06
	STD_ReturnStatus ret = E_OK;
    346a:	81 e0       	ldi	r24, 0x01	; 1
    346c:	89 83       	std	Y+1, r24	; 0x01
	if((NULL==lcd)||(NULL==str))
    346e:	8a 81       	ldd	r24, Y+2	; 0x02
    3470:	9b 81       	ldd	r25, Y+3	; 0x03
    3472:	00 97       	sbiw	r24, 0x00	; 0
    3474:	21 f0       	breq	.+8      	; 0x347e <lcd_8bit_send_string_pos+0x34>
    3476:	8e 81       	ldd	r24, Y+6	; 0x06
    3478:	9f 81       	ldd	r25, Y+7	; 0x07
    347a:	00 97       	sbiw	r24, 0x00	; 0
    347c:	11 f4       	brne	.+4      	; 0x3482 <lcd_8bit_send_string_pos+0x38>
	{
		ret = E_NOT_OK;
    347e:	19 82       	std	Y+1, r1	; 0x01
    3480:	1b c0       	rjmp	.+54     	; 0x34b8 <lcd_8bit_send_string_pos+0x6e>
	}
	else
	{
		ret = lcd_8bit_set_cursor(lcd,row,column);
    3482:	8a 81       	ldd	r24, Y+2	; 0x02
    3484:	9b 81       	ldd	r25, Y+3	; 0x03
    3486:	6c 81       	ldd	r22, Y+4	; 0x04
    3488:	4d 81       	ldd	r20, Y+5	; 0x05
    348a:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <lcd_8bit_set_cursor>
    348e:	89 83       	std	Y+1, r24	; 0x01
    3490:	0e c0       	rjmp	.+28     	; 0x34ae <lcd_8bit_send_string_pos+0x64>
		while(*str)
		{
			ret = lcd_8bit_send_char_data(lcd,*str++);
    3492:	ee 81       	ldd	r30, Y+6	; 0x06
    3494:	ff 81       	ldd	r31, Y+7	; 0x07
    3496:	20 81       	ld	r18, Z
    3498:	8e 81       	ldd	r24, Y+6	; 0x06
    349a:	9f 81       	ldd	r25, Y+7	; 0x07
    349c:	01 96       	adiw	r24, 0x01	; 1
    349e:	9f 83       	std	Y+7, r25	; 0x07
    34a0:	8e 83       	std	Y+6, r24	; 0x06
    34a2:	8a 81       	ldd	r24, Y+2	; 0x02
    34a4:	9b 81       	ldd	r25, Y+3	; 0x03
    34a6:	62 2f       	mov	r22, r18
    34a8:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <lcd_8bit_send_char_data>
    34ac:	89 83       	std	Y+1, r24	; 0x01
		ret = E_NOT_OK;
	}
	else
	{
		ret = lcd_8bit_set_cursor(lcd,row,column);
		while(*str)
    34ae:	ee 81       	ldd	r30, Y+6	; 0x06
    34b0:	ff 81       	ldd	r31, Y+7	; 0x07
    34b2:	80 81       	ld	r24, Z
    34b4:	88 23       	and	r24, r24
    34b6:	69 f7       	brne	.-38     	; 0x3492 <lcd_8bit_send_string_pos+0x48>
		{
			ret = lcd_8bit_send_char_data(lcd,*str++);
		}
	}
	return ret;
    34b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    34ba:	27 96       	adiw	r28, 0x07	; 7
    34bc:	0f b6       	in	r0, 0x3f	; 63
    34be:	f8 94       	cli
    34c0:	de bf       	out	0x3e, r29	; 62
    34c2:	0f be       	out	0x3f, r0	; 63
    34c4:	cd bf       	out	0x3d, r28	; 61
    34c6:	cf 91       	pop	r28
    34c8:	df 91       	pop	r29
    34ca:	08 95       	ret

000034cc <lcd_8bit_send_custom_char>:
STD_ReturnStatus lcd_8bit_send_custom_char(const chr_lcd_8bit_t *lcd,uint8 row,uint8 column,uint8 _char[],uint8 mem_pos)
{
    34cc:	0f 93       	push	r16
    34ce:	df 93       	push	r29
    34d0:	cf 93       	push	r28
    34d2:	cd b7       	in	r28, 0x3d	; 61
    34d4:	de b7       	in	r29, 0x3e	; 62
    34d6:	29 97       	sbiw	r28, 0x09	; 9
    34d8:	0f b6       	in	r0, 0x3f	; 63
    34da:	f8 94       	cli
    34dc:	de bf       	out	0x3e, r29	; 62
    34de:	0f be       	out	0x3f, r0	; 63
    34e0:	cd bf       	out	0x3d, r28	; 61
    34e2:	9c 83       	std	Y+4, r25	; 0x04
    34e4:	8b 83       	std	Y+3, r24	; 0x03
    34e6:	6d 83       	std	Y+5, r22	; 0x05
    34e8:	4e 83       	std	Y+6, r20	; 0x06
    34ea:	38 87       	std	Y+8, r19	; 0x08
    34ec:	2f 83       	std	Y+7, r18	; 0x07
    34ee:	09 87       	std	Y+9, r16	; 0x09
	STD_ReturnStatus ret = E_OK;
    34f0:	81 e0       	ldi	r24, 0x01	; 1
    34f2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 lcd_counter = ZERO_INIT;
    34f4:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==lcd)
    34f6:	8b 81       	ldd	r24, Y+3	; 0x03
    34f8:	9c 81       	ldd	r25, Y+4	; 0x04
    34fa:	00 97       	sbiw	r24, 0x00	; 0
    34fc:	11 f4       	brne	.+4      	; 0x3502 <lcd_8bit_send_custom_char+0x36>
	{
		ret = E_NOT_OK;
    34fe:	1a 82       	std	Y+2, r1	; 0x02
    3500:	30 c0       	rjmp	.+96     	; 0x3562 <lcd_8bit_send_custom_char+0x96>
	}
	else
	{
		ret =  lcd_8bit_send_command(lcd,_LCD_CGRAM_START+(mem_pos*8));//mem_pos is the position addres oin cgram(1~8)
    3502:	89 85       	ldd	r24, Y+9	; 0x09
    3504:	88 2f       	mov	r24, r24
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	08 96       	adiw	r24, 0x08	; 8
    350a:	88 0f       	add	r24, r24
    350c:	99 1f       	adc	r25, r25
    350e:	88 0f       	add	r24, r24
    3510:	99 1f       	adc	r25, r25
    3512:	88 0f       	add	r24, r24
    3514:	99 1f       	adc	r25, r25
    3516:	28 2f       	mov	r18, r24
    3518:	8b 81       	ldd	r24, Y+3	; 0x03
    351a:	9c 81       	ldd	r25, Y+4	; 0x04
    351c:	62 2f       	mov	r22, r18
    351e:	0e 94 2c 19 	call	0x3258	; 0x3258 <lcd_8bit_send_command>
    3522:	8a 83       	std	Y+2, r24	; 0x02
		for(lcd_counter=ZERO_INIT;lcd_counter<=7;++lcd_counter)
    3524:	19 82       	std	Y+1, r1	; 0x01
    3526:	12 c0       	rjmp	.+36     	; 0x354c <lcd_8bit_send_custom_char+0x80>
		{
			ret = lcd_8bit_send_char_data(lcd,_char[lcd_counter]);
    3528:	89 81       	ldd	r24, Y+1	; 0x01
    352a:	28 2f       	mov	r18, r24
    352c:	30 e0       	ldi	r19, 0x00	; 0
    352e:	8f 81       	ldd	r24, Y+7	; 0x07
    3530:	98 85       	ldd	r25, Y+8	; 0x08
    3532:	fc 01       	movw	r30, r24
    3534:	e2 0f       	add	r30, r18
    3536:	f3 1f       	adc	r31, r19
    3538:	20 81       	ld	r18, Z
    353a:	8b 81       	ldd	r24, Y+3	; 0x03
    353c:	9c 81       	ldd	r25, Y+4	; 0x04
    353e:	62 2f       	mov	r22, r18
    3540:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <lcd_8bit_send_char_data>
    3544:	8a 83       	std	Y+2, r24	; 0x02
		ret = E_NOT_OK;
	}
	else
	{
		ret =  lcd_8bit_send_command(lcd,_LCD_CGRAM_START+(mem_pos*8));//mem_pos is the position addres oin cgram(1~8)
		for(lcd_counter=ZERO_INIT;lcd_counter<=7;++lcd_counter)
    3546:	89 81       	ldd	r24, Y+1	; 0x01
    3548:	8f 5f       	subi	r24, 0xFF	; 255
    354a:	89 83       	std	Y+1, r24	; 0x01
    354c:	89 81       	ldd	r24, Y+1	; 0x01
    354e:	88 30       	cpi	r24, 0x08	; 8
    3550:	58 f3       	brcs	.-42     	; 0x3528 <lcd_8bit_send_custom_char+0x5c>
		{
			ret = lcd_8bit_send_char_data(lcd,_char[lcd_counter]);
		}
		ret = lcd_8bit_send_char_data_pos(lcd,row,column,mem_pos);
    3552:	8b 81       	ldd	r24, Y+3	; 0x03
    3554:	9c 81       	ldd	r25, Y+4	; 0x04
    3556:	6d 81       	ldd	r22, Y+5	; 0x05
    3558:	4e 81       	ldd	r20, Y+6	; 0x06
    355a:	29 85       	ldd	r18, Y+9	; 0x09
    355c:	0e 94 c8 19 	call	0x3390	; 0x3390 <lcd_8bit_send_char_data_pos>
    3560:	8a 83       	std	Y+2, r24	; 0x02
	}
	return ret;
    3562:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3564:	29 96       	adiw	r28, 0x09	; 9
    3566:	0f b6       	in	r0, 0x3f	; 63
    3568:	f8 94       	cli
    356a:	de bf       	out	0x3e, r29	; 62
    356c:	0f be       	out	0x3f, r0	; 63
    356e:	cd bf       	out	0x3d, r28	; 61
    3570:	cf 91       	pop	r28
    3572:	df 91       	pop	r29
    3574:	0f 91       	pop	r16
    3576:	08 95       	ret

00003578 <convert_byte_to_string>:


STD_ReturnStatus convert_byte_to_string(uint8 value,uint8 *str)
{
    3578:	df 93       	push	r29
    357a:	cf 93       	push	r28
    357c:	00 d0       	rcall	.+0      	; 0x357e <convert_byte_to_string+0x6>
    357e:	00 d0       	rcall	.+0      	; 0x3580 <convert_byte_to_string+0x8>
    3580:	cd b7       	in	r28, 0x3d	; 61
    3582:	de b7       	in	r29, 0x3e	; 62
    3584:	8a 83       	std	Y+2, r24	; 0x02
    3586:	7c 83       	std	Y+4, r23	; 0x04
    3588:	6b 83       	std	Y+3, r22	; 0x03
	//since max of 8bits is 255 then we need 3 digits plus null terminator
	STD_ReturnStatus ret = E_OK;
    358a:	81 e0       	ldi	r24, 0x01	; 1
    358c:	89 83       	std	Y+1, r24	; 0x01
	if(str==NULL)
    358e:	8b 81       	ldd	r24, Y+3	; 0x03
    3590:	9c 81       	ldd	r25, Y+4	; 0x04
    3592:	00 97       	sbiw	r24, 0x00	; 0
    3594:	11 f4       	brne	.+4      	; 0x359a <convert_byte_to_string+0x22>
	{
		ret = E_NOT_OK;
    3596:	19 82       	std	Y+1, r1	; 0x01
    3598:	25 c0       	rjmp	.+74     	; 0x35e4 <convert_byte_to_string+0x6c>
	}
	else
	{
		memset(str,'\n',4);
    359a:	8b 81       	ldd	r24, Y+3	; 0x03
    359c:	9c 81       	ldd	r25, Y+4	; 0x04
    359e:	6a e0       	ldi	r22, 0x0A	; 10
    35a0:	70 e0       	ldi	r23, 0x00	; 0
    35a2:	44 e0       	ldi	r20, 0x04	; 4
    35a4:	50 e0       	ldi	r21, 0x00	; 0
    35a6:	0e 94 2c 21 	call	0x4258	; 0x4258 <memset>
		sprintf(str,"%i",value);
    35aa:	8a 81       	ldd	r24, Y+2	; 0x02
    35ac:	28 2f       	mov	r18, r24
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	00 d0       	rcall	.+0      	; 0x35b2 <convert_byte_to_string+0x3a>
    35b2:	00 d0       	rcall	.+0      	; 0x35b4 <convert_byte_to_string+0x3c>
    35b4:	00 d0       	rcall	.+0      	; 0x35b6 <convert_byte_to_string+0x3e>
    35b6:	ed b7       	in	r30, 0x3d	; 61
    35b8:	fe b7       	in	r31, 0x3e	; 62
    35ba:	31 96       	adiw	r30, 0x01	; 1
    35bc:	8b 81       	ldd	r24, Y+3	; 0x03
    35be:	9c 81       	ldd	r25, Y+4	; 0x04
    35c0:	91 83       	std	Z+1, r25	; 0x01
    35c2:	80 83       	st	Z, r24
    35c4:	80 e6       	ldi	r24, 0x60	; 96
    35c6:	90 e0       	ldi	r25, 0x00	; 0
    35c8:	93 83       	std	Z+3, r25	; 0x03
    35ca:	82 83       	std	Z+2, r24	; 0x02
    35cc:	35 83       	std	Z+5, r19	; 0x05
    35ce:	24 83       	std	Z+4, r18	; 0x04
    35d0:	0e 94 33 21 	call	0x4266	; 0x4266 <sprintf>
    35d4:	8d b7       	in	r24, 0x3d	; 61
    35d6:	9e b7       	in	r25, 0x3e	; 62
    35d8:	06 96       	adiw	r24, 0x06	; 6
    35da:	0f b6       	in	r0, 0x3f	; 63
    35dc:	f8 94       	cli
    35de:	9e bf       	out	0x3e, r25	; 62
    35e0:	0f be       	out	0x3f, r0	; 63
    35e2:	8d bf       	out	0x3d, r24	; 61
	}
	return ret;
    35e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    35e6:	0f 90       	pop	r0
    35e8:	0f 90       	pop	r0
    35ea:	0f 90       	pop	r0
    35ec:	0f 90       	pop	r0
    35ee:	cf 91       	pop	r28
    35f0:	df 91       	pop	r29
    35f2:	08 95       	ret

000035f4 <convert_string_to_byte>:
STD_ReturnStatus convert_string_to_byte(uint8 *value,uint8 *str)
{
    35f4:	df 93       	push	r29
    35f6:	cf 93       	push	r28
    35f8:	00 d0       	rcall	.+0      	; 0x35fa <convert_string_to_byte+0x6>
    35fa:	00 d0       	rcall	.+0      	; 0x35fc <convert_string_to_byte+0x8>
    35fc:	00 d0       	rcall	.+0      	; 0x35fe <convert_string_to_byte+0xa>
    35fe:	cd b7       	in	r28, 0x3d	; 61
    3600:	de b7       	in	r29, 0x3e	; 62
    3602:	9c 83       	std	Y+4, r25	; 0x04
    3604:	8b 83       	std	Y+3, r24	; 0x03
    3606:	7e 83       	std	Y+6, r23	; 0x06
    3608:	6d 83       	std	Y+5, r22	; 0x05
	STD_ReturnStatus ret = E_OK;
    360a:	81 e0       	ldi	r24, 0x01	; 1
    360c:	8a 83       	std	Y+2, r24	; 0x02
	if(str==NULL||NULL==value)
    360e:	8d 81       	ldd	r24, Y+5	; 0x05
    3610:	9e 81       	ldd	r25, Y+6	; 0x06
    3612:	00 97       	sbiw	r24, 0x00	; 0
    3614:	21 f0       	breq	.+8      	; 0x361e <convert_string_to_byte+0x2a>
    3616:	8b 81       	ldd	r24, Y+3	; 0x03
    3618:	9c 81       	ldd	r25, Y+4	; 0x04
    361a:	00 97       	sbiw	r24, 0x00	; 0
    361c:	11 f4       	brne	.+4      	; 0x3622 <convert_string_to_byte+0x2e>
	{
		ret = E_NOT_OK;
    361e:	1a 82       	std	Y+2, r1	; 0x02
    3620:	31 c0       	rjmp	.+98     	; 0x3684 <convert_string_to_byte+0x90>
	}
	else
	{
		*value=0;
    3622:	eb 81       	ldd	r30, Y+3	; 0x03
    3624:	fc 81       	ldd	r31, Y+4	; 0x04
    3626:	10 82       	st	Z, r1
	    for (uint8 i = 0; str[i] != '\0'; i++) {
    3628:	19 82       	std	Y+1, r1	; 0x01
    362a:	21 c0       	rjmp	.+66     	; 0x366e <convert_string_to_byte+0x7a>
	        *value = *value* 10 + (str[i] - 48);
    362c:	eb 81       	ldd	r30, Y+3	; 0x03
    362e:	fc 81       	ldd	r31, Y+4	; 0x04
    3630:	80 81       	ld	r24, Z
    3632:	88 2f       	mov	r24, r24
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	9c 01       	movw	r18, r24
    3638:	22 0f       	add	r18, r18
    363a:	33 1f       	adc	r19, r19
    363c:	c9 01       	movw	r24, r18
    363e:	88 0f       	add	r24, r24
    3640:	99 1f       	adc	r25, r25
    3642:	88 0f       	add	r24, r24
    3644:	99 1f       	adc	r25, r25
    3646:	82 0f       	add	r24, r18
    3648:	93 1f       	adc	r25, r19
    364a:	48 2f       	mov	r20, r24
    364c:	89 81       	ldd	r24, Y+1	; 0x01
    364e:	28 2f       	mov	r18, r24
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	8d 81       	ldd	r24, Y+5	; 0x05
    3654:	9e 81       	ldd	r25, Y+6	; 0x06
    3656:	fc 01       	movw	r30, r24
    3658:	e2 0f       	add	r30, r18
    365a:	f3 1f       	adc	r31, r19
    365c:	80 81       	ld	r24, Z
    365e:	84 0f       	add	r24, r20
    3660:	80 53       	subi	r24, 0x30	; 48
    3662:	eb 81       	ldd	r30, Y+3	; 0x03
    3664:	fc 81       	ldd	r31, Y+4	; 0x04
    3666:	80 83       	st	Z, r24
		ret = E_NOT_OK;
	}
	else
	{
		*value=0;
	    for (uint8 i = 0; str[i] != '\0'; i++) {
    3668:	89 81       	ldd	r24, Y+1	; 0x01
    366a:	8f 5f       	subi	r24, 0xFF	; 255
    366c:	89 83       	std	Y+1, r24	; 0x01
    366e:	89 81       	ldd	r24, Y+1	; 0x01
    3670:	28 2f       	mov	r18, r24
    3672:	30 e0       	ldi	r19, 0x00	; 0
    3674:	8d 81       	ldd	r24, Y+5	; 0x05
    3676:	9e 81       	ldd	r25, Y+6	; 0x06
    3678:	fc 01       	movw	r30, r24
    367a:	e2 0f       	add	r30, r18
    367c:	f3 1f       	adc	r31, r19
    367e:	80 81       	ld	r24, Z
    3680:	88 23       	and	r24, r24
    3682:	a1 f6       	brne	.-88     	; 0x362c <convert_string_to_byte+0x38>
	        *value = *value* 10 + (str[i] - 48);
	    }
	}
	return ret;
    3684:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3686:	26 96       	adiw	r28, 0x06	; 6
    3688:	0f b6       	in	r0, 0x3f	; 63
    368a:	f8 94       	cli
    368c:	de bf       	out	0x3e, r29	; 62
    368e:	0f be       	out	0x3f, r0	; 63
    3690:	cd bf       	out	0x3d, r28	; 61
    3692:	cf 91       	pop	r28
    3694:	df 91       	pop	r29
    3696:	08 95       	ret

00003698 <convert_short_to_string>:


STD_ReturnStatus convert_short_to_string(uint16 value,uint8 *str)
{
    3698:	df 93       	push	r29
    369a:	cf 93       	push	r28
    369c:	00 d0       	rcall	.+0      	; 0x369e <convert_short_to_string+0x6>
    369e:	00 d0       	rcall	.+0      	; 0x36a0 <convert_short_to_string+0x8>
    36a0:	0f 92       	push	r0
    36a2:	cd b7       	in	r28, 0x3d	; 61
    36a4:	de b7       	in	r29, 0x3e	; 62
    36a6:	9b 83       	std	Y+3, r25	; 0x03
    36a8:	8a 83       	std	Y+2, r24	; 0x02
    36aa:	7d 83       	std	Y+5, r23	; 0x05
    36ac:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_OK;
    36ae:	81 e0       	ldi	r24, 0x01	; 1
    36b0:	89 83       	std	Y+1, r24	; 0x01
	if(str==NULL)
    36b2:	8c 81       	ldd	r24, Y+4	; 0x04
    36b4:	9d 81       	ldd	r25, Y+5	; 0x05
    36b6:	00 97       	sbiw	r24, 0x00	; 0
    36b8:	11 f4       	brne	.+4      	; 0x36be <convert_short_to_string+0x26>
	{
		ret = E_NOT_OK;
    36ba:	19 82       	std	Y+1, r1	; 0x01
    36bc:	24 c0       	rjmp	.+72     	; 0x3706 <convert_short_to_string+0x6e>
	}
	else
	{
		memset(str,'\n',6);
    36be:	8c 81       	ldd	r24, Y+4	; 0x04
    36c0:	9d 81       	ldd	r25, Y+5	; 0x05
    36c2:	6a e0       	ldi	r22, 0x0A	; 10
    36c4:	70 e0       	ldi	r23, 0x00	; 0
    36c6:	46 e0       	ldi	r20, 0x06	; 6
    36c8:	50 e0       	ldi	r21, 0x00	; 0
    36ca:	0e 94 2c 21 	call	0x4258	; 0x4258 <memset>
		sprintf(str,"%i",value);
    36ce:	00 d0       	rcall	.+0      	; 0x36d0 <convert_short_to_string+0x38>
    36d0:	00 d0       	rcall	.+0      	; 0x36d2 <convert_short_to_string+0x3a>
    36d2:	00 d0       	rcall	.+0      	; 0x36d4 <convert_short_to_string+0x3c>
    36d4:	ed b7       	in	r30, 0x3d	; 61
    36d6:	fe b7       	in	r31, 0x3e	; 62
    36d8:	31 96       	adiw	r30, 0x01	; 1
    36da:	8c 81       	ldd	r24, Y+4	; 0x04
    36dc:	9d 81       	ldd	r25, Y+5	; 0x05
    36de:	91 83       	std	Z+1, r25	; 0x01
    36e0:	80 83       	st	Z, r24
    36e2:	80 e6       	ldi	r24, 0x60	; 96
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	93 83       	std	Z+3, r25	; 0x03
    36e8:	82 83       	std	Z+2, r24	; 0x02
    36ea:	8a 81       	ldd	r24, Y+2	; 0x02
    36ec:	9b 81       	ldd	r25, Y+3	; 0x03
    36ee:	95 83       	std	Z+5, r25	; 0x05
    36f0:	84 83       	std	Z+4, r24	; 0x04
    36f2:	0e 94 33 21 	call	0x4266	; 0x4266 <sprintf>
    36f6:	8d b7       	in	r24, 0x3d	; 61
    36f8:	9e b7       	in	r25, 0x3e	; 62
    36fa:	06 96       	adiw	r24, 0x06	; 6
    36fc:	0f b6       	in	r0, 0x3f	; 63
    36fe:	f8 94       	cli
    3700:	9e bf       	out	0x3e, r25	; 62
    3702:	0f be       	out	0x3f, r0	; 63
    3704:	8d bf       	out	0x3d, r24	; 61
	}
	return ret;
    3706:	89 81       	ldd	r24, Y+1	; 0x01
}
    3708:	0f 90       	pop	r0
    370a:	0f 90       	pop	r0
    370c:	0f 90       	pop	r0
    370e:	0f 90       	pop	r0
    3710:	0f 90       	pop	r0
    3712:	cf 91       	pop	r28
    3714:	df 91       	pop	r29
    3716:	08 95       	ret

00003718 <convert_int_to_string>:
STD_ReturnStatus convert_int_to_string(uint32 value,uint8 *str)
{
    3718:	df 93       	push	r29
    371a:	cf 93       	push	r28
    371c:	00 d0       	rcall	.+0      	; 0x371e <convert_int_to_string+0x6>
    371e:	00 d0       	rcall	.+0      	; 0x3720 <convert_int_to_string+0x8>
    3720:	0f 92       	push	r0
    3722:	cd b7       	in	r28, 0x3d	; 61
    3724:	de b7       	in	r29, 0x3e	; 62
    3726:	9b 83       	std	Y+3, r25	; 0x03
    3728:	8a 83       	std	Y+2, r24	; 0x02
    372a:	7d 83       	std	Y+5, r23	; 0x05
    372c:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_OK;
    372e:	81 e0       	ldi	r24, 0x01	; 1
    3730:	89 83       	std	Y+1, r24	; 0x01
	if(str==NULL)
    3732:	8c 81       	ldd	r24, Y+4	; 0x04
    3734:	9d 81       	ldd	r25, Y+5	; 0x05
    3736:	00 97       	sbiw	r24, 0x00	; 0
    3738:	11 f4       	brne	.+4      	; 0x373e <convert_int_to_string+0x26>
	{
		ret = E_NOT_OK;
    373a:	19 82       	std	Y+1, r1	; 0x01
    373c:	24 c0       	rjmp	.+72     	; 0x3786 <convert_int_to_string+0x6e>
	}
	else
	{
		memset(str,'\n',11);
    373e:	8c 81       	ldd	r24, Y+4	; 0x04
    3740:	9d 81       	ldd	r25, Y+5	; 0x05
    3742:	6a e0       	ldi	r22, 0x0A	; 10
    3744:	70 e0       	ldi	r23, 0x00	; 0
    3746:	4b e0       	ldi	r20, 0x0B	; 11
    3748:	50 e0       	ldi	r21, 0x00	; 0
    374a:	0e 94 2c 21 	call	0x4258	; 0x4258 <memset>
		sprintf(str,"%i",value);
    374e:	00 d0       	rcall	.+0      	; 0x3750 <convert_int_to_string+0x38>
    3750:	00 d0       	rcall	.+0      	; 0x3752 <convert_int_to_string+0x3a>
    3752:	00 d0       	rcall	.+0      	; 0x3754 <convert_int_to_string+0x3c>
    3754:	ed b7       	in	r30, 0x3d	; 61
    3756:	fe b7       	in	r31, 0x3e	; 62
    3758:	31 96       	adiw	r30, 0x01	; 1
    375a:	8c 81       	ldd	r24, Y+4	; 0x04
    375c:	9d 81       	ldd	r25, Y+5	; 0x05
    375e:	91 83       	std	Z+1, r25	; 0x01
    3760:	80 83       	st	Z, r24
    3762:	80 e6       	ldi	r24, 0x60	; 96
    3764:	90 e0       	ldi	r25, 0x00	; 0
    3766:	93 83       	std	Z+3, r25	; 0x03
    3768:	82 83       	std	Z+2, r24	; 0x02
    376a:	8a 81       	ldd	r24, Y+2	; 0x02
    376c:	9b 81       	ldd	r25, Y+3	; 0x03
    376e:	95 83       	std	Z+5, r25	; 0x05
    3770:	84 83       	std	Z+4, r24	; 0x04
    3772:	0e 94 33 21 	call	0x4266	; 0x4266 <sprintf>
    3776:	8d b7       	in	r24, 0x3d	; 61
    3778:	9e b7       	in	r25, 0x3e	; 62
    377a:	06 96       	adiw	r24, 0x06	; 6
    377c:	0f b6       	in	r0, 0x3f	; 63
    377e:	f8 94       	cli
    3780:	9e bf       	out	0x3e, r25	; 62
    3782:	0f be       	out	0x3f, r0	; 63
    3784:	8d bf       	out	0x3d, r24	; 61
	}
	return ret;
    3786:	89 81       	ldd	r24, Y+1	; 0x01
}
    3788:	0f 90       	pop	r0
    378a:	0f 90       	pop	r0
    378c:	0f 90       	pop	r0
    378e:	0f 90       	pop	r0
    3790:	0f 90       	pop	r0
    3792:	cf 91       	pop	r28
    3794:	df 91       	pop	r29
    3796:	08 95       	ret

00003798 <lcd_send_4bits>:

static STD_ReturnStatus lcd_send_4bits(const chr_lcd_4bit_t *lcd,uint8 _data_command)
{
    3798:	df 93       	push	r29
    379a:	cf 93       	push	r28
    379c:	00 d0       	rcall	.+0      	; 0x379e <lcd_send_4bits+0x6>
    379e:	00 d0       	rcall	.+0      	; 0x37a0 <lcd_send_4bits+0x8>
    37a0:	cd b7       	in	r28, 0x3d	; 61
    37a2:	de b7       	in	r29, 0x3e	; 62
    37a4:	9b 83       	std	Y+3, r25	; 0x03
    37a6:	8a 83       	std	Y+2, r24	; 0x02
    37a8:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_OK;
    37aa:	81 e0       	ldi	r24, 0x01	; 1
    37ac:	89 83       	std	Y+1, r24	; 0x01
	ret = gpio_pin_write_logic(&(lcd->lcd_data[0]), (_data_command >> 0) & (uint8)0x01);
    37ae:	8a 81       	ldd	r24, Y+2	; 0x02
    37b0:	9b 81       	ldd	r25, Y+3	; 0x03
    37b2:	9c 01       	movw	r18, r24
    37b4:	2e 5f       	subi	r18, 0xFE	; 254
    37b6:	3f 4f       	sbci	r19, 0xFF	; 255
    37b8:	8c 81       	ldd	r24, Y+4	; 0x04
    37ba:	48 2f       	mov	r20, r24
    37bc:	41 70       	andi	r20, 0x01	; 1
    37be:	c9 01       	movw	r24, r18
    37c0:	64 2f       	mov	r22, r20
    37c2:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
    37c6:	89 83       	std	Y+1, r24	; 0x01
	ret = gpio_pin_write_logic(&(lcd->lcd_data[1]), (_data_command >> 1) & (uint8)0x01);
    37c8:	8a 81       	ldd	r24, Y+2	; 0x02
    37ca:	9b 81       	ldd	r25, Y+3	; 0x03
    37cc:	9c 01       	movw	r18, r24
    37ce:	2d 5f       	subi	r18, 0xFD	; 253
    37d0:	3f 4f       	sbci	r19, 0xFF	; 255
    37d2:	8c 81       	ldd	r24, Y+4	; 0x04
    37d4:	86 95       	lsr	r24
    37d6:	48 2f       	mov	r20, r24
    37d8:	41 70       	andi	r20, 0x01	; 1
    37da:	c9 01       	movw	r24, r18
    37dc:	64 2f       	mov	r22, r20
    37de:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
    37e2:	89 83       	std	Y+1, r24	; 0x01
	ret = gpio_pin_write_logic(&(lcd->lcd_data[2]), (_data_command >> 2) & (uint8)0x01);
    37e4:	8a 81       	ldd	r24, Y+2	; 0x02
    37e6:	9b 81       	ldd	r25, Y+3	; 0x03
    37e8:	9c 01       	movw	r18, r24
    37ea:	2c 5f       	subi	r18, 0xFC	; 252
    37ec:	3f 4f       	sbci	r19, 0xFF	; 255
    37ee:	8c 81       	ldd	r24, Y+4	; 0x04
    37f0:	86 95       	lsr	r24
    37f2:	86 95       	lsr	r24
    37f4:	48 2f       	mov	r20, r24
    37f6:	41 70       	andi	r20, 0x01	; 1
    37f8:	c9 01       	movw	r24, r18
    37fa:	64 2f       	mov	r22, r20
    37fc:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
    3800:	89 83       	std	Y+1, r24	; 0x01
	ret = gpio_pin_write_logic(&(lcd->lcd_data[3]), (_data_command >> 3) & (uint8)0x01);
    3802:	8a 81       	ldd	r24, Y+2	; 0x02
    3804:	9b 81       	ldd	r25, Y+3	; 0x03
    3806:	9c 01       	movw	r18, r24
    3808:	2b 5f       	subi	r18, 0xFB	; 251
    380a:	3f 4f       	sbci	r19, 0xFF	; 255
    380c:	8c 81       	ldd	r24, Y+4	; 0x04
    380e:	86 95       	lsr	r24
    3810:	86 95       	lsr	r24
    3812:	86 95       	lsr	r24
    3814:	48 2f       	mov	r20, r24
    3816:	41 70       	andi	r20, 0x01	; 1
    3818:	c9 01       	movw	r24, r18
    381a:	64 2f       	mov	r22, r20
    381c:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
    3820:	89 83       	std	Y+1, r24	; 0x01
	return ret;
    3822:	89 81       	ldd	r24, Y+1	; 0x01
}
    3824:	0f 90       	pop	r0
    3826:	0f 90       	pop	r0
    3828:	0f 90       	pop	r0
    382a:	0f 90       	pop	r0
    382c:	cf 91       	pop	r28
    382e:	df 91       	pop	r29
    3830:	08 95       	ret

00003832 <lcd_4bit_send_enable>:

static STD_ReturnStatus lcd_4bit_send_enable(const chr_lcd_4bit_t *lcd)
{
    3832:	df 93       	push	r29
    3834:	cf 93       	push	r28
    3836:	cd b7       	in	r28, 0x3d	; 61
    3838:	de b7       	in	r29, 0x3e	; 62
    383a:	61 97       	sbiw	r28, 0x11	; 17
    383c:	0f b6       	in	r0, 0x3f	; 63
    383e:	f8 94       	cli
    3840:	de bf       	out	0x3e, r29	; 62
    3842:	0f be       	out	0x3f, r0	; 63
    3844:	cd bf       	out	0x3d, r28	; 61
    3846:	99 8b       	std	Y+17, r25	; 0x11
    3848:	88 8b       	std	Y+16, r24	; 0x10
	STD_ReturnStatus ret = E_OK;
    384a:	81 e0       	ldi	r24, 0x01	; 1
    384c:	8f 87       	std	Y+15, r24	; 0x0f
	ret = gpio_pin_write_logic(&(lcd->lcd_en),GPIO_HIGH);
    384e:	88 89       	ldd	r24, Y+16	; 0x10
    3850:	99 89       	ldd	r25, Y+17	; 0x11
    3852:	01 96       	adiw	r24, 0x01	; 1
    3854:	61 e0       	ldi	r22, 0x01	; 1
    3856:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
    385a:	8f 87       	std	Y+15, r24	; 0x0f
    385c:	80 e0       	ldi	r24, 0x00	; 0
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	a0 ea       	ldi	r26, 0xA0	; 160
    3862:	b0 e4       	ldi	r27, 0x40	; 64
    3864:	8b 87       	std	Y+11, r24	; 0x0b
    3866:	9c 87       	std	Y+12, r25	; 0x0c
    3868:	ad 87       	std	Y+13, r26	; 0x0d
    386a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    386c:	6b 85       	ldd	r22, Y+11	; 0x0b
    386e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3870:	8d 85       	ldd	r24, Y+13	; 0x0d
    3872:	9e 85       	ldd	r25, Y+14	; 0x0e
    3874:	20 e0       	ldi	r18, 0x00	; 0
    3876:	30 e0       	ldi	r19, 0x00	; 0
    3878:	4a ef       	ldi	r20, 0xFA	; 250
    387a:	54 e4       	ldi	r21, 0x44	; 68
    387c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3880:	dc 01       	movw	r26, r24
    3882:	cb 01       	movw	r24, r22
    3884:	8f 83       	std	Y+7, r24	; 0x07
    3886:	98 87       	std	Y+8, r25	; 0x08
    3888:	a9 87       	std	Y+9, r26	; 0x09
    388a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    388c:	6f 81       	ldd	r22, Y+7	; 0x07
    388e:	78 85       	ldd	r23, Y+8	; 0x08
    3890:	89 85       	ldd	r24, Y+9	; 0x09
    3892:	9a 85       	ldd	r25, Y+10	; 0x0a
    3894:	20 e0       	ldi	r18, 0x00	; 0
    3896:	30 e0       	ldi	r19, 0x00	; 0
    3898:	40 e8       	ldi	r20, 0x80	; 128
    389a:	5f e3       	ldi	r21, 0x3F	; 63
    389c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38a0:	88 23       	and	r24, r24
    38a2:	2c f4       	brge	.+10     	; 0x38ae <lcd_4bit_send_enable+0x7c>
		__ticks = 1;
    38a4:	81 e0       	ldi	r24, 0x01	; 1
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	9e 83       	std	Y+6, r25	; 0x06
    38aa:	8d 83       	std	Y+5, r24	; 0x05
    38ac:	3f c0       	rjmp	.+126    	; 0x392c <lcd_4bit_send_enable+0xfa>
	else if (__tmp > 65535)
    38ae:	6f 81       	ldd	r22, Y+7	; 0x07
    38b0:	78 85       	ldd	r23, Y+8	; 0x08
    38b2:	89 85       	ldd	r24, Y+9	; 0x09
    38b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    38b6:	20 e0       	ldi	r18, 0x00	; 0
    38b8:	3f ef       	ldi	r19, 0xFF	; 255
    38ba:	4f e7       	ldi	r20, 0x7F	; 127
    38bc:	57 e4       	ldi	r21, 0x47	; 71
    38be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38c2:	18 16       	cp	r1, r24
    38c4:	4c f5       	brge	.+82     	; 0x3918 <lcd_4bit_send_enable+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    38c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    38ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    38cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    38ce:	20 e0       	ldi	r18, 0x00	; 0
    38d0:	30 e0       	ldi	r19, 0x00	; 0
    38d2:	40 e2       	ldi	r20, 0x20	; 32
    38d4:	51 e4       	ldi	r21, 0x41	; 65
    38d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38da:	dc 01       	movw	r26, r24
    38dc:	cb 01       	movw	r24, r22
    38de:	bc 01       	movw	r22, r24
    38e0:	cd 01       	movw	r24, r26
    38e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e6:	dc 01       	movw	r26, r24
    38e8:	cb 01       	movw	r24, r22
    38ea:	9e 83       	std	Y+6, r25	; 0x06
    38ec:	8d 83       	std	Y+5, r24	; 0x05
    38ee:	0f c0       	rjmp	.+30     	; 0x390e <lcd_4bit_send_enable+0xdc>
    38f0:	88 ec       	ldi	r24, 0xC8	; 200
    38f2:	90 e0       	ldi	r25, 0x00	; 0
    38f4:	9c 83       	std	Y+4, r25	; 0x04
    38f6:	8b 83       	std	Y+3, r24	; 0x03
    38f8:	8b 81       	ldd	r24, Y+3	; 0x03
    38fa:	9c 81       	ldd	r25, Y+4	; 0x04
    38fc:	01 97       	sbiw	r24, 0x01	; 1
    38fe:	f1 f7       	brne	.-4      	; 0x38fc <lcd_4bit_send_enable+0xca>
    3900:	9c 83       	std	Y+4, r25	; 0x04
    3902:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3904:	8d 81       	ldd	r24, Y+5	; 0x05
    3906:	9e 81       	ldd	r25, Y+6	; 0x06
    3908:	01 97       	sbiw	r24, 0x01	; 1
    390a:	9e 83       	std	Y+6, r25	; 0x06
    390c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    390e:	8d 81       	ldd	r24, Y+5	; 0x05
    3910:	9e 81       	ldd	r25, Y+6	; 0x06
    3912:	00 97       	sbiw	r24, 0x00	; 0
    3914:	69 f7       	brne	.-38     	; 0x38f0 <lcd_4bit_send_enable+0xbe>
    3916:	14 c0       	rjmp	.+40     	; 0x3940 <lcd_4bit_send_enable+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3918:	6f 81       	ldd	r22, Y+7	; 0x07
    391a:	78 85       	ldd	r23, Y+8	; 0x08
    391c:	89 85       	ldd	r24, Y+9	; 0x09
    391e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3920:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3924:	dc 01       	movw	r26, r24
    3926:	cb 01       	movw	r24, r22
    3928:	9e 83       	std	Y+6, r25	; 0x06
    392a:	8d 83       	std	Y+5, r24	; 0x05
    392c:	8d 81       	ldd	r24, Y+5	; 0x05
    392e:	9e 81       	ldd	r25, Y+6	; 0x06
    3930:	9a 83       	std	Y+2, r25	; 0x02
    3932:	89 83       	std	Y+1, r24	; 0x01
    3934:	89 81       	ldd	r24, Y+1	; 0x01
    3936:	9a 81       	ldd	r25, Y+2	; 0x02
    3938:	01 97       	sbiw	r24, 0x01	; 1
    393a:	f1 f7       	brne	.-4      	; 0x3938 <lcd_4bit_send_enable+0x106>
    393c:	9a 83       	std	Y+2, r25	; 0x02
    393e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	ret = gpio_pin_write_logic(&(lcd->lcd_en),GPIO_LOW);
    3940:	88 89       	ldd	r24, Y+16	; 0x10
    3942:	99 89       	ldd	r25, Y+17	; 0x11
    3944:	01 96       	adiw	r24, 0x01	; 1
    3946:	60 e0       	ldi	r22, 0x00	; 0
    3948:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
    394c:	8f 87       	std	Y+15, r24	; 0x0f
	return ret;
    394e:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3950:	61 96       	adiw	r28, 0x11	; 17
    3952:	0f b6       	in	r0, 0x3f	; 63
    3954:	f8 94       	cli
    3956:	de bf       	out	0x3e, r29	; 62
    3958:	0f be       	out	0x3f, r0	; 63
    395a:	cd bf       	out	0x3d, r28	; 61
    395c:	cf 91       	pop	r28
    395e:	df 91       	pop	r29
    3960:	08 95       	ret

00003962 <lcd_8bit_send_enable>:


static STD_ReturnStatus lcd_8bit_send_enable(const chr_lcd_8bit_t *lcd)
{
    3962:	df 93       	push	r29
    3964:	cf 93       	push	r28
    3966:	cd b7       	in	r28, 0x3d	; 61
    3968:	de b7       	in	r29, 0x3e	; 62
    396a:	61 97       	sbiw	r28, 0x11	; 17
    396c:	0f b6       	in	r0, 0x3f	; 63
    396e:	f8 94       	cli
    3970:	de bf       	out	0x3e, r29	; 62
    3972:	0f be       	out	0x3f, r0	; 63
    3974:	cd bf       	out	0x3d, r28	; 61
    3976:	99 8b       	std	Y+17, r25	; 0x11
    3978:	88 8b       	std	Y+16, r24	; 0x10
	STD_ReturnStatus ret = E_OK;
    397a:	81 e0       	ldi	r24, 0x01	; 1
    397c:	8f 87       	std	Y+15, r24	; 0x0f
	ret = gpio_pin_write_logic(&(lcd->lcd_en),GPIO_HIGH);
    397e:	88 89       	ldd	r24, Y+16	; 0x10
    3980:	99 89       	ldd	r25, Y+17	; 0x11
    3982:	01 96       	adiw	r24, 0x01	; 1
    3984:	61 e0       	ldi	r22, 0x01	; 1
    3986:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
    398a:	8f 87       	std	Y+15, r24	; 0x0f
    398c:	80 e0       	ldi	r24, 0x00	; 0
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	a0 ea       	ldi	r26, 0xA0	; 160
    3992:	b0 e4       	ldi	r27, 0x40	; 64
    3994:	8b 87       	std	Y+11, r24	; 0x0b
    3996:	9c 87       	std	Y+12, r25	; 0x0c
    3998:	ad 87       	std	Y+13, r26	; 0x0d
    399a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    399c:	6b 85       	ldd	r22, Y+11	; 0x0b
    399e:	7c 85       	ldd	r23, Y+12	; 0x0c
    39a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    39a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    39a4:	20 e0       	ldi	r18, 0x00	; 0
    39a6:	30 e0       	ldi	r19, 0x00	; 0
    39a8:	4a ef       	ldi	r20, 0xFA	; 250
    39aa:	54 e4       	ldi	r21, 0x44	; 68
    39ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39b0:	dc 01       	movw	r26, r24
    39b2:	cb 01       	movw	r24, r22
    39b4:	8f 83       	std	Y+7, r24	; 0x07
    39b6:	98 87       	std	Y+8, r25	; 0x08
    39b8:	a9 87       	std	Y+9, r26	; 0x09
    39ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39bc:	6f 81       	ldd	r22, Y+7	; 0x07
    39be:	78 85       	ldd	r23, Y+8	; 0x08
    39c0:	89 85       	ldd	r24, Y+9	; 0x09
    39c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    39c4:	20 e0       	ldi	r18, 0x00	; 0
    39c6:	30 e0       	ldi	r19, 0x00	; 0
    39c8:	40 e8       	ldi	r20, 0x80	; 128
    39ca:	5f e3       	ldi	r21, 0x3F	; 63
    39cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39d0:	88 23       	and	r24, r24
    39d2:	2c f4       	brge	.+10     	; 0x39de <lcd_8bit_send_enable+0x7c>
		__ticks = 1;
    39d4:	81 e0       	ldi	r24, 0x01	; 1
    39d6:	90 e0       	ldi	r25, 0x00	; 0
    39d8:	9e 83       	std	Y+6, r25	; 0x06
    39da:	8d 83       	std	Y+5, r24	; 0x05
    39dc:	3f c0       	rjmp	.+126    	; 0x3a5c <lcd_8bit_send_enable+0xfa>
	else if (__tmp > 65535)
    39de:	6f 81       	ldd	r22, Y+7	; 0x07
    39e0:	78 85       	ldd	r23, Y+8	; 0x08
    39e2:	89 85       	ldd	r24, Y+9	; 0x09
    39e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    39e6:	20 e0       	ldi	r18, 0x00	; 0
    39e8:	3f ef       	ldi	r19, 0xFF	; 255
    39ea:	4f e7       	ldi	r20, 0x7F	; 127
    39ec:	57 e4       	ldi	r21, 0x47	; 71
    39ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39f2:	18 16       	cp	r1, r24
    39f4:	4c f5       	brge	.+82     	; 0x3a48 <lcd_8bit_send_enable+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    39f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    39fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    39fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    39fe:	20 e0       	ldi	r18, 0x00	; 0
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	40 e2       	ldi	r20, 0x20	; 32
    3a04:	51 e4       	ldi	r21, 0x41	; 65
    3a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a0a:	dc 01       	movw	r26, r24
    3a0c:	cb 01       	movw	r24, r22
    3a0e:	bc 01       	movw	r22, r24
    3a10:	cd 01       	movw	r24, r26
    3a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a16:	dc 01       	movw	r26, r24
    3a18:	cb 01       	movw	r24, r22
    3a1a:	9e 83       	std	Y+6, r25	; 0x06
    3a1c:	8d 83       	std	Y+5, r24	; 0x05
    3a1e:	0f c0       	rjmp	.+30     	; 0x3a3e <lcd_8bit_send_enable+0xdc>
    3a20:	88 ec       	ldi	r24, 0xC8	; 200
    3a22:	90 e0       	ldi	r25, 0x00	; 0
    3a24:	9c 83       	std	Y+4, r25	; 0x04
    3a26:	8b 83       	std	Y+3, r24	; 0x03
    3a28:	8b 81       	ldd	r24, Y+3	; 0x03
    3a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a2c:	01 97       	sbiw	r24, 0x01	; 1
    3a2e:	f1 f7       	brne	.-4      	; 0x3a2c <lcd_8bit_send_enable+0xca>
    3a30:	9c 83       	std	Y+4, r25	; 0x04
    3a32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a34:	8d 81       	ldd	r24, Y+5	; 0x05
    3a36:	9e 81       	ldd	r25, Y+6	; 0x06
    3a38:	01 97       	sbiw	r24, 0x01	; 1
    3a3a:	9e 83       	std	Y+6, r25	; 0x06
    3a3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a40:	9e 81       	ldd	r25, Y+6	; 0x06
    3a42:	00 97       	sbiw	r24, 0x00	; 0
    3a44:	69 f7       	brne	.-38     	; 0x3a20 <lcd_8bit_send_enable+0xbe>
    3a46:	14 c0       	rjmp	.+40     	; 0x3a70 <lcd_8bit_send_enable+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a48:	6f 81       	ldd	r22, Y+7	; 0x07
    3a4a:	78 85       	ldd	r23, Y+8	; 0x08
    3a4c:	89 85       	ldd	r24, Y+9	; 0x09
    3a4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a54:	dc 01       	movw	r26, r24
    3a56:	cb 01       	movw	r24, r22
    3a58:	9e 83       	std	Y+6, r25	; 0x06
    3a5a:	8d 83       	std	Y+5, r24	; 0x05
    3a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a60:	9a 83       	std	Y+2, r25	; 0x02
    3a62:	89 83       	std	Y+1, r24	; 0x01
    3a64:	89 81       	ldd	r24, Y+1	; 0x01
    3a66:	9a 81       	ldd	r25, Y+2	; 0x02
    3a68:	01 97       	sbiw	r24, 0x01	; 1
    3a6a:	f1 f7       	brne	.-4      	; 0x3a68 <lcd_8bit_send_enable+0x106>
    3a6c:	9a 83       	std	Y+2, r25	; 0x02
    3a6e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	ret = gpio_pin_write_logic(&(lcd->lcd_en),GPIO_LOW);
    3a70:	88 89       	ldd	r24, Y+16	; 0x10
    3a72:	99 89       	ldd	r25, Y+17	; 0x11
    3a74:	01 96       	adiw	r24, 0x01	; 1
    3a76:	60 e0       	ldi	r22, 0x00	; 0
    3a78:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
    3a7c:	8f 87       	std	Y+15, r24	; 0x0f
	return ret;
    3a7e:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3a80:	61 96       	adiw	r28, 0x11	; 17
    3a82:	0f b6       	in	r0, 0x3f	; 63
    3a84:	f8 94       	cli
    3a86:	de bf       	out	0x3e, r29	; 62
    3a88:	0f be       	out	0x3f, r0	; 63
    3a8a:	cd bf       	out	0x3d, r28	; 61
    3a8c:	cf 91       	pop	r28
    3a8e:	df 91       	pop	r29
    3a90:	08 95       	ret

00003a92 <lcd_8bit_set_cursor>:

static STD_ReturnStatus lcd_8bit_set_cursor(const chr_lcd_8bit_t *lcd,uint8 row,uint8 column)
{
    3a92:	df 93       	push	r29
    3a94:	cf 93       	push	r28
    3a96:	cd b7       	in	r28, 0x3d	; 61
    3a98:	de b7       	in	r29, 0x3e	; 62
    3a9a:	27 97       	sbiw	r28, 0x07	; 7
    3a9c:	0f b6       	in	r0, 0x3f	; 63
    3a9e:	f8 94       	cli
    3aa0:	de bf       	out	0x3e, r29	; 62
    3aa2:	0f be       	out	0x3f, r0	; 63
    3aa4:	cd bf       	out	0x3d, r28	; 61
    3aa6:	9b 83       	std	Y+3, r25	; 0x03
    3aa8:	8a 83       	std	Y+2, r24	; 0x02
    3aaa:	6c 83       	std	Y+4, r22	; 0x04
    3aac:	4d 83       	std	Y+5, r20	; 0x05
	STD_ReturnStatus ret = E_OK;
    3aae:	81 e0       	ldi	r24, 0x01	; 1
    3ab0:	89 83       	std	Y+1, r24	; 0x01
	column--;
    3ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ab4:	81 50       	subi	r24, 0x01	; 1
    3ab6:	8d 83       	std	Y+5, r24	; 0x05
	switch(row)
    3ab8:	8c 81       	ldd	r24, Y+4	; 0x04
    3aba:	28 2f       	mov	r18, r24
    3abc:	30 e0       	ldi	r19, 0x00	; 0
    3abe:	3f 83       	std	Y+7, r19	; 0x07
    3ac0:	2e 83       	std	Y+6, r18	; 0x06
    3ac2:	8e 81       	ldd	r24, Y+6	; 0x06
    3ac4:	9f 81       	ldd	r25, Y+7	; 0x07
    3ac6:	81 30       	cpi	r24, 0x01	; 1
    3ac8:	91 05       	cpc	r25, r1
    3aca:	31 f0       	breq	.+12     	; 0x3ad8 <lcd_8bit_set_cursor+0x46>
    3acc:	2e 81       	ldd	r18, Y+6	; 0x06
    3ace:	3f 81       	ldd	r19, Y+7	; 0x07
    3ad0:	22 30       	cpi	r18, 0x02	; 2
    3ad2:	31 05       	cpc	r19, r1
    3ad4:	59 f0       	breq	.+22     	; 0x3aec <lcd_8bit_set_cursor+0x5a>
    3ad6:	13 c0       	rjmp	.+38     	; 0x3afe <lcd_8bit_set_cursor+0x6c>
	{
	case ROW1 : ret = lcd_8bit_send_command(lcd,0x80+column);break;
    3ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    3ada:	28 2f       	mov	r18, r24
    3adc:	20 58       	subi	r18, 0x80	; 128
    3ade:	8a 81       	ldd	r24, Y+2	; 0x02
    3ae0:	9b 81       	ldd	r25, Y+3	; 0x03
    3ae2:	62 2f       	mov	r22, r18
    3ae4:	0e 94 2c 19 	call	0x3258	; 0x3258 <lcd_8bit_send_command>
    3ae8:	89 83       	std	Y+1, r24	; 0x01
    3aea:	09 c0       	rjmp	.+18     	; 0x3afe <lcd_8bit_set_cursor+0x6c>
	case ROW2 : ret = lcd_8bit_send_command(lcd,0xC0+column);break;
    3aec:	8d 81       	ldd	r24, Y+5	; 0x05
    3aee:	28 2f       	mov	r18, r24
    3af0:	20 54       	subi	r18, 0x40	; 64
    3af2:	8a 81       	ldd	r24, Y+2	; 0x02
    3af4:	9b 81       	ldd	r25, Y+3	; 0x03
    3af6:	62 2f       	mov	r22, r18
    3af8:	0e 94 2c 19 	call	0x3258	; 0x3258 <lcd_8bit_send_command>
    3afc:	89 83       	std	Y+1, r24	; 0x01
	default : ;
	}
	return ret;
    3afe:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b00:	27 96       	adiw	r28, 0x07	; 7
    3b02:	0f b6       	in	r0, 0x3f	; 63
    3b04:	f8 94       	cli
    3b06:	de bf       	out	0x3e, r29	; 62
    3b08:	0f be       	out	0x3f, r0	; 63
    3b0a:	cd bf       	out	0x3d, r28	; 61
    3b0c:	cf 91       	pop	r28
    3b0e:	df 91       	pop	r29
    3b10:	08 95       	ret

00003b12 <lcd_4bit_set_cursor>:
static STD_ReturnStatus lcd_4bit_set_cursor(const chr_lcd_4bit_t *lcd,uint8 row,uint8 column)
{
    3b12:	df 93       	push	r29
    3b14:	cf 93       	push	r28
    3b16:	cd b7       	in	r28, 0x3d	; 61
    3b18:	de b7       	in	r29, 0x3e	; 62
    3b1a:	27 97       	sbiw	r28, 0x07	; 7
    3b1c:	0f b6       	in	r0, 0x3f	; 63
    3b1e:	f8 94       	cli
    3b20:	de bf       	out	0x3e, r29	; 62
    3b22:	0f be       	out	0x3f, r0	; 63
    3b24:	cd bf       	out	0x3d, r28	; 61
    3b26:	9b 83       	std	Y+3, r25	; 0x03
    3b28:	8a 83       	std	Y+2, r24	; 0x02
    3b2a:	6c 83       	std	Y+4, r22	; 0x04
    3b2c:	4d 83       	std	Y+5, r20	; 0x05
	STD_ReturnStatus ret = E_OK;
    3b2e:	81 e0       	ldi	r24, 0x01	; 1
    3b30:	89 83       	std	Y+1, r24	; 0x01
	column--;
    3b32:	8d 81       	ldd	r24, Y+5	; 0x05
    3b34:	81 50       	subi	r24, 0x01	; 1
    3b36:	8d 83       	std	Y+5, r24	; 0x05
	switch(row)
    3b38:	8c 81       	ldd	r24, Y+4	; 0x04
    3b3a:	28 2f       	mov	r18, r24
    3b3c:	30 e0       	ldi	r19, 0x00	; 0
    3b3e:	3f 83       	std	Y+7, r19	; 0x07
    3b40:	2e 83       	std	Y+6, r18	; 0x06
    3b42:	8e 81       	ldd	r24, Y+6	; 0x06
    3b44:	9f 81       	ldd	r25, Y+7	; 0x07
    3b46:	81 30       	cpi	r24, 0x01	; 1
    3b48:	91 05       	cpc	r25, r1
    3b4a:	31 f0       	breq	.+12     	; 0x3b58 <lcd_4bit_set_cursor+0x46>
    3b4c:	2e 81       	ldd	r18, Y+6	; 0x06
    3b4e:	3f 81       	ldd	r19, Y+7	; 0x07
    3b50:	22 30       	cpi	r18, 0x02	; 2
    3b52:	31 05       	cpc	r19, r1
    3b54:	59 f0       	breq	.+22     	; 0x3b6c <lcd_4bit_set_cursor+0x5a>
    3b56:	13 c0       	rjmp	.+38     	; 0x3b7e <lcd_4bit_set_cursor+0x6c>
	{
	case ROW1 : ret = lcd_4bit_send_command(lcd,0x80+column);break;
    3b58:	8d 81       	ldd	r24, Y+5	; 0x05
    3b5a:	28 2f       	mov	r18, r24
    3b5c:	20 58       	subi	r18, 0x80	; 128
    3b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b60:	9b 81       	ldd	r25, Y+3	; 0x03
    3b62:	62 2f       	mov	r22, r18
    3b64:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <lcd_4bit_send_command>
    3b68:	89 83       	std	Y+1, r24	; 0x01
    3b6a:	09 c0       	rjmp	.+18     	; 0x3b7e <lcd_4bit_set_cursor+0x6c>
	case ROW2 : ret = lcd_4bit_send_command(lcd,0xC0+column);break;
    3b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b6e:	28 2f       	mov	r18, r24
    3b70:	20 54       	subi	r18, 0x40	; 64
    3b72:	8a 81       	ldd	r24, Y+2	; 0x02
    3b74:	9b 81       	ldd	r25, Y+3	; 0x03
    3b76:	62 2f       	mov	r22, r18
    3b78:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <lcd_4bit_send_command>
    3b7c:	89 83       	std	Y+1, r24	; 0x01
	default : ;
	}
	return ret;
    3b7e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b80:	27 96       	adiw	r28, 0x07	; 7
    3b82:	0f b6       	in	r0, 0x3f	; 63
    3b84:	f8 94       	cli
    3b86:	de bf       	out	0x3e, r29	; 62
    3b88:	0f be       	out	0x3f, r0	; 63
    3b8a:	cd bf       	out	0x3d, r28	; 61
    3b8c:	cf 91       	pop	r28
    3b8e:	df 91       	pop	r29
    3b90:	08 95       	ret

00003b92 <keypad_initialize>:
 *
 * @param _keypad_obj
 * @return
 */
STD_ReturnStatus keypad_initialize(const keypad_t *_keypad_obj)
{
    3b92:	df 93       	push	r29
    3b94:	cf 93       	push	r28
    3b96:	00 d0       	rcall	.+0      	; 0x3b98 <keypad_initialize+0x6>
    3b98:	00 d0       	rcall	.+0      	; 0x3b9a <keypad_initialize+0x8>
    3b9a:	0f 92       	push	r0
    3b9c:	cd b7       	in	r28, 0x3d	; 61
    3b9e:	de b7       	in	r29, 0x3e	; 62
    3ba0:	9d 83       	std	Y+5, r25	; 0x05
    3ba2:	8c 83       	std	Y+4, r24	; 0x04
	STD_ReturnStatus ret = E_OK;
    3ba4:	81 e0       	ldi	r24, 0x01	; 1
    3ba6:	8b 83       	std	Y+3, r24	; 0x03
	uint8 rows_counter=ZERO_INIT,columns_counter=ZERO_INIT;
    3ba8:	1a 82       	std	Y+2, r1	; 0x02
    3baa:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==_keypad_obj)
    3bac:	8c 81       	ldd	r24, Y+4	; 0x04
    3bae:	9d 81       	ldd	r25, Y+5	; 0x05
    3bb0:	00 97       	sbiw	r24, 0x00	; 0
    3bb2:	11 f4       	brne	.+4      	; 0x3bb8 <keypad_initialize+0x26>
	{
		ret = E_NOT_OK;
    3bb4:	1b 82       	std	Y+3, r1	; 0x03
    3bb6:	27 c0       	rjmp	.+78     	; 0x3c06 <keypad_initialize+0x74>
	}
	else
	{
		for(rows_counter=ZERO_INIT;rows_counter<ECU_KEYPAD_ROWS;rows_counter++)
    3bb8:	1a 82       	std	Y+2, r1	; 0x02
    3bba:	0d c0       	rjmp	.+26     	; 0x3bd6 <keypad_initialize+0x44>
		{
			ret = gpio_pin_initialize(&(_keypad_obj->keypad_row_pins[rows_counter]));
    3bbc:	2c 81       	ldd	r18, Y+4	; 0x04
    3bbe:	3d 81       	ldd	r19, Y+5	; 0x05
    3bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    3bc2:	88 2f       	mov	r24, r24
    3bc4:	90 e0       	ldi	r25, 0x00	; 0
    3bc6:	82 0f       	add	r24, r18
    3bc8:	93 1f       	adc	r25, r19
    3bca:	0e 94 1a 10 	call	0x2034	; 0x2034 <gpio_pin_initialize>
    3bce:	8b 83       	std	Y+3, r24	; 0x03
	{
		ret = E_NOT_OK;
	}
	else
	{
		for(rows_counter=ZERO_INIT;rows_counter<ECU_KEYPAD_ROWS;rows_counter++)
    3bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    3bd2:	8f 5f       	subi	r24, 0xFF	; 255
    3bd4:	8a 83       	std	Y+2, r24	; 0x02
    3bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    3bd8:	84 30       	cpi	r24, 0x04	; 4
    3bda:	80 f3       	brcs	.-32     	; 0x3bbc <keypad_initialize+0x2a>
		{
			ret = gpio_pin_initialize(&(_keypad_obj->keypad_row_pins[rows_counter]));
		}

		for(columns_counter=ZERO_INIT;columns_counter<ECU_KEYPAD_COLUMNS;columns_counter++)
    3bdc:	19 82       	std	Y+1, r1	; 0x01
    3bde:	10 c0       	rjmp	.+32     	; 0x3c00 <keypad_initialize+0x6e>
		{
			ret = gpio_pin_direction_initialize(&(_keypad_obj->keypad_columns_pins[columns_counter]));
    3be0:	8c 81       	ldd	r24, Y+4	; 0x04
    3be2:	9d 81       	ldd	r25, Y+5	; 0x05
    3be4:	9c 01       	movw	r18, r24
    3be6:	2c 5f       	subi	r18, 0xFC	; 252
    3be8:	3f 4f       	sbci	r19, 0xFF	; 255
    3bea:	89 81       	ldd	r24, Y+1	; 0x01
    3bec:	88 2f       	mov	r24, r24
    3bee:	90 e0       	ldi	r25, 0x00	; 0
    3bf0:	82 0f       	add	r24, r18
    3bf2:	93 1f       	adc	r25, r19
    3bf4:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <gpio_pin_direction_initialize>
    3bf8:	8b 83       	std	Y+3, r24	; 0x03
		for(rows_counter=ZERO_INIT;rows_counter<ECU_KEYPAD_ROWS;rows_counter++)
		{
			ret = gpio_pin_initialize(&(_keypad_obj->keypad_row_pins[rows_counter]));
		}

		for(columns_counter=ZERO_INIT;columns_counter<ECU_KEYPAD_COLUMNS;columns_counter++)
    3bfa:	89 81       	ldd	r24, Y+1	; 0x01
    3bfc:	8f 5f       	subi	r24, 0xFF	; 255
    3bfe:	89 83       	std	Y+1, r24	; 0x01
    3c00:	89 81       	ldd	r24, Y+1	; 0x01
    3c02:	84 30       	cpi	r24, 0x04	; 4
    3c04:	68 f3       	brcs	.-38     	; 0x3be0 <keypad_initialize+0x4e>
		{
			ret = gpio_pin_direction_initialize(&(_keypad_obj->keypad_columns_pins[columns_counter]));
		}
	}
	return ret;
    3c06:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3c08:	0f 90       	pop	r0
    3c0a:	0f 90       	pop	r0
    3c0c:	0f 90       	pop	r0
    3c0e:	0f 90       	pop	r0
    3c10:	0f 90       	pop	r0
    3c12:	cf 91       	pop	r28
    3c14:	df 91       	pop	r29
    3c16:	08 95       	ret

00003c18 <keypad_get_value>:
 * @param _keypad_obj
 * @param value
 * @return
 */
STD_ReturnStatus keypad_get_value(const keypad_t *_keypad_obj,uint8 *value,uint8 *Key_pressed)
{
    3c18:	df 93       	push	r29
    3c1a:	cf 93       	push	r28
    3c1c:	cd b7       	in	r28, 0x3d	; 61
    3c1e:	de b7       	in	r29, 0x3e	; 62
    3c20:	69 97       	sbiw	r28, 0x19	; 25
    3c22:	0f b6       	in	r0, 0x3f	; 63
    3c24:	f8 94       	cli
    3c26:	de bf       	out	0x3e, r29	; 62
    3c28:	0f be       	out	0x3f, r0	; 63
    3c2a:	cd bf       	out	0x3d, r28	; 61
    3c2c:	9d 8b       	std	Y+21, r25	; 0x15
    3c2e:	8c 8b       	std	Y+20, r24	; 0x14
    3c30:	7f 8b       	std	Y+23, r23	; 0x17
    3c32:	6e 8b       	std	Y+22, r22	; 0x16
    3c34:	59 8f       	std	Y+25, r21	; 0x19
    3c36:	48 8f       	std	Y+24, r20	; 0x18
	STD_ReturnStatus ret = E_NOT_OK;
    3c38:	1a 8a       	std	Y+18, r1	; 0x12
	*Key_pressed=KEY_NOT_PRESSED;
    3c3a:	e8 8d       	ldd	r30, Y+24	; 0x18
    3c3c:	f9 8d       	ldd	r31, Y+25	; 0x19
    3c3e:	10 82       	st	Z, r1
	uint8 l_rows_counter=ZERO_INIT,l_columns_counter=ZERO_INIT,l_counter=ZERO_INIT;
    3c40:	19 8a       	std	Y+17, r1	; 0x11
    3c42:	18 8a       	std	Y+16, r1	; 0x10
    3c44:	1f 86       	std	Y+15, r1	; 0x0f
	uint8 column_logic=ZERO_INIT;
    3c46:	1b 8a       	std	Y+19, r1	; 0x13
	if((NULL==_keypad_obj)||(NULL==value))
    3c48:	8c 89       	ldd	r24, Y+20	; 0x14
    3c4a:	9d 89       	ldd	r25, Y+21	; 0x15
    3c4c:	00 97       	sbiw	r24, 0x00	; 0
    3c4e:	21 f0       	breq	.+8      	; 0x3c58 <keypad_get_value+0x40>
    3c50:	8e 89       	ldd	r24, Y+22	; 0x16
    3c52:	9f 89       	ldd	r25, Y+23	; 0x17
    3c54:	00 97       	sbiw	r24, 0x00	; 0
    3c56:	11 f4       	brne	.+4      	; 0x3c5c <keypad_get_value+0x44>
	{
		ret = E_NOT_OK;
    3c58:	1a 8a       	std	Y+18, r1	; 0x12
    3c5a:	cf c0       	rjmp	.+414    	; 0x3dfa <keypad_get_value+0x1e2>
	}
	else
	{
		for(l_rows_counter=ZERO_INIT;l_rows_counter<ECU_KEYPAD_ROWS;l_rows_counter++)
    3c5c:	19 8a       	std	Y+17, r1	; 0x11
    3c5e:	c7 c0       	rjmp	.+398    	; 0x3dee <keypad_get_value+0x1d6>
		{
			//3ayzen nekhaly kol el rows 3aleha zero volt ela awel wahd bas 3shan ne-check 3aleh
			//fa el awel hankhaly kol el kolo zero ba3daha nekhaly 5volt 3ala R1 w hakaza
			for(l_counter=ZERO_INIT;l_counter<ECU_KEYPAD_ROWS;l_counter++){
    3c60:	1f 86       	std	Y+15, r1	; 0x0f
    3c62:	0e c0       	rjmp	.+28     	; 0x3c80 <keypad_get_value+0x68>
						ret = gpio_pin_write_logic(&(_keypad_obj->keypad_row_pins[l_counter]),GPIO_LOW);
    3c64:	2c 89       	ldd	r18, Y+20	; 0x14
    3c66:	3d 89       	ldd	r19, Y+21	; 0x15
    3c68:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c6a:	88 2f       	mov	r24, r24
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	82 0f       	add	r24, r18
    3c70:	93 1f       	adc	r25, r19
    3c72:	60 e0       	ldi	r22, 0x00	; 0
    3c74:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
    3c78:	8a 8b       	std	Y+18, r24	; 0x12
	{
		for(l_rows_counter=ZERO_INIT;l_rows_counter<ECU_KEYPAD_ROWS;l_rows_counter++)
		{
			//3ayzen nekhaly kol el rows 3aleha zero volt ela awel wahd bas 3shan ne-check 3aleh
			//fa el awel hankhaly kol el kolo zero ba3daha nekhaly 5volt 3ala R1 w hakaza
			for(l_counter=ZERO_INIT;l_counter<ECU_KEYPAD_ROWS;l_counter++){
    3c7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c7c:	8f 5f       	subi	r24, 0xFF	; 255
    3c7e:	8f 87       	std	Y+15, r24	; 0x0f
    3c80:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c82:	84 30       	cpi	r24, 0x04	; 4
    3c84:	78 f3       	brcs	.-34     	; 0x3c64 <keypad_get_value+0x4c>
						ret = gpio_pin_write_logic(&(_keypad_obj->keypad_row_pins[l_counter]),GPIO_LOW);
					}
			//ba3d ma khalet kolo zero, hakhaly wahd wahd be 5 volt bel tarteeb 3shan keda akhat l_rows_counter fel loop el bara
			ret = gpio_pin_write_logic(&(_keypad_obj->keypad_row_pins[l_rows_counter]),GPIO_HIGH);
    3c86:	2c 89       	ldd	r18, Y+20	; 0x14
    3c88:	3d 89       	ldd	r19, Y+21	; 0x15
    3c8a:	89 89       	ldd	r24, Y+17	; 0x11
    3c8c:	88 2f       	mov	r24, r24
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	82 0f       	add	r24, r18
    3c92:	93 1f       	adc	r25, r19
    3c94:	61 e0       	ldi	r22, 0x01	; 1
    3c96:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
    3c9a:	8a 8b       	std	Y+18, r24	; 0x12
    3c9c:	80 e0       	ldi	r24, 0x00	; 0
    3c9e:	90 e0       	ldi	r25, 0x00	; 0
    3ca0:	a0 e8       	ldi	r26, 0x80	; 128
    3ca2:	bf e3       	ldi	r27, 0x3F	; 63
    3ca4:	8b 87       	std	Y+11, r24	; 0x0b
    3ca6:	9c 87       	std	Y+12, r25	; 0x0c
    3ca8:	ad 87       	std	Y+13, r26	; 0x0d
    3caa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cac:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cae:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cb4:	20 e0       	ldi	r18, 0x00	; 0
    3cb6:	30 e0       	ldi	r19, 0x00	; 0
    3cb8:	4a ef       	ldi	r20, 0xFA	; 250
    3cba:	54 e4       	ldi	r21, 0x44	; 68
    3cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cc0:	dc 01       	movw	r26, r24
    3cc2:	cb 01       	movw	r24, r22
    3cc4:	8f 83       	std	Y+7, r24	; 0x07
    3cc6:	98 87       	std	Y+8, r25	; 0x08
    3cc8:	a9 87       	std	Y+9, r26	; 0x09
    3cca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ccc:	6f 81       	ldd	r22, Y+7	; 0x07
    3cce:	78 85       	ldd	r23, Y+8	; 0x08
    3cd0:	89 85       	ldd	r24, Y+9	; 0x09
    3cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cd4:	20 e0       	ldi	r18, 0x00	; 0
    3cd6:	30 e0       	ldi	r19, 0x00	; 0
    3cd8:	40 e8       	ldi	r20, 0x80	; 128
    3cda:	5f e3       	ldi	r21, 0x3F	; 63
    3cdc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ce0:	88 23       	and	r24, r24
    3ce2:	2c f4       	brge	.+10     	; 0x3cee <keypad_get_value+0xd6>
		__ticks = 1;
    3ce4:	81 e0       	ldi	r24, 0x01	; 1
    3ce6:	90 e0       	ldi	r25, 0x00	; 0
    3ce8:	9e 83       	std	Y+6, r25	; 0x06
    3cea:	8d 83       	std	Y+5, r24	; 0x05
    3cec:	3f c0       	rjmp	.+126    	; 0x3d6c <keypad_get_value+0x154>
	else if (__tmp > 65535)
    3cee:	6f 81       	ldd	r22, Y+7	; 0x07
    3cf0:	78 85       	ldd	r23, Y+8	; 0x08
    3cf2:	89 85       	ldd	r24, Y+9	; 0x09
    3cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cf6:	20 e0       	ldi	r18, 0x00	; 0
    3cf8:	3f ef       	ldi	r19, 0xFF	; 255
    3cfa:	4f e7       	ldi	r20, 0x7F	; 127
    3cfc:	57 e4       	ldi	r21, 0x47	; 71
    3cfe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d02:	18 16       	cp	r1, r24
    3d04:	4c f5       	brge	.+82     	; 0x3d58 <keypad_get_value+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d06:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d08:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d0e:	20 e0       	ldi	r18, 0x00	; 0
    3d10:	30 e0       	ldi	r19, 0x00	; 0
    3d12:	40 e2       	ldi	r20, 0x20	; 32
    3d14:	51 e4       	ldi	r21, 0x41	; 65
    3d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d1a:	dc 01       	movw	r26, r24
    3d1c:	cb 01       	movw	r24, r22
    3d1e:	bc 01       	movw	r22, r24
    3d20:	cd 01       	movw	r24, r26
    3d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d26:	dc 01       	movw	r26, r24
    3d28:	cb 01       	movw	r24, r22
    3d2a:	9e 83       	std	Y+6, r25	; 0x06
    3d2c:	8d 83       	std	Y+5, r24	; 0x05
    3d2e:	0f c0       	rjmp	.+30     	; 0x3d4e <keypad_get_value+0x136>
    3d30:	88 ec       	ldi	r24, 0xC8	; 200
    3d32:	90 e0       	ldi	r25, 0x00	; 0
    3d34:	9c 83       	std	Y+4, r25	; 0x04
    3d36:	8b 83       	std	Y+3, r24	; 0x03
    3d38:	8b 81       	ldd	r24, Y+3	; 0x03
    3d3a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d3c:	01 97       	sbiw	r24, 0x01	; 1
    3d3e:	f1 f7       	brne	.-4      	; 0x3d3c <keypad_get_value+0x124>
    3d40:	9c 83       	std	Y+4, r25	; 0x04
    3d42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d44:	8d 81       	ldd	r24, Y+5	; 0x05
    3d46:	9e 81       	ldd	r25, Y+6	; 0x06
    3d48:	01 97       	sbiw	r24, 0x01	; 1
    3d4a:	9e 83       	std	Y+6, r25	; 0x06
    3d4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d50:	9e 81       	ldd	r25, Y+6	; 0x06
    3d52:	00 97       	sbiw	r24, 0x00	; 0
    3d54:	69 f7       	brne	.-38     	; 0x3d30 <keypad_get_value+0x118>
    3d56:	14 c0       	rjmp	.+40     	; 0x3d80 <keypad_get_value+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d58:	6f 81       	ldd	r22, Y+7	; 0x07
    3d5a:	78 85       	ldd	r23, Y+8	; 0x08
    3d5c:	89 85       	ldd	r24, Y+9	; 0x09
    3d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d64:	dc 01       	movw	r26, r24
    3d66:	cb 01       	movw	r24, r22
    3d68:	9e 83       	std	Y+6, r25	; 0x06
    3d6a:	8d 83       	std	Y+5, r24	; 0x05
    3d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d70:	9a 83       	std	Y+2, r25	; 0x02
    3d72:	89 83       	std	Y+1, r24	; 0x01
    3d74:	89 81       	ldd	r24, Y+1	; 0x01
    3d76:	9a 81       	ldd	r25, Y+2	; 0x02
    3d78:	01 97       	sbiw	r24, 0x01	; 1
    3d7a:	f1 f7       	brne	.-4      	; 0x3d78 <keypad_get_value+0x160>
    3d7c:	9a 83       	std	Y+2, r25	; 0x02
    3d7e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1);
			//columns Check
			for(l_columns_counter=ZERO_INIT;l_columns_counter<ECU_KEYPAD_COLUMNS;l_columns_counter++)
    3d80:	18 8a       	std	Y+16, r1	; 0x10
    3d82:	2f c0       	rjmp	.+94     	; 0x3de2 <keypad_get_value+0x1ca>
			{
				ret = gpio_pin_read_logic(&(_keypad_obj->keypad_columns_pins[l_columns_counter]),&column_logic);
    3d84:	8c 89       	ldd	r24, Y+20	; 0x14
    3d86:	9d 89       	ldd	r25, Y+21	; 0x15
    3d88:	9c 01       	movw	r18, r24
    3d8a:	2c 5f       	subi	r18, 0xFC	; 252
    3d8c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d8e:	88 89       	ldd	r24, Y+16	; 0x10
    3d90:	88 2f       	mov	r24, r24
    3d92:	90 e0       	ldi	r25, 0x00	; 0
    3d94:	82 0f       	add	r24, r18
    3d96:	93 1f       	adc	r25, r19
    3d98:	9e 01       	movw	r18, r28
    3d9a:	2d 5e       	subi	r18, 0xED	; 237
    3d9c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d9e:	b9 01       	movw	r22, r18
    3da0:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <gpio_pin_read_logic>
    3da4:	8a 8b       	std	Y+18, r24	; 0x12
				if(GPIO_HIGH==column_logic)
    3da6:	8b 89       	ldd	r24, Y+19	; 0x13
    3da8:	81 30       	cpi	r24, 0x01	; 1
    3daa:	c1 f4       	brne	.+48     	; 0x3ddc <keypad_get_value+0x1c4>
				{
					*value=btn_values_int[l_rows_counter][l_columns_counter];
    3dac:	89 89       	ldd	r24, Y+17	; 0x11
    3dae:	48 2f       	mov	r20, r24
    3db0:	50 e0       	ldi	r21, 0x00	; 0
    3db2:	88 89       	ldd	r24, Y+16	; 0x10
    3db4:	28 2f       	mov	r18, r24
    3db6:	30 e0       	ldi	r19, 0x00	; 0
    3db8:	ca 01       	movw	r24, r20
    3dba:	88 0f       	add	r24, r24
    3dbc:	99 1f       	adc	r25, r25
    3dbe:	88 0f       	add	r24, r24
    3dc0:	99 1f       	adc	r25, r25
    3dc2:	82 0f       	add	r24, r18
    3dc4:	93 1f       	adc	r25, r19
    3dc6:	fc 01       	movw	r30, r24
    3dc8:	e2 53       	subi	r30, 0x32	; 50
    3dca:	fe 4f       	sbci	r31, 0xFE	; 254
    3dcc:	80 81       	ld	r24, Z
    3dce:	ee 89       	ldd	r30, Y+22	; 0x16
    3dd0:	ff 89       	ldd	r31, Y+23	; 0x17
    3dd2:	80 83       	st	Z, r24
					*Key_pressed=KEY_PRESSED;
    3dd4:	e8 8d       	ldd	r30, Y+24	; 0x18
    3dd6:	f9 8d       	ldd	r31, Y+25	; 0x19
    3dd8:	81 e0       	ldi	r24, 0x01	; 1
    3dda:	80 83       	st	Z, r24
					}
			//ba3d ma khalet kolo zero, hakhaly wahd wahd be 5 volt bel tarteeb 3shan keda akhat l_rows_counter fel loop el bara
			ret = gpio_pin_write_logic(&(_keypad_obj->keypad_row_pins[l_rows_counter]),GPIO_HIGH);
			_delay_ms(1);
			//columns Check
			for(l_columns_counter=ZERO_INIT;l_columns_counter<ECU_KEYPAD_COLUMNS;l_columns_counter++)
    3ddc:	88 89       	ldd	r24, Y+16	; 0x10
    3dde:	8f 5f       	subi	r24, 0xFF	; 255
    3de0:	88 8b       	std	Y+16, r24	; 0x10
    3de2:	88 89       	ldd	r24, Y+16	; 0x10
    3de4:	84 30       	cpi	r24, 0x04	; 4
    3de6:	70 f2       	brcs	.-100    	; 0x3d84 <keypad_get_value+0x16c>
	{
		ret = E_NOT_OK;
	}
	else
	{
		for(l_rows_counter=ZERO_INIT;l_rows_counter<ECU_KEYPAD_ROWS;l_rows_counter++)
    3de8:	89 89       	ldd	r24, Y+17	; 0x11
    3dea:	8f 5f       	subi	r24, 0xFF	; 255
    3dec:	89 8b       	std	Y+17, r24	; 0x11
    3dee:	89 89       	ldd	r24, Y+17	; 0x11
    3df0:	84 30       	cpi	r24, 0x04	; 4
    3df2:	08 f4       	brcc	.+2      	; 0x3df6 <keypad_get_value+0x1de>
    3df4:	35 cf       	rjmp	.-406    	; 0x3c60 <keypad_get_value+0x48>
					*value=btn_values_int[l_rows_counter][l_columns_counter];
					*Key_pressed=KEY_PRESSED;
				}
			}
		}
		ret = E_OK;
    3df6:	81 e0       	ldi	r24, 0x01	; 1
    3df8:	8a 8b       	std	Y+18, r24	; 0x12
	}
	return ret;
    3dfa:	8a 89       	ldd	r24, Y+18	; 0x12
}
    3dfc:	69 96       	adiw	r28, 0x19	; 25
    3dfe:	0f b6       	in	r0, 0x3f	; 63
    3e00:	f8 94       	cli
    3e02:	de bf       	out	0x3e, r29	; 62
    3e04:	0f be       	out	0x3f, r0	; 63
    3e06:	cd bf       	out	0x3d, r28	; 61
    3e08:	cf 91       	pop	r28
    3e0a:	df 91       	pop	r29
    3e0c:	08 95       	ret

00003e0e <seven_segment_initialize>:

#include "ECU_SEVEN_SEG.h"


STD_ReturnStatus seven_segment_initialize(const segment_t *seg)
{
    3e0e:	df 93       	push	r29
    3e10:	cf 93       	push	r28
    3e12:	00 d0       	rcall	.+0      	; 0x3e14 <seven_segment_initialize+0x6>
    3e14:	0f 92       	push	r0
    3e16:	cd b7       	in	r28, 0x3d	; 61
    3e18:	de b7       	in	r29, 0x3e	; 62
    3e1a:	9b 83       	std	Y+3, r25	; 0x03
    3e1c:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_OK;
    3e1e:	81 e0       	ldi	r24, 0x01	; 1
    3e20:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==seg)
    3e22:	8a 81       	ldd	r24, Y+2	; 0x02
    3e24:	9b 81       	ldd	r25, Y+3	; 0x03
    3e26:	00 97       	sbiw	r24, 0x00	; 0
    3e28:	11 f4       	brne	.+4      	; 0x3e2e <seven_segment_initialize+0x20>
	{
		ret = E_NOT_OK;
    3e2a:	19 82       	std	Y+1, r1	; 0x01
    3e2c:	22 c0       	rjmp	.+68     	; 0x3e72 <seven_segment_initialize+0x64>
	}
	else
	{
	gpio_pin_initialize(&(seg->segment_pins[0]));
    3e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e30:	9b 81       	ldd	r25, Y+3	; 0x03
    3e32:	0e 94 1a 10 	call	0x2034	; 0x2034 <gpio_pin_initialize>
	gpio_pin_initialize(&(seg->segment_pins[1]));
    3e36:	8a 81       	ldd	r24, Y+2	; 0x02
    3e38:	9b 81       	ldd	r25, Y+3	; 0x03
    3e3a:	01 96       	adiw	r24, 0x01	; 1
    3e3c:	0e 94 1a 10 	call	0x2034	; 0x2034 <gpio_pin_initialize>
	gpio_pin_initialize(&(seg->segment_pins[2]));
    3e40:	8a 81       	ldd	r24, Y+2	; 0x02
    3e42:	9b 81       	ldd	r25, Y+3	; 0x03
    3e44:	02 96       	adiw	r24, 0x02	; 2
    3e46:	0e 94 1a 10 	call	0x2034	; 0x2034 <gpio_pin_initialize>
	gpio_pin_initialize(&(seg->segment_pins[3]));
    3e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e4c:	9b 81       	ldd	r25, Y+3	; 0x03
    3e4e:	03 96       	adiw	r24, 0x03	; 3
    3e50:	0e 94 1a 10 	call	0x2034	; 0x2034 <gpio_pin_initialize>
	gpio_pin_initialize(&(seg->segment_pins[4]));
    3e54:	8a 81       	ldd	r24, Y+2	; 0x02
    3e56:	9b 81       	ldd	r25, Y+3	; 0x03
    3e58:	04 96       	adiw	r24, 0x04	; 4
    3e5a:	0e 94 1a 10 	call	0x2034	; 0x2034 <gpio_pin_initialize>
	gpio_pin_initialize(&(seg->segment_pins[5]));
    3e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e60:	9b 81       	ldd	r25, Y+3	; 0x03
    3e62:	05 96       	adiw	r24, 0x05	; 5
    3e64:	0e 94 1a 10 	call	0x2034	; 0x2034 <gpio_pin_initialize>
	gpio_pin_initialize(&(seg->segment_pins[6]));
    3e68:	8a 81       	ldd	r24, Y+2	; 0x02
    3e6a:	9b 81       	ldd	r25, Y+3	; 0x03
    3e6c:	06 96       	adiw	r24, 0x06	; 6
    3e6e:	0e 94 1a 10 	call	0x2034	; 0x2034 <gpio_pin_initialize>
	}
	return ret;
    3e72:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e74:	0f 90       	pop	r0
    3e76:	0f 90       	pop	r0
    3e78:	0f 90       	pop	r0
    3e7a:	cf 91       	pop	r28
    3e7c:	df 91       	pop	r29
    3e7e:	08 95       	ret

00003e80 <seven_segment_write_number>:
STD_ReturnStatus seven_segment_write_number(const segment_t *seg,uint8 num)
{
    3e80:	df 93       	push	r29
    3e82:	cf 93       	push	r28
    3e84:	00 d0       	rcall	.+0      	; 0x3e86 <seven_segment_write_number+0x6>
    3e86:	00 d0       	rcall	.+0      	; 0x3e88 <seven_segment_write_number+0x8>
    3e88:	cd b7       	in	r28, 0x3d	; 61
    3e8a:	de b7       	in	r29, 0x3e	; 62
    3e8c:	9b 83       	std	Y+3, r25	; 0x03
    3e8e:	8a 83       	std	Y+2, r24	; 0x02
    3e90:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_OK;
    3e92:	81 e0       	ldi	r24, 0x01	; 1
    3e94:	89 83       	std	Y+1, r24	; 0x01
	if((NULL==seg)&&(num>9))
    3e96:	8a 81       	ldd	r24, Y+2	; 0x02
    3e98:	9b 81       	ldd	r25, Y+3	; 0x03
    3e9a:	00 97       	sbiw	r24, 0x00	; 0
    3e9c:	29 f4       	brne	.+10     	; 0x3ea8 <seven_segment_write_number+0x28>
    3e9e:	8c 81       	ldd	r24, Y+4	; 0x04
    3ea0:	8a 30       	cpi	r24, 0x0A	; 10
    3ea2:	10 f0       	brcs	.+4      	; 0x3ea8 <seven_segment_write_number+0x28>
	{
		ret = E_NOT_OK;
    3ea4:	19 82       	std	Y+1, r1	; 0x01
    3ea6:	8a c0       	rjmp	.+276    	; 0x3fbc <seven_segment_write_number+0x13c>
	}
	else
	{
		gpio_pin_write_logic(&(seg->segment_pins[0]),CommCathArr[num]&0x01);
    3ea8:	4a 81       	ldd	r20, Y+2	; 0x02
    3eaa:	5b 81       	ldd	r21, Y+3	; 0x03
    3eac:	8c 81       	ldd	r24, Y+4	; 0x04
    3eae:	88 2f       	mov	r24, r24
    3eb0:	90 e0       	ldi	r25, 0x00	; 0
    3eb2:	fc 01       	movw	r30, r24
    3eb4:	ed 57       	subi	r30, 0x7D	; 125
    3eb6:	fe 4f       	sbci	r31, 0xFE	; 254
    3eb8:	80 81       	ld	r24, Z
    3eba:	28 2f       	mov	r18, r24
    3ebc:	21 70       	andi	r18, 0x01	; 1
    3ebe:	ca 01       	movw	r24, r20
    3ec0:	62 2f       	mov	r22, r18
    3ec2:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
		gpio_pin_write_logic(&(seg->segment_pins[1]),(CommCathArr[num]>>1)&0x01);
    3ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ec8:	9b 81       	ldd	r25, Y+3	; 0x03
    3eca:	ac 01       	movw	r20, r24
    3ecc:	4f 5f       	subi	r20, 0xFF	; 255
    3ece:	5f 4f       	sbci	r21, 0xFF	; 255
    3ed0:	8c 81       	ldd	r24, Y+4	; 0x04
    3ed2:	88 2f       	mov	r24, r24
    3ed4:	90 e0       	ldi	r25, 0x00	; 0
    3ed6:	fc 01       	movw	r30, r24
    3ed8:	ed 57       	subi	r30, 0x7D	; 125
    3eda:	fe 4f       	sbci	r31, 0xFE	; 254
    3edc:	80 81       	ld	r24, Z
    3ede:	86 95       	lsr	r24
    3ee0:	28 2f       	mov	r18, r24
    3ee2:	21 70       	andi	r18, 0x01	; 1
    3ee4:	ca 01       	movw	r24, r20
    3ee6:	62 2f       	mov	r22, r18
    3ee8:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
		gpio_pin_write_logic(&(seg->segment_pins[2]),(CommCathArr[num]>>2)&0x01);
    3eec:	8a 81       	ldd	r24, Y+2	; 0x02
    3eee:	9b 81       	ldd	r25, Y+3	; 0x03
    3ef0:	ac 01       	movw	r20, r24
    3ef2:	4e 5f       	subi	r20, 0xFE	; 254
    3ef4:	5f 4f       	sbci	r21, 0xFF	; 255
    3ef6:	8c 81       	ldd	r24, Y+4	; 0x04
    3ef8:	88 2f       	mov	r24, r24
    3efa:	90 e0       	ldi	r25, 0x00	; 0
    3efc:	fc 01       	movw	r30, r24
    3efe:	ed 57       	subi	r30, 0x7D	; 125
    3f00:	fe 4f       	sbci	r31, 0xFE	; 254
    3f02:	80 81       	ld	r24, Z
    3f04:	86 95       	lsr	r24
    3f06:	86 95       	lsr	r24
    3f08:	28 2f       	mov	r18, r24
    3f0a:	21 70       	andi	r18, 0x01	; 1
    3f0c:	ca 01       	movw	r24, r20
    3f0e:	62 2f       	mov	r22, r18
    3f10:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
		gpio_pin_write_logic(&(seg->segment_pins[3]),(CommCathArr[num]>>3)&0x01);
    3f14:	8a 81       	ldd	r24, Y+2	; 0x02
    3f16:	9b 81       	ldd	r25, Y+3	; 0x03
    3f18:	ac 01       	movw	r20, r24
    3f1a:	4d 5f       	subi	r20, 0xFD	; 253
    3f1c:	5f 4f       	sbci	r21, 0xFF	; 255
    3f1e:	8c 81       	ldd	r24, Y+4	; 0x04
    3f20:	88 2f       	mov	r24, r24
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	fc 01       	movw	r30, r24
    3f26:	ed 57       	subi	r30, 0x7D	; 125
    3f28:	fe 4f       	sbci	r31, 0xFE	; 254
    3f2a:	80 81       	ld	r24, Z
    3f2c:	86 95       	lsr	r24
    3f2e:	86 95       	lsr	r24
    3f30:	86 95       	lsr	r24
    3f32:	28 2f       	mov	r18, r24
    3f34:	21 70       	andi	r18, 0x01	; 1
    3f36:	ca 01       	movw	r24, r20
    3f38:	62 2f       	mov	r22, r18
    3f3a:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
		gpio_pin_write_logic(&(seg->segment_pins[4]),(CommCathArr[num]>>4)&0x01);
    3f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f40:	9b 81       	ldd	r25, Y+3	; 0x03
    3f42:	ac 01       	movw	r20, r24
    3f44:	4c 5f       	subi	r20, 0xFC	; 252
    3f46:	5f 4f       	sbci	r21, 0xFF	; 255
    3f48:	8c 81       	ldd	r24, Y+4	; 0x04
    3f4a:	88 2f       	mov	r24, r24
    3f4c:	90 e0       	ldi	r25, 0x00	; 0
    3f4e:	fc 01       	movw	r30, r24
    3f50:	ed 57       	subi	r30, 0x7D	; 125
    3f52:	fe 4f       	sbci	r31, 0xFE	; 254
    3f54:	80 81       	ld	r24, Z
    3f56:	82 95       	swap	r24
    3f58:	8f 70       	andi	r24, 0x0F	; 15
    3f5a:	28 2f       	mov	r18, r24
    3f5c:	21 70       	andi	r18, 0x01	; 1
    3f5e:	ca 01       	movw	r24, r20
    3f60:	62 2f       	mov	r22, r18
    3f62:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
		gpio_pin_write_logic(&(seg->segment_pins[5]),(CommCathArr[num]>>5)&0x01);
    3f66:	8a 81       	ldd	r24, Y+2	; 0x02
    3f68:	9b 81       	ldd	r25, Y+3	; 0x03
    3f6a:	ac 01       	movw	r20, r24
    3f6c:	4b 5f       	subi	r20, 0xFB	; 251
    3f6e:	5f 4f       	sbci	r21, 0xFF	; 255
    3f70:	8c 81       	ldd	r24, Y+4	; 0x04
    3f72:	88 2f       	mov	r24, r24
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	fc 01       	movw	r30, r24
    3f78:	ed 57       	subi	r30, 0x7D	; 125
    3f7a:	fe 4f       	sbci	r31, 0xFE	; 254
    3f7c:	80 81       	ld	r24, Z
    3f7e:	82 95       	swap	r24
    3f80:	86 95       	lsr	r24
    3f82:	87 70       	andi	r24, 0x07	; 7
    3f84:	28 2f       	mov	r18, r24
    3f86:	21 70       	andi	r18, 0x01	; 1
    3f88:	ca 01       	movw	r24, r20
    3f8a:	62 2f       	mov	r22, r18
    3f8c:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
		gpio_pin_write_logic(&(seg->segment_pins[6]),(CommCathArr[num]>>6)&0x01);
    3f90:	8a 81       	ldd	r24, Y+2	; 0x02
    3f92:	9b 81       	ldd	r25, Y+3	; 0x03
    3f94:	ac 01       	movw	r20, r24
    3f96:	4a 5f       	subi	r20, 0xFA	; 250
    3f98:	5f 4f       	sbci	r21, 0xFF	; 255
    3f9a:	8c 81       	ldd	r24, Y+4	; 0x04
    3f9c:	88 2f       	mov	r24, r24
    3f9e:	90 e0       	ldi	r25, 0x00	; 0
    3fa0:	fc 01       	movw	r30, r24
    3fa2:	ed 57       	subi	r30, 0x7D	; 125
    3fa4:	fe 4f       	sbci	r31, 0xFE	; 254
    3fa6:	80 81       	ld	r24, Z
    3fa8:	82 95       	swap	r24
    3faa:	86 95       	lsr	r24
    3fac:	86 95       	lsr	r24
    3fae:	83 70       	andi	r24, 0x03	; 3
    3fb0:	28 2f       	mov	r18, r24
    3fb2:	21 70       	andi	r18, 0x01	; 1
    3fb4:	ca 01       	movw	r24, r20
    3fb6:	62 2f       	mov	r22, r18
    3fb8:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
	}
	return ret;
    3fbc:	89 81       	ldd	r24, Y+1	; 0x01
}
    3fbe:	0f 90       	pop	r0
    3fc0:	0f 90       	pop	r0
    3fc2:	0f 90       	pop	r0
    3fc4:	0f 90       	pop	r0
    3fc6:	cf 91       	pop	r28
    3fc8:	df 91       	pop	r29
    3fca:	08 95       	ret

00003fcc <dc_motor_initialize>:
 *
 * @param _dc_motor
 * @return
 */
STD_ReturnStatus dc_motor_initialize(const dc_motor_t *_dc_motor)
{
    3fcc:	df 93       	push	r29
    3fce:	cf 93       	push	r28
    3fd0:	00 d0       	rcall	.+0      	; 0x3fd2 <dc_motor_initialize+0x6>
    3fd2:	0f 92       	push	r0
    3fd4:	cd b7       	in	r28, 0x3d	; 61
    3fd6:	de b7       	in	r29, 0x3e	; 62
    3fd8:	9b 83       	std	Y+3, r25	; 0x03
    3fda:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_OK;
    3fdc:	81 e0       	ldi	r24, 0x01	; 1
    3fde:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==_dc_motor)
    3fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    3fe2:	9b 81       	ldd	r25, Y+3	; 0x03
    3fe4:	00 97       	sbiw	r24, 0x00	; 0
    3fe6:	11 f4       	brne	.+4      	; 0x3fec <dc_motor_initialize+0x20>
	{
		ret=E_NOT_OK;
    3fe8:	19 82       	std	Y+1, r1	; 0x01
    3fea:	09 c0       	rjmp	.+18     	; 0x3ffe <dc_motor_initialize+0x32>
	}
	else
	{


		gpio_pin_initialize(&(_dc_motor->dc_motor_pin[0]));
    3fec:	8a 81       	ldd	r24, Y+2	; 0x02
    3fee:	9b 81       	ldd	r25, Y+3	; 0x03
    3ff0:	0e 94 1a 10 	call	0x2034	; 0x2034 <gpio_pin_initialize>
		gpio_pin_initialize(&(_dc_motor->dc_motor_pin[1]));
    3ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ff6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ff8:	01 96       	adiw	r24, 0x01	; 1
    3ffa:	0e 94 1a 10 	call	0x2034	; 0x2034 <gpio_pin_initialize>
	}
	return ret;
    3ffe:	89 81       	ldd	r24, Y+1	; 0x01
}
    4000:	0f 90       	pop	r0
    4002:	0f 90       	pop	r0
    4004:	0f 90       	pop	r0
    4006:	cf 91       	pop	r28
    4008:	df 91       	pop	r29
    400a:	08 95       	ret

0000400c <dc_motor_move_right>:
 *
 * @param _dc_motor
 * @return
 */
STD_ReturnStatus dc_motor_move_right(const dc_motor_t *_dc_motor)
{
    400c:	df 93       	push	r29
    400e:	cf 93       	push	r28
    4010:	00 d0       	rcall	.+0      	; 0x4012 <dc_motor_move_right+0x6>
    4012:	0f 92       	push	r0
    4014:	cd b7       	in	r28, 0x3d	; 61
    4016:	de b7       	in	r29, 0x3e	; 62
    4018:	9b 83       	std	Y+3, r25	; 0x03
    401a:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_OK;
    401c:	81 e0       	ldi	r24, 0x01	; 1
    401e:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==_dc_motor)
    4020:	8a 81       	ldd	r24, Y+2	; 0x02
    4022:	9b 81       	ldd	r25, Y+3	; 0x03
    4024:	00 97       	sbiw	r24, 0x00	; 0
    4026:	11 f4       	brne	.+4      	; 0x402c <dc_motor_move_right+0x20>
	{
		ret=E_NOT_OK;
    4028:	19 82       	std	Y+1, r1	; 0x01
    402a:	0b c0       	rjmp	.+22     	; 0x4042 <dc_motor_move_right+0x36>
	}
	else
	{
		gpio_pin_write_logic(&(_dc_motor->dc_motor_pin[0]),GPIO_HIGH);
    402c:	8a 81       	ldd	r24, Y+2	; 0x02
    402e:	9b 81       	ldd	r25, Y+3	; 0x03
    4030:	61 e0       	ldi	r22, 0x01	; 1
    4032:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
		gpio_pin_write_logic(&(_dc_motor->dc_motor_pin[1]),GPIO_LOW);
    4036:	8a 81       	ldd	r24, Y+2	; 0x02
    4038:	9b 81       	ldd	r25, Y+3	; 0x03
    403a:	01 96       	adiw	r24, 0x01	; 1
    403c:	60 e0       	ldi	r22, 0x00	; 0
    403e:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
	}
	return ret;
    4042:	89 81       	ldd	r24, Y+1	; 0x01
}
    4044:	0f 90       	pop	r0
    4046:	0f 90       	pop	r0
    4048:	0f 90       	pop	r0
    404a:	cf 91       	pop	r28
    404c:	df 91       	pop	r29
    404e:	08 95       	ret

00004050 <dc_motor_move_left>:
 *
 * @param _dc_motor
 * @return
 */
STD_ReturnStatus dc_motor_move_left(const dc_motor_t *_dc_motor)
{
    4050:	df 93       	push	r29
    4052:	cf 93       	push	r28
    4054:	00 d0       	rcall	.+0      	; 0x4056 <dc_motor_move_left+0x6>
    4056:	0f 92       	push	r0
    4058:	cd b7       	in	r28, 0x3d	; 61
    405a:	de b7       	in	r29, 0x3e	; 62
    405c:	9b 83       	std	Y+3, r25	; 0x03
    405e:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_OK;
    4060:	81 e0       	ldi	r24, 0x01	; 1
    4062:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==_dc_motor)
    4064:	8a 81       	ldd	r24, Y+2	; 0x02
    4066:	9b 81       	ldd	r25, Y+3	; 0x03
    4068:	00 97       	sbiw	r24, 0x00	; 0
    406a:	11 f4       	brne	.+4      	; 0x4070 <dc_motor_move_left+0x20>
	{
		ret=E_NOT_OK;
    406c:	19 82       	std	Y+1, r1	; 0x01
    406e:	0b c0       	rjmp	.+22     	; 0x4086 <dc_motor_move_left+0x36>
	}
	else
	{
		gpio_pin_write_logic(&(_dc_motor->dc_motor_pin[0]),GPIO_LOW);
    4070:	8a 81       	ldd	r24, Y+2	; 0x02
    4072:	9b 81       	ldd	r25, Y+3	; 0x03
    4074:	60 e0       	ldi	r22, 0x00	; 0
    4076:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
		gpio_pin_write_logic(&(_dc_motor->dc_motor_pin[1]),GPIO_HIGH);
    407a:	8a 81       	ldd	r24, Y+2	; 0x02
    407c:	9b 81       	ldd	r25, Y+3	; 0x03
    407e:	01 96       	adiw	r24, 0x01	; 1
    4080:	61 e0       	ldi	r22, 0x01	; 1
    4082:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
	}
	return ret;
    4086:	89 81       	ldd	r24, Y+1	; 0x01
}
    4088:	0f 90       	pop	r0
    408a:	0f 90       	pop	r0
    408c:	0f 90       	pop	r0
    408e:	cf 91       	pop	r28
    4090:	df 91       	pop	r29
    4092:	08 95       	ret

00004094 <dc_motor_stop>:
 *
 * @param _dc_motor
 * @return
 */
STD_ReturnStatus dc_motor_stop(const dc_motor_t *_dc_motor)
{
    4094:	df 93       	push	r29
    4096:	cf 93       	push	r28
    4098:	00 d0       	rcall	.+0      	; 0x409a <dc_motor_stop+0x6>
    409a:	0f 92       	push	r0
    409c:	cd b7       	in	r28, 0x3d	; 61
    409e:	de b7       	in	r29, 0x3e	; 62
    40a0:	9b 83       	std	Y+3, r25	; 0x03
    40a2:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_OK;
    40a4:	81 e0       	ldi	r24, 0x01	; 1
    40a6:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==_dc_motor)
    40a8:	8a 81       	ldd	r24, Y+2	; 0x02
    40aa:	9b 81       	ldd	r25, Y+3	; 0x03
    40ac:	00 97       	sbiw	r24, 0x00	; 0
    40ae:	11 f4       	brne	.+4      	; 0x40b4 <dc_motor_stop+0x20>
	{
		ret=E_NOT_OK;
    40b0:	19 82       	std	Y+1, r1	; 0x01
    40b2:	0b c0       	rjmp	.+22     	; 0x40ca <dc_motor_stop+0x36>
	}
	else
	{
		gpio_pin_write_logic(&(_dc_motor->dc_motor_pin[0]),GPIO_LOW);
    40b4:	8a 81       	ldd	r24, Y+2	; 0x02
    40b6:	9b 81       	ldd	r25, Y+3	; 0x03
    40b8:	60 e0       	ldi	r22, 0x00	; 0
    40ba:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
		gpio_pin_write_logic(&(_dc_motor->dc_motor_pin[1]),GPIO_LOW);
    40be:	8a 81       	ldd	r24, Y+2	; 0x02
    40c0:	9b 81       	ldd	r25, Y+3	; 0x03
    40c2:	01 96       	adiw	r24, 0x01	; 1
    40c4:	60 e0       	ldi	r22, 0x00	; 0
    40c6:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <gpio_pin_write_logic>
	}
	return ret;
    40ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    40cc:	0f 90       	pop	r0
    40ce:	0f 90       	pop	r0
    40d0:	0f 90       	pop	r0
    40d2:	cf 91       	pop	r28
    40d4:	df 91       	pop	r29
    40d6:	08 95       	ret

000040d8 <ecu_layer_initialize>:
		.lcd_data[7].direction=DIRECTION_OUTPUT,
		.lcd_data[7].logic=GPIO_LOW
};

void ecu_layer_initialize()
{
    40d8:	df 93       	push	r29
    40da:	cf 93       	push	r28
    40dc:	0f 92       	push	r0
    40de:	cd b7       	in	r28, 0x3d	; 61
    40e0:	de b7       	in	r29, 0x3e	; 62
	STD_ReturnStatus ret = E_NOT_OK;
    40e2:	19 82       	std	Y+1, r1	; 0x01
	ret = lcd_4bit_initialize(&lcd1);
    40e4:	8f e9       	ldi	r24, 0x9F	; 159
    40e6:	91 e0       	ldi	r25, 0x01	; 1
    40e8:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <lcd_4bit_initialize>
    40ec:	89 83       	std	Y+1, r24	; 0x01
	ret = keypad_initialize(&keypad1);
    40ee:	87 e9       	ldi	r24, 0x97	; 151
    40f0:	91 e0       	ldi	r25, 0x01	; 1
    40f2:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <keypad_initialize>
    40f6:	89 83       	std	Y+1, r24	; 0x01
}
    40f8:	0f 90       	pop	r0
    40fa:	cf 91       	pop	r28
    40fc:	df 91       	pop	r29
    40fe:	08 95       	ret

00004100 <main>:




int main()
{
    4100:	df 93       	push	r29
    4102:	cf 93       	push	r28
    4104:	cd b7       	in	r28, 0x3d	; 61
    4106:	de b7       	in	r29, 0x3e	; 62
	Application_initialize();
    4108:	0e 94 c6 20 	call	0x418c	; 0x418c <Application_initialize>
	//lcd_4bit_send_string_pos(&lcd1,1,1,"Hello");
	while(1)
	{
		ret = ADC_GetConversion_Blocking(&adc1,ADC_CHANNEL_AN2,&lm_35);
    410c:	89 eb       	ldi	r24, 0xB9	; 185
    410e:	91 e0       	ldi	r25, 0x01	; 1
    4110:	2c ee       	ldi	r18, 0xEC	; 236
    4112:	31 e0       	ldi	r19, 0x01	; 1
    4114:	62 e0       	ldi	r22, 0x02	; 2
    4116:	a9 01       	movw	r20, r18
    4118:	0e 94 1b 0c 	call	0x1836	; 0x1836 <ADC_GetConversion_Blocking>
    411c:	80 93 f2 01 	sts	0x01F2, r24
		lm_35=(lm_35*4.88)/10;
    4120:	80 91 ec 01 	lds	r24, 0x01EC
    4124:	90 91 ed 01 	lds	r25, 0x01ED
    4128:	cc 01       	movw	r24, r24
    412a:	a0 e0       	ldi	r26, 0x00	; 0
    412c:	b0 e0       	ldi	r27, 0x00	; 0
    412e:	bc 01       	movw	r22, r24
    4130:	cd 01       	movw	r24, r26
    4132:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    4136:	dc 01       	movw	r26, r24
    4138:	cb 01       	movw	r24, r22
    413a:	bc 01       	movw	r22, r24
    413c:	cd 01       	movw	r24, r26
    413e:	26 ef       	ldi	r18, 0xF6	; 246
    4140:	38 e2       	ldi	r19, 0x28	; 40
    4142:	4c e9       	ldi	r20, 0x9C	; 156
    4144:	50 e4       	ldi	r21, 0x40	; 64
    4146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    414a:	dc 01       	movw	r26, r24
    414c:	cb 01       	movw	r24, r22
    414e:	bc 01       	movw	r22, r24
    4150:	cd 01       	movw	r24, r26
    4152:	20 e0       	ldi	r18, 0x00	; 0
    4154:	30 e0       	ldi	r19, 0x00	; 0
    4156:	40 e2       	ldi	r20, 0x20	; 32
    4158:	51 e4       	ldi	r21, 0x41	; 65
    415a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    415e:	dc 01       	movw	r26, r24
    4160:	cb 01       	movw	r24, r22
    4162:	bc 01       	movw	r22, r24
    4164:	cd 01       	movw	r24, r26
    4166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    416a:	dc 01       	movw	r26, r24
    416c:	cb 01       	movw	r24, r22
    416e:	90 93 ed 01 	sts	0x01ED, r25
    4172:	80 93 ec 01 	sts	0x01EC, r24
		lcd_4bit_send_int_pos(&lcd1,1,1,(uint32)lm_35);
    4176:	20 91 ec 01 	lds	r18, 0x01EC
    417a:	30 91 ed 01 	lds	r19, 0x01ED
    417e:	8f e9       	ldi	r24, 0x9F	; 159
    4180:	91 e0       	ldi	r25, 0x01	; 1
    4182:	61 e0       	ldi	r22, 0x01	; 1
    4184:	41 e0       	ldi	r20, 0x01	; 1
    4186:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <lcd_4bit_send_int_pos>
    418a:	c0 cf       	rjmp	.-128    	; 0x410c <main+0xc>

0000418c <Application_initialize>:
	}

}

void Application_initialize()
{
    418c:	df 93       	push	r29
    418e:	cf 93       	push	r28
    4190:	cd b7       	in	r28, 0x3d	; 61
    4192:	de b7       	in	r29, 0x3e	; 62

	ecu_layer_initialize();
    4194:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <ecu_layer_initialize>
	ret = ADC_Init(&adc1);
    4198:	89 eb       	ldi	r24, 0xB9	; 185
    419a:	91 e0       	ldi	r25, 0x01	; 1
    419c:	0e 94 a5 0a 	call	0x154a	; 0x154a <ADC_Init>
    41a0:	80 93 f2 01 	sts	0x01F2, r24
}
    41a4:	cf 91       	pop	r28
    41a6:	df 91       	pop	r29
    41a8:	08 95       	ret

000041aa <__udivmodqi4>:
    41aa:	99 1b       	sub	r25, r25
    41ac:	79 e0       	ldi	r23, 0x09	; 9
    41ae:	04 c0       	rjmp	.+8      	; 0x41b8 <__udivmodqi4_ep>

000041b0 <__udivmodqi4_loop>:
    41b0:	99 1f       	adc	r25, r25
    41b2:	96 17       	cp	r25, r22
    41b4:	08 f0       	brcs	.+2      	; 0x41b8 <__udivmodqi4_ep>
    41b6:	96 1b       	sub	r25, r22

000041b8 <__udivmodqi4_ep>:
    41b8:	88 1f       	adc	r24, r24
    41ba:	7a 95       	dec	r23
    41bc:	c9 f7       	brne	.-14     	; 0x41b0 <__udivmodqi4_loop>
    41be:	80 95       	com	r24
    41c0:	08 95       	ret

000041c2 <__udivmodhi4>:
    41c2:	aa 1b       	sub	r26, r26
    41c4:	bb 1b       	sub	r27, r27
    41c6:	51 e1       	ldi	r21, 0x11	; 17
    41c8:	07 c0       	rjmp	.+14     	; 0x41d8 <__udivmodhi4_ep>

000041ca <__udivmodhi4_loop>:
    41ca:	aa 1f       	adc	r26, r26
    41cc:	bb 1f       	adc	r27, r27
    41ce:	a6 17       	cp	r26, r22
    41d0:	b7 07       	cpc	r27, r23
    41d2:	10 f0       	brcs	.+4      	; 0x41d8 <__udivmodhi4_ep>
    41d4:	a6 1b       	sub	r26, r22
    41d6:	b7 0b       	sbc	r27, r23

000041d8 <__udivmodhi4_ep>:
    41d8:	88 1f       	adc	r24, r24
    41da:	99 1f       	adc	r25, r25
    41dc:	5a 95       	dec	r21
    41de:	a9 f7       	brne	.-22     	; 0x41ca <__udivmodhi4_loop>
    41e0:	80 95       	com	r24
    41e2:	90 95       	com	r25
    41e4:	bc 01       	movw	r22, r24
    41e6:	cd 01       	movw	r24, r26
    41e8:	08 95       	ret

000041ea <__prologue_saves__>:
    41ea:	2f 92       	push	r2
    41ec:	3f 92       	push	r3
    41ee:	4f 92       	push	r4
    41f0:	5f 92       	push	r5
    41f2:	6f 92       	push	r6
    41f4:	7f 92       	push	r7
    41f6:	8f 92       	push	r8
    41f8:	9f 92       	push	r9
    41fa:	af 92       	push	r10
    41fc:	bf 92       	push	r11
    41fe:	cf 92       	push	r12
    4200:	df 92       	push	r13
    4202:	ef 92       	push	r14
    4204:	ff 92       	push	r15
    4206:	0f 93       	push	r16
    4208:	1f 93       	push	r17
    420a:	cf 93       	push	r28
    420c:	df 93       	push	r29
    420e:	cd b7       	in	r28, 0x3d	; 61
    4210:	de b7       	in	r29, 0x3e	; 62
    4212:	ca 1b       	sub	r28, r26
    4214:	db 0b       	sbc	r29, r27
    4216:	0f b6       	in	r0, 0x3f	; 63
    4218:	f8 94       	cli
    421a:	de bf       	out	0x3e, r29	; 62
    421c:	0f be       	out	0x3f, r0	; 63
    421e:	cd bf       	out	0x3d, r28	; 61
    4220:	09 94       	ijmp

00004222 <__epilogue_restores__>:
    4222:	2a 88       	ldd	r2, Y+18	; 0x12
    4224:	39 88       	ldd	r3, Y+17	; 0x11
    4226:	48 88       	ldd	r4, Y+16	; 0x10
    4228:	5f 84       	ldd	r5, Y+15	; 0x0f
    422a:	6e 84       	ldd	r6, Y+14	; 0x0e
    422c:	7d 84       	ldd	r7, Y+13	; 0x0d
    422e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4230:	9b 84       	ldd	r9, Y+11	; 0x0b
    4232:	aa 84       	ldd	r10, Y+10	; 0x0a
    4234:	b9 84       	ldd	r11, Y+9	; 0x09
    4236:	c8 84       	ldd	r12, Y+8	; 0x08
    4238:	df 80       	ldd	r13, Y+7	; 0x07
    423a:	ee 80       	ldd	r14, Y+6	; 0x06
    423c:	fd 80       	ldd	r15, Y+5	; 0x05
    423e:	0c 81       	ldd	r16, Y+4	; 0x04
    4240:	1b 81       	ldd	r17, Y+3	; 0x03
    4242:	aa 81       	ldd	r26, Y+2	; 0x02
    4244:	b9 81       	ldd	r27, Y+1	; 0x01
    4246:	ce 0f       	add	r28, r30
    4248:	d1 1d       	adc	r29, r1
    424a:	0f b6       	in	r0, 0x3f	; 63
    424c:	f8 94       	cli
    424e:	de bf       	out	0x3e, r29	; 62
    4250:	0f be       	out	0x3f, r0	; 63
    4252:	cd bf       	out	0x3d, r28	; 61
    4254:	ed 01       	movw	r28, r26
    4256:	08 95       	ret

00004258 <memset>:
    4258:	dc 01       	movw	r26, r24
    425a:	01 c0       	rjmp	.+2      	; 0x425e <memset+0x6>
    425c:	6d 93       	st	X+, r22
    425e:	41 50       	subi	r20, 0x01	; 1
    4260:	50 40       	sbci	r21, 0x00	; 0
    4262:	e0 f7       	brcc	.-8      	; 0x425c <memset+0x4>
    4264:	08 95       	ret

00004266 <sprintf>:
    4266:	ae e0       	ldi	r26, 0x0E	; 14
    4268:	b0 e0       	ldi	r27, 0x00	; 0
    426a:	e9 e3       	ldi	r30, 0x39	; 57
    426c:	f1 e2       	ldi	r31, 0x21	; 33
    426e:	0c 94 03 21 	jmp	0x4206	; 0x4206 <__prologue_saves__+0x1c>
    4272:	0d 89       	ldd	r16, Y+21	; 0x15
    4274:	1e 89       	ldd	r17, Y+22	; 0x16
    4276:	86 e0       	ldi	r24, 0x06	; 6
    4278:	8c 83       	std	Y+4, r24	; 0x04
    427a:	1a 83       	std	Y+2, r17	; 0x02
    427c:	09 83       	std	Y+1, r16	; 0x01
    427e:	8f ef       	ldi	r24, 0xFF	; 255
    4280:	9f e7       	ldi	r25, 0x7F	; 127
    4282:	9e 83       	std	Y+6, r25	; 0x06
    4284:	8d 83       	std	Y+5, r24	; 0x05
    4286:	9e 01       	movw	r18, r28
    4288:	27 5e       	subi	r18, 0xE7	; 231
    428a:	3f 4f       	sbci	r19, 0xFF	; 255
    428c:	ce 01       	movw	r24, r28
    428e:	01 96       	adiw	r24, 0x01	; 1
    4290:	6f 89       	ldd	r22, Y+23	; 0x17
    4292:	78 8d       	ldd	r23, Y+24	; 0x18
    4294:	a9 01       	movw	r20, r18
    4296:	0e 94 57 21 	call	0x42ae	; 0x42ae <vfprintf>
    429a:	2f 81       	ldd	r18, Y+7	; 0x07
    429c:	38 85       	ldd	r19, Y+8	; 0x08
    429e:	02 0f       	add	r16, r18
    42a0:	13 1f       	adc	r17, r19
    42a2:	f8 01       	movw	r30, r16
    42a4:	10 82       	st	Z, r1
    42a6:	2e 96       	adiw	r28, 0x0e	; 14
    42a8:	e4 e0       	ldi	r30, 0x04	; 4
    42aa:	0c 94 1f 21 	jmp	0x423e	; 0x423e <__epilogue_restores__+0x1c>

000042ae <vfprintf>:
    42ae:	ab e0       	ldi	r26, 0x0B	; 11
    42b0:	b0 e0       	ldi	r27, 0x00	; 0
    42b2:	ed e5       	ldi	r30, 0x5D	; 93
    42b4:	f1 e2       	ldi	r31, 0x21	; 33
    42b6:	0c 94 f5 20 	jmp	0x41ea	; 0x41ea <__prologue_saves__>
    42ba:	3c 01       	movw	r6, r24
    42bc:	2b 01       	movw	r4, r22
    42be:	5a 01       	movw	r10, r20
    42c0:	fc 01       	movw	r30, r24
    42c2:	17 82       	std	Z+7, r1	; 0x07
    42c4:	16 82       	std	Z+6, r1	; 0x06
    42c6:	83 81       	ldd	r24, Z+3	; 0x03
    42c8:	81 fd       	sbrc	r24, 1
    42ca:	03 c0       	rjmp	.+6      	; 0x42d2 <vfprintf+0x24>
    42cc:	6f ef       	ldi	r22, 0xFF	; 255
    42ce:	7f ef       	ldi	r23, 0xFF	; 255
    42d0:	c6 c1       	rjmp	.+908    	; 0x465e <vfprintf+0x3b0>
    42d2:	9a e0       	ldi	r25, 0x0A	; 10
    42d4:	89 2e       	mov	r8, r25
    42d6:	1e 01       	movw	r2, r28
    42d8:	08 94       	sec
    42da:	21 1c       	adc	r2, r1
    42dc:	31 1c       	adc	r3, r1
    42de:	f3 01       	movw	r30, r6
    42e0:	23 81       	ldd	r18, Z+3	; 0x03
    42e2:	f2 01       	movw	r30, r4
    42e4:	23 fd       	sbrc	r18, 3
    42e6:	85 91       	lpm	r24, Z+
    42e8:	23 ff       	sbrs	r18, 3
    42ea:	81 91       	ld	r24, Z+
    42ec:	2f 01       	movw	r4, r30
    42ee:	88 23       	and	r24, r24
    42f0:	09 f4       	brne	.+2      	; 0x42f4 <vfprintf+0x46>
    42f2:	b2 c1       	rjmp	.+868    	; 0x4658 <vfprintf+0x3aa>
    42f4:	85 32       	cpi	r24, 0x25	; 37
    42f6:	39 f4       	brne	.+14     	; 0x4306 <vfprintf+0x58>
    42f8:	23 fd       	sbrc	r18, 3
    42fa:	85 91       	lpm	r24, Z+
    42fc:	23 ff       	sbrs	r18, 3
    42fe:	81 91       	ld	r24, Z+
    4300:	2f 01       	movw	r4, r30
    4302:	85 32       	cpi	r24, 0x25	; 37
    4304:	29 f4       	brne	.+10     	; 0x4310 <vfprintf+0x62>
    4306:	90 e0       	ldi	r25, 0x00	; 0
    4308:	b3 01       	movw	r22, r6
    430a:	0e 94 4a 23 	call	0x4694	; 0x4694 <fputc>
    430e:	e7 cf       	rjmp	.-50     	; 0x42de <vfprintf+0x30>
    4310:	98 2f       	mov	r25, r24
    4312:	ff 24       	eor	r15, r15
    4314:	ee 24       	eor	r14, r14
    4316:	99 24       	eor	r9, r9
    4318:	ff e1       	ldi	r31, 0x1F	; 31
    431a:	ff 15       	cp	r31, r15
    431c:	d0 f0       	brcs	.+52     	; 0x4352 <vfprintf+0xa4>
    431e:	9b 32       	cpi	r25, 0x2B	; 43
    4320:	69 f0       	breq	.+26     	; 0x433c <vfprintf+0x8e>
    4322:	9c 32       	cpi	r25, 0x2C	; 44
    4324:	28 f4       	brcc	.+10     	; 0x4330 <vfprintf+0x82>
    4326:	90 32       	cpi	r25, 0x20	; 32
    4328:	59 f0       	breq	.+22     	; 0x4340 <vfprintf+0x92>
    432a:	93 32       	cpi	r25, 0x23	; 35
    432c:	91 f4       	brne	.+36     	; 0x4352 <vfprintf+0xa4>
    432e:	0e c0       	rjmp	.+28     	; 0x434c <vfprintf+0x9e>
    4330:	9d 32       	cpi	r25, 0x2D	; 45
    4332:	49 f0       	breq	.+18     	; 0x4346 <vfprintf+0x98>
    4334:	90 33       	cpi	r25, 0x30	; 48
    4336:	69 f4       	brne	.+26     	; 0x4352 <vfprintf+0xa4>
    4338:	41 e0       	ldi	r20, 0x01	; 1
    433a:	24 c0       	rjmp	.+72     	; 0x4384 <vfprintf+0xd6>
    433c:	52 e0       	ldi	r21, 0x02	; 2
    433e:	f5 2a       	or	r15, r21
    4340:	84 e0       	ldi	r24, 0x04	; 4
    4342:	f8 2a       	or	r15, r24
    4344:	28 c0       	rjmp	.+80     	; 0x4396 <vfprintf+0xe8>
    4346:	98 e0       	ldi	r25, 0x08	; 8
    4348:	f9 2a       	or	r15, r25
    434a:	25 c0       	rjmp	.+74     	; 0x4396 <vfprintf+0xe8>
    434c:	e0 e1       	ldi	r30, 0x10	; 16
    434e:	fe 2a       	or	r15, r30
    4350:	22 c0       	rjmp	.+68     	; 0x4396 <vfprintf+0xe8>
    4352:	f7 fc       	sbrc	r15, 7
    4354:	29 c0       	rjmp	.+82     	; 0x43a8 <vfprintf+0xfa>
    4356:	89 2f       	mov	r24, r25
    4358:	80 53       	subi	r24, 0x30	; 48
    435a:	8a 30       	cpi	r24, 0x0A	; 10
    435c:	70 f4       	brcc	.+28     	; 0x437a <vfprintf+0xcc>
    435e:	f6 fe       	sbrs	r15, 6
    4360:	05 c0       	rjmp	.+10     	; 0x436c <vfprintf+0xbe>
    4362:	98 9c       	mul	r9, r8
    4364:	90 2c       	mov	r9, r0
    4366:	11 24       	eor	r1, r1
    4368:	98 0e       	add	r9, r24
    436a:	15 c0       	rjmp	.+42     	; 0x4396 <vfprintf+0xe8>
    436c:	e8 9c       	mul	r14, r8
    436e:	e0 2c       	mov	r14, r0
    4370:	11 24       	eor	r1, r1
    4372:	e8 0e       	add	r14, r24
    4374:	f0 e2       	ldi	r31, 0x20	; 32
    4376:	ff 2a       	or	r15, r31
    4378:	0e c0       	rjmp	.+28     	; 0x4396 <vfprintf+0xe8>
    437a:	9e 32       	cpi	r25, 0x2E	; 46
    437c:	29 f4       	brne	.+10     	; 0x4388 <vfprintf+0xda>
    437e:	f6 fc       	sbrc	r15, 6
    4380:	6b c1       	rjmp	.+726    	; 0x4658 <vfprintf+0x3aa>
    4382:	40 e4       	ldi	r20, 0x40	; 64
    4384:	f4 2a       	or	r15, r20
    4386:	07 c0       	rjmp	.+14     	; 0x4396 <vfprintf+0xe8>
    4388:	9c 36       	cpi	r25, 0x6C	; 108
    438a:	19 f4       	brne	.+6      	; 0x4392 <vfprintf+0xe4>
    438c:	50 e8       	ldi	r21, 0x80	; 128
    438e:	f5 2a       	or	r15, r21
    4390:	02 c0       	rjmp	.+4      	; 0x4396 <vfprintf+0xe8>
    4392:	98 36       	cpi	r25, 0x68	; 104
    4394:	49 f4       	brne	.+18     	; 0x43a8 <vfprintf+0xfa>
    4396:	f2 01       	movw	r30, r4
    4398:	23 fd       	sbrc	r18, 3
    439a:	95 91       	lpm	r25, Z+
    439c:	23 ff       	sbrs	r18, 3
    439e:	91 91       	ld	r25, Z+
    43a0:	2f 01       	movw	r4, r30
    43a2:	99 23       	and	r25, r25
    43a4:	09 f0       	breq	.+2      	; 0x43a8 <vfprintf+0xfa>
    43a6:	b8 cf       	rjmp	.-144    	; 0x4318 <vfprintf+0x6a>
    43a8:	89 2f       	mov	r24, r25
    43aa:	85 54       	subi	r24, 0x45	; 69
    43ac:	83 30       	cpi	r24, 0x03	; 3
    43ae:	18 f0       	brcs	.+6      	; 0x43b6 <vfprintf+0x108>
    43b0:	80 52       	subi	r24, 0x20	; 32
    43b2:	83 30       	cpi	r24, 0x03	; 3
    43b4:	38 f4       	brcc	.+14     	; 0x43c4 <vfprintf+0x116>
    43b6:	44 e0       	ldi	r20, 0x04	; 4
    43b8:	50 e0       	ldi	r21, 0x00	; 0
    43ba:	a4 0e       	add	r10, r20
    43bc:	b5 1e       	adc	r11, r21
    43be:	5f e3       	ldi	r21, 0x3F	; 63
    43c0:	59 83       	std	Y+1, r21	; 0x01
    43c2:	0f c0       	rjmp	.+30     	; 0x43e2 <vfprintf+0x134>
    43c4:	93 36       	cpi	r25, 0x63	; 99
    43c6:	31 f0       	breq	.+12     	; 0x43d4 <vfprintf+0x126>
    43c8:	93 37       	cpi	r25, 0x73	; 115
    43ca:	79 f0       	breq	.+30     	; 0x43ea <vfprintf+0x13c>
    43cc:	93 35       	cpi	r25, 0x53	; 83
    43ce:	09 f0       	breq	.+2      	; 0x43d2 <vfprintf+0x124>
    43d0:	56 c0       	rjmp	.+172    	; 0x447e <vfprintf+0x1d0>
    43d2:	20 c0       	rjmp	.+64     	; 0x4414 <vfprintf+0x166>
    43d4:	f5 01       	movw	r30, r10
    43d6:	80 81       	ld	r24, Z
    43d8:	89 83       	std	Y+1, r24	; 0x01
    43da:	42 e0       	ldi	r20, 0x02	; 2
    43dc:	50 e0       	ldi	r21, 0x00	; 0
    43de:	a4 0e       	add	r10, r20
    43e0:	b5 1e       	adc	r11, r21
    43e2:	61 01       	movw	r12, r2
    43e4:	01 e0       	ldi	r16, 0x01	; 1
    43e6:	10 e0       	ldi	r17, 0x00	; 0
    43e8:	12 c0       	rjmp	.+36     	; 0x440e <vfprintf+0x160>
    43ea:	f5 01       	movw	r30, r10
    43ec:	c0 80       	ld	r12, Z
    43ee:	d1 80       	ldd	r13, Z+1	; 0x01
    43f0:	f6 fc       	sbrc	r15, 6
    43f2:	03 c0       	rjmp	.+6      	; 0x43fa <vfprintf+0x14c>
    43f4:	6f ef       	ldi	r22, 0xFF	; 255
    43f6:	7f ef       	ldi	r23, 0xFF	; 255
    43f8:	02 c0       	rjmp	.+4      	; 0x43fe <vfprintf+0x150>
    43fa:	69 2d       	mov	r22, r9
    43fc:	70 e0       	ldi	r23, 0x00	; 0
    43fe:	42 e0       	ldi	r20, 0x02	; 2
    4400:	50 e0       	ldi	r21, 0x00	; 0
    4402:	a4 0e       	add	r10, r20
    4404:	b5 1e       	adc	r11, r21
    4406:	c6 01       	movw	r24, r12
    4408:	0e 94 3f 23 	call	0x467e	; 0x467e <strnlen>
    440c:	8c 01       	movw	r16, r24
    440e:	5f e7       	ldi	r21, 0x7F	; 127
    4410:	f5 22       	and	r15, r21
    4412:	14 c0       	rjmp	.+40     	; 0x443c <vfprintf+0x18e>
    4414:	f5 01       	movw	r30, r10
    4416:	c0 80       	ld	r12, Z
    4418:	d1 80       	ldd	r13, Z+1	; 0x01
    441a:	f6 fc       	sbrc	r15, 6
    441c:	03 c0       	rjmp	.+6      	; 0x4424 <vfprintf+0x176>
    441e:	6f ef       	ldi	r22, 0xFF	; 255
    4420:	7f ef       	ldi	r23, 0xFF	; 255
    4422:	02 c0       	rjmp	.+4      	; 0x4428 <vfprintf+0x17a>
    4424:	69 2d       	mov	r22, r9
    4426:	70 e0       	ldi	r23, 0x00	; 0
    4428:	42 e0       	ldi	r20, 0x02	; 2
    442a:	50 e0       	ldi	r21, 0x00	; 0
    442c:	a4 0e       	add	r10, r20
    442e:	b5 1e       	adc	r11, r21
    4430:	c6 01       	movw	r24, r12
    4432:	0e 94 34 23 	call	0x4668	; 0x4668 <strnlen_P>
    4436:	8c 01       	movw	r16, r24
    4438:	50 e8       	ldi	r21, 0x80	; 128
    443a:	f5 2a       	or	r15, r21
    443c:	f3 fe       	sbrs	r15, 3
    443e:	07 c0       	rjmp	.+14     	; 0x444e <vfprintf+0x1a0>
    4440:	1a c0       	rjmp	.+52     	; 0x4476 <vfprintf+0x1c8>
    4442:	80 e2       	ldi	r24, 0x20	; 32
    4444:	90 e0       	ldi	r25, 0x00	; 0
    4446:	b3 01       	movw	r22, r6
    4448:	0e 94 4a 23 	call	0x4694	; 0x4694 <fputc>
    444c:	ea 94       	dec	r14
    444e:	8e 2d       	mov	r24, r14
    4450:	90 e0       	ldi	r25, 0x00	; 0
    4452:	08 17       	cp	r16, r24
    4454:	19 07       	cpc	r17, r25
    4456:	a8 f3       	brcs	.-22     	; 0x4442 <vfprintf+0x194>
    4458:	0e c0       	rjmp	.+28     	; 0x4476 <vfprintf+0x1c8>
    445a:	f6 01       	movw	r30, r12
    445c:	f7 fc       	sbrc	r15, 7
    445e:	85 91       	lpm	r24, Z+
    4460:	f7 fe       	sbrs	r15, 7
    4462:	81 91       	ld	r24, Z+
    4464:	6f 01       	movw	r12, r30
    4466:	90 e0       	ldi	r25, 0x00	; 0
    4468:	b3 01       	movw	r22, r6
    446a:	0e 94 4a 23 	call	0x4694	; 0x4694 <fputc>
    446e:	e1 10       	cpse	r14, r1
    4470:	ea 94       	dec	r14
    4472:	01 50       	subi	r16, 0x01	; 1
    4474:	10 40       	sbci	r17, 0x00	; 0
    4476:	01 15       	cp	r16, r1
    4478:	11 05       	cpc	r17, r1
    447a:	79 f7       	brne	.-34     	; 0x445a <vfprintf+0x1ac>
    447c:	ea c0       	rjmp	.+468    	; 0x4652 <vfprintf+0x3a4>
    447e:	94 36       	cpi	r25, 0x64	; 100
    4480:	11 f0       	breq	.+4      	; 0x4486 <vfprintf+0x1d8>
    4482:	99 36       	cpi	r25, 0x69	; 105
    4484:	69 f5       	brne	.+90     	; 0x44e0 <vfprintf+0x232>
    4486:	f7 fe       	sbrs	r15, 7
    4488:	08 c0       	rjmp	.+16     	; 0x449a <vfprintf+0x1ec>
    448a:	f5 01       	movw	r30, r10
    448c:	20 81       	ld	r18, Z
    448e:	31 81       	ldd	r19, Z+1	; 0x01
    4490:	42 81       	ldd	r20, Z+2	; 0x02
    4492:	53 81       	ldd	r21, Z+3	; 0x03
    4494:	84 e0       	ldi	r24, 0x04	; 4
    4496:	90 e0       	ldi	r25, 0x00	; 0
    4498:	0a c0       	rjmp	.+20     	; 0x44ae <vfprintf+0x200>
    449a:	f5 01       	movw	r30, r10
    449c:	80 81       	ld	r24, Z
    449e:	91 81       	ldd	r25, Z+1	; 0x01
    44a0:	9c 01       	movw	r18, r24
    44a2:	44 27       	eor	r20, r20
    44a4:	37 fd       	sbrc	r19, 7
    44a6:	40 95       	com	r20
    44a8:	54 2f       	mov	r21, r20
    44aa:	82 e0       	ldi	r24, 0x02	; 2
    44ac:	90 e0       	ldi	r25, 0x00	; 0
    44ae:	a8 0e       	add	r10, r24
    44b0:	b9 1e       	adc	r11, r25
    44b2:	9f e6       	ldi	r25, 0x6F	; 111
    44b4:	f9 22       	and	r15, r25
    44b6:	57 ff       	sbrs	r21, 7
    44b8:	09 c0       	rjmp	.+18     	; 0x44cc <vfprintf+0x21e>
    44ba:	50 95       	com	r21
    44bc:	40 95       	com	r20
    44be:	30 95       	com	r19
    44c0:	21 95       	neg	r18
    44c2:	3f 4f       	sbci	r19, 0xFF	; 255
    44c4:	4f 4f       	sbci	r20, 0xFF	; 255
    44c6:	5f 4f       	sbci	r21, 0xFF	; 255
    44c8:	e0 e8       	ldi	r30, 0x80	; 128
    44ca:	fe 2a       	or	r15, r30
    44cc:	ca 01       	movw	r24, r20
    44ce:	b9 01       	movw	r22, r18
    44d0:	a1 01       	movw	r20, r2
    44d2:	2a e0       	ldi	r18, 0x0A	; 10
    44d4:	30 e0       	ldi	r19, 0x00	; 0
    44d6:	0e 94 76 23 	call	0x46ec	; 0x46ec <__ultoa_invert>
    44da:	d8 2e       	mov	r13, r24
    44dc:	d2 18       	sub	r13, r2
    44de:	40 c0       	rjmp	.+128    	; 0x4560 <vfprintf+0x2b2>
    44e0:	95 37       	cpi	r25, 0x75	; 117
    44e2:	29 f4       	brne	.+10     	; 0x44ee <vfprintf+0x240>
    44e4:	1f 2d       	mov	r17, r15
    44e6:	1f 7e       	andi	r17, 0xEF	; 239
    44e8:	2a e0       	ldi	r18, 0x0A	; 10
    44ea:	30 e0       	ldi	r19, 0x00	; 0
    44ec:	1d c0       	rjmp	.+58     	; 0x4528 <vfprintf+0x27a>
    44ee:	1f 2d       	mov	r17, r15
    44f0:	19 7f       	andi	r17, 0xF9	; 249
    44f2:	9f 36       	cpi	r25, 0x6F	; 111
    44f4:	61 f0       	breq	.+24     	; 0x450e <vfprintf+0x260>
    44f6:	90 37       	cpi	r25, 0x70	; 112
    44f8:	20 f4       	brcc	.+8      	; 0x4502 <vfprintf+0x254>
    44fa:	98 35       	cpi	r25, 0x58	; 88
    44fc:	09 f0       	breq	.+2      	; 0x4500 <vfprintf+0x252>
    44fe:	ac c0       	rjmp	.+344    	; 0x4658 <vfprintf+0x3aa>
    4500:	0f c0       	rjmp	.+30     	; 0x4520 <vfprintf+0x272>
    4502:	90 37       	cpi	r25, 0x70	; 112
    4504:	39 f0       	breq	.+14     	; 0x4514 <vfprintf+0x266>
    4506:	98 37       	cpi	r25, 0x78	; 120
    4508:	09 f0       	breq	.+2      	; 0x450c <vfprintf+0x25e>
    450a:	a6 c0       	rjmp	.+332    	; 0x4658 <vfprintf+0x3aa>
    450c:	04 c0       	rjmp	.+8      	; 0x4516 <vfprintf+0x268>
    450e:	28 e0       	ldi	r18, 0x08	; 8
    4510:	30 e0       	ldi	r19, 0x00	; 0
    4512:	0a c0       	rjmp	.+20     	; 0x4528 <vfprintf+0x27a>
    4514:	10 61       	ori	r17, 0x10	; 16
    4516:	14 fd       	sbrc	r17, 4
    4518:	14 60       	ori	r17, 0x04	; 4
    451a:	20 e1       	ldi	r18, 0x10	; 16
    451c:	30 e0       	ldi	r19, 0x00	; 0
    451e:	04 c0       	rjmp	.+8      	; 0x4528 <vfprintf+0x27a>
    4520:	14 fd       	sbrc	r17, 4
    4522:	16 60       	ori	r17, 0x06	; 6
    4524:	20 e1       	ldi	r18, 0x10	; 16
    4526:	32 e0       	ldi	r19, 0x02	; 2
    4528:	17 ff       	sbrs	r17, 7
    452a:	08 c0       	rjmp	.+16     	; 0x453c <vfprintf+0x28e>
    452c:	f5 01       	movw	r30, r10
    452e:	60 81       	ld	r22, Z
    4530:	71 81       	ldd	r23, Z+1	; 0x01
    4532:	82 81       	ldd	r24, Z+2	; 0x02
    4534:	93 81       	ldd	r25, Z+3	; 0x03
    4536:	44 e0       	ldi	r20, 0x04	; 4
    4538:	50 e0       	ldi	r21, 0x00	; 0
    453a:	08 c0       	rjmp	.+16     	; 0x454c <vfprintf+0x29e>
    453c:	f5 01       	movw	r30, r10
    453e:	80 81       	ld	r24, Z
    4540:	91 81       	ldd	r25, Z+1	; 0x01
    4542:	bc 01       	movw	r22, r24
    4544:	80 e0       	ldi	r24, 0x00	; 0
    4546:	90 e0       	ldi	r25, 0x00	; 0
    4548:	42 e0       	ldi	r20, 0x02	; 2
    454a:	50 e0       	ldi	r21, 0x00	; 0
    454c:	a4 0e       	add	r10, r20
    454e:	b5 1e       	adc	r11, r21
    4550:	a1 01       	movw	r20, r2
    4552:	0e 94 76 23 	call	0x46ec	; 0x46ec <__ultoa_invert>
    4556:	d8 2e       	mov	r13, r24
    4558:	d2 18       	sub	r13, r2
    455a:	8f e7       	ldi	r24, 0x7F	; 127
    455c:	f8 2e       	mov	r15, r24
    455e:	f1 22       	and	r15, r17
    4560:	f6 fe       	sbrs	r15, 6
    4562:	0b c0       	rjmp	.+22     	; 0x457a <vfprintf+0x2cc>
    4564:	5e ef       	ldi	r21, 0xFE	; 254
    4566:	f5 22       	and	r15, r21
    4568:	d9 14       	cp	r13, r9
    456a:	38 f4       	brcc	.+14     	; 0x457a <vfprintf+0x2cc>
    456c:	f4 fe       	sbrs	r15, 4
    456e:	07 c0       	rjmp	.+14     	; 0x457e <vfprintf+0x2d0>
    4570:	f2 fc       	sbrc	r15, 2
    4572:	05 c0       	rjmp	.+10     	; 0x457e <vfprintf+0x2d0>
    4574:	8f ee       	ldi	r24, 0xEF	; 239
    4576:	f8 22       	and	r15, r24
    4578:	02 c0       	rjmp	.+4      	; 0x457e <vfprintf+0x2d0>
    457a:	1d 2d       	mov	r17, r13
    457c:	01 c0       	rjmp	.+2      	; 0x4580 <vfprintf+0x2d2>
    457e:	19 2d       	mov	r17, r9
    4580:	f4 fe       	sbrs	r15, 4
    4582:	0d c0       	rjmp	.+26     	; 0x459e <vfprintf+0x2f0>
    4584:	fe 01       	movw	r30, r28
    4586:	ed 0d       	add	r30, r13
    4588:	f1 1d       	adc	r31, r1
    458a:	80 81       	ld	r24, Z
    458c:	80 33       	cpi	r24, 0x30	; 48
    458e:	19 f4       	brne	.+6      	; 0x4596 <vfprintf+0x2e8>
    4590:	99 ee       	ldi	r25, 0xE9	; 233
    4592:	f9 22       	and	r15, r25
    4594:	08 c0       	rjmp	.+16     	; 0x45a6 <vfprintf+0x2f8>
    4596:	1f 5f       	subi	r17, 0xFF	; 255
    4598:	f2 fe       	sbrs	r15, 2
    459a:	05 c0       	rjmp	.+10     	; 0x45a6 <vfprintf+0x2f8>
    459c:	03 c0       	rjmp	.+6      	; 0x45a4 <vfprintf+0x2f6>
    459e:	8f 2d       	mov	r24, r15
    45a0:	86 78       	andi	r24, 0x86	; 134
    45a2:	09 f0       	breq	.+2      	; 0x45a6 <vfprintf+0x2f8>
    45a4:	1f 5f       	subi	r17, 0xFF	; 255
    45a6:	0f 2d       	mov	r16, r15
    45a8:	f3 fc       	sbrc	r15, 3
    45aa:	14 c0       	rjmp	.+40     	; 0x45d4 <vfprintf+0x326>
    45ac:	f0 fe       	sbrs	r15, 0
    45ae:	0f c0       	rjmp	.+30     	; 0x45ce <vfprintf+0x320>
    45b0:	1e 15       	cp	r17, r14
    45b2:	10 f0       	brcs	.+4      	; 0x45b8 <vfprintf+0x30a>
    45b4:	9d 2c       	mov	r9, r13
    45b6:	0b c0       	rjmp	.+22     	; 0x45ce <vfprintf+0x320>
    45b8:	9d 2c       	mov	r9, r13
    45ba:	9e 0c       	add	r9, r14
    45bc:	91 1a       	sub	r9, r17
    45be:	1e 2d       	mov	r17, r14
    45c0:	06 c0       	rjmp	.+12     	; 0x45ce <vfprintf+0x320>
    45c2:	80 e2       	ldi	r24, 0x20	; 32
    45c4:	90 e0       	ldi	r25, 0x00	; 0
    45c6:	b3 01       	movw	r22, r6
    45c8:	0e 94 4a 23 	call	0x4694	; 0x4694 <fputc>
    45cc:	1f 5f       	subi	r17, 0xFF	; 255
    45ce:	1e 15       	cp	r17, r14
    45d0:	c0 f3       	brcs	.-16     	; 0x45c2 <vfprintf+0x314>
    45d2:	04 c0       	rjmp	.+8      	; 0x45dc <vfprintf+0x32e>
    45d4:	1e 15       	cp	r17, r14
    45d6:	10 f4       	brcc	.+4      	; 0x45dc <vfprintf+0x32e>
    45d8:	e1 1a       	sub	r14, r17
    45da:	01 c0       	rjmp	.+2      	; 0x45de <vfprintf+0x330>
    45dc:	ee 24       	eor	r14, r14
    45de:	04 ff       	sbrs	r16, 4
    45e0:	0f c0       	rjmp	.+30     	; 0x4600 <vfprintf+0x352>
    45e2:	80 e3       	ldi	r24, 0x30	; 48
    45e4:	90 e0       	ldi	r25, 0x00	; 0
    45e6:	b3 01       	movw	r22, r6
    45e8:	0e 94 4a 23 	call	0x4694	; 0x4694 <fputc>
    45ec:	02 ff       	sbrs	r16, 2
    45ee:	1d c0       	rjmp	.+58     	; 0x462a <vfprintf+0x37c>
    45f0:	01 fd       	sbrc	r16, 1
    45f2:	03 c0       	rjmp	.+6      	; 0x45fa <vfprintf+0x34c>
    45f4:	88 e7       	ldi	r24, 0x78	; 120
    45f6:	90 e0       	ldi	r25, 0x00	; 0
    45f8:	0e c0       	rjmp	.+28     	; 0x4616 <vfprintf+0x368>
    45fa:	88 e5       	ldi	r24, 0x58	; 88
    45fc:	90 e0       	ldi	r25, 0x00	; 0
    45fe:	0b c0       	rjmp	.+22     	; 0x4616 <vfprintf+0x368>
    4600:	80 2f       	mov	r24, r16
    4602:	86 78       	andi	r24, 0x86	; 134
    4604:	91 f0       	breq	.+36     	; 0x462a <vfprintf+0x37c>
    4606:	01 ff       	sbrs	r16, 1
    4608:	02 c0       	rjmp	.+4      	; 0x460e <vfprintf+0x360>
    460a:	8b e2       	ldi	r24, 0x2B	; 43
    460c:	01 c0       	rjmp	.+2      	; 0x4610 <vfprintf+0x362>
    460e:	80 e2       	ldi	r24, 0x20	; 32
    4610:	f7 fc       	sbrc	r15, 7
    4612:	8d e2       	ldi	r24, 0x2D	; 45
    4614:	90 e0       	ldi	r25, 0x00	; 0
    4616:	b3 01       	movw	r22, r6
    4618:	0e 94 4a 23 	call	0x4694	; 0x4694 <fputc>
    461c:	06 c0       	rjmp	.+12     	; 0x462a <vfprintf+0x37c>
    461e:	80 e3       	ldi	r24, 0x30	; 48
    4620:	90 e0       	ldi	r25, 0x00	; 0
    4622:	b3 01       	movw	r22, r6
    4624:	0e 94 4a 23 	call	0x4694	; 0x4694 <fputc>
    4628:	9a 94       	dec	r9
    462a:	d9 14       	cp	r13, r9
    462c:	c0 f3       	brcs	.-16     	; 0x461e <vfprintf+0x370>
    462e:	da 94       	dec	r13
    4630:	f1 01       	movw	r30, r2
    4632:	ed 0d       	add	r30, r13
    4634:	f1 1d       	adc	r31, r1
    4636:	80 81       	ld	r24, Z
    4638:	90 e0       	ldi	r25, 0x00	; 0
    463a:	b3 01       	movw	r22, r6
    463c:	0e 94 4a 23 	call	0x4694	; 0x4694 <fputc>
    4640:	dd 20       	and	r13, r13
    4642:	a9 f7       	brne	.-22     	; 0x462e <vfprintf+0x380>
    4644:	06 c0       	rjmp	.+12     	; 0x4652 <vfprintf+0x3a4>
    4646:	80 e2       	ldi	r24, 0x20	; 32
    4648:	90 e0       	ldi	r25, 0x00	; 0
    464a:	b3 01       	movw	r22, r6
    464c:	0e 94 4a 23 	call	0x4694	; 0x4694 <fputc>
    4650:	ea 94       	dec	r14
    4652:	ee 20       	and	r14, r14
    4654:	c1 f7       	brne	.-16     	; 0x4646 <vfprintf+0x398>
    4656:	43 ce       	rjmp	.-890    	; 0x42de <vfprintf+0x30>
    4658:	f3 01       	movw	r30, r6
    465a:	66 81       	ldd	r22, Z+6	; 0x06
    465c:	77 81       	ldd	r23, Z+7	; 0x07
    465e:	cb 01       	movw	r24, r22
    4660:	2b 96       	adiw	r28, 0x0b	; 11
    4662:	e2 e1       	ldi	r30, 0x12	; 18
    4664:	0c 94 11 21 	jmp	0x4222	; 0x4222 <__epilogue_restores__>

00004668 <strnlen_P>:
    4668:	fc 01       	movw	r30, r24
    466a:	05 90       	lpm	r0, Z+
    466c:	61 50       	subi	r22, 0x01	; 1
    466e:	70 40       	sbci	r23, 0x00	; 0
    4670:	01 10       	cpse	r0, r1
    4672:	d8 f7       	brcc	.-10     	; 0x466a <strnlen_P+0x2>
    4674:	80 95       	com	r24
    4676:	90 95       	com	r25
    4678:	8e 0f       	add	r24, r30
    467a:	9f 1f       	adc	r25, r31
    467c:	08 95       	ret

0000467e <strnlen>:
    467e:	fc 01       	movw	r30, r24
    4680:	61 50       	subi	r22, 0x01	; 1
    4682:	70 40       	sbci	r23, 0x00	; 0
    4684:	01 90       	ld	r0, Z+
    4686:	01 10       	cpse	r0, r1
    4688:	d8 f7       	brcc	.-10     	; 0x4680 <strnlen+0x2>
    468a:	80 95       	com	r24
    468c:	90 95       	com	r25
    468e:	8e 0f       	add	r24, r30
    4690:	9f 1f       	adc	r25, r31
    4692:	08 95       	ret

00004694 <fputc>:
    4694:	0f 93       	push	r16
    4696:	1f 93       	push	r17
    4698:	cf 93       	push	r28
    469a:	df 93       	push	r29
    469c:	8c 01       	movw	r16, r24
    469e:	eb 01       	movw	r28, r22
    46a0:	8b 81       	ldd	r24, Y+3	; 0x03
    46a2:	81 ff       	sbrs	r24, 1
    46a4:	1b c0       	rjmp	.+54     	; 0x46dc <fputc+0x48>
    46a6:	82 ff       	sbrs	r24, 2
    46a8:	0d c0       	rjmp	.+26     	; 0x46c4 <fputc+0x30>
    46aa:	2e 81       	ldd	r18, Y+6	; 0x06
    46ac:	3f 81       	ldd	r19, Y+7	; 0x07
    46ae:	8c 81       	ldd	r24, Y+4	; 0x04
    46b0:	9d 81       	ldd	r25, Y+5	; 0x05
    46b2:	28 17       	cp	r18, r24
    46b4:	39 07       	cpc	r19, r25
    46b6:	64 f4       	brge	.+24     	; 0x46d0 <fputc+0x3c>
    46b8:	e8 81       	ld	r30, Y
    46ba:	f9 81       	ldd	r31, Y+1	; 0x01
    46bc:	01 93       	st	Z+, r16
    46be:	f9 83       	std	Y+1, r31	; 0x01
    46c0:	e8 83       	st	Y, r30
    46c2:	06 c0       	rjmp	.+12     	; 0x46d0 <fputc+0x3c>
    46c4:	e8 85       	ldd	r30, Y+8	; 0x08
    46c6:	f9 85       	ldd	r31, Y+9	; 0x09
    46c8:	80 2f       	mov	r24, r16
    46ca:	09 95       	icall
    46cc:	89 2b       	or	r24, r25
    46ce:	31 f4       	brne	.+12     	; 0x46dc <fputc+0x48>
    46d0:	8e 81       	ldd	r24, Y+6	; 0x06
    46d2:	9f 81       	ldd	r25, Y+7	; 0x07
    46d4:	01 96       	adiw	r24, 0x01	; 1
    46d6:	9f 83       	std	Y+7, r25	; 0x07
    46d8:	8e 83       	std	Y+6, r24	; 0x06
    46da:	02 c0       	rjmp	.+4      	; 0x46e0 <fputc+0x4c>
    46dc:	0f ef       	ldi	r16, 0xFF	; 255
    46de:	1f ef       	ldi	r17, 0xFF	; 255
    46e0:	c8 01       	movw	r24, r16
    46e2:	df 91       	pop	r29
    46e4:	cf 91       	pop	r28
    46e6:	1f 91       	pop	r17
    46e8:	0f 91       	pop	r16
    46ea:	08 95       	ret

000046ec <__ultoa_invert>:
    46ec:	fa 01       	movw	r30, r20
    46ee:	aa 27       	eor	r26, r26
    46f0:	28 30       	cpi	r18, 0x08	; 8
    46f2:	51 f1       	breq	.+84     	; 0x4748 <__ultoa_invert+0x5c>
    46f4:	20 31       	cpi	r18, 0x10	; 16
    46f6:	81 f1       	breq	.+96     	; 0x4758 <__ultoa_invert+0x6c>
    46f8:	e8 94       	clt
    46fa:	6f 93       	push	r22
    46fc:	6e 7f       	andi	r22, 0xFE	; 254
    46fe:	6e 5f       	subi	r22, 0xFE	; 254
    4700:	7f 4f       	sbci	r23, 0xFF	; 255
    4702:	8f 4f       	sbci	r24, 0xFF	; 255
    4704:	9f 4f       	sbci	r25, 0xFF	; 255
    4706:	af 4f       	sbci	r26, 0xFF	; 255
    4708:	b1 e0       	ldi	r27, 0x01	; 1
    470a:	3e d0       	rcall	.+124    	; 0x4788 <__ultoa_invert+0x9c>
    470c:	b4 e0       	ldi	r27, 0x04	; 4
    470e:	3c d0       	rcall	.+120    	; 0x4788 <__ultoa_invert+0x9c>
    4710:	67 0f       	add	r22, r23
    4712:	78 1f       	adc	r23, r24
    4714:	89 1f       	adc	r24, r25
    4716:	9a 1f       	adc	r25, r26
    4718:	a1 1d       	adc	r26, r1
    471a:	68 0f       	add	r22, r24
    471c:	79 1f       	adc	r23, r25
    471e:	8a 1f       	adc	r24, r26
    4720:	91 1d       	adc	r25, r1
    4722:	a1 1d       	adc	r26, r1
    4724:	6a 0f       	add	r22, r26
    4726:	71 1d       	adc	r23, r1
    4728:	81 1d       	adc	r24, r1
    472a:	91 1d       	adc	r25, r1
    472c:	a1 1d       	adc	r26, r1
    472e:	20 d0       	rcall	.+64     	; 0x4770 <__ultoa_invert+0x84>
    4730:	09 f4       	brne	.+2      	; 0x4734 <__ultoa_invert+0x48>
    4732:	68 94       	set
    4734:	3f 91       	pop	r19
    4736:	2a e0       	ldi	r18, 0x0A	; 10
    4738:	26 9f       	mul	r18, r22
    473a:	11 24       	eor	r1, r1
    473c:	30 19       	sub	r19, r0
    473e:	30 5d       	subi	r19, 0xD0	; 208
    4740:	31 93       	st	Z+, r19
    4742:	de f6       	brtc	.-74     	; 0x46fa <__ultoa_invert+0xe>
    4744:	cf 01       	movw	r24, r30
    4746:	08 95       	ret
    4748:	46 2f       	mov	r20, r22
    474a:	47 70       	andi	r20, 0x07	; 7
    474c:	40 5d       	subi	r20, 0xD0	; 208
    474e:	41 93       	st	Z+, r20
    4750:	b3 e0       	ldi	r27, 0x03	; 3
    4752:	0f d0       	rcall	.+30     	; 0x4772 <__ultoa_invert+0x86>
    4754:	c9 f7       	brne	.-14     	; 0x4748 <__ultoa_invert+0x5c>
    4756:	f6 cf       	rjmp	.-20     	; 0x4744 <__ultoa_invert+0x58>
    4758:	46 2f       	mov	r20, r22
    475a:	4f 70       	andi	r20, 0x0F	; 15
    475c:	40 5d       	subi	r20, 0xD0	; 208
    475e:	4a 33       	cpi	r20, 0x3A	; 58
    4760:	18 f0       	brcs	.+6      	; 0x4768 <__ultoa_invert+0x7c>
    4762:	49 5d       	subi	r20, 0xD9	; 217
    4764:	31 fd       	sbrc	r19, 1
    4766:	40 52       	subi	r20, 0x20	; 32
    4768:	41 93       	st	Z+, r20
    476a:	02 d0       	rcall	.+4      	; 0x4770 <__ultoa_invert+0x84>
    476c:	a9 f7       	brne	.-22     	; 0x4758 <__ultoa_invert+0x6c>
    476e:	ea cf       	rjmp	.-44     	; 0x4744 <__ultoa_invert+0x58>
    4770:	b4 e0       	ldi	r27, 0x04	; 4
    4772:	a6 95       	lsr	r26
    4774:	97 95       	ror	r25
    4776:	87 95       	ror	r24
    4778:	77 95       	ror	r23
    477a:	67 95       	ror	r22
    477c:	ba 95       	dec	r27
    477e:	c9 f7       	brne	.-14     	; 0x4772 <__ultoa_invert+0x86>
    4780:	00 97       	sbiw	r24, 0x00	; 0
    4782:	61 05       	cpc	r22, r1
    4784:	71 05       	cpc	r23, r1
    4786:	08 95       	ret
    4788:	9b 01       	movw	r18, r22
    478a:	ac 01       	movw	r20, r24
    478c:	0a 2e       	mov	r0, r26
    478e:	06 94       	lsr	r0
    4790:	57 95       	ror	r21
    4792:	47 95       	ror	r20
    4794:	37 95       	ror	r19
    4796:	27 95       	ror	r18
    4798:	ba 95       	dec	r27
    479a:	c9 f7       	brne	.-14     	; 0x478e <__ultoa_invert+0xa2>
    479c:	62 0f       	add	r22, r18
    479e:	73 1f       	adc	r23, r19
    47a0:	84 1f       	adc	r24, r20
    47a2:	95 1f       	adc	r25, r21
    47a4:	a0 1d       	adc	r26, r0
    47a6:	08 95       	ret

000047a8 <_exit>:
    47a8:	f8 94       	cli

000047aa <__stop_program>:
    47aa:	ff cf       	rjmp	.-2      	; 0x47aa <__stop_program>
