
Application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000094  00800060  00003b24  00003bb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  008000f4  008000f4  00003c4c  2**0
                  ALLOC
  3 .stab         00004c68  00000000  00000000  00003c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000251c  00000000  00000000  000088b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000add0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000af10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000b080  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ccc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000dbb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000e964  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000eac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ed51  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f51f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e2       	ldi	r30, 0x24	; 36
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3f       	cpi	r26, 0xF4	; 244
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 ef       	ldi	r26, 0xF4	; 244
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 30       	cpi	r26, 0x08	; 8
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3b 19 	call	0x3276	; 0x3276 <main>
      8a:	0c 94 90 1d 	jmp	0x3b20	; 0x3b20 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e7       	ldi	r26, 0x7B	; 123
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cd 1a 	jmp	0x359a	; 0x359a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d9 1a 	jmp	0x35b2	; 0x35b2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d9 1a 	jmp	0x35b2	; 0x35b2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e7       	ldi	r24, 0x7B	; 123
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cd 1a 	jmp	0x359a	; 0x359a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d9 1a 	jmp	0x35b2	; 0x35b2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d9 1a 	jmp	0x35b2	; 0x35b2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d9 1a 	jmp	0x35b2	; 0x35b2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 dd 1a 	jmp	0x35ba	; 0x35ba <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <gpio_pin_direction_initialize>:
/***
 *
 * @param _pin_config
 * @return
 */
STD_ReturnStatus gpio_pin_direction_initialize(const Pin_Config_t *_pin_config){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <gpio_pin_direction_initialize+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <gpio_pin_direction_initialize+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	9b 83       	std	Y+3, r25	; 0x03
     b56:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret=E_OK;
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==_pin_config||_pin_config->pin > PORT_PIN_MAX_NUMBER-1)
     b5c:	8a 81       	ldd	r24, Y+2	; 0x02
     b5e:	9b 81       	ldd	r25, Y+3	; 0x03
     b60:	00 97       	sbiw	r24, 0x00	; 0
     b62:	59 f0       	breq	.+22     	; 0xb7a <gpio_pin_direction_initialize+0x34>
     b64:	ea 81       	ldd	r30, Y+2	; 0x02
     b66:	fb 81       	ldd	r31, Y+3	; 0x03
     b68:	80 81       	ld	r24, Z
     b6a:	86 95       	lsr	r24
     b6c:	86 95       	lsr	r24
     b6e:	87 70       	andi	r24, 0x07	; 7
     b70:	88 2f       	mov	r24, r24
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	88 30       	cpi	r24, 0x08	; 8
     b76:	91 05       	cpc	r25, r1
     b78:	14 f0       	brlt	.+4      	; 0xb7e <gpio_pin_direction_initialize+0x38>
	{
		ret=E_NOT_OK;
     b7a:	19 82       	std	Y+1, r1	; 0x01
     b7c:	75 c0       	rjmp	.+234    	; 0xc68 <gpio_pin_direction_initialize+0x122>
	}
	else
	{
		switch(_pin_config->direction)
     b7e:	ea 81       	ldd	r30, Y+2	; 0x02
     b80:	fb 81       	ldd	r31, Y+3	; 0x03
     b82:	80 81       	ld	r24, Z
     b84:	82 95       	swap	r24
     b86:	86 95       	lsr	r24
     b88:	87 70       	andi	r24, 0x07	; 7
     b8a:	81 70       	andi	r24, 0x01	; 1
     b8c:	28 2f       	mov	r18, r24
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	3d 83       	std	Y+5, r19	; 0x05
     b92:	2c 83       	std	Y+4, r18	; 0x04
     b94:	8c 81       	ldd	r24, Y+4	; 0x04
     b96:	9d 81       	ldd	r25, Y+5	; 0x05
     b98:	00 97       	sbiw	r24, 0x00	; 0
     b9a:	b1 f1       	breq	.+108    	; 0xc08 <gpio_pin_direction_initialize+0xc2>
     b9c:	2c 81       	ldd	r18, Y+4	; 0x04
     b9e:	3d 81       	ldd	r19, Y+5	; 0x05
     ba0:	21 30       	cpi	r18, 0x01	; 1
     ba2:	31 05       	cpc	r19, r1
     ba4:	09 f0       	breq	.+2      	; 0xba8 <gpio_pin_direction_initialize+0x62>
     ba6:	60 c0       	rjmp	.+192    	; 0xc68 <gpio_pin_direction_initialize+0x122>
		{
		case DIRECTION_OUTPUT:		SET_BIT(*DDR_register[_pin_config->port],_pin_config->pin);break;
     ba8:	ea 81       	ldd	r30, Y+2	; 0x02
     baa:	fb 81       	ldd	r31, Y+3	; 0x03
     bac:	80 81       	ld	r24, Z
     bae:	83 70       	andi	r24, 0x03	; 3
     bb0:	88 2f       	mov	r24, r24
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	88 0f       	add	r24, r24
     bb6:	99 1f       	adc	r25, r25
     bb8:	fc 01       	movw	r30, r24
     bba:	ed 57       	subi	r30, 0x7D	; 125
     bbc:	ff 4f       	sbci	r31, 0xFF	; 255
     bbe:	a0 81       	ld	r26, Z
     bc0:	b1 81       	ldd	r27, Z+1	; 0x01
     bc2:	ea 81       	ldd	r30, Y+2	; 0x02
     bc4:	fb 81       	ldd	r31, Y+3	; 0x03
     bc6:	80 81       	ld	r24, Z
     bc8:	83 70       	andi	r24, 0x03	; 3
     bca:	88 2f       	mov	r24, r24
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	fc 01       	movw	r30, r24
     bd4:	ed 57       	subi	r30, 0x7D	; 125
     bd6:	ff 4f       	sbci	r31, 0xFF	; 255
     bd8:	01 90       	ld	r0, Z+
     bda:	f0 81       	ld	r31, Z
     bdc:	e0 2d       	mov	r30, r0
     bde:	80 81       	ld	r24, Z
     be0:	48 2f       	mov	r20, r24
     be2:	ea 81       	ldd	r30, Y+2	; 0x02
     be4:	fb 81       	ldd	r31, Y+3	; 0x03
     be6:	80 81       	ld	r24, Z
     be8:	86 95       	lsr	r24
     bea:	86 95       	lsr	r24
     bec:	87 70       	andi	r24, 0x07	; 7
     bee:	28 2f       	mov	r18, r24
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	02 2e       	mov	r0, r18
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <gpio_pin_direction_initialize+0xb8>
     bfa:	88 0f       	add	r24, r24
     bfc:	99 1f       	adc	r25, r25
     bfe:	0a 94       	dec	r0
     c00:	e2 f7       	brpl	.-8      	; 0xbfa <gpio_pin_direction_initialize+0xb4>
     c02:	84 2b       	or	r24, r20
     c04:	8c 93       	st	X, r24
     c06:	30 c0       	rjmp	.+96     	; 0xc68 <gpio_pin_direction_initialize+0x122>
		case DIRECTION_INPUT: 		CLR_BIT(*DDR_register[_pin_config->port],_pin_config->pin);break;
     c08:	ea 81       	ldd	r30, Y+2	; 0x02
     c0a:	fb 81       	ldd	r31, Y+3	; 0x03
     c0c:	80 81       	ld	r24, Z
     c0e:	83 70       	andi	r24, 0x03	; 3
     c10:	88 2f       	mov	r24, r24
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	88 0f       	add	r24, r24
     c16:	99 1f       	adc	r25, r25
     c18:	fc 01       	movw	r30, r24
     c1a:	ed 57       	subi	r30, 0x7D	; 125
     c1c:	ff 4f       	sbci	r31, 0xFF	; 255
     c1e:	a0 81       	ld	r26, Z
     c20:	b1 81       	ldd	r27, Z+1	; 0x01
     c22:	ea 81       	ldd	r30, Y+2	; 0x02
     c24:	fb 81       	ldd	r31, Y+3	; 0x03
     c26:	80 81       	ld	r24, Z
     c28:	83 70       	andi	r24, 0x03	; 3
     c2a:	88 2f       	mov	r24, r24
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	fc 01       	movw	r30, r24
     c34:	ed 57       	subi	r30, 0x7D	; 125
     c36:	ff 4f       	sbci	r31, 0xFF	; 255
     c38:	01 90       	ld	r0, Z+
     c3a:	f0 81       	ld	r31, Z
     c3c:	e0 2d       	mov	r30, r0
     c3e:	80 81       	ld	r24, Z
     c40:	48 2f       	mov	r20, r24
     c42:	ea 81       	ldd	r30, Y+2	; 0x02
     c44:	fb 81       	ldd	r31, Y+3	; 0x03
     c46:	80 81       	ld	r24, Z
     c48:	86 95       	lsr	r24
     c4a:	86 95       	lsr	r24
     c4c:	87 70       	andi	r24, 0x07	; 7
     c4e:	28 2f       	mov	r18, r24
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	02 2e       	mov	r0, r18
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <gpio_pin_direction_initialize+0x118>
     c5a:	88 0f       	add	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	0a 94       	dec	r0
     c60:	e2 f7       	brpl	.-8      	; 0xc5a <gpio_pin_direction_initialize+0x114>
     c62:	80 95       	com	r24
     c64:	84 23       	and	r24, r20
     c66:	8c 93       	st	X, r24
		}
	}
	return ret;
     c68:	89 81       	ldd	r24, Y+1	; 0x01
}
     c6a:	0f 90       	pop	r0
     c6c:	0f 90       	pop	r0
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	cf 91       	pop	r28
     c76:	df 91       	pop	r29
     c78:	08 95       	ret

00000c7a <gpio_pin_get_direction_status>:
 * @param _pin_config
 * @param direction_status
 * @return
 */
STD_ReturnStatus gpio_pin_get_direction_status(const Pin_Config_t *_pin_config,direction_t *direction_status)
{
     c7a:	df 93       	push	r29
     c7c:	cf 93       	push	r28
     c7e:	00 d0       	rcall	.+0      	; 0xc80 <gpio_pin_get_direction_status+0x6>
     c80:	00 d0       	rcall	.+0      	; 0xc82 <gpio_pin_get_direction_status+0x8>
     c82:	0f 92       	push	r0
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
     c88:	9b 83       	std	Y+3, r25	; 0x03
     c8a:	8a 83       	std	Y+2, r24	; 0x02
     c8c:	7d 83       	std	Y+5, r23	; 0x05
     c8e:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret=E_OK;
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	89 83       	std	Y+1, r24	; 0x01
		if(NULL==_pin_config || NULL==direction_status ||_pin_config->pin > PORT_PIN_MAX_NUMBER-1)
     c94:	8a 81       	ldd	r24, Y+2	; 0x02
     c96:	9b 81       	ldd	r25, Y+3	; 0x03
     c98:	00 97       	sbiw	r24, 0x00	; 0
     c9a:	79 f0       	breq	.+30     	; 0xcba <gpio_pin_get_direction_status+0x40>
     c9c:	8c 81       	ldd	r24, Y+4	; 0x04
     c9e:	9d 81       	ldd	r25, Y+5	; 0x05
     ca0:	00 97       	sbiw	r24, 0x00	; 0
     ca2:	59 f0       	breq	.+22     	; 0xcba <gpio_pin_get_direction_status+0x40>
     ca4:	ea 81       	ldd	r30, Y+2	; 0x02
     ca6:	fb 81       	ldd	r31, Y+3	; 0x03
     ca8:	80 81       	ld	r24, Z
     caa:	86 95       	lsr	r24
     cac:	86 95       	lsr	r24
     cae:	87 70       	andi	r24, 0x07	; 7
     cb0:	88 2f       	mov	r24, r24
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	88 30       	cpi	r24, 0x08	; 8
     cb6:	91 05       	cpc	r25, r1
     cb8:	14 f0       	brlt	.+4      	; 0xcbe <gpio_pin_get_direction_status+0x44>
		{
			ret=E_NOT_OK;
     cba:	19 82       	std	Y+1, r1	; 0x01
     cbc:	27 c0       	rjmp	.+78     	; 0xd0c <gpio_pin_get_direction_status+0x92>
		}
		else
		{
			*direction_status=READ_BIT(*DDR_register[_pin_config->direction],_pin_config->pin);
     cbe:	ea 81       	ldd	r30, Y+2	; 0x02
     cc0:	fb 81       	ldd	r31, Y+3	; 0x03
     cc2:	80 81       	ld	r24, Z
     cc4:	82 95       	swap	r24
     cc6:	86 95       	lsr	r24
     cc8:	87 70       	andi	r24, 0x07	; 7
     cca:	81 70       	andi	r24, 0x01	; 1
     ccc:	88 2f       	mov	r24, r24
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	88 0f       	add	r24, r24
     cd2:	99 1f       	adc	r25, r25
     cd4:	fc 01       	movw	r30, r24
     cd6:	ed 57       	subi	r30, 0x7D	; 125
     cd8:	ff 4f       	sbci	r31, 0xFF	; 255
     cda:	01 90       	ld	r0, Z+
     cdc:	f0 81       	ld	r31, Z
     cde:	e0 2d       	mov	r30, r0
     ce0:	80 81       	ld	r24, Z
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	ea 81       	ldd	r30, Y+2	; 0x02
     ce8:	fb 81       	ldd	r31, Y+3	; 0x03
     cea:	80 81       	ld	r24, Z
     cec:	86 95       	lsr	r24
     cee:	86 95       	lsr	r24
     cf0:	87 70       	andi	r24, 0x07	; 7
     cf2:	88 2f       	mov	r24, r24
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	a9 01       	movw	r20, r18
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <gpio_pin_get_direction_status+0x84>
     cfa:	55 95       	asr	r21
     cfc:	47 95       	ror	r20
     cfe:	8a 95       	dec	r24
     d00:	e2 f7       	brpl	.-8      	; 0xcfa <gpio_pin_get_direction_status+0x80>
     d02:	ca 01       	movw	r24, r20
     d04:	81 70       	andi	r24, 0x01	; 1
     d06:	ec 81       	ldd	r30, Y+4	; 0x04
     d08:	fd 81       	ldd	r31, Y+5	; 0x05
     d0a:	80 83       	st	Z, r24
		}
		return ret;
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
}
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	cf 91       	pop	r28
     d1a:	df 91       	pop	r29
     d1c:	08 95       	ret

00000d1e <gpio_pin_write_logic>:
 * @param _pin_config
 * @param logic
 * @return
 */
STD_ReturnStatus gpio_pin_write_logic(const Pin_Config_t *_pin_config,Logic_t logic)
{
     d1e:	df 93       	push	r29
     d20:	cf 93       	push	r28
     d22:	00 d0       	rcall	.+0      	; 0xd24 <gpio_pin_write_logic+0x6>
     d24:	00 d0       	rcall	.+0      	; 0xd26 <gpio_pin_write_logic+0x8>
     d26:	00 d0       	rcall	.+0      	; 0xd28 <gpio_pin_write_logic+0xa>
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
     d2c:	9b 83       	std	Y+3, r25	; 0x03
     d2e:	8a 83       	std	Y+2, r24	; 0x02
     d30:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret=E_OK;
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	89 83       	std	Y+1, r24	; 0x01
		if(NULL==_pin_config||_pin_config->pin > PORT_PIN_MAX_NUMBER-1)
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	9b 81       	ldd	r25, Y+3	; 0x03
     d3a:	00 97       	sbiw	r24, 0x00	; 0
     d3c:	59 f0       	breq	.+22     	; 0xd54 <gpio_pin_write_logic+0x36>
     d3e:	ea 81       	ldd	r30, Y+2	; 0x02
     d40:	fb 81       	ldd	r31, Y+3	; 0x03
     d42:	80 81       	ld	r24, Z
     d44:	86 95       	lsr	r24
     d46:	86 95       	lsr	r24
     d48:	87 70       	andi	r24, 0x07	; 7
     d4a:	88 2f       	mov	r24, r24
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	88 30       	cpi	r24, 0x08	; 8
     d50:	91 05       	cpc	r25, r1
     d52:	14 f0       	brlt	.+4      	; 0xd58 <gpio_pin_write_logic+0x3a>
		{
			ret=E_NOT_OK;
     d54:	19 82       	std	Y+1, r1	; 0x01
     d56:	6f c0       	rjmp	.+222    	; 0xe36 <gpio_pin_write_logic+0x118>
		}
		else
		{
			switch(logic)
     d58:	8c 81       	ldd	r24, Y+4	; 0x04
     d5a:	28 2f       	mov	r18, r24
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	3e 83       	std	Y+6, r19	; 0x06
     d60:	2d 83       	std	Y+5, r18	; 0x05
     d62:	8d 81       	ldd	r24, Y+5	; 0x05
     d64:	9e 81       	ldd	r25, Y+6	; 0x06
     d66:	00 97       	sbiw	r24, 0x00	; 0
     d68:	b1 f1       	breq	.+108    	; 0xdd6 <gpio_pin_write_logic+0xb8>
     d6a:	2d 81       	ldd	r18, Y+5	; 0x05
     d6c:	3e 81       	ldd	r19, Y+6	; 0x06
     d6e:	21 30       	cpi	r18, 0x01	; 1
     d70:	31 05       	cpc	r19, r1
     d72:	09 f0       	breq	.+2      	; 0xd76 <gpio_pin_write_logic+0x58>
     d74:	60 c0       	rjmp	.+192    	; 0xe36 <gpio_pin_write_logic+0x118>
			{
			case GPIO_HIGH:			SET_BIT(*PORT_register[_pin_config->port],_pin_config->pin);break;
     d76:	ea 81       	ldd	r30, Y+2	; 0x02
     d78:	fb 81       	ldd	r31, Y+3	; 0x03
     d7a:	80 81       	ld	r24, Z
     d7c:	83 70       	andi	r24, 0x03	; 3
     d7e:	88 2f       	mov	r24, r24
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	88 0f       	add	r24, r24
     d84:	99 1f       	adc	r25, r25
     d86:	fc 01       	movw	r30, r24
     d88:	e5 57       	subi	r30, 0x75	; 117
     d8a:	ff 4f       	sbci	r31, 0xFF	; 255
     d8c:	a0 81       	ld	r26, Z
     d8e:	b1 81       	ldd	r27, Z+1	; 0x01
     d90:	ea 81       	ldd	r30, Y+2	; 0x02
     d92:	fb 81       	ldd	r31, Y+3	; 0x03
     d94:	80 81       	ld	r24, Z
     d96:	83 70       	andi	r24, 0x03	; 3
     d98:	88 2f       	mov	r24, r24
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	fc 01       	movw	r30, r24
     da2:	e5 57       	subi	r30, 0x75	; 117
     da4:	ff 4f       	sbci	r31, 0xFF	; 255
     da6:	01 90       	ld	r0, Z+
     da8:	f0 81       	ld	r31, Z
     daa:	e0 2d       	mov	r30, r0
     dac:	80 81       	ld	r24, Z
     dae:	48 2f       	mov	r20, r24
     db0:	ea 81       	ldd	r30, Y+2	; 0x02
     db2:	fb 81       	ldd	r31, Y+3	; 0x03
     db4:	80 81       	ld	r24, Z
     db6:	86 95       	lsr	r24
     db8:	86 95       	lsr	r24
     dba:	87 70       	andi	r24, 0x07	; 7
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	02 2e       	mov	r0, r18
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <gpio_pin_write_logic+0xae>
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	0a 94       	dec	r0
     dce:	e2 f7       	brpl	.-8      	; 0xdc8 <gpio_pin_write_logic+0xaa>
     dd0:	84 2b       	or	r24, r20
     dd2:	8c 93       	st	X, r24
     dd4:	30 c0       	rjmp	.+96     	; 0xe36 <gpio_pin_write_logic+0x118>
			case GPIO_LOW:			CLR_BIT(*PORT_register[_pin_config->port],_pin_config->pin);break;
     dd6:	ea 81       	ldd	r30, Y+2	; 0x02
     dd8:	fb 81       	ldd	r31, Y+3	; 0x03
     dda:	80 81       	ld	r24, Z
     ddc:	83 70       	andi	r24, 0x03	; 3
     dde:	88 2f       	mov	r24, r24
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	fc 01       	movw	r30, r24
     de8:	e5 57       	subi	r30, 0x75	; 117
     dea:	ff 4f       	sbci	r31, 0xFF	; 255
     dec:	a0 81       	ld	r26, Z
     dee:	b1 81       	ldd	r27, Z+1	; 0x01
     df0:	ea 81       	ldd	r30, Y+2	; 0x02
     df2:	fb 81       	ldd	r31, Y+3	; 0x03
     df4:	80 81       	ld	r24, Z
     df6:	83 70       	andi	r24, 0x03	; 3
     df8:	88 2f       	mov	r24, r24
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	fc 01       	movw	r30, r24
     e02:	e5 57       	subi	r30, 0x75	; 117
     e04:	ff 4f       	sbci	r31, 0xFF	; 255
     e06:	01 90       	ld	r0, Z+
     e08:	f0 81       	ld	r31, Z
     e0a:	e0 2d       	mov	r30, r0
     e0c:	80 81       	ld	r24, Z
     e0e:	48 2f       	mov	r20, r24
     e10:	ea 81       	ldd	r30, Y+2	; 0x02
     e12:	fb 81       	ldd	r31, Y+3	; 0x03
     e14:	80 81       	ld	r24, Z
     e16:	86 95       	lsr	r24
     e18:	86 95       	lsr	r24
     e1a:	87 70       	andi	r24, 0x07	; 7
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	02 2e       	mov	r0, r18
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <gpio_pin_write_logic+0x10e>
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	0a 94       	dec	r0
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <gpio_pin_write_logic+0x10a>
     e30:	80 95       	com	r24
     e32:	84 23       	and	r24, r20
     e34:	8c 93       	st	X, r24
			}
		}
		return ret;
     e36:	89 81       	ldd	r24, Y+1	; 0x01
}
     e38:	26 96       	adiw	r28, 0x06	; 6
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	f8 94       	cli
     e3e:	de bf       	out	0x3e, r29	; 62
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	cd bf       	out	0x3d, r28	; 61
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <gpio_pin_read_logic>:
 * @param _pin_config
 * @param logic
 * @return
 */
STD_ReturnStatus gpio_pin_read_logic(const Pin_Config_t *_pin_config,Logic_t *logic)
{
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	00 d0       	rcall	.+0      	; 0xe50 <gpio_pin_read_logic+0x6>
     e50:	00 d0       	rcall	.+0      	; 0xe52 <gpio_pin_read_logic+0x8>
     e52:	0f 92       	push	r0
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
     e58:	9b 83       	std	Y+3, r25	; 0x03
     e5a:	8a 83       	std	Y+2, r24	; 0x02
     e5c:	7d 83       	std	Y+5, r23	; 0x05
     e5e:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret=E_OK;
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	89 83       	std	Y+1, r24	; 0x01
		if(NULL==_pin_config|| NULL== logic||_pin_config->pin > PORT_PIN_MAX_NUMBER-1)
     e64:	8a 81       	ldd	r24, Y+2	; 0x02
     e66:	9b 81       	ldd	r25, Y+3	; 0x03
     e68:	00 97       	sbiw	r24, 0x00	; 0
     e6a:	79 f0       	breq	.+30     	; 0xe8a <gpio_pin_read_logic+0x40>
     e6c:	8c 81       	ldd	r24, Y+4	; 0x04
     e6e:	9d 81       	ldd	r25, Y+5	; 0x05
     e70:	00 97       	sbiw	r24, 0x00	; 0
     e72:	59 f0       	breq	.+22     	; 0xe8a <gpio_pin_read_logic+0x40>
     e74:	ea 81       	ldd	r30, Y+2	; 0x02
     e76:	fb 81       	ldd	r31, Y+3	; 0x03
     e78:	80 81       	ld	r24, Z
     e7a:	86 95       	lsr	r24
     e7c:	86 95       	lsr	r24
     e7e:	87 70       	andi	r24, 0x07	; 7
     e80:	88 2f       	mov	r24, r24
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	88 30       	cpi	r24, 0x08	; 8
     e86:	91 05       	cpc	r25, r1
     e88:	14 f0       	brlt	.+4      	; 0xe8e <gpio_pin_read_logic+0x44>
		{
			ret=E_NOT_OK;
     e8a:	19 82       	std	Y+1, r1	; 0x01
     e8c:	24 c0       	rjmp	.+72     	; 0xed6 <gpio_pin_read_logic+0x8c>
		}
		else
		{
			*logic=READ_BIT(*PIN_register[_pin_config->port],_pin_config->pin);
     e8e:	ea 81       	ldd	r30, Y+2	; 0x02
     e90:	fb 81       	ldd	r31, Y+3	; 0x03
     e92:	80 81       	ld	r24, Z
     e94:	83 70       	andi	r24, 0x03	; 3
     e96:	88 2f       	mov	r24, r24
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	fc 01       	movw	r30, r24
     ea0:	ed 56       	subi	r30, 0x6D	; 109
     ea2:	ff 4f       	sbci	r31, 0xFF	; 255
     ea4:	01 90       	ld	r0, Z+
     ea6:	f0 81       	ld	r31, Z
     ea8:	e0 2d       	mov	r30, r0
     eaa:	80 81       	ld	r24, Z
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	ea 81       	ldd	r30, Y+2	; 0x02
     eb2:	fb 81       	ldd	r31, Y+3	; 0x03
     eb4:	80 81       	ld	r24, Z
     eb6:	86 95       	lsr	r24
     eb8:	86 95       	lsr	r24
     eba:	87 70       	andi	r24, 0x07	; 7
     ebc:	88 2f       	mov	r24, r24
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	a9 01       	movw	r20, r18
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <gpio_pin_read_logic+0x7e>
     ec4:	55 95       	asr	r21
     ec6:	47 95       	ror	r20
     ec8:	8a 95       	dec	r24
     eca:	e2 f7       	brpl	.-8      	; 0xec4 <gpio_pin_read_logic+0x7a>
     ecc:	ca 01       	movw	r24, r20
     ece:	81 70       	andi	r24, 0x01	; 1
     ed0:	ec 81       	ldd	r30, Y+4	; 0x04
     ed2:	fd 81       	ldd	r31, Y+5	; 0x05
     ed4:	80 83       	st	Z, r24
		}
		return ret;
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	cf 91       	pop	r28
     ee4:	df 91       	pop	r29
     ee6:	08 95       	ret

00000ee8 <gpio_pin_toggle_logic>:
 *
 * @param _pin_config
 * @return
 */
STD_ReturnStatus gpio_pin_toggle_logic(const Pin_Config_t *_pin_config)
{
     ee8:	df 93       	push	r29
     eea:	cf 93       	push	r28
     eec:	00 d0       	rcall	.+0      	; 0xeee <gpio_pin_toggle_logic+0x6>
     eee:	0f 92       	push	r0
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
     ef4:	9b 83       	std	Y+3, r25	; 0x03
     ef6:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret=E_OK;
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	89 83       	std	Y+1, r24	; 0x01
		if(NULL==_pin_config||_pin_config->pin > PORT_PIN_MAX_NUMBER-1)
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	9b 81       	ldd	r25, Y+3	; 0x03
     f00:	00 97       	sbiw	r24, 0x00	; 0
     f02:	59 f0       	breq	.+22     	; 0xf1a <gpio_pin_toggle_logic+0x32>
     f04:	ea 81       	ldd	r30, Y+2	; 0x02
     f06:	fb 81       	ldd	r31, Y+3	; 0x03
     f08:	80 81       	ld	r24, Z
     f0a:	86 95       	lsr	r24
     f0c:	86 95       	lsr	r24
     f0e:	87 70       	andi	r24, 0x07	; 7
     f10:	88 2f       	mov	r24, r24
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	88 30       	cpi	r24, 0x08	; 8
     f16:	91 05       	cpc	r25, r1
     f18:	14 f0       	brlt	.+4      	; 0xf1e <gpio_pin_toggle_logic+0x36>
		{
			ret=E_NOT_OK;
     f1a:	19 82       	std	Y+1, r1	; 0x01
     f1c:	2f c0       	rjmp	.+94     	; 0xf7c <gpio_pin_toggle_logic+0x94>
		}
		else
		{
			TOGGLE_BIT(*PORT_register[_pin_config->port],_pin_config->pin);
     f1e:	ea 81       	ldd	r30, Y+2	; 0x02
     f20:	fb 81       	ldd	r31, Y+3	; 0x03
     f22:	80 81       	ld	r24, Z
     f24:	83 70       	andi	r24, 0x03	; 3
     f26:	88 2f       	mov	r24, r24
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	fc 01       	movw	r30, r24
     f30:	e5 57       	subi	r30, 0x75	; 117
     f32:	ff 4f       	sbci	r31, 0xFF	; 255
     f34:	a0 81       	ld	r26, Z
     f36:	b1 81       	ldd	r27, Z+1	; 0x01
     f38:	ea 81       	ldd	r30, Y+2	; 0x02
     f3a:	fb 81       	ldd	r31, Y+3	; 0x03
     f3c:	80 81       	ld	r24, Z
     f3e:	83 70       	andi	r24, 0x03	; 3
     f40:	88 2f       	mov	r24, r24
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	fc 01       	movw	r30, r24
     f4a:	e5 57       	subi	r30, 0x75	; 117
     f4c:	ff 4f       	sbci	r31, 0xFF	; 255
     f4e:	01 90       	ld	r0, Z+
     f50:	f0 81       	ld	r31, Z
     f52:	e0 2d       	mov	r30, r0
     f54:	80 81       	ld	r24, Z
     f56:	48 2f       	mov	r20, r24
     f58:	ea 81       	ldd	r30, Y+2	; 0x02
     f5a:	fb 81       	ldd	r31, Y+3	; 0x03
     f5c:	80 81       	ld	r24, Z
     f5e:	86 95       	lsr	r24
     f60:	86 95       	lsr	r24
     f62:	87 70       	andi	r24, 0x07	; 7
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	02 2e       	mov	r0, r18
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <gpio_pin_toggle_logic+0x8c>
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	0a 94       	dec	r0
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <gpio_pin_toggle_logic+0x88>
     f78:	84 27       	eor	r24, r20
     f7a:	8c 93       	st	X, r24
		}
		return ret;
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <gpio_pin_initialize>:
 *
 * @param _pin_config
 * @return
 */
STD_ReturnStatus gpio_pin_initialize(const Pin_Config_t *_pin_config)
{
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	00 d0       	rcall	.+0      	; 0xf90 <gpio_pin_initialize+0x6>
     f90:	0f 92       	push	r0
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	9b 83       	std	Y+3, r25	; 0x03
     f98:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_OK;
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==_pin_config)
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	9b 81       	ldd	r25, Y+3	; 0x03
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	11 f4       	brne	.+4      	; 0xfaa <gpio_pin_initialize+0x20>
	{
		ret=E_NOT_OK;
     fa6:	19 82       	std	Y+1, r1	; 0x01
     fa8:	14 c0       	rjmp	.+40     	; 0xfd2 <gpio_pin_initialize+0x48>
	}
	else
	{
		ret= gpio_pin_direction_initialize(_pin_config);
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	9b 81       	ldd	r25, Y+3	; 0x03
     fae:	0e 94 a3 05 	call	0xb46	; 0xb46 <gpio_pin_direction_initialize>
     fb2:	89 83       	std	Y+1, r24	; 0x01
		ret= gpio_pin_write_logic(_pin_config,_pin_config->logic);
     fb4:	ea 81       	ldd	r30, Y+2	; 0x02
     fb6:	fb 81       	ldd	r31, Y+3	; 0x03
     fb8:	80 81       	ld	r24, Z
     fba:	82 95       	swap	r24
     fbc:	86 95       	lsr	r24
     fbe:	86 95       	lsr	r24
     fc0:	83 70       	andi	r24, 0x03	; 3
     fc2:	81 70       	andi	r24, 0x01	; 1
     fc4:	28 2f       	mov	r18, r24
     fc6:	8a 81       	ldd	r24, Y+2	; 0x02
     fc8:	9b 81       	ldd	r25, Y+3	; 0x03
     fca:	62 2f       	mov	r22, r18
     fcc:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
     fd0:	89 83       	std	Y+1, r24	; 0x01
	}

	return ret;
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
}
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	08 95       	ret

00000fe0 <gpio_port_direction_initialize>:
 * @param port
 * @param direction
 * @return
 */
STD_ReturnStatus gpio_port_direction_initialize(port_index_t port,uint8 direction)
{
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <gpio_port_direction_initialize+0x6>
     fe6:	0f 92       	push	r0
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
     fec:	8a 83       	std	Y+2, r24	; 0x02
     fee:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnStatus ret=E_OK;
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	89 83       	std	Y+1, r24	; 0x01
	if(port>PORT_MAX_NUMBER-1)
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	84 30       	cpi	r24, 0x04	; 4
     ff8:	10 f0       	brcs	.+4      	; 0xffe <gpio_port_direction_initialize+0x1e>
	{
		ret=E_NOT_OK;
     ffa:	19 82       	std	Y+1, r1	; 0x01
     ffc:	0d c0       	rjmp	.+26     	; 0x1018 <gpio_port_direction_initialize+0x38>
	}
	else
	{
		*DDR_register[port]=direction;
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	88 2f       	mov	r24, r24
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	fc 01       	movw	r30, r24
    100a:	ed 57       	subi	r30, 0x7D	; 125
    100c:	ff 4f       	sbci	r31, 0xFF	; 255
    100e:	01 90       	ld	r0, Z+
    1010:	f0 81       	ld	r31, Z
    1012:	e0 2d       	mov	r30, r0
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	80 83       	st	Z, r24
	}

	return ret;
    1018:	89 81       	ldd	r24, Y+1	; 0x01
}
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <gpio_port_get_direction_status>:
STD_ReturnStatus gpio_port_get_direction_status(port_index_t port,uint8 *direction_status)
{
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	00 d0       	rcall	.+0      	; 0x102c <gpio_port_get_direction_status+0x6>
    102c:	00 d0       	rcall	.+0      	; 0x102e <gpio_port_get_direction_status+0x8>
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
    1032:	8a 83       	std	Y+2, r24	; 0x02
    1034:	7c 83       	std	Y+4, r23	; 0x04
    1036:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnStatus ret=E_OK;
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==direction_status && port>PORT_MAX_NUMBER-1)
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	9c 81       	ldd	r25, Y+4	; 0x04
    1040:	00 97       	sbiw	r24, 0x00	; 0
    1042:	29 f4       	brne	.+10     	; 0x104e <gpio_port_get_direction_status+0x28>
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	84 30       	cpi	r24, 0x04	; 4
    1048:	10 f0       	brcs	.+4      	; 0x104e <gpio_port_get_direction_status+0x28>
	{
		ret=E_NOT_OK;
    104a:	19 82       	std	Y+1, r1	; 0x01
    104c:	0f c0       	rjmp	.+30     	; 0x106c <gpio_port_get_direction_status+0x46>
	}
	else
	{
		*direction_status=*DDR_register[port];
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	88 2f       	mov	r24, r24
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	fc 01       	movw	r30, r24
    105a:	ed 57       	subi	r30, 0x7D	; 125
    105c:	ff 4f       	sbci	r31, 0xFF	; 255
    105e:	01 90       	ld	r0, Z+
    1060:	f0 81       	ld	r31, Z
    1062:	e0 2d       	mov	r30, r0
    1064:	80 81       	ld	r24, Z
    1066:	eb 81       	ldd	r30, Y+3	; 0x03
    1068:	fc 81       	ldd	r31, Y+4	; 0x04
    106a:	80 83       	st	Z, r24
	}

	return ret;
    106c:	89 81       	ldd	r24, Y+1	; 0x01
}
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	08 95       	ret

0000107c <gpio_port_write_logic>:
 * @param port
 * @param logic
 * @return
 */
STD_ReturnStatus gpio_port_write_logic(port_index_t port,uint8 logic)
{
    107c:	df 93       	push	r29
    107e:	cf 93       	push	r28
    1080:	00 d0       	rcall	.+0      	; 0x1082 <gpio_port_write_logic+0x6>
    1082:	0f 92       	push	r0
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	8a 83       	std	Y+2, r24	; 0x02
    108a:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnStatus ret=E_OK;
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	89 83       	std	Y+1, r24	; 0x01
	if(port>PORT_MAX_NUMBER-1)
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	84 30       	cpi	r24, 0x04	; 4
    1094:	10 f0       	brcs	.+4      	; 0x109a <gpio_port_write_logic+0x1e>
		{
			ret=E_NOT_OK;
    1096:	19 82       	std	Y+1, r1	; 0x01
    1098:	0d c0       	rjmp	.+26     	; 0x10b4 <gpio_port_write_logic+0x38>
		}
		else
		{
			*PORT_register[port]=logic;
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	88 2f       	mov	r24, r24
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	fc 01       	movw	r30, r24
    10a6:	e5 57       	subi	r30, 0x75	; 117
    10a8:	ff 4f       	sbci	r31, 0xFF	; 255
    10aa:	01 90       	ld	r0, Z+
    10ac:	f0 81       	ld	r31, Z
    10ae:	e0 2d       	mov	r30, r0
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	80 83       	st	Z, r24
		}

	return ret;
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	08 95       	ret

000010c2 <gpio_port_read_logic>:
STD_ReturnStatus gpio_port_read_logic(port_index_t port,Logic_t *logic)
{
    10c2:	df 93       	push	r29
    10c4:	cf 93       	push	r28
    10c6:	00 d0       	rcall	.+0      	; 0x10c8 <gpio_port_read_logic+0x6>
    10c8:	00 d0       	rcall	.+0      	; 0x10ca <gpio_port_read_logic+0x8>
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
    10ce:	8a 83       	std	Y+2, r24	; 0x02
    10d0:	7c 83       	std	Y+4, r23	; 0x04
    10d2:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnStatus ret=E_OK;
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==logic && port>PORT_MAX_NUMBER-1)
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	9c 81       	ldd	r25, Y+4	; 0x04
    10dc:	00 97       	sbiw	r24, 0x00	; 0
    10de:	29 f4       	brne	.+10     	; 0x10ea <gpio_port_read_logic+0x28>
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	84 30       	cpi	r24, 0x04	; 4
    10e4:	10 f0       	brcs	.+4      	; 0x10ea <gpio_port_read_logic+0x28>
	{
		ret=E_NOT_OK;
    10e6:	19 82       	std	Y+1, r1	; 0x01
    10e8:	0f c0       	rjmp	.+30     	; 0x1108 <gpio_port_read_logic+0x46>
	}
	else
	{
		*logic=*PORT_register[port];
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	88 2f       	mov	r24, r24
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	fc 01       	movw	r30, r24
    10f6:	e5 57       	subi	r30, 0x75	; 117
    10f8:	ff 4f       	sbci	r31, 0xFF	; 255
    10fa:	01 90       	ld	r0, Z+
    10fc:	f0 81       	ld	r31, Z
    10fe:	e0 2d       	mov	r30, r0
    1100:	80 81       	ld	r24, Z
    1102:	eb 81       	ldd	r30, Y+3	; 0x03
    1104:	fc 81       	ldd	r31, Y+4	; 0x04
    1106:	80 83       	st	Z, r24
	}

	return ret;
    1108:	89 81       	ldd	r24, Y+1	; 0x01
}
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <gpio_port_toggle_logic>:
 *
 * @param port
 * @return
 */
STD_ReturnStatus gpio_port_toggle_logic(port_index_t port)
{
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	00 d0       	rcall	.+0      	; 0x111e <gpio_port_toggle_logic+0x6>
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret=E_OK;
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	89 83       	std	Y+1, r24	; 0x01
	if(port>PORT_MAX_NUMBER-1)
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	84 30       	cpi	r24, 0x04	; 4
    112c:	10 f0       	brcs	.+4      	; 0x1132 <gpio_port_toggle_logic+0x1a>
	{
		ret=E_NOT_OK;
    112e:	19 82       	std	Y+1, r1	; 0x01
    1130:	18 c0       	rjmp	.+48     	; 0x1162 <gpio_port_toggle_logic+0x4a>
	}
	else
	{
		*PORT_register[port]^=0xff;
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	88 2f       	mov	r24, r24
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	fc 01       	movw	r30, r24
    113e:	e5 57       	subi	r30, 0x75	; 117
    1140:	ff 4f       	sbci	r31, 0xFF	; 255
    1142:	a0 81       	ld	r26, Z
    1144:	b1 81       	ldd	r27, Z+1	; 0x01
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	88 2f       	mov	r24, r24
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	fc 01       	movw	r30, r24
    1152:	e5 57       	subi	r30, 0x75	; 117
    1154:	ff 4f       	sbci	r31, 0xFF	; 255
    1156:	01 90       	ld	r0, Z+
    1158:	f0 81       	ld	r31, Z
    115a:	e0 2d       	mov	r30, r0
    115c:	80 81       	ld	r24, Z
    115e:	80 95       	com	r24
    1160:	8c 93       	st	X, r24
	}


	return ret;
    1162:	89 81       	ldd	r24, Y+1	; 0x01
}
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	08 95       	ret

0000116e <relay_initialize>:
 *      Author: hazem
 */
#include "ECU_RELAY.h"

STD_ReturnStatus relay_initialize(const relay_t *_relay)
{
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	00 d0       	rcall	.+0      	; 0x1174 <relay_initialize+0x6>
    1174:	00 d0       	rcall	.+0      	; 0x1176 <relay_initialize+0x8>
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	9c 83       	std	Y+4, r25	; 0x04
    117c:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret = E_OK;
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == _relay)
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	9c 81       	ldd	r25, Y+4	; 0x04
    1186:	00 97       	sbiw	r24, 0x00	; 0
    1188:	11 f4       	brne	.+4      	; 0x118e <relay_initialize+0x20>
	{
		ret = E_NOT_OK;
    118a:	19 82       	std	Y+1, r1	; 0x01
    118c:	34 c0       	rjmp	.+104    	; 0x11f6 <relay_initialize+0x88>
		Pin_Config_t pin_obj={
				.port= _relay->relay_port,
				.pin=_relay->relay_pin,
				.direction=DIRECTION_OUTPUT,
				.logic=_relay->relay_status
		};
    118e:	eb 81       	ldd	r30, Y+3	; 0x03
    1190:	fc 81       	ldd	r31, Y+4	; 0x04
    1192:	80 81       	ld	r24, Z
    1194:	8f 70       	andi	r24, 0x0F	; 15
    1196:	28 2f       	mov	r18, r24
    1198:	23 70       	andi	r18, 0x03	; 3
    119a:	eb 81       	ldd	r30, Y+3	; 0x03
    119c:	fc 81       	ldd	r31, Y+4	; 0x04
    119e:	80 81       	ld	r24, Z
    11a0:	98 2f       	mov	r25, r24
    11a2:	92 95       	swap	r25
    11a4:	9f 70       	andi	r25, 0x0F	; 15
    11a6:	97 70       	andi	r25, 0x07	; 7
    11a8:	eb 81       	ldd	r30, Y+3	; 0x03
    11aa:	fc 81       	ldd	r31, Y+4	; 0x04
    11ac:	80 81       	ld	r24, Z
    11ae:	38 2f       	mov	r19, r24
    11b0:	33 1f       	adc	r19, r19
    11b2:	33 27       	eor	r19, r19
    11b4:	33 1f       	adc	r19, r19
    11b6:	23 70       	andi	r18, 0x03	; 3
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	8c 7f       	andi	r24, 0xFC	; 252
    11bc:	82 2b       	or	r24, r18
    11be:	8a 83       	std	Y+2, r24	; 0x02
    11c0:	89 2f       	mov	r24, r25
    11c2:	87 70       	andi	r24, 0x07	; 7
    11c4:	98 2f       	mov	r25, r24
    11c6:	99 0f       	add	r25, r25
    11c8:	99 0f       	add	r25, r25
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	83 7e       	andi	r24, 0xE3	; 227
    11ce:	89 2b       	or	r24, r25
    11d0:	8a 83       	std	Y+2, r24	; 0x02
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	80 62       	ori	r24, 0x20	; 32
    11d6:	8a 83       	std	Y+2, r24	; 0x02
    11d8:	83 2f       	mov	r24, r19
    11da:	81 70       	andi	r24, 0x01	; 1
    11dc:	98 2f       	mov	r25, r24
    11de:	92 95       	swap	r25
    11e0:	99 0f       	add	r25, r25
    11e2:	99 0f       	add	r25, r25
    11e4:	90 7c       	andi	r25, 0xC0	; 192
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	8f 7b       	andi	r24, 0xBF	; 191
    11ea:	89 2b       	or	r24, r25
    11ec:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_initialize(&pin_obj);
    11ee:	ce 01       	movw	r24, r28
    11f0:	02 96       	adiw	r24, 0x02	; 2
    11f2:	0e 94 c5 07 	call	0xf8a	; 0xf8a <gpio_pin_initialize>
	}

	return ret;
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <relay_turn_on>:



STD_ReturnStatus relay_turn_on(const relay_t *_relay)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	00 d0       	rcall	.+0      	; 0x120c <relay_turn_on+0x6>
    120c:	00 d0       	rcall	.+0      	; 0x120e <relay_turn_on+0x8>
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	9c 83       	std	Y+4, r25	; 0x04
    1214:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret = E_OK;
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == _relay)
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	9c 81       	ldd	r25, Y+4	; 0x04
    121e:	00 97       	sbiw	r24, 0x00	; 0
    1220:	11 f4       	brne	.+4      	; 0x1226 <relay_turn_on+0x20>
	{
		ret = E_NOT_OK;
    1222:	19 82       	std	Y+1, r1	; 0x01
    1224:	35 c0       	rjmp	.+106    	; 0x1290 <relay_turn_on+0x8a>
		Pin_Config_t pin_obj={
				.port= _relay->relay_port,
				.pin=_relay->relay_pin,
				.direction=DIRECTION_OUTPUT,
				.logic=_relay->relay_status
		};
    1226:	eb 81       	ldd	r30, Y+3	; 0x03
    1228:	fc 81       	ldd	r31, Y+4	; 0x04
    122a:	80 81       	ld	r24, Z
    122c:	8f 70       	andi	r24, 0x0F	; 15
    122e:	28 2f       	mov	r18, r24
    1230:	23 70       	andi	r18, 0x03	; 3
    1232:	eb 81       	ldd	r30, Y+3	; 0x03
    1234:	fc 81       	ldd	r31, Y+4	; 0x04
    1236:	80 81       	ld	r24, Z
    1238:	98 2f       	mov	r25, r24
    123a:	92 95       	swap	r25
    123c:	9f 70       	andi	r25, 0x0F	; 15
    123e:	97 70       	andi	r25, 0x07	; 7
    1240:	eb 81       	ldd	r30, Y+3	; 0x03
    1242:	fc 81       	ldd	r31, Y+4	; 0x04
    1244:	80 81       	ld	r24, Z
    1246:	38 2f       	mov	r19, r24
    1248:	33 1f       	adc	r19, r19
    124a:	33 27       	eor	r19, r19
    124c:	33 1f       	adc	r19, r19
    124e:	23 70       	andi	r18, 0x03	; 3
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	8c 7f       	andi	r24, 0xFC	; 252
    1254:	82 2b       	or	r24, r18
    1256:	8a 83       	std	Y+2, r24	; 0x02
    1258:	89 2f       	mov	r24, r25
    125a:	87 70       	andi	r24, 0x07	; 7
    125c:	98 2f       	mov	r25, r24
    125e:	99 0f       	add	r25, r25
    1260:	99 0f       	add	r25, r25
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	83 7e       	andi	r24, 0xE3	; 227
    1266:	89 2b       	or	r24, r25
    1268:	8a 83       	std	Y+2, r24	; 0x02
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	80 62       	ori	r24, 0x20	; 32
    126e:	8a 83       	std	Y+2, r24	; 0x02
    1270:	83 2f       	mov	r24, r19
    1272:	81 70       	andi	r24, 0x01	; 1
    1274:	98 2f       	mov	r25, r24
    1276:	92 95       	swap	r25
    1278:	99 0f       	add	r25, r25
    127a:	99 0f       	add	r25, r25
    127c:	90 7c       	andi	r25, 0xC0	; 192
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	8f 7b       	andi	r24, 0xBF	; 191
    1282:	89 2b       	or	r24, r25
    1284:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_write_logic(&pin_obj,GPIO_HIGH);
    1286:	ce 01       	movw	r24, r28
    1288:	02 96       	adiw	r24, 0x02	; 2
    128a:	61 e0       	ldi	r22, 0x01	; 1
    128c:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
	}


	return ret;
    1290:	89 81       	ldd	r24, Y+1	; 0x01
}
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <relay_turn_off>:
STD_ReturnStatus relay_turn_off(const relay_t *_relay)
{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <relay_turn_off+0x6>
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <relay_turn_off+0x8>
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	9c 83       	std	Y+4, r25	; 0x04
    12ae:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret = E_OK;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == _relay)
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	9c 81       	ldd	r25, Y+4	; 0x04
    12b8:	00 97       	sbiw	r24, 0x00	; 0
    12ba:	11 f4       	brne	.+4      	; 0x12c0 <relay_turn_off+0x20>
	{
		ret = E_NOT_OK;
    12bc:	19 82       	std	Y+1, r1	; 0x01
    12be:	35 c0       	rjmp	.+106    	; 0x132a <relay_turn_off+0x8a>
		Pin_Config_t pin_obj={
				.port= _relay->relay_port,
				.pin=_relay->relay_pin,
				.direction=DIRECTION_OUTPUT,
				.logic=_relay->relay_status
		};
    12c0:	eb 81       	ldd	r30, Y+3	; 0x03
    12c2:	fc 81       	ldd	r31, Y+4	; 0x04
    12c4:	80 81       	ld	r24, Z
    12c6:	8f 70       	andi	r24, 0x0F	; 15
    12c8:	28 2f       	mov	r18, r24
    12ca:	23 70       	andi	r18, 0x03	; 3
    12cc:	eb 81       	ldd	r30, Y+3	; 0x03
    12ce:	fc 81       	ldd	r31, Y+4	; 0x04
    12d0:	80 81       	ld	r24, Z
    12d2:	98 2f       	mov	r25, r24
    12d4:	92 95       	swap	r25
    12d6:	9f 70       	andi	r25, 0x0F	; 15
    12d8:	97 70       	andi	r25, 0x07	; 7
    12da:	eb 81       	ldd	r30, Y+3	; 0x03
    12dc:	fc 81       	ldd	r31, Y+4	; 0x04
    12de:	80 81       	ld	r24, Z
    12e0:	38 2f       	mov	r19, r24
    12e2:	33 1f       	adc	r19, r19
    12e4:	33 27       	eor	r19, r19
    12e6:	33 1f       	adc	r19, r19
    12e8:	23 70       	andi	r18, 0x03	; 3
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	8c 7f       	andi	r24, 0xFC	; 252
    12ee:	82 2b       	or	r24, r18
    12f0:	8a 83       	std	Y+2, r24	; 0x02
    12f2:	89 2f       	mov	r24, r25
    12f4:	87 70       	andi	r24, 0x07	; 7
    12f6:	98 2f       	mov	r25, r24
    12f8:	99 0f       	add	r25, r25
    12fa:	99 0f       	add	r25, r25
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	83 7e       	andi	r24, 0xE3	; 227
    1300:	89 2b       	or	r24, r25
    1302:	8a 83       	std	Y+2, r24	; 0x02
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	80 62       	ori	r24, 0x20	; 32
    1308:	8a 83       	std	Y+2, r24	; 0x02
    130a:	83 2f       	mov	r24, r19
    130c:	81 70       	andi	r24, 0x01	; 1
    130e:	98 2f       	mov	r25, r24
    1310:	92 95       	swap	r25
    1312:	99 0f       	add	r25, r25
    1314:	99 0f       	add	r25, r25
    1316:	90 7c       	andi	r25, 0xC0	; 192
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	8f 7b       	andi	r24, 0xBF	; 191
    131c:	89 2b       	or	r24, r25
    131e:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_write_logic(&pin_obj,GPIO_LOW);
    1320:	ce 01       	movw	r24, r28
    1322:	02 96       	adiw	r24, 0x02	; 2
    1324:	60 e0       	ldi	r22, 0x00	; 0
    1326:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
	}


	return ret;
    132a:	89 81       	ldd	r24, Y+1	; 0x01
}
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	08 95       	ret

0000133a <relay_toggle>:




STD_ReturnStatus relay_toggle(const relay_t *_relay)
{
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	00 d0       	rcall	.+0      	; 0x1340 <relay_toggle+0x6>
    1340:	00 d0       	rcall	.+0      	; 0x1342 <relay_toggle+0x8>
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	9c 83       	std	Y+4, r25	; 0x04
    1348:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret = E_OK;
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == _relay)
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	9c 81       	ldd	r25, Y+4	; 0x04
    1352:	00 97       	sbiw	r24, 0x00	; 0
    1354:	11 f4       	brne	.+4      	; 0x135a <relay_toggle+0x20>
	{
		ret = E_NOT_OK;
    1356:	19 82       	std	Y+1, r1	; 0x01
    1358:	34 c0       	rjmp	.+104    	; 0x13c2 <relay_toggle+0x88>
		Pin_Config_t pin_obj={
				.port= _relay->relay_port,
				.pin=_relay->relay_pin,
				.direction=DIRECTION_OUTPUT,
				.logic=_relay->relay_status
		};
    135a:	eb 81       	ldd	r30, Y+3	; 0x03
    135c:	fc 81       	ldd	r31, Y+4	; 0x04
    135e:	80 81       	ld	r24, Z
    1360:	8f 70       	andi	r24, 0x0F	; 15
    1362:	28 2f       	mov	r18, r24
    1364:	23 70       	andi	r18, 0x03	; 3
    1366:	eb 81       	ldd	r30, Y+3	; 0x03
    1368:	fc 81       	ldd	r31, Y+4	; 0x04
    136a:	80 81       	ld	r24, Z
    136c:	98 2f       	mov	r25, r24
    136e:	92 95       	swap	r25
    1370:	9f 70       	andi	r25, 0x0F	; 15
    1372:	97 70       	andi	r25, 0x07	; 7
    1374:	eb 81       	ldd	r30, Y+3	; 0x03
    1376:	fc 81       	ldd	r31, Y+4	; 0x04
    1378:	80 81       	ld	r24, Z
    137a:	38 2f       	mov	r19, r24
    137c:	33 1f       	adc	r19, r19
    137e:	33 27       	eor	r19, r19
    1380:	33 1f       	adc	r19, r19
    1382:	23 70       	andi	r18, 0x03	; 3
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	8c 7f       	andi	r24, 0xFC	; 252
    1388:	82 2b       	or	r24, r18
    138a:	8a 83       	std	Y+2, r24	; 0x02
    138c:	89 2f       	mov	r24, r25
    138e:	87 70       	andi	r24, 0x07	; 7
    1390:	98 2f       	mov	r25, r24
    1392:	99 0f       	add	r25, r25
    1394:	99 0f       	add	r25, r25
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	83 7e       	andi	r24, 0xE3	; 227
    139a:	89 2b       	or	r24, r25
    139c:	8a 83       	std	Y+2, r24	; 0x02
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	80 62       	ori	r24, 0x20	; 32
    13a2:	8a 83       	std	Y+2, r24	; 0x02
    13a4:	83 2f       	mov	r24, r19
    13a6:	81 70       	andi	r24, 0x01	; 1
    13a8:	98 2f       	mov	r25, r24
    13aa:	92 95       	swap	r25
    13ac:	99 0f       	add	r25, r25
    13ae:	99 0f       	add	r25, r25
    13b0:	90 7c       	andi	r25, 0xC0	; 192
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	8f 7b       	andi	r24, 0xBF	; 191
    13b6:	89 2b       	or	r24, r25
    13b8:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_toggle_logic(&pin_obj);
    13ba:	ce 01       	movw	r24, r28
    13bc:	02 96       	adiw	r24, 0x02	; 2
    13be:	0e 94 74 07 	call	0xee8	; 0xee8 <gpio_pin_toggle_logic>
	}


	return ret;
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	08 95       	ret

000013d2 <button_initialize>:
 *
 * @param btn
 * @return
 */
STD_ReturnStatus button_initialize(const button_t *btn)
{
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	00 d0       	rcall	.+0      	; 0x13d8 <button_initialize+0x6>
    13d8:	0f 92       	push	r0
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	9b 83       	std	Y+3, r25	; 0x03
    13e0:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret=E_OK;
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==btn)
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	9b 81       	ldd	r25, Y+3	; 0x03
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	11 f4       	brne	.+4      	; 0x13f2 <button_initialize+0x20>
	{
		ret = E_NOT_OK;
    13ee:	19 82       	std	Y+1, r1	; 0x01
    13f0:	05 c0       	rjmp	.+10     	; 0x13fc <button_initialize+0x2a>
	}
	else
	{
		ret = gpio_pin_direction_initialize(&(btn->button_pin));
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	9b 81       	ldd	r25, Y+3	; 0x03
    13f6:	0e 94 a3 05 	call	0xb46	; 0xb46 <gpio_pin_direction_initialize>
    13fa:	89 83       	std	Y+1, r24	; 0x01
	}


	return ret;
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    13fe:	0f 90       	pop	r0
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	cf 91       	pop	r28
    1406:	df 91       	pop	r29
    1408:	08 95       	ret

0000140a <button_read_state>:
 * @param btn
 * @param btn_state
 * @return
 */
STD_ReturnStatus button_read_state(const button_t *btn,button_status_t *btn_state)
{
    140a:	df 93       	push	r29
    140c:	cf 93       	push	r28
    140e:	00 d0       	rcall	.+0      	; 0x1410 <button_read_state+0x6>
    1410:	00 d0       	rcall	.+0      	; 0x1412 <button_read_state+0x8>
    1412:	00 d0       	rcall	.+0      	; 0x1414 <button_read_state+0xa>
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	9c 83       	std	Y+4, r25	; 0x04
    141a:	8b 83       	std	Y+3, r24	; 0x03
    141c:	7e 83       	std	Y+6, r23	; 0x06
    141e:	6d 83       	std	Y+5, r22	; 0x05
	STD_ReturnStatus ret=E_NOT_OK;
    1420:	19 82       	std	Y+1, r1	; 0x01
	Logic_t pin_logic_status=GPIO_LOW;
    1422:	1a 82       	std	Y+2, r1	; 0x02
	if((NULL==btn)||(NULL==btn_state))
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	9c 81       	ldd	r25, Y+4	; 0x04
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	21 f0       	breq	.+8      	; 0x1434 <button_read_state+0x2a>
    142c:	8d 81       	ldd	r24, Y+5	; 0x05
    142e:	9e 81       	ldd	r25, Y+6	; 0x06
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	11 f4       	brne	.+4      	; 0x1438 <button_read_state+0x2e>
	{
		ret = E_NOT_OK;
    1434:	19 82       	std	Y+1, r1	; 0x01
    1436:	2b c0       	rjmp	.+86     	; 0x148e <button_read_state+0x84>
	}
	else
	{
		gpio_pin_read_logic(&(btn->button_pin),&pin_logic_status);
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	9c 81       	ldd	r25, Y+4	; 0x04
    143c:	9e 01       	movw	r18, r28
    143e:	2e 5f       	subi	r18, 0xFE	; 254
    1440:	3f 4f       	sbci	r19, 0xFF	; 255
    1442:	b9 01       	movw	r22, r18
    1444:	0e 94 25 07 	call	0xe4a	; 0xe4a <gpio_pin_read_logic>
		if(BUTTON_ACTIVE_HIGH == btn->button_connection)
    1448:	eb 81       	ldd	r30, Y+3	; 0x03
    144a:	fc 81       	ldd	r31, Y+4	; 0x04
    144c:	82 81       	ldd	r24, Z+2	; 0x02
    144e:	88 23       	and	r24, r24
    1450:	61 f4       	brne	.+24     	; 0x146a <button_read_state+0x60>
		{
			if(GPIO_HIGH==pin_logic_status)
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	81 30       	cpi	r24, 0x01	; 1
    1456:	21 f4       	brne	.+8      	; 0x1460 <button_read_state+0x56>
			{
				*btn_state=BUTTON_PRESSED;
    1458:	ed 81       	ldd	r30, Y+5	; 0x05
    145a:	fe 81       	ldd	r31, Y+6	; 0x06
    145c:	10 82       	st	Z, r1
    145e:	15 c0       	rjmp	.+42     	; 0x148a <button_read_state+0x80>
			}
			else
			{
				*btn_state=BUTTON_RELEASED;
    1460:	ed 81       	ldd	r30, Y+5	; 0x05
    1462:	fe 81       	ldd	r31, Y+6	; 0x06
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	80 83       	st	Z, r24
    1468:	10 c0       	rjmp	.+32     	; 0x148a <button_read_state+0x80>
			}
		}
		else if(BUTTON_ACTIVE_LOW == btn->button_connection)
    146a:	eb 81       	ldd	r30, Y+3	; 0x03
    146c:	fc 81       	ldd	r31, Y+4	; 0x04
    146e:	82 81       	ldd	r24, Z+2	; 0x02
    1470:	81 30       	cpi	r24, 0x01	; 1
    1472:	59 f4       	brne	.+22     	; 0x148a <button_read_state+0x80>
		{
			if(GPIO_LOW==pin_logic_status)
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	88 23       	and	r24, r24
    1478:	21 f4       	brne	.+8      	; 0x1482 <button_read_state+0x78>
			{
				*btn_state=BUTTON_PRESSED;
    147a:	ed 81       	ldd	r30, Y+5	; 0x05
    147c:	fe 81       	ldd	r31, Y+6	; 0x06
    147e:	10 82       	st	Z, r1
    1480:	04 c0       	rjmp	.+8      	; 0x148a <button_read_state+0x80>
			}
			else
			{
				*btn_state=BUTTON_RELEASED;
    1482:	ed 81       	ldd	r30, Y+5	; 0x05
    1484:	fe 81       	ldd	r31, Y+6	; 0x06
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	80 83       	st	Z, r24
			}
		}
		ret = E_OK;
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	89 83       	std	Y+1, r24	; 0x01
	}


	return ret;
    148e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1490:	26 96       	adiw	r28, 0x06	; 6
    1492:	0f b6       	in	r0, 0x3f	; 63
    1494:	f8 94       	cli
    1496:	de bf       	out	0x3e, r29	; 62
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	cd bf       	out	0x3d, r28	; 61
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	08 95       	ret

000014a2 <led_initialize>:
 *
 * @param led
 * @return
 */
STD_ReturnStatus led_initialize(const led_t *led)
{
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <led_initialize+0x6>
    14a8:	00 d0       	rcall	.+0      	; 0x14aa <led_initialize+0x8>
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	9c 83       	std	Y+4, r25	; 0x04
    14b0:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret=E_OK;
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==led)
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	11 f4       	brne	.+4      	; 0x14c2 <led_initialize+0x20>
	{
		ret= E_NOT_OK;
    14be:	19 82       	std	Y+1, r1	; 0x01
    14c0:	37 c0       	rjmp	.+110    	; 0x1530 <led_initialize+0x8e>
	}
	else
	{
		Pin_Config_t pin_obj={.port=led->port_name,.pin=led->pin,.direction=DIRECTION_OUTPUT,.logic=led->led_status};
    14c2:	eb 81       	ldd	r30, Y+3	; 0x03
    14c4:	fc 81       	ldd	r31, Y+4	; 0x04
    14c6:	80 81       	ld	r24, Z
    14c8:	87 70       	andi	r24, 0x07	; 7
    14ca:	28 2f       	mov	r18, r24
    14cc:	23 70       	andi	r18, 0x03	; 3
    14ce:	eb 81       	ldd	r30, Y+3	; 0x03
    14d0:	fc 81       	ldd	r31, Y+4	; 0x04
    14d2:	80 81       	ld	r24, Z
    14d4:	98 2f       	mov	r25, r24
    14d6:	96 95       	lsr	r25
    14d8:	96 95       	lsr	r25
    14da:	96 95       	lsr	r25
    14dc:	97 70       	andi	r25, 0x07	; 7
    14de:	eb 81       	ldd	r30, Y+3	; 0x03
    14e0:	fc 81       	ldd	r31, Y+4	; 0x04
    14e2:	80 81       	ld	r24, Z
    14e4:	38 2f       	mov	r19, r24
    14e6:	32 95       	swap	r19
    14e8:	36 95       	lsr	r19
    14ea:	36 95       	lsr	r19
    14ec:	33 70       	andi	r19, 0x03	; 3
    14ee:	31 70       	andi	r19, 0x01	; 1
    14f0:	23 70       	andi	r18, 0x03	; 3
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	8c 7f       	andi	r24, 0xFC	; 252
    14f6:	82 2b       	or	r24, r18
    14f8:	8a 83       	std	Y+2, r24	; 0x02
    14fa:	89 2f       	mov	r24, r25
    14fc:	87 70       	andi	r24, 0x07	; 7
    14fe:	98 2f       	mov	r25, r24
    1500:	99 0f       	add	r25, r25
    1502:	99 0f       	add	r25, r25
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	83 7e       	andi	r24, 0xE3	; 227
    1508:	89 2b       	or	r24, r25
    150a:	8a 83       	std	Y+2, r24	; 0x02
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	80 62       	ori	r24, 0x20	; 32
    1510:	8a 83       	std	Y+2, r24	; 0x02
    1512:	83 2f       	mov	r24, r19
    1514:	81 70       	andi	r24, 0x01	; 1
    1516:	98 2f       	mov	r25, r24
    1518:	92 95       	swap	r25
    151a:	99 0f       	add	r25, r25
    151c:	99 0f       	add	r25, r25
    151e:	90 7c       	andi	r25, 0xC0	; 192
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	8f 7b       	andi	r24, 0xBF	; 191
    1524:	89 2b       	or	r24, r25
    1526:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_initialize(&pin_obj);
    1528:	ce 01       	movw	r24, r28
    152a:	02 96       	adiw	r24, 0x02	; 2
    152c:	0e 94 c5 07 	call	0xf8a	; 0xf8a <gpio_pin_initialize>
	}

	return ret;
    1530:	89 81       	ldd	r24, Y+1	; 0x01
}
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	08 95       	ret

00001540 <led_turn_on>:
 *
 * @param led
 * @return
 */
STD_ReturnStatus led_turn_on(const led_t *led)
{
    1540:	df 93       	push	r29
    1542:	cf 93       	push	r28
    1544:	00 d0       	rcall	.+0      	; 0x1546 <led_turn_on+0x6>
    1546:	00 d0       	rcall	.+0      	; 0x1548 <led_turn_on+0x8>
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	9c 83       	std	Y+4, r25	; 0x04
    154e:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret=E_OK;
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==led)
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	9c 81       	ldd	r25, Y+4	; 0x04
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	11 f4       	brne	.+4      	; 0x1560 <led_turn_on+0x20>
	{
		ret= E_NOT_OK;
    155c:	19 82       	std	Y+1, r1	; 0x01
    155e:	38 c0       	rjmp	.+112    	; 0x15d0 <led_turn_on+0x90>
	}
	else
	{
		Pin_Config_t pin_obj={.port=led->port_name,.pin=led->pin,.direction=DIRECTION_OUTPUT,.logic=led->led_status};
    1560:	eb 81       	ldd	r30, Y+3	; 0x03
    1562:	fc 81       	ldd	r31, Y+4	; 0x04
    1564:	80 81       	ld	r24, Z
    1566:	87 70       	andi	r24, 0x07	; 7
    1568:	28 2f       	mov	r18, r24
    156a:	23 70       	andi	r18, 0x03	; 3
    156c:	eb 81       	ldd	r30, Y+3	; 0x03
    156e:	fc 81       	ldd	r31, Y+4	; 0x04
    1570:	80 81       	ld	r24, Z
    1572:	98 2f       	mov	r25, r24
    1574:	96 95       	lsr	r25
    1576:	96 95       	lsr	r25
    1578:	96 95       	lsr	r25
    157a:	97 70       	andi	r25, 0x07	; 7
    157c:	eb 81       	ldd	r30, Y+3	; 0x03
    157e:	fc 81       	ldd	r31, Y+4	; 0x04
    1580:	80 81       	ld	r24, Z
    1582:	38 2f       	mov	r19, r24
    1584:	32 95       	swap	r19
    1586:	36 95       	lsr	r19
    1588:	36 95       	lsr	r19
    158a:	33 70       	andi	r19, 0x03	; 3
    158c:	31 70       	andi	r19, 0x01	; 1
    158e:	23 70       	andi	r18, 0x03	; 3
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	8c 7f       	andi	r24, 0xFC	; 252
    1594:	82 2b       	or	r24, r18
    1596:	8a 83       	std	Y+2, r24	; 0x02
    1598:	89 2f       	mov	r24, r25
    159a:	87 70       	andi	r24, 0x07	; 7
    159c:	98 2f       	mov	r25, r24
    159e:	99 0f       	add	r25, r25
    15a0:	99 0f       	add	r25, r25
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	83 7e       	andi	r24, 0xE3	; 227
    15a6:	89 2b       	or	r24, r25
    15a8:	8a 83       	std	Y+2, r24	; 0x02
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	80 62       	ori	r24, 0x20	; 32
    15ae:	8a 83       	std	Y+2, r24	; 0x02
    15b0:	83 2f       	mov	r24, r19
    15b2:	81 70       	andi	r24, 0x01	; 1
    15b4:	98 2f       	mov	r25, r24
    15b6:	92 95       	swap	r25
    15b8:	99 0f       	add	r25, r25
    15ba:	99 0f       	add	r25, r25
    15bc:	90 7c       	andi	r25, 0xC0	; 192
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	8f 7b       	andi	r24, 0xBF	; 191
    15c2:	89 2b       	or	r24, r25
    15c4:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_write_logic(&pin_obj,GPIO_HIGH);
    15c6:	ce 01       	movw	r24, r28
    15c8:	02 96       	adiw	r24, 0x02	; 2
    15ca:	61 e0       	ldi	r22, 0x01	; 1
    15cc:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
	}

	return ret;
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <led_turn_off>:
 *
 * @param led
 * @return
 */
STD_ReturnStatus led_turn_off(const led_t *led)
{
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <led_turn_off+0x6>
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <led_turn_off+0x8>
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	9c 83       	std	Y+4, r25	; 0x04
    15ee:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret=E_OK;
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==led)
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	9c 81       	ldd	r25, Y+4	; 0x04
    15f8:	00 97       	sbiw	r24, 0x00	; 0
    15fa:	11 f4       	brne	.+4      	; 0x1600 <led_turn_off+0x20>
	{
		ret= E_NOT_OK;
    15fc:	19 82       	std	Y+1, r1	; 0x01
    15fe:	38 c0       	rjmp	.+112    	; 0x1670 <led_turn_off+0x90>
	}
	else
	{
		Pin_Config_t pin_obj={.port=led->port_name,.pin=led->pin,.direction=DIRECTION_OUTPUT,.logic=led->led_status};
    1600:	eb 81       	ldd	r30, Y+3	; 0x03
    1602:	fc 81       	ldd	r31, Y+4	; 0x04
    1604:	80 81       	ld	r24, Z
    1606:	87 70       	andi	r24, 0x07	; 7
    1608:	28 2f       	mov	r18, r24
    160a:	23 70       	andi	r18, 0x03	; 3
    160c:	eb 81       	ldd	r30, Y+3	; 0x03
    160e:	fc 81       	ldd	r31, Y+4	; 0x04
    1610:	80 81       	ld	r24, Z
    1612:	98 2f       	mov	r25, r24
    1614:	96 95       	lsr	r25
    1616:	96 95       	lsr	r25
    1618:	96 95       	lsr	r25
    161a:	97 70       	andi	r25, 0x07	; 7
    161c:	eb 81       	ldd	r30, Y+3	; 0x03
    161e:	fc 81       	ldd	r31, Y+4	; 0x04
    1620:	80 81       	ld	r24, Z
    1622:	38 2f       	mov	r19, r24
    1624:	32 95       	swap	r19
    1626:	36 95       	lsr	r19
    1628:	36 95       	lsr	r19
    162a:	33 70       	andi	r19, 0x03	; 3
    162c:	31 70       	andi	r19, 0x01	; 1
    162e:	23 70       	andi	r18, 0x03	; 3
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	8c 7f       	andi	r24, 0xFC	; 252
    1634:	82 2b       	or	r24, r18
    1636:	8a 83       	std	Y+2, r24	; 0x02
    1638:	89 2f       	mov	r24, r25
    163a:	87 70       	andi	r24, 0x07	; 7
    163c:	98 2f       	mov	r25, r24
    163e:	99 0f       	add	r25, r25
    1640:	99 0f       	add	r25, r25
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	83 7e       	andi	r24, 0xE3	; 227
    1646:	89 2b       	or	r24, r25
    1648:	8a 83       	std	Y+2, r24	; 0x02
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	80 62       	ori	r24, 0x20	; 32
    164e:	8a 83       	std	Y+2, r24	; 0x02
    1650:	83 2f       	mov	r24, r19
    1652:	81 70       	andi	r24, 0x01	; 1
    1654:	98 2f       	mov	r25, r24
    1656:	92 95       	swap	r25
    1658:	99 0f       	add	r25, r25
    165a:	99 0f       	add	r25, r25
    165c:	90 7c       	andi	r25, 0xC0	; 192
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	8f 7b       	andi	r24, 0xBF	; 191
    1662:	89 2b       	or	r24, r25
    1664:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_write_logic(&pin_obj,GPIO_LOW);
    1666:	ce 01       	movw	r24, r28
    1668:	02 96       	adiw	r24, 0x02	; 2
    166a:	60 e0       	ldi	r22, 0x00	; 0
    166c:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
	}

	return ret;
    1670:	89 81       	ldd	r24, Y+1	; 0x01
}
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	cf 91       	pop	r28
    167c:	df 91       	pop	r29
    167e:	08 95       	ret

00001680 <led_turn_toggle>:
 *
 * @param led
 * @return
 */
STD_ReturnStatus led_turn_toggle(const led_t *led)
{
    1680:	df 93       	push	r29
    1682:	cf 93       	push	r28
    1684:	00 d0       	rcall	.+0      	; 0x1686 <led_turn_toggle+0x6>
    1686:	00 d0       	rcall	.+0      	; 0x1688 <led_turn_toggle+0x8>
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
    168c:	9c 83       	std	Y+4, r25	; 0x04
    168e:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnStatus ret=E_OK;
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==led)
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	9c 81       	ldd	r25, Y+4	; 0x04
    1698:	00 97       	sbiw	r24, 0x00	; 0
    169a:	11 f4       	brne	.+4      	; 0x16a0 <led_turn_toggle+0x20>
	{
		ret= E_NOT_OK;
    169c:	19 82       	std	Y+1, r1	; 0x01
    169e:	37 c0       	rjmp	.+110    	; 0x170e <led_turn_toggle+0x8e>
	}
	else
	{
		Pin_Config_t pin_obj={.port=led->port_name,.pin=led->pin,.direction=DIRECTION_OUTPUT,.logic=led->led_status};
    16a0:	eb 81       	ldd	r30, Y+3	; 0x03
    16a2:	fc 81       	ldd	r31, Y+4	; 0x04
    16a4:	80 81       	ld	r24, Z
    16a6:	87 70       	andi	r24, 0x07	; 7
    16a8:	28 2f       	mov	r18, r24
    16aa:	23 70       	andi	r18, 0x03	; 3
    16ac:	eb 81       	ldd	r30, Y+3	; 0x03
    16ae:	fc 81       	ldd	r31, Y+4	; 0x04
    16b0:	80 81       	ld	r24, Z
    16b2:	98 2f       	mov	r25, r24
    16b4:	96 95       	lsr	r25
    16b6:	96 95       	lsr	r25
    16b8:	96 95       	lsr	r25
    16ba:	97 70       	andi	r25, 0x07	; 7
    16bc:	eb 81       	ldd	r30, Y+3	; 0x03
    16be:	fc 81       	ldd	r31, Y+4	; 0x04
    16c0:	80 81       	ld	r24, Z
    16c2:	38 2f       	mov	r19, r24
    16c4:	32 95       	swap	r19
    16c6:	36 95       	lsr	r19
    16c8:	36 95       	lsr	r19
    16ca:	33 70       	andi	r19, 0x03	; 3
    16cc:	31 70       	andi	r19, 0x01	; 1
    16ce:	23 70       	andi	r18, 0x03	; 3
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	8c 7f       	andi	r24, 0xFC	; 252
    16d4:	82 2b       	or	r24, r18
    16d6:	8a 83       	std	Y+2, r24	; 0x02
    16d8:	89 2f       	mov	r24, r25
    16da:	87 70       	andi	r24, 0x07	; 7
    16dc:	98 2f       	mov	r25, r24
    16de:	99 0f       	add	r25, r25
    16e0:	99 0f       	add	r25, r25
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	83 7e       	andi	r24, 0xE3	; 227
    16e6:	89 2b       	or	r24, r25
    16e8:	8a 83       	std	Y+2, r24	; 0x02
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	80 62       	ori	r24, 0x20	; 32
    16ee:	8a 83       	std	Y+2, r24	; 0x02
    16f0:	83 2f       	mov	r24, r19
    16f2:	81 70       	andi	r24, 0x01	; 1
    16f4:	98 2f       	mov	r25, r24
    16f6:	92 95       	swap	r25
    16f8:	99 0f       	add	r25, r25
    16fa:	99 0f       	add	r25, r25
    16fc:	90 7c       	andi	r25, 0xC0	; 192
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	8f 7b       	andi	r24, 0xBF	; 191
    1702:	89 2b       	or	r24, r25
    1704:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_toggle_logic(&pin_obj);
    1706:	ce 01       	movw	r24, r28
    1708:	02 96       	adiw	r24, 0x02	; 2
    170a:	0e 94 74 07 	call	0xee8	; 0xee8 <gpio_pin_toggle_logic>
	}

	return ret;
    170e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	cf 91       	pop	r28
    171a:	df 91       	pop	r29
    171c:	08 95       	ret

0000171e <lcd_4bit_initialize>:




STD_ReturnStatus lcd_4bit_initialize(const chr_lcd_4bit_t *lcd)
{
    171e:	df 93       	push	r29
    1720:	cf 93       	push	r28
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
    1726:	a0 97       	sbiw	r28, 0x20	; 32
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	f8 94       	cli
    172c:	de bf       	out	0x3e, r29	; 62
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	cd bf       	out	0x3d, r28	; 61
    1732:	98 a3       	std	Y+32, r25	; 0x20
    1734:	8f 8f       	std	Y+31, r24	; 0x1f
	STD_ReturnStatus ret = E_OK;
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 l_data_pins_counter = ZERO_INIT;
    173a:	1d 8e       	std	Y+29, r1	; 0x1d
	if(NULL==lcd)
    173c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    173e:	98 a1       	ldd	r25, Y+32	; 0x20
    1740:	00 97       	sbiw	r24, 0x00	; 0
    1742:	11 f4       	brne	.+4      	; 0x1748 <lcd_4bit_initialize+0x2a>
	{
		ret = E_NOT_OK;
    1744:	1e 8e       	std	Y+30, r1	; 0x1e
    1746:	3c c1       	rjmp	.+632    	; 0x19c0 <lcd_4bit_initialize+0x2a2>
	}
	else
	{
		ret = gpio_pin_initialize(&(lcd->lcd_rs));
    1748:	8f 8d       	ldd	r24, Y+31	; 0x1f
    174a:	98 a1       	ldd	r25, Y+32	; 0x20
    174c:	0e 94 c5 07 	call	0xf8a	; 0xf8a <gpio_pin_initialize>
    1750:	8e 8f       	std	Y+30, r24	; 0x1e
		ret = gpio_pin_initialize(&(lcd->lcd_en));
    1752:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1754:	98 a1       	ldd	r25, Y+32	; 0x20
    1756:	01 96       	adiw	r24, 0x01	; 1
    1758:	0e 94 c5 07 	call	0xf8a	; 0xf8a <gpio_pin_initialize>
    175c:	8e 8f       	std	Y+30, r24	; 0x1e
		for(l_data_pins_counter=ZERO_INIT;l_data_pins_counter<4;l_data_pins_counter++)
    175e:	1d 8e       	std	Y+29, r1	; 0x1d
    1760:	10 c0       	rjmp	.+32     	; 0x1782 <lcd_4bit_initialize+0x64>
		{
			ret = gpio_pin_initialize(&(lcd->lcd_data[l_data_pins_counter]));
    1762:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1764:	98 a1       	ldd	r25, Y+32	; 0x20
    1766:	9c 01       	movw	r18, r24
    1768:	2e 5f       	subi	r18, 0xFE	; 254
    176a:	3f 4f       	sbci	r19, 0xFF	; 255
    176c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    176e:	88 2f       	mov	r24, r24
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	82 0f       	add	r24, r18
    1774:	93 1f       	adc	r25, r19
    1776:	0e 94 c5 07 	call	0xf8a	; 0xf8a <gpio_pin_initialize>
    177a:	8e 8f       	std	Y+30, r24	; 0x1e
	}
	else
	{
		ret = gpio_pin_initialize(&(lcd->lcd_rs));
		ret = gpio_pin_initialize(&(lcd->lcd_en));
		for(l_data_pins_counter=ZERO_INIT;l_data_pins_counter<4;l_data_pins_counter++)
    177c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    177e:	8f 5f       	subi	r24, 0xFF	; 255
    1780:	8d 8f       	std	Y+29, r24	; 0x1d
    1782:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1784:	84 30       	cpi	r24, 0x04	; 4
    1786:	68 f3       	brcs	.-38     	; 0x1762 <lcd_4bit_initialize+0x44>
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	a0 e2       	ldi	r26, 0x20	; 32
    178e:	b2 e4       	ldi	r27, 0x42	; 66
    1790:	89 8f       	std	Y+25, r24	; 0x19
    1792:	9a 8f       	std	Y+26, r25	; 0x1a
    1794:	ab 8f       	std	Y+27, r26	; 0x1b
    1796:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1798:	69 8d       	ldd	r22, Y+25	; 0x19
    179a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    179c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    179e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	4a ef       	ldi	r20, 0xFA	; 250
    17a6:	54 e4       	ldi	r21, 0x44	; 68
    17a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	8d 8b       	std	Y+21, r24	; 0x15
    17b2:	9e 8b       	std	Y+22, r25	; 0x16
    17b4:	af 8b       	std	Y+23, r26	; 0x17
    17b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17b8:	6d 89       	ldd	r22, Y+21	; 0x15
    17ba:	7e 89       	ldd	r23, Y+22	; 0x16
    17bc:	8f 89       	ldd	r24, Y+23	; 0x17
    17be:	98 8d       	ldd	r25, Y+24	; 0x18
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	40 e8       	ldi	r20, 0x80	; 128
    17c6:	5f e3       	ldi	r21, 0x3F	; 63
    17c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17cc:	88 23       	and	r24, r24
    17ce:	2c f4       	brge	.+10     	; 0x17da <lcd_4bit_initialize+0xbc>
		__ticks = 1;
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	9c 8b       	std	Y+20, r25	; 0x14
    17d6:	8b 8b       	std	Y+19, r24	; 0x13
    17d8:	3f c0       	rjmp	.+126    	; 0x1858 <lcd_4bit_initialize+0x13a>
	else if (__tmp > 65535)
    17da:	6d 89       	ldd	r22, Y+21	; 0x15
    17dc:	7e 89       	ldd	r23, Y+22	; 0x16
    17de:	8f 89       	ldd	r24, Y+23	; 0x17
    17e0:	98 8d       	ldd	r25, Y+24	; 0x18
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	3f ef       	ldi	r19, 0xFF	; 255
    17e6:	4f e7       	ldi	r20, 0x7F	; 127
    17e8:	57 e4       	ldi	r21, 0x47	; 71
    17ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ee:	18 16       	cp	r1, r24
    17f0:	4c f5       	brge	.+82     	; 0x1844 <lcd_4bit_initialize+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f2:	69 8d       	ldd	r22, Y+25	; 0x19
    17f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	40 e2       	ldi	r20, 0x20	; 32
    1800:	51 e4       	ldi	r21, 0x41	; 65
    1802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	bc 01       	movw	r22, r24
    180c:	cd 01       	movw	r24, r26
    180e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	9c 8b       	std	Y+20, r25	; 0x14
    1818:	8b 8b       	std	Y+19, r24	; 0x13
    181a:	0f c0       	rjmp	.+30     	; 0x183a <lcd_4bit_initialize+0x11c>
    181c:	88 ec       	ldi	r24, 0xC8	; 200
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	9a 8b       	std	Y+18, r25	; 0x12
    1822:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1824:	89 89       	ldd	r24, Y+17	; 0x11
    1826:	9a 89       	ldd	r25, Y+18	; 0x12
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	f1 f7       	brne	.-4      	; 0x1828 <lcd_4bit_initialize+0x10a>
    182c:	9a 8b       	std	Y+18, r25	; 0x12
    182e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1830:	8b 89       	ldd	r24, Y+19	; 0x13
    1832:	9c 89       	ldd	r25, Y+20	; 0x14
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	9c 8b       	std	Y+20, r25	; 0x14
    1838:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    183a:	8b 89       	ldd	r24, Y+19	; 0x13
    183c:	9c 89       	ldd	r25, Y+20	; 0x14
    183e:	00 97       	sbiw	r24, 0x00	; 0
    1840:	69 f7       	brne	.-38     	; 0x181c <lcd_4bit_initialize+0xfe>
    1842:	14 c0       	rjmp	.+40     	; 0x186c <lcd_4bit_initialize+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1844:	6d 89       	ldd	r22, Y+21	; 0x15
    1846:	7e 89       	ldd	r23, Y+22	; 0x16
    1848:	8f 89       	ldd	r24, Y+23	; 0x17
    184a:	98 8d       	ldd	r25, Y+24	; 0x18
    184c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	9c 8b       	std	Y+20, r25	; 0x14
    1856:	8b 8b       	std	Y+19, r24	; 0x13
    1858:	8b 89       	ldd	r24, Y+19	; 0x13
    185a:	9c 89       	ldd	r25, Y+20	; 0x14
    185c:	98 8b       	std	Y+16, r25	; 0x10
    185e:	8f 87       	std	Y+15, r24	; 0x0f
    1860:	8f 85       	ldd	r24, Y+15	; 0x0f
    1862:	98 89       	ldd	r25, Y+16	; 0x10
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	f1 f7       	brne	.-4      	; 0x1864 <lcd_4bit_initialize+0x146>
    1868:	98 8b       	std	Y+16, r25	; 0x10
    186a:	8f 87       	std	Y+15, r24	; 0x0f
//		_delay_ms(3);
//		ret = lcd_4bit_send_command(lcd,0x00);
//		ret = lcd_4bit_send_command(lcd,0x40);
//		_delay_ms(2);
//		ret = lcd_4bit_send_command(lcd,0x80);
	    lcd_send_4bits(lcd, 0x03);  // Send 0x03 command (Function Set - 8-bit mode)
    186c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    186e:	98 a1       	ldd	r25, Y+32	; 0x20
    1870:	63 e0       	ldi	r22, 0x03	; 3
    1872:	0e 94 77 13 	call	0x26ee	; 0x26ee <lcd_send_4bits>
	    lcd_4bit_send_enable(lcd);
    1876:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1878:	98 a1       	ldd	r25, Y+32	; 0x20
    187a:	0e 94 c4 13 	call	0x2788	; 0x2788 <lcd_4bit_send_enable>

	    // Delay for at least 4.1ms or follow the LCD module datasheet recommendations

	    lcd_send_4bits(lcd, 0x03);  // Send 0x03 command (Function Set - 8-bit mode)
    187e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1880:	98 a1       	ldd	r25, Y+32	; 0x20
    1882:	63 e0       	ldi	r22, 0x03	; 3
    1884:	0e 94 77 13 	call	0x26ee	; 0x26ee <lcd_send_4bits>
	    lcd_4bit_send_enable(lcd);
    1888:	8f 8d       	ldd	r24, Y+31	; 0x1f
    188a:	98 a1       	ldd	r25, Y+32	; 0x20
    188c:	0e 94 c4 13 	call	0x2788	; 0x2788 <lcd_4bit_send_enable>

	    // Delay for at least 100μs or follow the LCD module datasheet recommendations

	    lcd_send_4bits(lcd, 0x03);  // Send 0x03 command (Function Set - 8-bit mode)
    1890:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1892:	98 a1       	ldd	r25, Y+32	; 0x20
    1894:	63 e0       	ldi	r22, 0x03	; 3
    1896:	0e 94 77 13 	call	0x26ee	; 0x26ee <lcd_send_4bits>
	    lcd_4bit_send_enable(lcd);
    189a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    189c:	98 a1       	ldd	r25, Y+32	; 0x20
    189e:	0e 94 c4 13 	call	0x2788	; 0x2788 <lcd_4bit_send_enable>

	    // Switch to 4-bit mode
	    lcd_send_4bits(lcd, 0x02);  // Send 0x02 command (Function Set - 4-bit mode)
    18a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18a4:	98 a1       	ldd	r25, Y+32	; 0x20
    18a6:	62 e0       	ldi	r22, 0x02	; 2
    18a8:	0e 94 77 13 	call	0x26ee	; 0x26ee <lcd_send_4bits>
	    lcd_4bit_send_enable(lcd);
    18ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18ae:	98 a1       	ldd	r25, Y+32	; 0x20
    18b0:	0e 94 c4 13 	call	0x2788	; 0x2788 <lcd_4bit_send_enable>

	    // Configure the LCD module
	    lcd_4bit_send_command(lcd, 0x28);  // 0x28 command (Function Set - 4-bit mode, 2 lines, 5x8 dots)
    18b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18b6:	98 a1       	ldd	r25, Y+32	; 0x20
    18b8:	68 e2       	ldi	r22, 0x28	; 40
    18ba:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <lcd_4bit_send_command>
	    lcd_4bit_send_command(lcd, 0x0C);  // 0x0C command (Display On/Off - Display on, Cursor off, Blink off)
    18be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18c0:	98 a1       	ldd	r25, Y+32	; 0x20
    18c2:	6c e0       	ldi	r22, 0x0C	; 12
    18c4:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <lcd_4bit_send_command>
	    lcd_4bit_send_command(lcd, 0x06);  // 0x06 command (Entry Mode Set - Increment cursor, No display shift)
    18c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18ca:	98 a1       	ldd	r25, Y+32	; 0x20
    18cc:	66 e0       	ldi	r22, 0x06	; 6
    18ce:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <lcd_4bit_send_command>
	    lcd_4bit_send_command(lcd, 0x01);  // 0x01 command (Clear Display)
    18d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18d4:	98 a1       	ldd	r25, Y+32	; 0x20
    18d6:	61 e0       	ldi	r22, 0x01	; 1
    18d8:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <lcd_4bit_send_command>
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	a0 e4       	ldi	r26, 0x40	; 64
    18e2:	b0 e4       	ldi	r27, 0x40	; 64
    18e4:	8b 87       	std	Y+11, r24	; 0x0b
    18e6:	9c 87       	std	Y+12, r25	; 0x0c
    18e8:	ad 87       	std	Y+13, r26	; 0x0d
    18ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    18f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    18f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	4a ef       	ldi	r20, 0xFA	; 250
    18fa:	54 e4       	ldi	r21, 0x44	; 68
    18fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	8f 83       	std	Y+7, r24	; 0x07
    1906:	98 87       	std	Y+8, r25	; 0x08
    1908:	a9 87       	std	Y+9, r26	; 0x09
    190a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    190c:	6f 81       	ldd	r22, Y+7	; 0x07
    190e:	78 85       	ldd	r23, Y+8	; 0x08
    1910:	89 85       	ldd	r24, Y+9	; 0x09
    1912:	9a 85       	ldd	r25, Y+10	; 0x0a
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	40 e8       	ldi	r20, 0x80	; 128
    191a:	5f e3       	ldi	r21, 0x3F	; 63
    191c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1920:	88 23       	and	r24, r24
    1922:	2c f4       	brge	.+10     	; 0x192e <lcd_4bit_initialize+0x210>
		__ticks = 1;
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	9e 83       	std	Y+6, r25	; 0x06
    192a:	8d 83       	std	Y+5, r24	; 0x05
    192c:	3f c0       	rjmp	.+126    	; 0x19ac <lcd_4bit_initialize+0x28e>
	else if (__tmp > 65535)
    192e:	6f 81       	ldd	r22, Y+7	; 0x07
    1930:	78 85       	ldd	r23, Y+8	; 0x08
    1932:	89 85       	ldd	r24, Y+9	; 0x09
    1934:	9a 85       	ldd	r25, Y+10	; 0x0a
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	3f ef       	ldi	r19, 0xFF	; 255
    193a:	4f e7       	ldi	r20, 0x7F	; 127
    193c:	57 e4       	ldi	r21, 0x47	; 71
    193e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1942:	18 16       	cp	r1, r24
    1944:	4c f5       	brge	.+82     	; 0x1998 <lcd_4bit_initialize+0x27a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1946:	6b 85       	ldd	r22, Y+11	; 0x0b
    1948:	7c 85       	ldd	r23, Y+12	; 0x0c
    194a:	8d 85       	ldd	r24, Y+13	; 0x0d
    194c:	9e 85       	ldd	r25, Y+14	; 0x0e
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	40 e2       	ldi	r20, 0x20	; 32
    1954:	51 e4       	ldi	r21, 0x41	; 65
    1956:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	bc 01       	movw	r22, r24
    1960:	cd 01       	movw	r24, r26
    1962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	9e 83       	std	Y+6, r25	; 0x06
    196c:	8d 83       	std	Y+5, r24	; 0x05
    196e:	0f c0       	rjmp	.+30     	; 0x198e <lcd_4bit_initialize+0x270>
    1970:	88 ec       	ldi	r24, 0xC8	; 200
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	9c 83       	std	Y+4, r25	; 0x04
    1976:	8b 83       	std	Y+3, r24	; 0x03
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	9c 81       	ldd	r25, Y+4	; 0x04
    197c:	01 97       	sbiw	r24, 0x01	; 1
    197e:	f1 f7       	brne	.-4      	; 0x197c <lcd_4bit_initialize+0x25e>
    1980:	9c 83       	std	Y+4, r25	; 0x04
    1982:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1984:	8d 81       	ldd	r24, Y+5	; 0x05
    1986:	9e 81       	ldd	r25, Y+6	; 0x06
    1988:	01 97       	sbiw	r24, 0x01	; 1
    198a:	9e 83       	std	Y+6, r25	; 0x06
    198c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    198e:	8d 81       	ldd	r24, Y+5	; 0x05
    1990:	9e 81       	ldd	r25, Y+6	; 0x06
    1992:	00 97       	sbiw	r24, 0x00	; 0
    1994:	69 f7       	brne	.-38     	; 0x1970 <lcd_4bit_initialize+0x252>
    1996:	14 c0       	rjmp	.+40     	; 0x19c0 <lcd_4bit_initialize+0x2a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1998:	6f 81       	ldd	r22, Y+7	; 0x07
    199a:	78 85       	ldd	r23, Y+8	; 0x08
    199c:	89 85       	ldd	r24, Y+9	; 0x09
    199e:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	9e 83       	std	Y+6, r25	; 0x06
    19aa:	8d 83       	std	Y+5, r24	; 0x05
    19ac:	8d 81       	ldd	r24, Y+5	; 0x05
    19ae:	9e 81       	ldd	r25, Y+6	; 0x06
    19b0:	9a 83       	std	Y+2, r25	; 0x02
    19b2:	89 83       	std	Y+1, r24	; 0x01
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	9a 81       	ldd	r25, Y+2	; 0x02
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	f1 f7       	brne	.-4      	; 0x19b8 <lcd_4bit_initialize+0x29a>
    19bc:	9a 83       	std	Y+2, r25	; 0x02
    19be:	89 83       	std	Y+1, r24	; 0x01

	    // Delay for at least 1.5ms or follow the LCD module datasheet recommendations
	    _delay_ms(3);
	    // LCD module is now initialized and ready to use
	}
	return ret;
    19c0:	8e 8d       	ldd	r24, Y+30	; 0x1e
}
    19c2:	a0 96       	adiw	r28, 0x20	; 32
    19c4:	0f b6       	in	r0, 0x3f	; 63
    19c6:	f8 94       	cli
    19c8:	de bf       	out	0x3e, r29	; 62
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	cd bf       	out	0x3d, r28	; 61
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <lcd_4bit_send_command>:


STD_ReturnStatus lcd_4bit_send_command(const chr_lcd_4bit_t *lcd,uint8 command)
{
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	00 d0       	rcall	.+0      	; 0x19da <lcd_4bit_send_command+0x6>
    19da:	00 d0       	rcall	.+0      	; 0x19dc <lcd_4bit_send_command+0x8>
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    19e0:	9b 83       	std	Y+3, r25	; 0x03
    19e2:	8a 83       	std	Y+2, r24	; 0x02
    19e4:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_OK;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==lcd)
    19ea:	8a 81       	ldd	r24, Y+2	; 0x02
    19ec:	9b 81       	ldd	r25, Y+3	; 0x03
    19ee:	00 97       	sbiw	r24, 0x00	; 0
    19f0:	11 f4       	brne	.+4      	; 0x19f6 <lcd_4bit_send_command+0x22>
	{
		ret = E_NOT_OK;
    19f2:	19 82       	std	Y+1, r1	; 0x01
    19f4:	20 c0       	rjmp	.+64     	; 0x1a36 <lcd_4bit_send_command+0x62>
	}
	else
	{
		ret = gpio_pin_write_logic(&(lcd->lcd_rs),GPIO_LOW);
    19f6:	8a 81       	ldd	r24, Y+2	; 0x02
    19f8:	9b 81       	ldd	r25, Y+3	; 0x03
    19fa:	60 e0       	ldi	r22, 0x00	; 0
    19fc:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
    1a00:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_send_4bits(lcd,command>>4);
    1a02:	8c 81       	ldd	r24, Y+4	; 0x04
    1a04:	28 2f       	mov	r18, r24
    1a06:	22 95       	swap	r18
    1a08:	2f 70       	andi	r18, 0x0F	; 15
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a0e:	62 2f       	mov	r22, r18
    1a10:	0e 94 77 13 	call	0x26ee	; 0x26ee <lcd_send_4bits>
    1a14:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_4bit_send_enable(lcd);
    1a16:	8a 81       	ldd	r24, Y+2	; 0x02
    1a18:	9b 81       	ldd	r25, Y+3	; 0x03
    1a1a:	0e 94 c4 13 	call	0x2788	; 0x2788 <lcd_4bit_send_enable>
    1a1e:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_send_4bits(lcd,command);
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	9b 81       	ldd	r25, Y+3	; 0x03
    1a24:	6c 81       	ldd	r22, Y+4	; 0x04
    1a26:	0e 94 77 13 	call	0x26ee	; 0x26ee <lcd_send_4bits>
    1a2a:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_4bit_send_enable(lcd);
    1a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a30:	0e 94 c4 13 	call	0x2788	; 0x2788 <lcd_4bit_send_enable>
    1a34:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	cf 91       	pop	r28
    1a42:	df 91       	pop	r29
    1a44:	08 95       	ret

00001a46 <lcd_4bit_send_char_data>:


STD_ReturnStatus lcd_4bit_send_char_data(const chr_lcd_4bit_t *lcd,uint8 data)
{
    1a46:	df 93       	push	r29
    1a48:	cf 93       	push	r28
    1a4a:	00 d0       	rcall	.+0      	; 0x1a4c <lcd_4bit_send_char_data+0x6>
    1a4c:	00 d0       	rcall	.+0      	; 0x1a4e <lcd_4bit_send_char_data+0x8>
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62
    1a52:	9b 83       	std	Y+3, r25	; 0x03
    1a54:	8a 83       	std	Y+2, r24	; 0x02
    1a56:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_OK;
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==lcd)
    1a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	11 f4       	brne	.+4      	; 0x1a68 <lcd_4bit_send_char_data+0x22>
	{
		ret = E_NOT_OK;
    1a64:	19 82       	std	Y+1, r1	; 0x01
    1a66:	20 c0       	rjmp	.+64     	; 0x1aa8 <lcd_4bit_send_char_data+0x62>
	}
	else
	{
		ret = gpio_pin_write_logic(&(lcd->lcd_rs),GPIO_HIGH);
    1a68:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a6c:	61 e0       	ldi	r22, 0x01	; 1
    1a6e:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
    1a72:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_send_4bits(lcd,data>>4);
    1a74:	8c 81       	ldd	r24, Y+4	; 0x04
    1a76:	28 2f       	mov	r18, r24
    1a78:	22 95       	swap	r18
    1a7a:	2f 70       	andi	r18, 0x0F	; 15
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a80:	62 2f       	mov	r22, r18
    1a82:	0e 94 77 13 	call	0x26ee	; 0x26ee <lcd_send_4bits>
    1a86:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_4bit_send_enable(lcd);
    1a88:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a8c:	0e 94 c4 13 	call	0x2788	; 0x2788 <lcd_4bit_send_enable>
    1a90:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_send_4bits(lcd,data);
    1a92:	8a 81       	ldd	r24, Y+2	; 0x02
    1a94:	9b 81       	ldd	r25, Y+3	; 0x03
    1a96:	6c 81       	ldd	r22, Y+4	; 0x04
    1a98:	0e 94 77 13 	call	0x26ee	; 0x26ee <lcd_send_4bits>
    1a9c:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_4bit_send_enable(lcd);
    1a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa0:	9b 81       	ldd	r25, Y+3	; 0x03
    1aa2:	0e 94 c4 13 	call	0x2788	; 0x2788 <lcd_4bit_send_enable>
    1aa6:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	08 95       	ret

00001ab8 <lcd_4bit_send_char_data_pos>:


STD_ReturnStatus lcd_4bit_send_char_data_pos(const chr_lcd_4bit_t *lcd,uint8 row,uint8 column,uint8 data)
{
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	00 d0       	rcall	.+0      	; 0x1abe <lcd_4bit_send_char_data_pos+0x6>
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <lcd_4bit_send_char_data_pos+0x8>
    1ac0:	00 d0       	rcall	.+0      	; 0x1ac2 <lcd_4bit_send_char_data_pos+0xa>
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	9b 83       	std	Y+3, r25	; 0x03
    1ac8:	8a 83       	std	Y+2, r24	; 0x02
    1aca:	6c 83       	std	Y+4, r22	; 0x04
    1acc:	4d 83       	std	Y+5, r20	; 0x05
    1ace:	2e 83       	std	Y+6, r18	; 0x06
	STD_ReturnStatus ret = E_OK;
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==lcd)
    1ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ad8:	00 97       	sbiw	r24, 0x00	; 0
    1ada:	11 f4       	brne	.+4      	; 0x1ae0 <lcd_4bit_send_char_data_pos+0x28>
	{
		ret = E_NOT_OK;
    1adc:	19 82       	std	Y+1, r1	; 0x01
    1ade:	0b c0       	rjmp	.+22     	; 0x1af6 <lcd_4bit_send_char_data_pos+0x3e>
	}
	else
	{
		lcd_4bit_set_cursor(lcd,row,column);
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ae4:	6c 81       	ldd	r22, Y+4	; 0x04
    1ae6:	4d 81       	ldd	r20, Y+5	; 0x05
    1ae8:	0e 94 34 15 	call	0x2a68	; 0x2a68 <lcd_4bit_set_cursor>
		lcd_4bit_send_char_data(lcd,data);
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	9b 81       	ldd	r25, Y+3	; 0x03
    1af0:	6e 81       	ldd	r22, Y+6	; 0x06
    1af2:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <lcd_4bit_send_char_data>
	}
	return ret;
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1af8:	26 96       	adiw	r28, 0x06	; 6
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	f8 94       	cli
    1afe:	de bf       	out	0x3e, r29	; 62
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	cd bf       	out	0x3d, r28	; 61
    1b04:	cf 91       	pop	r28
    1b06:	df 91       	pop	r29
    1b08:	08 95       	ret

00001b0a <lcd_4bit_send_string>:


STD_ReturnStatus lcd_4bit_send_string(const chr_lcd_4bit_t *lcd,uint8* str)
{
    1b0a:	df 93       	push	r29
    1b0c:	cf 93       	push	r28
    1b0e:	00 d0       	rcall	.+0      	; 0x1b10 <lcd_4bit_send_string+0x6>
    1b10:	00 d0       	rcall	.+0      	; 0x1b12 <lcd_4bit_send_string+0x8>
    1b12:	0f 92       	push	r0
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
    1b18:	9b 83       	std	Y+3, r25	; 0x03
    1b1a:	8a 83       	std	Y+2, r24	; 0x02
    1b1c:	7d 83       	std	Y+5, r23	; 0x05
    1b1e:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_OK;
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	89 83       	std	Y+1, r24	; 0x01
	if((NULL==lcd)||(NULL==str))
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	9b 81       	ldd	r25, Y+3	; 0x03
    1b28:	00 97       	sbiw	r24, 0x00	; 0
    1b2a:	21 f0       	breq	.+8      	; 0x1b34 <lcd_4bit_send_string+0x2a>
    1b2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b30:	00 97       	sbiw	r24, 0x00	; 0
    1b32:	81 f4       	brne	.+32     	; 0x1b54 <lcd_4bit_send_string+0x4a>
	{
		ret = E_NOT_OK;
    1b34:	19 82       	std	Y+1, r1	; 0x01
    1b36:	13 c0       	rjmp	.+38     	; 0x1b5e <lcd_4bit_send_string+0x54>
	}
	else
	{
		while(*str)
		{
			ret = lcd_4bit_send_char_data(lcd,*str++);
    1b38:	ec 81       	ldd	r30, Y+4	; 0x04
    1b3a:	fd 81       	ldd	r31, Y+5	; 0x05
    1b3c:	20 81       	ld	r18, Z
    1b3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b40:	9d 81       	ldd	r25, Y+5	; 0x05
    1b42:	01 96       	adiw	r24, 0x01	; 1
    1b44:	9d 83       	std	Y+5, r25	; 0x05
    1b46:	8c 83       	std	Y+4, r24	; 0x04
    1b48:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b4c:	62 2f       	mov	r22, r18
    1b4e:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <lcd_4bit_send_char_data>
    1b52:	89 83       	std	Y+1, r24	; 0x01
	{
		ret = E_NOT_OK;
	}
	else
	{
		while(*str)
    1b54:	ec 81       	ldd	r30, Y+4	; 0x04
    1b56:	fd 81       	ldd	r31, Y+5	; 0x05
    1b58:	80 81       	ld	r24, Z
    1b5a:	88 23       	and	r24, r24
    1b5c:	69 f7       	brne	.-38     	; 0x1b38 <lcd_4bit_send_string+0x2e>
		{
			ret = lcd_4bit_send_char_data(lcd,*str++);
		}
	}
	return ret;
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	cf 91       	pop	r28
    1b6c:	df 91       	pop	r29
    1b6e:	08 95       	ret

00001b70 <lcd_4bit_send_string_pos>:


STD_ReturnStatus lcd_4bit_send_string_pos(const chr_lcd_4bit_t *lcd,uint8 row,uint8 column,uint8* str){
    1b70:	df 93       	push	r29
    1b72:	cf 93       	push	r28
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62
    1b78:	27 97       	sbiw	r28, 0x07	; 7
    1b7a:	0f b6       	in	r0, 0x3f	; 63
    1b7c:	f8 94       	cli
    1b7e:	de bf       	out	0x3e, r29	; 62
    1b80:	0f be       	out	0x3f, r0	; 63
    1b82:	cd bf       	out	0x3d, r28	; 61
    1b84:	9b 83       	std	Y+3, r25	; 0x03
    1b86:	8a 83       	std	Y+2, r24	; 0x02
    1b88:	6c 83       	std	Y+4, r22	; 0x04
    1b8a:	4d 83       	std	Y+5, r20	; 0x05
    1b8c:	3f 83       	std	Y+7, r19	; 0x07
    1b8e:	2e 83       	std	Y+6, r18	; 0x06

	STD_ReturnStatus ret = E_OK;
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	89 83       	std	Y+1, r24	; 0x01
	if((NULL==lcd)||(NULL==str))
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	9b 81       	ldd	r25, Y+3	; 0x03
    1b98:	00 97       	sbiw	r24, 0x00	; 0
    1b9a:	21 f0       	breq	.+8      	; 0x1ba4 <lcd_4bit_send_string_pos+0x34>
    1b9c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b9e:	9f 81       	ldd	r25, Y+7	; 0x07
    1ba0:	00 97       	sbiw	r24, 0x00	; 0
    1ba2:	11 f4       	brne	.+4      	; 0x1ba8 <lcd_4bit_send_string_pos+0x38>
	{
		ret = E_NOT_OK;
    1ba4:	19 82       	std	Y+1, r1	; 0x01
    1ba6:	1b c0       	rjmp	.+54     	; 0x1bde <lcd_4bit_send_string_pos+0x6e>
	}
	else
	{
		ret = lcd_4bit_set_cursor(lcd,row,column);
    1ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    1baa:	9b 81       	ldd	r25, Y+3	; 0x03
    1bac:	6c 81       	ldd	r22, Y+4	; 0x04
    1bae:	4d 81       	ldd	r20, Y+5	; 0x05
    1bb0:	0e 94 34 15 	call	0x2a68	; 0x2a68 <lcd_4bit_set_cursor>
    1bb4:	89 83       	std	Y+1, r24	; 0x01
    1bb6:	0e c0       	rjmp	.+28     	; 0x1bd4 <lcd_4bit_send_string_pos+0x64>
		while(*str)
		{
			ret = lcd_4bit_send_char_data(lcd,*str++);
    1bb8:	ee 81       	ldd	r30, Y+6	; 0x06
    1bba:	ff 81       	ldd	r31, Y+7	; 0x07
    1bbc:	20 81       	ld	r18, Z
    1bbe:	8e 81       	ldd	r24, Y+6	; 0x06
    1bc0:	9f 81       	ldd	r25, Y+7	; 0x07
    1bc2:	01 96       	adiw	r24, 0x01	; 1
    1bc4:	9f 83       	std	Y+7, r25	; 0x07
    1bc6:	8e 83       	std	Y+6, r24	; 0x06
    1bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bca:	9b 81       	ldd	r25, Y+3	; 0x03
    1bcc:	62 2f       	mov	r22, r18
    1bce:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <lcd_4bit_send_char_data>
    1bd2:	89 83       	std	Y+1, r24	; 0x01
		ret = E_NOT_OK;
	}
	else
	{
		ret = lcd_4bit_set_cursor(lcd,row,column);
		while(*str)
    1bd4:	ee 81       	ldd	r30, Y+6	; 0x06
    1bd6:	ff 81       	ldd	r31, Y+7	; 0x07
    1bd8:	80 81       	ld	r24, Z
    1bda:	88 23       	and	r24, r24
    1bdc:	69 f7       	brne	.-38     	; 0x1bb8 <lcd_4bit_send_string_pos+0x48>
		{
			ret = lcd_4bit_send_char_data(lcd,*str++);
		}
	}
	return ret;
    1bde:	89 81       	ldd	r24, Y+1	; 0x01
}
    1be0:	27 96       	adiw	r28, 0x07	; 7
    1be2:	0f b6       	in	r0, 0x3f	; 63
    1be4:	f8 94       	cli
    1be6:	de bf       	out	0x3e, r29	; 62
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	cd bf       	out	0x3d, r28	; 61
    1bec:	cf 91       	pop	r28
    1bee:	df 91       	pop	r29
    1bf0:	08 95       	ret

00001bf2 <lcd_4bit_send_custom_char>:


STD_ReturnStatus lcd_4bit_send_custom_char(const chr_lcd_4bit_t *lcd,uint8 row,uint8 column,uint8 _char[],uint8 mem_pos)
{
    1bf2:	0f 93       	push	r16
    1bf4:	df 93       	push	r29
    1bf6:	cf 93       	push	r28
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
    1bfc:	29 97       	sbiw	r28, 0x09	; 9
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	cd bf       	out	0x3d, r28	; 61
    1c08:	9c 83       	std	Y+4, r25	; 0x04
    1c0a:	8b 83       	std	Y+3, r24	; 0x03
    1c0c:	6d 83       	std	Y+5, r22	; 0x05
    1c0e:	4e 83       	std	Y+6, r20	; 0x06
    1c10:	38 87       	std	Y+8, r19	; 0x08
    1c12:	2f 83       	std	Y+7, r18	; 0x07
    1c14:	09 87       	std	Y+9, r16	; 0x09
	STD_ReturnStatus ret = E_OK;
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	8a 83       	std	Y+2, r24	; 0x02
	uint8 lcd_counter = ZERO_INIT;
    1c1a:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==lcd)
    1c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c20:	00 97       	sbiw	r24, 0x00	; 0
    1c22:	11 f4       	brne	.+4      	; 0x1c28 <lcd_4bit_send_custom_char+0x36>
	{
		ret = E_NOT_OK;
    1c24:	1a 82       	std	Y+2, r1	; 0x02
    1c26:	30 c0       	rjmp	.+96     	; 0x1c88 <lcd_4bit_send_custom_char+0x96>
	}
	else
	{
		ret =  lcd_4bit_send_command(lcd,_LCD_CGRAM_START+(mem_pos*8));//mem_pos is the position addres oin cgram(1~8)
    1c28:	89 85       	ldd	r24, Y+9	; 0x09
    1c2a:	88 2f       	mov	r24, r24
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	08 96       	adiw	r24, 0x08	; 8
    1c30:	88 0f       	add	r24, r24
    1c32:	99 1f       	adc	r25, r25
    1c34:	88 0f       	add	r24, r24
    1c36:	99 1f       	adc	r25, r25
    1c38:	88 0f       	add	r24, r24
    1c3a:	99 1f       	adc	r25, r25
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c40:	9c 81       	ldd	r25, Y+4	; 0x04
    1c42:	62 2f       	mov	r22, r18
    1c44:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <lcd_4bit_send_command>
    1c48:	8a 83       	std	Y+2, r24	; 0x02
		for(lcd_counter=ZERO_INIT;lcd_counter<=7;++lcd_counter)
    1c4a:	19 82       	std	Y+1, r1	; 0x01
    1c4c:	12 c0       	rjmp	.+36     	; 0x1c72 <lcd_4bit_send_custom_char+0x80>
		{
			ret = lcd_4bit_send_char_data(lcd,_char[lcd_counter]);
    1c4e:	89 81       	ldd	r24, Y+1	; 0x01
    1c50:	28 2f       	mov	r18, r24
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	8f 81       	ldd	r24, Y+7	; 0x07
    1c56:	98 85       	ldd	r25, Y+8	; 0x08
    1c58:	fc 01       	movw	r30, r24
    1c5a:	e2 0f       	add	r30, r18
    1c5c:	f3 1f       	adc	r31, r19
    1c5e:	20 81       	ld	r18, Z
    1c60:	8b 81       	ldd	r24, Y+3	; 0x03
    1c62:	9c 81       	ldd	r25, Y+4	; 0x04
    1c64:	62 2f       	mov	r22, r18
    1c66:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <lcd_4bit_send_char_data>
    1c6a:	8a 83       	std	Y+2, r24	; 0x02
		ret = E_NOT_OK;
	}
	else
	{
		ret =  lcd_4bit_send_command(lcd,_LCD_CGRAM_START+(mem_pos*8));//mem_pos is the position addres oin cgram(1~8)
		for(lcd_counter=ZERO_INIT;lcd_counter<=7;++lcd_counter)
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
    1c6e:	8f 5f       	subi	r24, 0xFF	; 255
    1c70:	89 83       	std	Y+1, r24	; 0x01
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	88 30       	cpi	r24, 0x08	; 8
    1c76:	58 f3       	brcs	.-42     	; 0x1c4e <lcd_4bit_send_custom_char+0x5c>
		{
			ret = lcd_4bit_send_char_data(lcd,_char[lcd_counter]);
		}
		ret = lcd_4bit_send_char_data_pos(lcd,row,column,mem_pos);
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7c:	6d 81       	ldd	r22, Y+5	; 0x05
    1c7e:	4e 81       	ldd	r20, Y+6	; 0x06
    1c80:	29 85       	ldd	r18, Y+9	; 0x09
    1c82:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <lcd_4bit_send_char_data_pos>
    1c86:	8a 83       	std	Y+2, r24	; 0x02
	}
	return ret;
    1c88:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1c8a:	29 96       	adiw	r28, 0x09	; 9
    1c8c:	0f b6       	in	r0, 0x3f	; 63
    1c8e:	f8 94       	cli
    1c90:	de bf       	out	0x3e, r29	; 62
    1c92:	0f be       	out	0x3f, r0	; 63
    1c94:	cd bf       	out	0x3d, r28	; 61
    1c96:	cf 91       	pop	r28
    1c98:	df 91       	pop	r29
    1c9a:	0f 91       	pop	r16
    1c9c:	08 95       	ret

00001c9e <lcd_4bit_send_int>:

STD_ReturnStatus lcd_4bit_send_int(const chr_lcd_4bit_t *lcd,uint8 Num)
{
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	00 d0       	rcall	.+0      	; 0x1ca4 <lcd_4bit_send_int+0x6>
    1ca4:	00 d0       	rcall	.+0      	; 0x1ca6 <lcd_4bit_send_int+0x8>
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    1caa:	9a 83       	std	Y+2, r25	; 0x02
    1cac:	89 83       	std	Y+1, r24	; 0x01
    1cae:	6b 83       	std	Y+3, r22	; 0x03
	if(Num!=0)
    1cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb2:	88 23       	and	r24, r24
    1cb4:	c1 f0       	breq	.+48     	; 0x1ce6 <lcd_4bit_send_int+0x48>
	{
		lcd_4bit_send_int(lcd,Num/10);
    1cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb8:	9a e0       	ldi	r25, 0x0A	; 10
    1cba:	69 2f       	mov	r22, r25
    1cbc:	0e 94 91 1a 	call	0x3522	; 0x3522 <__udivmodqi4>
    1cc0:	28 2f       	mov	r18, r24
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc6:	62 2f       	mov	r22, r18
    1cc8:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <lcd_4bit_send_int>
		lcd_4bit_send_char_data(lcd,(Num%10)+48);
    1ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cce:	9a e0       	ldi	r25, 0x0A	; 10
    1cd0:	69 2f       	mov	r22, r25
    1cd2:	0e 94 91 1a 	call	0x3522	; 0x3522 <__udivmodqi4>
    1cd6:	89 2f       	mov	r24, r25
    1cd8:	28 2f       	mov	r18, r24
    1cda:	20 5d       	subi	r18, 0xD0	; 208
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
    1cde:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce0:	62 2f       	mov	r22, r18
    1ce2:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <lcd_4bit_send_char_data>
	}
}
    1ce6:	0f 90       	pop	r0
    1ce8:	0f 90       	pop	r0
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	cf 91       	pop	r28
    1cf0:	df 91       	pop	r29
    1cf2:	08 95       	ret

00001cf4 <lcd_4bit_send_int_pos>:

STD_ReturnStatus lcd_4bit_send_int_pos(const chr_lcd_4bit_t *lcd,uint8 row,uint8 column,uint32 Num)
{
    1cf4:	df 93       	push	r29
    1cf6:	cf 93       	push	r28
    1cf8:	cd b7       	in	r28, 0x3d	; 61
    1cfa:	de b7       	in	r29, 0x3e	; 62
    1cfc:	27 97       	sbiw	r28, 0x07	; 7
    1cfe:	0f b6       	in	r0, 0x3f	; 63
    1d00:	f8 94       	cli
    1d02:	de bf       	out	0x3e, r29	; 62
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	cd bf       	out	0x3d, r28	; 61
    1d08:	9a 83       	std	Y+2, r25	; 0x02
    1d0a:	89 83       	std	Y+1, r24	; 0x01
    1d0c:	6b 83       	std	Y+3, r22	; 0x03
    1d0e:	4c 83       	std	Y+4, r20	; 0x04
    1d10:	3e 83       	std	Y+6, r19	; 0x06
    1d12:	2d 83       	std	Y+5, r18	; 0x05
	lcd_4bit_set_cursor(lcd,row,column);
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	9a 81       	ldd	r25, Y+2	; 0x02
    1d18:	6b 81       	ldd	r22, Y+3	; 0x03
    1d1a:	4c 81       	ldd	r20, Y+4	; 0x04
    1d1c:	0e 94 34 15 	call	0x2a68	; 0x2a68 <lcd_4bit_set_cursor>
	if(Num!=0)
    1d20:	8d 81       	ldd	r24, Y+5	; 0x05
    1d22:	9e 81       	ldd	r25, Y+6	; 0x06
    1d24:	00 97       	sbiw	r24, 0x00	; 0
    1d26:	e1 f0       	breq	.+56     	; 0x1d60 <lcd_4bit_send_int_pos+0x6c>
	{
		lcd_4bit_send_int(lcd,Num/10);
    1d28:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2c:	2a e0       	ldi	r18, 0x0A	; 10
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	b9 01       	movw	r22, r18
    1d32:	0e 94 9d 1a 	call	0x353a	; 0x353a <__udivmodhi4>
    1d36:	cb 01       	movw	r24, r22
    1d38:	28 2f       	mov	r18, r24
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3e:	62 2f       	mov	r22, r18
    1d40:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <lcd_4bit_send_int>
		lcd_4bit_send_char_data(lcd,(Num%10)+48);
    1d44:	8d 81       	ldd	r24, Y+5	; 0x05
    1d46:	9e 81       	ldd	r25, Y+6	; 0x06
    1d48:	2a e0       	ldi	r18, 0x0A	; 10
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	b9 01       	movw	r22, r18
    1d4e:	0e 94 9d 1a 	call	0x353a	; 0x353a <__udivmodhi4>
    1d52:	28 2f       	mov	r18, r24
    1d54:	20 5d       	subi	r18, 0xD0	; 208
    1d56:	89 81       	ldd	r24, Y+1	; 0x01
    1d58:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5a:	62 2f       	mov	r22, r18
    1d5c:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <lcd_4bit_send_char_data>
	}
}
    1d60:	27 96       	adiw	r28, 0x07	; 7
    1d62:	0f b6       	in	r0, 0x3f	; 63
    1d64:	f8 94       	cli
    1d66:	de bf       	out	0x3e, r29	; 62
    1d68:	0f be       	out	0x3f, r0	; 63
    1d6a:	cd bf       	out	0x3d, r28	; 61
    1d6c:	cf 91       	pop	r28
    1d6e:	df 91       	pop	r29
    1d70:	08 95       	ret

00001d72 <lcd_8bit_initialize>:
STD_ReturnStatus lcd_8bit_initialize(const chr_lcd_8bit_t *lcd)
{
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	ec 97       	sbiw	r28, 0x3c	; 60
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	f8 94       	cli
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	cd bf       	out	0x3d, r28	; 61
    1d86:	9c af       	std	Y+60, r25	; 0x3c
    1d88:	8b af       	std	Y+59, r24	; 0x3b
	STD_ReturnStatus ret = E_OK;
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	8a af       	std	Y+58, r24	; 0x3a
	uint8 l_data_pins_counter = ZERO_INIT;
    1d8e:	19 ae       	std	Y+57, r1	; 0x39
	if(NULL==lcd)
    1d90:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d92:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d94:	00 97       	sbiw	r24, 0x00	; 0
    1d96:	11 f4       	brne	.+4      	; 0x1d9c <lcd_8bit_initialize+0x2a>
	{
		ret = E_NOT_OK;
    1d98:	1a ae       	std	Y+58, r1	; 0x3a
    1d9a:	ff c1       	rjmp	.+1022   	; 0x219a <lcd_8bit_initialize+0x428>
	}
	else
	{
		ret = gpio_pin_initialize(&(lcd->lcd_rs));
    1d9c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d9e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1da0:	0e 94 c5 07 	call	0xf8a	; 0xf8a <gpio_pin_initialize>
    1da4:	8a af       	std	Y+58, r24	; 0x3a
		ret = gpio_pin_initialize(&(lcd->lcd_en));
    1da6:	8b ad       	ldd	r24, Y+59	; 0x3b
    1da8:	9c ad       	ldd	r25, Y+60	; 0x3c
    1daa:	01 96       	adiw	r24, 0x01	; 1
    1dac:	0e 94 c5 07 	call	0xf8a	; 0xf8a <gpio_pin_initialize>
    1db0:	8a af       	std	Y+58, r24	; 0x3a
		for(l_data_pins_counter=0;l_data_pins_counter<8;l_data_pins_counter++)
    1db2:	19 ae       	std	Y+57, r1	; 0x39
    1db4:	0f c0       	rjmp	.+30     	; 0x1dd4 <lcd_8bit_initialize+0x62>
		{
			gpio_pin_initialize(&(lcd->lcd_data[l_data_pins_counter]));
    1db6:	8b ad       	ldd	r24, Y+59	; 0x3b
    1db8:	9c ad       	ldd	r25, Y+60	; 0x3c
    1dba:	9c 01       	movw	r18, r24
    1dbc:	2e 5f       	subi	r18, 0xFE	; 254
    1dbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc0:	89 ad       	ldd	r24, Y+57	; 0x39
    1dc2:	88 2f       	mov	r24, r24
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	82 0f       	add	r24, r18
    1dc8:	93 1f       	adc	r25, r19
    1dca:	0e 94 c5 07 	call	0xf8a	; 0xf8a <gpio_pin_initialize>
	}
	else
	{
		ret = gpio_pin_initialize(&(lcd->lcd_rs));
		ret = gpio_pin_initialize(&(lcd->lcd_en));
		for(l_data_pins_counter=0;l_data_pins_counter<8;l_data_pins_counter++)
    1dce:	89 ad       	ldd	r24, Y+57	; 0x39
    1dd0:	8f 5f       	subi	r24, 0xFF	; 255
    1dd2:	89 af       	std	Y+57, r24	; 0x39
    1dd4:	89 ad       	ldd	r24, Y+57	; 0x39
    1dd6:	88 30       	cpi	r24, 0x08	; 8
    1dd8:	70 f3       	brcs	.-36     	; 0x1db6 <lcd_8bit_initialize+0x44>
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	a0 e2       	ldi	r26, 0x20	; 32
    1de0:	b2 e4       	ldi	r27, 0x42	; 66
    1de2:	8d ab       	std	Y+53, r24	; 0x35
    1de4:	9e ab       	std	Y+54, r25	; 0x36
    1de6:	af ab       	std	Y+55, r26	; 0x37
    1de8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dea:	6d a9       	ldd	r22, Y+53	; 0x35
    1dec:	7e a9       	ldd	r23, Y+54	; 0x36
    1dee:	8f a9       	ldd	r24, Y+55	; 0x37
    1df0:	98 ad       	ldd	r25, Y+56	; 0x38
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	4a ef       	ldi	r20, 0xFA	; 250
    1df8:	54 e4       	ldi	r21, 0x44	; 68
    1dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	89 ab       	std	Y+49, r24	; 0x31
    1e04:	9a ab       	std	Y+50, r25	; 0x32
    1e06:	ab ab       	std	Y+51, r26	; 0x33
    1e08:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e0a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e0c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e0e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e10:	9c a9       	ldd	r25, Y+52	; 0x34
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	40 e8       	ldi	r20, 0x80	; 128
    1e18:	5f e3       	ldi	r21, 0x3F	; 63
    1e1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e1e:	88 23       	and	r24, r24
    1e20:	2c f4       	brge	.+10     	; 0x1e2c <lcd_8bit_initialize+0xba>
		__ticks = 1;
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	98 ab       	std	Y+48, r25	; 0x30
    1e28:	8f a7       	std	Y+47, r24	; 0x2f
    1e2a:	3f c0       	rjmp	.+126    	; 0x1eaa <lcd_8bit_initialize+0x138>
	else if (__tmp > 65535)
    1e2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e30:	8b a9       	ldd	r24, Y+51	; 0x33
    1e32:	9c a9       	ldd	r25, Y+52	; 0x34
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	3f ef       	ldi	r19, 0xFF	; 255
    1e38:	4f e7       	ldi	r20, 0x7F	; 127
    1e3a:	57 e4       	ldi	r21, 0x47	; 71
    1e3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e40:	18 16       	cp	r1, r24
    1e42:	4c f5       	brge	.+82     	; 0x1e96 <lcd_8bit_initialize+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e44:	6d a9       	ldd	r22, Y+53	; 0x35
    1e46:	7e a9       	ldd	r23, Y+54	; 0x36
    1e48:	8f a9       	ldd	r24, Y+55	; 0x37
    1e4a:	98 ad       	ldd	r25, Y+56	; 0x38
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	40 e2       	ldi	r20, 0x20	; 32
    1e52:	51 e4       	ldi	r21, 0x41	; 65
    1e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	bc 01       	movw	r22, r24
    1e5e:	cd 01       	movw	r24, r26
    1e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	98 ab       	std	Y+48, r25	; 0x30
    1e6a:	8f a7       	std	Y+47, r24	; 0x2f
    1e6c:	0f c0       	rjmp	.+30     	; 0x1e8c <lcd_8bit_initialize+0x11a>
    1e6e:	88 ec       	ldi	r24, 0xC8	; 200
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	9e a7       	std	Y+46, r25	; 0x2e
    1e74:	8d a7       	std	Y+45, r24	; 0x2d
    1e76:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e78:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	f1 f7       	brne	.-4      	; 0x1e7a <lcd_8bit_initialize+0x108>
    1e7e:	9e a7       	std	Y+46, r25	; 0x2e
    1e80:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e82:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e84:	98 a9       	ldd	r25, Y+48	; 0x30
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	98 ab       	std	Y+48, r25	; 0x30
    1e8a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e8e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e90:	00 97       	sbiw	r24, 0x00	; 0
    1e92:	69 f7       	brne	.-38     	; 0x1e6e <lcd_8bit_initialize+0xfc>
    1e94:	14 c0       	rjmp	.+40     	; 0x1ebe <lcd_8bit_initialize+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e96:	69 a9       	ldd	r22, Y+49	; 0x31
    1e98:	7a a9       	ldd	r23, Y+50	; 0x32
    1e9a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e9c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	98 ab       	std	Y+48, r25	; 0x30
    1ea8:	8f a7       	std	Y+47, r24	; 0x2f
    1eaa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eac:	98 a9       	ldd	r25, Y+48	; 0x30
    1eae:	9c a7       	std	Y+44, r25	; 0x2c
    1eb0:	8b a7       	std	Y+43, r24	; 0x2b
    1eb2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1eb4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	f1 f7       	brne	.-4      	; 0x1eb6 <lcd_8bit_initialize+0x144>
    1eba:	9c a7       	std	Y+44, r25	; 0x2c
    1ebc:	8b a7       	std	Y+43, r24	; 0x2b
		{
			gpio_pin_initialize(&(lcd->lcd_data[l_data_pins_counter]));
		}
		_delay_ms(40);
		ret = lcd_8bit_send_command(lcd,0x38);
    1ebe:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ec0:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ec2:	68 e3       	ldi	r22, 0x38	; 56
    1ec4:	0e 94 d7 10 	call	0x21ae	; 0x21ae <lcd_8bit_send_command>
    1ec8:	8a af       	std	Y+58, r24	; 0x3a
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	a0 e8       	ldi	r26, 0x80	; 128
    1ed0:	bf e3       	ldi	r27, 0x3F	; 63
    1ed2:	8f a3       	std	Y+39, r24	; 0x27
    1ed4:	98 a7       	std	Y+40, r25	; 0x28
    1ed6:	a9 a7       	std	Y+41, r26	; 0x29
    1ed8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eda:	6f a1       	ldd	r22, Y+39	; 0x27
    1edc:	78 a5       	ldd	r23, Y+40	; 0x28
    1ede:	89 a5       	ldd	r24, Y+41	; 0x29
    1ee0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	4a ef       	ldi	r20, 0xFA	; 250
    1ee8:	54 e4       	ldi	r21, 0x44	; 68
    1eea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	8b a3       	std	Y+35, r24	; 0x23
    1ef4:	9c a3       	std	Y+36, r25	; 0x24
    1ef6:	ad a3       	std	Y+37, r26	; 0x25
    1ef8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1efa:	6b a1       	ldd	r22, Y+35	; 0x23
    1efc:	7c a1       	ldd	r23, Y+36	; 0x24
    1efe:	8d a1       	ldd	r24, Y+37	; 0x25
    1f00:	9e a1       	ldd	r25, Y+38	; 0x26
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	40 e8       	ldi	r20, 0x80	; 128
    1f08:	5f e3       	ldi	r21, 0x3F	; 63
    1f0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f0e:	88 23       	and	r24, r24
    1f10:	2c f4       	brge	.+10     	; 0x1f1c <lcd_8bit_initialize+0x1aa>
		__ticks = 1;
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	9a a3       	std	Y+34, r25	; 0x22
    1f18:	89 a3       	std	Y+33, r24	; 0x21
    1f1a:	3f c0       	rjmp	.+126    	; 0x1f9a <lcd_8bit_initialize+0x228>
	else if (__tmp > 65535)
    1f1c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f1e:	7c a1       	ldd	r23, Y+36	; 0x24
    1f20:	8d a1       	ldd	r24, Y+37	; 0x25
    1f22:	9e a1       	ldd	r25, Y+38	; 0x26
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	3f ef       	ldi	r19, 0xFF	; 255
    1f28:	4f e7       	ldi	r20, 0x7F	; 127
    1f2a:	57 e4       	ldi	r21, 0x47	; 71
    1f2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f30:	18 16       	cp	r1, r24
    1f32:	4c f5       	brge	.+82     	; 0x1f86 <lcd_8bit_initialize+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f34:	6f a1       	ldd	r22, Y+39	; 0x27
    1f36:	78 a5       	ldd	r23, Y+40	; 0x28
    1f38:	89 a5       	ldd	r24, Y+41	; 0x29
    1f3a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f3c:	20 e0       	ldi	r18, 0x00	; 0
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	40 e2       	ldi	r20, 0x20	; 32
    1f42:	51 e4       	ldi	r21, 0x41	; 65
    1f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	bc 01       	movw	r22, r24
    1f4e:	cd 01       	movw	r24, r26
    1f50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	9a a3       	std	Y+34, r25	; 0x22
    1f5a:	89 a3       	std	Y+33, r24	; 0x21
    1f5c:	0f c0       	rjmp	.+30     	; 0x1f7c <lcd_8bit_initialize+0x20a>
    1f5e:	88 ec       	ldi	r24, 0xC8	; 200
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	98 a3       	std	Y+32, r25	; 0x20
    1f64:	8f 8f       	std	Y+31, r24	; 0x1f
    1f66:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f68:	98 a1       	ldd	r25, Y+32	; 0x20
    1f6a:	01 97       	sbiw	r24, 0x01	; 1
    1f6c:	f1 f7       	brne	.-4      	; 0x1f6a <lcd_8bit_initialize+0x1f8>
    1f6e:	98 a3       	std	Y+32, r25	; 0x20
    1f70:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f72:	89 a1       	ldd	r24, Y+33	; 0x21
    1f74:	9a a1       	ldd	r25, Y+34	; 0x22
    1f76:	01 97       	sbiw	r24, 0x01	; 1
    1f78:	9a a3       	std	Y+34, r25	; 0x22
    1f7a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f7c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f7e:	9a a1       	ldd	r25, Y+34	; 0x22
    1f80:	00 97       	sbiw	r24, 0x00	; 0
    1f82:	69 f7       	brne	.-38     	; 0x1f5e <lcd_8bit_initialize+0x1ec>
    1f84:	14 c0       	rjmp	.+40     	; 0x1fae <lcd_8bit_initialize+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f86:	6b a1       	ldd	r22, Y+35	; 0x23
    1f88:	7c a1       	ldd	r23, Y+36	; 0x24
    1f8a:	8d a1       	ldd	r24, Y+37	; 0x25
    1f8c:	9e a1       	ldd	r25, Y+38	; 0x26
    1f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	9a a3       	std	Y+34, r25	; 0x22
    1f98:	89 a3       	std	Y+33, r24	; 0x21
    1f9a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f9c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f9e:	9e 8f       	std	Y+30, r25	; 0x1e
    1fa0:	8d 8f       	std	Y+29, r24	; 0x1d
    1fa2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fa4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fa6:	01 97       	sbiw	r24, 0x01	; 1
    1fa8:	f1 f7       	brne	.-4      	; 0x1fa6 <lcd_8bit_initialize+0x234>
    1faa:	9e 8f       	std	Y+30, r25	; 0x1e
    1fac:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		ret = lcd_8bit_send_command(lcd,0x0C);
    1fae:	8b ad       	ldd	r24, Y+59	; 0x3b
    1fb0:	9c ad       	ldd	r25, Y+60	; 0x3c
    1fb2:	6c e0       	ldi	r22, 0x0C	; 12
    1fb4:	0e 94 d7 10 	call	0x21ae	; 0x21ae <lcd_8bit_send_command>
    1fb8:	8a af       	std	Y+58, r24	; 0x3a
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	a0 e0       	ldi	r26, 0x00	; 0
    1fc0:	b0 e4       	ldi	r27, 0x40	; 64
    1fc2:	89 8f       	std	Y+25, r24	; 0x19
    1fc4:	9a 8f       	std	Y+26, r25	; 0x1a
    1fc6:	ab 8f       	std	Y+27, r26	; 0x1b
    1fc8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fca:	69 8d       	ldd	r22, Y+25	; 0x19
    1fcc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	4a ef       	ldi	r20, 0xFA	; 250
    1fd8:	54 e4       	ldi	r21, 0x44	; 68
    1fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	8d 8b       	std	Y+21, r24	; 0x15
    1fe4:	9e 8b       	std	Y+22, r25	; 0x16
    1fe6:	af 8b       	std	Y+23, r26	; 0x17
    1fe8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fea:	6d 89       	ldd	r22, Y+21	; 0x15
    1fec:	7e 89       	ldd	r23, Y+22	; 0x16
    1fee:	8f 89       	ldd	r24, Y+23	; 0x17
    1ff0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	40 e8       	ldi	r20, 0x80	; 128
    1ff8:	5f e3       	ldi	r21, 0x3F	; 63
    1ffa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ffe:	88 23       	and	r24, r24
    2000:	2c f4       	brge	.+10     	; 0x200c <lcd_8bit_initialize+0x29a>
		__ticks = 1;
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	9c 8b       	std	Y+20, r25	; 0x14
    2008:	8b 8b       	std	Y+19, r24	; 0x13
    200a:	3f c0       	rjmp	.+126    	; 0x208a <lcd_8bit_initialize+0x318>
	else if (__tmp > 65535)
    200c:	6d 89       	ldd	r22, Y+21	; 0x15
    200e:	7e 89       	ldd	r23, Y+22	; 0x16
    2010:	8f 89       	ldd	r24, Y+23	; 0x17
    2012:	98 8d       	ldd	r25, Y+24	; 0x18
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	3f ef       	ldi	r19, 0xFF	; 255
    2018:	4f e7       	ldi	r20, 0x7F	; 127
    201a:	57 e4       	ldi	r21, 0x47	; 71
    201c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2020:	18 16       	cp	r1, r24
    2022:	4c f5       	brge	.+82     	; 0x2076 <lcd_8bit_initialize+0x304>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2024:	69 8d       	ldd	r22, Y+25	; 0x19
    2026:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2028:	8b 8d       	ldd	r24, Y+27	; 0x1b
    202a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	40 e2       	ldi	r20, 0x20	; 32
    2032:	51 e4       	ldi	r21, 0x41	; 65
    2034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	bc 01       	movw	r22, r24
    203e:	cd 01       	movw	r24, r26
    2040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	9c 8b       	std	Y+20, r25	; 0x14
    204a:	8b 8b       	std	Y+19, r24	; 0x13
    204c:	0f c0       	rjmp	.+30     	; 0x206c <lcd_8bit_initialize+0x2fa>
    204e:	88 ec       	ldi	r24, 0xC8	; 200
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	9a 8b       	std	Y+18, r25	; 0x12
    2054:	89 8b       	std	Y+17, r24	; 0x11
    2056:	89 89       	ldd	r24, Y+17	; 0x11
    2058:	9a 89       	ldd	r25, Y+18	; 0x12
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	f1 f7       	brne	.-4      	; 0x205a <lcd_8bit_initialize+0x2e8>
    205e:	9a 8b       	std	Y+18, r25	; 0x12
    2060:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2062:	8b 89       	ldd	r24, Y+19	; 0x13
    2064:	9c 89       	ldd	r25, Y+20	; 0x14
    2066:	01 97       	sbiw	r24, 0x01	; 1
    2068:	9c 8b       	std	Y+20, r25	; 0x14
    206a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    206c:	8b 89       	ldd	r24, Y+19	; 0x13
    206e:	9c 89       	ldd	r25, Y+20	; 0x14
    2070:	00 97       	sbiw	r24, 0x00	; 0
    2072:	69 f7       	brne	.-38     	; 0x204e <lcd_8bit_initialize+0x2dc>
    2074:	14 c0       	rjmp	.+40     	; 0x209e <lcd_8bit_initialize+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2076:	6d 89       	ldd	r22, Y+21	; 0x15
    2078:	7e 89       	ldd	r23, Y+22	; 0x16
    207a:	8f 89       	ldd	r24, Y+23	; 0x17
    207c:	98 8d       	ldd	r25, Y+24	; 0x18
    207e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	9c 8b       	std	Y+20, r25	; 0x14
    2088:	8b 8b       	std	Y+19, r24	; 0x13
    208a:	8b 89       	ldd	r24, Y+19	; 0x13
    208c:	9c 89       	ldd	r25, Y+20	; 0x14
    208e:	98 8b       	std	Y+16, r25	; 0x10
    2090:	8f 87       	std	Y+15, r24	; 0x0f
    2092:	8f 85       	ldd	r24, Y+15	; 0x0f
    2094:	98 89       	ldd	r25, Y+16	; 0x10
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	f1 f7       	brne	.-4      	; 0x2096 <lcd_8bit_initialize+0x324>
    209a:	98 8b       	std	Y+16, r25	; 0x10
    209c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		//ret = lcd_8bit_send_command(lcd,_LCD_8BIT_MODE_2_LINE);
		ret = lcd_8bit_send_command(lcd, _LCD_CLEAR);
    209e:	8b ad       	ldd	r24, Y+59	; 0x3b
    20a0:	9c ad       	ldd	r25, Y+60	; 0x3c
    20a2:	61 e0       	ldi	r22, 0x01	; 1
    20a4:	0e 94 d7 10 	call	0x21ae	; 0x21ae <lcd_8bit_send_command>
    20a8:	8a af       	std	Y+58, r24	; 0x3a
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	a0 e0       	ldi	r26, 0x00	; 0
    20b0:	b0 e4       	ldi	r27, 0x40	; 64
    20b2:	8b 87       	std	Y+11, r24	; 0x0b
    20b4:	9c 87       	std	Y+12, r25	; 0x0c
    20b6:	ad 87       	std	Y+13, r26	; 0x0d
    20b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    20bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    20be:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	4a ef       	ldi	r20, 0xFA	; 250
    20c8:	54 e4       	ldi	r21, 0x44	; 68
    20ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	8f 83       	std	Y+7, r24	; 0x07
    20d4:	98 87       	std	Y+8, r25	; 0x08
    20d6:	a9 87       	std	Y+9, r26	; 0x09
    20d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20da:	6f 81       	ldd	r22, Y+7	; 0x07
    20dc:	78 85       	ldd	r23, Y+8	; 0x08
    20de:	89 85       	ldd	r24, Y+9	; 0x09
    20e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	40 e8       	ldi	r20, 0x80	; 128
    20e8:	5f e3       	ldi	r21, 0x3F	; 63
    20ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20ee:	88 23       	and	r24, r24
    20f0:	2c f4       	brge	.+10     	; 0x20fc <lcd_8bit_initialize+0x38a>
		__ticks = 1;
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	9e 83       	std	Y+6, r25	; 0x06
    20f8:	8d 83       	std	Y+5, r24	; 0x05
    20fa:	3f c0       	rjmp	.+126    	; 0x217a <lcd_8bit_initialize+0x408>
	else if (__tmp > 65535)
    20fc:	6f 81       	ldd	r22, Y+7	; 0x07
    20fe:	78 85       	ldd	r23, Y+8	; 0x08
    2100:	89 85       	ldd	r24, Y+9	; 0x09
    2102:	9a 85       	ldd	r25, Y+10	; 0x0a
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	3f ef       	ldi	r19, 0xFF	; 255
    2108:	4f e7       	ldi	r20, 0x7F	; 127
    210a:	57 e4       	ldi	r21, 0x47	; 71
    210c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2110:	18 16       	cp	r1, r24
    2112:	4c f5       	brge	.+82     	; 0x2166 <lcd_8bit_initialize+0x3f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2114:	6b 85       	ldd	r22, Y+11	; 0x0b
    2116:	7c 85       	ldd	r23, Y+12	; 0x0c
    2118:	8d 85       	ldd	r24, Y+13	; 0x0d
    211a:	9e 85       	ldd	r25, Y+14	; 0x0e
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	40 e2       	ldi	r20, 0x20	; 32
    2122:	51 e4       	ldi	r21, 0x41	; 65
    2124:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2128:	dc 01       	movw	r26, r24
    212a:	cb 01       	movw	r24, r22
    212c:	bc 01       	movw	r22, r24
    212e:	cd 01       	movw	r24, r26
    2130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	9e 83       	std	Y+6, r25	; 0x06
    213a:	8d 83       	std	Y+5, r24	; 0x05
    213c:	0f c0       	rjmp	.+30     	; 0x215c <lcd_8bit_initialize+0x3ea>
    213e:	88 ec       	ldi	r24, 0xC8	; 200
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	9c 83       	std	Y+4, r25	; 0x04
    2144:	8b 83       	std	Y+3, r24	; 0x03
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	9c 81       	ldd	r25, Y+4	; 0x04
    214a:	01 97       	sbiw	r24, 0x01	; 1
    214c:	f1 f7       	brne	.-4      	; 0x214a <lcd_8bit_initialize+0x3d8>
    214e:	9c 83       	std	Y+4, r25	; 0x04
    2150:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2152:	8d 81       	ldd	r24, Y+5	; 0x05
    2154:	9e 81       	ldd	r25, Y+6	; 0x06
    2156:	01 97       	sbiw	r24, 0x01	; 1
    2158:	9e 83       	std	Y+6, r25	; 0x06
    215a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    215c:	8d 81       	ldd	r24, Y+5	; 0x05
    215e:	9e 81       	ldd	r25, Y+6	; 0x06
    2160:	00 97       	sbiw	r24, 0x00	; 0
    2162:	69 f7       	brne	.-38     	; 0x213e <lcd_8bit_initialize+0x3cc>
    2164:	14 c0       	rjmp	.+40     	; 0x218e <lcd_8bit_initialize+0x41c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2166:	6f 81       	ldd	r22, Y+7	; 0x07
    2168:	78 85       	ldd	r23, Y+8	; 0x08
    216a:	89 85       	ldd	r24, Y+9	; 0x09
    216c:	9a 85       	ldd	r25, Y+10	; 0x0a
    216e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	9e 83       	std	Y+6, r25	; 0x06
    2178:	8d 83       	std	Y+5, r24	; 0x05
    217a:	8d 81       	ldd	r24, Y+5	; 0x05
    217c:	9e 81       	ldd	r25, Y+6	; 0x06
    217e:	9a 83       	std	Y+2, r25	; 0x02
    2180:	89 83       	std	Y+1, r24	; 0x01
    2182:	89 81       	ldd	r24, Y+1	; 0x01
    2184:	9a 81       	ldd	r25, Y+2	; 0x02
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	f1 f7       	brne	.-4      	; 0x2186 <lcd_8bit_initialize+0x414>
    218a:	9a 83       	std	Y+2, r25	; 0x02
    218c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		//ret = lcd_8bit_send_command(lcd, _LCD_RETURN_HOME);
		//ret = lcd_8bit_send_command(lcd, _LCD_ENTRY_MODE);
		//ret = lcd_8bit_send_command(lcd, _LCD_CURSER_OFF_DISPLAY_ON);
		//ret = lcd_8bit_send_command(lcd,_LCD_8BIT_MODE_2_LINE);
		ret = lcd_8bit_send_command(lcd,0x80);
    218e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2190:	9c ad       	ldd	r25, Y+60	; 0x3c
    2192:	60 e8       	ldi	r22, 0x80	; 128
    2194:	0e 94 d7 10 	call	0x21ae	; 0x21ae <lcd_8bit_send_command>
    2198:	8a af       	std	Y+58, r24	; 0x3a
		//ret = lcd_8bit_send_command(lcd,0x04);
	}
	return ret;
    219a:	8a ad       	ldd	r24, Y+58	; 0x3a
}
    219c:	ec 96       	adiw	r28, 0x3c	; 60
    219e:	0f b6       	in	r0, 0x3f	; 63
    21a0:	f8 94       	cli
    21a2:	de bf       	out	0x3e, r29	; 62
    21a4:	0f be       	out	0x3f, r0	; 63
    21a6:	cd bf       	out	0x3d, r28	; 61
    21a8:	cf 91       	pop	r28
    21aa:	df 91       	pop	r29
    21ac:	08 95       	ret

000021ae <lcd_8bit_send_command>:
STD_ReturnStatus lcd_8bit_send_command(const chr_lcd_8bit_t *lcd,uint8 command)
{
    21ae:	df 93       	push	r29
    21b0:	cf 93       	push	r28
    21b2:	00 d0       	rcall	.+0      	; 0x21b4 <lcd_8bit_send_command+0x6>
    21b4:	00 d0       	rcall	.+0      	; 0x21b6 <lcd_8bit_send_command+0x8>
    21b6:	0f 92       	push	r0
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	9c 83       	std	Y+4, r25	; 0x04
    21be:	8b 83       	std	Y+3, r24	; 0x03
    21c0:	6d 83       	std	Y+5, r22	; 0x05
	STD_ReturnStatus ret = E_OK;
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 l_pin_counter=ZERO_INIT;
    21c6:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==lcd)
    21c8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ca:	9c 81       	ldd	r25, Y+4	; 0x04
    21cc:	00 97       	sbiw	r24, 0x00	; 0
    21ce:	11 f4       	brne	.+4      	; 0x21d4 <lcd_8bit_send_command+0x26>
	{
		ret = E_NOT_OK;
    21d0:	1a 82       	std	Y+2, r1	; 0x02
    21d2:	32 c0       	rjmp	.+100    	; 0x2238 <lcd_8bit_send_command+0x8a>
	}
	else
	{
		ret = gpio_pin_write_logic(&(lcd->lcd_rs),GPIO_LOW);
    21d4:	8b 81       	ldd	r24, Y+3	; 0x03
    21d6:	9c 81       	ldd	r25, Y+4	; 0x04
    21d8:	60 e0       	ldi	r22, 0x00	; 0
    21da:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
    21de:	8a 83       	std	Y+2, r24	; 0x02
		for(l_pin_counter=0;l_pin_counter<8;++l_pin_counter)
    21e0:	19 82       	std	Y+1, r1	; 0x01
    21e2:	22 c0       	rjmp	.+68     	; 0x2228 <lcd_8bit_send_command+0x7a>
		{
			ret = gpio_pin_write_logic(&(lcd->lcd_data[l_pin_counter]), (command>>l_pin_counter) & (uint8)0x01);
    21e4:	8b 81       	ldd	r24, Y+3	; 0x03
    21e6:	9c 81       	ldd	r25, Y+4	; 0x04
    21e8:	9c 01       	movw	r18, r24
    21ea:	2e 5f       	subi	r18, 0xFE	; 254
    21ec:	3f 4f       	sbci	r19, 0xFF	; 255
    21ee:	89 81       	ldd	r24, Y+1	; 0x01
    21f0:	88 2f       	mov	r24, r24
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	a9 01       	movw	r20, r18
    21f6:	48 0f       	add	r20, r24
    21f8:	59 1f       	adc	r21, r25
    21fa:	8d 81       	ldd	r24, Y+5	; 0x05
    21fc:	28 2f       	mov	r18, r24
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	88 2f       	mov	r24, r24
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	b9 01       	movw	r22, r18
    2208:	02 c0       	rjmp	.+4      	; 0x220e <lcd_8bit_send_command+0x60>
    220a:	75 95       	asr	r23
    220c:	67 95       	ror	r22
    220e:	8a 95       	dec	r24
    2210:	e2 f7       	brpl	.-8      	; 0x220a <lcd_8bit_send_command+0x5c>
    2212:	cb 01       	movw	r24, r22
    2214:	28 2f       	mov	r18, r24
    2216:	21 70       	andi	r18, 0x01	; 1
    2218:	ca 01       	movw	r24, r20
    221a:	62 2f       	mov	r22, r18
    221c:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
    2220:	8a 83       	std	Y+2, r24	; 0x02
		ret = E_NOT_OK;
	}
	else
	{
		ret = gpio_pin_write_logic(&(lcd->lcd_rs),GPIO_LOW);
		for(l_pin_counter=0;l_pin_counter<8;++l_pin_counter)
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	8f 5f       	subi	r24, 0xFF	; 255
    2226:	89 83       	std	Y+1, r24	; 0x01
    2228:	89 81       	ldd	r24, Y+1	; 0x01
    222a:	88 30       	cpi	r24, 0x08	; 8
    222c:	d8 f2       	brcs	.-74     	; 0x21e4 <lcd_8bit_send_command+0x36>
		{
			ret = gpio_pin_write_logic(&(lcd->lcd_data[l_pin_counter]), (command>>l_pin_counter) & (uint8)0x01);
		}
		ret = lcd_8bit_send_enable(lcd);
    222e:	8b 81       	ldd	r24, Y+3	; 0x03
    2230:	9c 81       	ldd	r25, Y+4	; 0x04
    2232:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <lcd_8bit_send_enable>
    2236:	8a 83       	std	Y+2, r24	; 0x02
	}
	return ret;
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
}
    223a:	0f 90       	pop	r0
    223c:	0f 90       	pop	r0
    223e:	0f 90       	pop	r0
    2240:	0f 90       	pop	r0
    2242:	0f 90       	pop	r0
    2244:	cf 91       	pop	r28
    2246:	df 91       	pop	r29
    2248:	08 95       	ret

0000224a <lcd_8bit_send_char_data>:
STD_ReturnStatus lcd_8bit_send_char_data(const chr_lcd_8bit_t *lcd,uint8 data)
{
    224a:	df 93       	push	r29
    224c:	cf 93       	push	r28
    224e:	00 d0       	rcall	.+0      	; 0x2250 <lcd_8bit_send_char_data+0x6>
    2250:	00 d0       	rcall	.+0      	; 0x2252 <lcd_8bit_send_char_data+0x8>
    2252:	0f 92       	push	r0
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
    2258:	9c 83       	std	Y+4, r25	; 0x04
    225a:	8b 83       	std	Y+3, r24	; 0x03
    225c:	6d 83       	std	Y+5, r22	; 0x05
	STD_ReturnStatus ret = E_OK;
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	8a 83       	std	Y+2, r24	; 0x02
	uint8 l_pin_counter=ZERO_INIT;
    2262:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==lcd)
    2264:	8b 81       	ldd	r24, Y+3	; 0x03
    2266:	9c 81       	ldd	r25, Y+4	; 0x04
    2268:	00 97       	sbiw	r24, 0x00	; 0
    226a:	11 f4       	brne	.+4      	; 0x2270 <lcd_8bit_send_char_data+0x26>
	{
		ret = E_NOT_OK;
    226c:	1a 82       	std	Y+2, r1	; 0x02
    226e:	32 c0       	rjmp	.+100    	; 0x22d4 <lcd_8bit_send_char_data+0x8a>
	}
	else
	{
		ret = gpio_pin_write_logic(&(lcd->lcd_rs),GPIO_HIGH);
    2270:	8b 81       	ldd	r24, Y+3	; 0x03
    2272:	9c 81       	ldd	r25, Y+4	; 0x04
    2274:	61 e0       	ldi	r22, 0x01	; 1
    2276:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
    227a:	8a 83       	std	Y+2, r24	; 0x02
		for(l_pin_counter=ZERO_INIT;l_pin_counter<8;++l_pin_counter)
    227c:	19 82       	std	Y+1, r1	; 0x01
    227e:	22 c0       	rjmp	.+68     	; 0x22c4 <lcd_8bit_send_char_data+0x7a>
		{
			ret = gpio_pin_write_logic(&(lcd->lcd_data[l_pin_counter]), (data>>l_pin_counter) & (uint8)0x01);
    2280:	8b 81       	ldd	r24, Y+3	; 0x03
    2282:	9c 81       	ldd	r25, Y+4	; 0x04
    2284:	9c 01       	movw	r18, r24
    2286:	2e 5f       	subi	r18, 0xFE	; 254
    2288:	3f 4f       	sbci	r19, 0xFF	; 255
    228a:	89 81       	ldd	r24, Y+1	; 0x01
    228c:	88 2f       	mov	r24, r24
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	a9 01       	movw	r20, r18
    2292:	48 0f       	add	r20, r24
    2294:	59 1f       	adc	r21, r25
    2296:	8d 81       	ldd	r24, Y+5	; 0x05
    2298:	28 2f       	mov	r18, r24
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	89 81       	ldd	r24, Y+1	; 0x01
    229e:	88 2f       	mov	r24, r24
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	b9 01       	movw	r22, r18
    22a4:	02 c0       	rjmp	.+4      	; 0x22aa <lcd_8bit_send_char_data+0x60>
    22a6:	75 95       	asr	r23
    22a8:	67 95       	ror	r22
    22aa:	8a 95       	dec	r24
    22ac:	e2 f7       	brpl	.-8      	; 0x22a6 <lcd_8bit_send_char_data+0x5c>
    22ae:	cb 01       	movw	r24, r22
    22b0:	28 2f       	mov	r18, r24
    22b2:	21 70       	andi	r18, 0x01	; 1
    22b4:	ca 01       	movw	r24, r20
    22b6:	62 2f       	mov	r22, r18
    22b8:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
    22bc:	8a 83       	std	Y+2, r24	; 0x02
		ret = E_NOT_OK;
	}
	else
	{
		ret = gpio_pin_write_logic(&(lcd->lcd_rs),GPIO_HIGH);
		for(l_pin_counter=ZERO_INIT;l_pin_counter<8;++l_pin_counter)
    22be:	89 81       	ldd	r24, Y+1	; 0x01
    22c0:	8f 5f       	subi	r24, 0xFF	; 255
    22c2:	89 83       	std	Y+1, r24	; 0x01
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
    22c6:	88 30       	cpi	r24, 0x08	; 8
    22c8:	d8 f2       	brcs	.-74     	; 0x2280 <lcd_8bit_send_char_data+0x36>
		{
			ret = gpio_pin_write_logic(&(lcd->lcd_data[l_pin_counter]), (data>>l_pin_counter) & (uint8)0x01);
		}
		ret = lcd_8bit_send_enable(lcd);
    22ca:	8b 81       	ldd	r24, Y+3	; 0x03
    22cc:	9c 81       	ldd	r25, Y+4	; 0x04
    22ce:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <lcd_8bit_send_enable>
    22d2:	8a 83       	std	Y+2, r24	; 0x02
	}
	return ret;
    22d4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	0f 90       	pop	r0
    22e0:	cf 91       	pop	r28
    22e2:	df 91       	pop	r29
    22e4:	08 95       	ret

000022e6 <lcd_8bit_send_char_data_pos>:


STD_ReturnStatus lcd_8bit_send_char_data_pos(const chr_lcd_8bit_t *lcd,uint8 row,uint8 column,uint8 data)
{
    22e6:	df 93       	push	r29
    22e8:	cf 93       	push	r28
    22ea:	00 d0       	rcall	.+0      	; 0x22ec <lcd_8bit_send_char_data_pos+0x6>
    22ec:	00 d0       	rcall	.+0      	; 0x22ee <lcd_8bit_send_char_data_pos+0x8>
    22ee:	00 d0       	rcall	.+0      	; 0x22f0 <lcd_8bit_send_char_data_pos+0xa>
    22f0:	cd b7       	in	r28, 0x3d	; 61
    22f2:	de b7       	in	r29, 0x3e	; 62
    22f4:	9b 83       	std	Y+3, r25	; 0x03
    22f6:	8a 83       	std	Y+2, r24	; 0x02
    22f8:	6c 83       	std	Y+4, r22	; 0x04
    22fa:	4d 83       	std	Y+5, r20	; 0x05
    22fc:	2e 83       	std	Y+6, r18	; 0x06
	STD_ReturnStatus ret = E_OK;
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==lcd)
    2302:	8a 81       	ldd	r24, Y+2	; 0x02
    2304:	9b 81       	ldd	r25, Y+3	; 0x03
    2306:	00 97       	sbiw	r24, 0x00	; 0
    2308:	11 f4       	brne	.+4      	; 0x230e <lcd_8bit_send_char_data_pos+0x28>
	{
		ret = E_NOT_OK;
    230a:	19 82       	std	Y+1, r1	; 0x01
    230c:	0c c0       	rjmp	.+24     	; 0x2326 <lcd_8bit_send_char_data_pos+0x40>
	}
	else
	{
		lcd_8bit_set_cursor(lcd,row,column);
    230e:	8a 81       	ldd	r24, Y+2	; 0x02
    2310:	9b 81       	ldd	r25, Y+3	; 0x03
    2312:	6c 81       	ldd	r22, Y+4	; 0x04
    2314:	4d 81       	ldd	r20, Y+5	; 0x05
    2316:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <lcd_8bit_set_cursor>
		ret = lcd_8bit_send_char_data(lcd,data);
    231a:	8a 81       	ldd	r24, Y+2	; 0x02
    231c:	9b 81       	ldd	r25, Y+3	; 0x03
    231e:	6e 81       	ldd	r22, Y+6	; 0x06
    2320:	0e 94 25 11 	call	0x224a	; 0x224a <lcd_8bit_send_char_data>
    2324:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    2326:	89 81       	ldd	r24, Y+1	; 0x01
}
    2328:	26 96       	adiw	r28, 0x06	; 6
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	f8 94       	cli
    232e:	de bf       	out	0x3e, r29	; 62
    2330:	0f be       	out	0x3f, r0	; 63
    2332:	cd bf       	out	0x3d, r28	; 61
    2334:	cf 91       	pop	r28
    2336:	df 91       	pop	r29
    2338:	08 95       	ret

0000233a <lcd_8bit_send_string>:
STD_ReturnStatus lcd_8bit_send_string(const chr_lcd_8bit_t *lcd,uint8* str)
{
    233a:	df 93       	push	r29
    233c:	cf 93       	push	r28
    233e:	00 d0       	rcall	.+0      	; 0x2340 <lcd_8bit_send_string+0x6>
    2340:	00 d0       	rcall	.+0      	; 0x2342 <lcd_8bit_send_string+0x8>
    2342:	0f 92       	push	r0
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
    2348:	9b 83       	std	Y+3, r25	; 0x03
    234a:	8a 83       	std	Y+2, r24	; 0x02
    234c:	7d 83       	std	Y+5, r23	; 0x05
    234e:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_OK;
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	89 83       	std	Y+1, r24	; 0x01
	if((NULL==lcd)||(NULL==str))
    2354:	8a 81       	ldd	r24, Y+2	; 0x02
    2356:	9b 81       	ldd	r25, Y+3	; 0x03
    2358:	00 97       	sbiw	r24, 0x00	; 0
    235a:	21 f0       	breq	.+8      	; 0x2364 <lcd_8bit_send_string+0x2a>
    235c:	8c 81       	ldd	r24, Y+4	; 0x04
    235e:	9d 81       	ldd	r25, Y+5	; 0x05
    2360:	00 97       	sbiw	r24, 0x00	; 0
    2362:	81 f4       	brne	.+32     	; 0x2384 <lcd_8bit_send_string+0x4a>
	{
		ret = E_NOT_OK;
    2364:	19 82       	std	Y+1, r1	; 0x01
    2366:	13 c0       	rjmp	.+38     	; 0x238e <lcd_8bit_send_string+0x54>
	}
	else
	{
		while(*str)
		{
			ret = lcd_8bit_send_char_data(lcd,*str++);
    2368:	ec 81       	ldd	r30, Y+4	; 0x04
    236a:	fd 81       	ldd	r31, Y+5	; 0x05
    236c:	20 81       	ld	r18, Z
    236e:	8c 81       	ldd	r24, Y+4	; 0x04
    2370:	9d 81       	ldd	r25, Y+5	; 0x05
    2372:	01 96       	adiw	r24, 0x01	; 1
    2374:	9d 83       	std	Y+5, r25	; 0x05
    2376:	8c 83       	std	Y+4, r24	; 0x04
    2378:	8a 81       	ldd	r24, Y+2	; 0x02
    237a:	9b 81       	ldd	r25, Y+3	; 0x03
    237c:	62 2f       	mov	r22, r18
    237e:	0e 94 25 11 	call	0x224a	; 0x224a <lcd_8bit_send_char_data>
    2382:	89 83       	std	Y+1, r24	; 0x01
	{
		ret = E_NOT_OK;
	}
	else
	{
		while(*str)
    2384:	ec 81       	ldd	r30, Y+4	; 0x04
    2386:	fd 81       	ldd	r31, Y+5	; 0x05
    2388:	80 81       	ld	r24, Z
    238a:	88 23       	and	r24, r24
    238c:	69 f7       	brne	.-38     	; 0x2368 <lcd_8bit_send_string+0x2e>
		{
			ret = lcd_8bit_send_char_data(lcd,*str++);
		}
	}
	return ret;
    238e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	0f 90       	pop	r0
    2398:	0f 90       	pop	r0
    239a:	cf 91       	pop	r28
    239c:	df 91       	pop	r29
    239e:	08 95       	ret

000023a0 <lcd_8bit_send_string_pos>:
STD_ReturnStatus lcd_8bit_send_string_pos(const chr_lcd_8bit_t *lcd,uint8 row,uint8 column,uint8* str)
{
    23a0:	df 93       	push	r29
    23a2:	cf 93       	push	r28
    23a4:	cd b7       	in	r28, 0x3d	; 61
    23a6:	de b7       	in	r29, 0x3e	; 62
    23a8:	27 97       	sbiw	r28, 0x07	; 7
    23aa:	0f b6       	in	r0, 0x3f	; 63
    23ac:	f8 94       	cli
    23ae:	de bf       	out	0x3e, r29	; 62
    23b0:	0f be       	out	0x3f, r0	; 63
    23b2:	cd bf       	out	0x3d, r28	; 61
    23b4:	9b 83       	std	Y+3, r25	; 0x03
    23b6:	8a 83       	std	Y+2, r24	; 0x02
    23b8:	6c 83       	std	Y+4, r22	; 0x04
    23ba:	4d 83       	std	Y+5, r20	; 0x05
    23bc:	3f 83       	std	Y+7, r19	; 0x07
    23be:	2e 83       	std	Y+6, r18	; 0x06
	STD_ReturnStatus ret = E_OK;
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	89 83       	std	Y+1, r24	; 0x01
	if((NULL==lcd)||(NULL==str))
    23c4:	8a 81       	ldd	r24, Y+2	; 0x02
    23c6:	9b 81       	ldd	r25, Y+3	; 0x03
    23c8:	00 97       	sbiw	r24, 0x00	; 0
    23ca:	21 f0       	breq	.+8      	; 0x23d4 <lcd_8bit_send_string_pos+0x34>
    23cc:	8e 81       	ldd	r24, Y+6	; 0x06
    23ce:	9f 81       	ldd	r25, Y+7	; 0x07
    23d0:	00 97       	sbiw	r24, 0x00	; 0
    23d2:	11 f4       	brne	.+4      	; 0x23d8 <lcd_8bit_send_string_pos+0x38>
	{
		ret = E_NOT_OK;
    23d4:	19 82       	std	Y+1, r1	; 0x01
    23d6:	1b c0       	rjmp	.+54     	; 0x240e <lcd_8bit_send_string_pos+0x6e>
	}
	else
	{
		ret = lcd_8bit_set_cursor(lcd,row,column);
    23d8:	8a 81       	ldd	r24, Y+2	; 0x02
    23da:	9b 81       	ldd	r25, Y+3	; 0x03
    23dc:	6c 81       	ldd	r22, Y+4	; 0x04
    23de:	4d 81       	ldd	r20, Y+5	; 0x05
    23e0:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <lcd_8bit_set_cursor>
    23e4:	89 83       	std	Y+1, r24	; 0x01
    23e6:	0e c0       	rjmp	.+28     	; 0x2404 <lcd_8bit_send_string_pos+0x64>
		while(*str)
		{
			ret = lcd_8bit_send_char_data(lcd,*str++);
    23e8:	ee 81       	ldd	r30, Y+6	; 0x06
    23ea:	ff 81       	ldd	r31, Y+7	; 0x07
    23ec:	20 81       	ld	r18, Z
    23ee:	8e 81       	ldd	r24, Y+6	; 0x06
    23f0:	9f 81       	ldd	r25, Y+7	; 0x07
    23f2:	01 96       	adiw	r24, 0x01	; 1
    23f4:	9f 83       	std	Y+7, r25	; 0x07
    23f6:	8e 83       	std	Y+6, r24	; 0x06
    23f8:	8a 81       	ldd	r24, Y+2	; 0x02
    23fa:	9b 81       	ldd	r25, Y+3	; 0x03
    23fc:	62 2f       	mov	r22, r18
    23fe:	0e 94 25 11 	call	0x224a	; 0x224a <lcd_8bit_send_char_data>
    2402:	89 83       	std	Y+1, r24	; 0x01
		ret = E_NOT_OK;
	}
	else
	{
		ret = lcd_8bit_set_cursor(lcd,row,column);
		while(*str)
    2404:	ee 81       	ldd	r30, Y+6	; 0x06
    2406:	ff 81       	ldd	r31, Y+7	; 0x07
    2408:	80 81       	ld	r24, Z
    240a:	88 23       	and	r24, r24
    240c:	69 f7       	brne	.-38     	; 0x23e8 <lcd_8bit_send_string_pos+0x48>
		{
			ret = lcd_8bit_send_char_data(lcd,*str++);
		}
	}
	return ret;
    240e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2410:	27 96       	adiw	r28, 0x07	; 7
    2412:	0f b6       	in	r0, 0x3f	; 63
    2414:	f8 94       	cli
    2416:	de bf       	out	0x3e, r29	; 62
    2418:	0f be       	out	0x3f, r0	; 63
    241a:	cd bf       	out	0x3d, r28	; 61
    241c:	cf 91       	pop	r28
    241e:	df 91       	pop	r29
    2420:	08 95       	ret

00002422 <lcd_8bit_send_custom_char>:
STD_ReturnStatus lcd_8bit_send_custom_char(const chr_lcd_8bit_t *lcd,uint8 row,uint8 column,uint8 _char[],uint8 mem_pos)
{
    2422:	0f 93       	push	r16
    2424:	df 93       	push	r29
    2426:	cf 93       	push	r28
    2428:	cd b7       	in	r28, 0x3d	; 61
    242a:	de b7       	in	r29, 0x3e	; 62
    242c:	29 97       	sbiw	r28, 0x09	; 9
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	cd bf       	out	0x3d, r28	; 61
    2438:	9c 83       	std	Y+4, r25	; 0x04
    243a:	8b 83       	std	Y+3, r24	; 0x03
    243c:	6d 83       	std	Y+5, r22	; 0x05
    243e:	4e 83       	std	Y+6, r20	; 0x06
    2440:	38 87       	std	Y+8, r19	; 0x08
    2442:	2f 83       	std	Y+7, r18	; 0x07
    2444:	09 87       	std	Y+9, r16	; 0x09
	STD_ReturnStatus ret = E_OK;
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	8a 83       	std	Y+2, r24	; 0x02
	uint8 lcd_counter = ZERO_INIT;
    244a:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==lcd)
    244c:	8b 81       	ldd	r24, Y+3	; 0x03
    244e:	9c 81       	ldd	r25, Y+4	; 0x04
    2450:	00 97       	sbiw	r24, 0x00	; 0
    2452:	11 f4       	brne	.+4      	; 0x2458 <lcd_8bit_send_custom_char+0x36>
	{
		ret = E_NOT_OK;
    2454:	1a 82       	std	Y+2, r1	; 0x02
    2456:	30 c0       	rjmp	.+96     	; 0x24b8 <lcd_8bit_send_custom_char+0x96>
	}
	else
	{
		ret =  lcd_8bit_send_command(lcd,_LCD_CGRAM_START+(mem_pos*8));//mem_pos is the position addres oin cgram(1~8)
    2458:	89 85       	ldd	r24, Y+9	; 0x09
    245a:	88 2f       	mov	r24, r24
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	08 96       	adiw	r24, 0x08	; 8
    2460:	88 0f       	add	r24, r24
    2462:	99 1f       	adc	r25, r25
    2464:	88 0f       	add	r24, r24
    2466:	99 1f       	adc	r25, r25
    2468:	88 0f       	add	r24, r24
    246a:	99 1f       	adc	r25, r25
    246c:	28 2f       	mov	r18, r24
    246e:	8b 81       	ldd	r24, Y+3	; 0x03
    2470:	9c 81       	ldd	r25, Y+4	; 0x04
    2472:	62 2f       	mov	r22, r18
    2474:	0e 94 d7 10 	call	0x21ae	; 0x21ae <lcd_8bit_send_command>
    2478:	8a 83       	std	Y+2, r24	; 0x02
		for(lcd_counter=ZERO_INIT;lcd_counter<=7;++lcd_counter)
    247a:	19 82       	std	Y+1, r1	; 0x01
    247c:	12 c0       	rjmp	.+36     	; 0x24a2 <lcd_8bit_send_custom_char+0x80>
		{
			ret = lcd_8bit_send_char_data(lcd,_char[lcd_counter]);
    247e:	89 81       	ldd	r24, Y+1	; 0x01
    2480:	28 2f       	mov	r18, r24
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	8f 81       	ldd	r24, Y+7	; 0x07
    2486:	98 85       	ldd	r25, Y+8	; 0x08
    2488:	fc 01       	movw	r30, r24
    248a:	e2 0f       	add	r30, r18
    248c:	f3 1f       	adc	r31, r19
    248e:	20 81       	ld	r18, Z
    2490:	8b 81       	ldd	r24, Y+3	; 0x03
    2492:	9c 81       	ldd	r25, Y+4	; 0x04
    2494:	62 2f       	mov	r22, r18
    2496:	0e 94 25 11 	call	0x224a	; 0x224a <lcd_8bit_send_char_data>
    249a:	8a 83       	std	Y+2, r24	; 0x02
		ret = E_NOT_OK;
	}
	else
	{
		ret =  lcd_8bit_send_command(lcd,_LCD_CGRAM_START+(mem_pos*8));//mem_pos is the position addres oin cgram(1~8)
		for(lcd_counter=ZERO_INIT;lcd_counter<=7;++lcd_counter)
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	8f 5f       	subi	r24, 0xFF	; 255
    24a0:	89 83       	std	Y+1, r24	; 0x01
    24a2:	89 81       	ldd	r24, Y+1	; 0x01
    24a4:	88 30       	cpi	r24, 0x08	; 8
    24a6:	58 f3       	brcs	.-42     	; 0x247e <lcd_8bit_send_custom_char+0x5c>
		{
			ret = lcd_8bit_send_char_data(lcd,_char[lcd_counter]);
		}
		ret = lcd_8bit_send_char_data_pos(lcd,row,column,mem_pos);
    24a8:	8b 81       	ldd	r24, Y+3	; 0x03
    24aa:	9c 81       	ldd	r25, Y+4	; 0x04
    24ac:	6d 81       	ldd	r22, Y+5	; 0x05
    24ae:	4e 81       	ldd	r20, Y+6	; 0x06
    24b0:	29 85       	ldd	r18, Y+9	; 0x09
    24b2:	0e 94 73 11 	call	0x22e6	; 0x22e6 <lcd_8bit_send_char_data_pos>
    24b6:	8a 83       	std	Y+2, r24	; 0x02
	}
	return ret;
    24b8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    24ba:	29 96       	adiw	r28, 0x09	; 9
    24bc:	0f b6       	in	r0, 0x3f	; 63
    24be:	f8 94       	cli
    24c0:	de bf       	out	0x3e, r29	; 62
    24c2:	0f be       	out	0x3f, r0	; 63
    24c4:	cd bf       	out	0x3d, r28	; 61
    24c6:	cf 91       	pop	r28
    24c8:	df 91       	pop	r29
    24ca:	0f 91       	pop	r16
    24cc:	08 95       	ret

000024ce <convert_byte_to_string>:


STD_ReturnStatus convert_byte_to_string(uint8 value,uint8 *str)
{
    24ce:	df 93       	push	r29
    24d0:	cf 93       	push	r28
    24d2:	00 d0       	rcall	.+0      	; 0x24d4 <convert_byte_to_string+0x6>
    24d4:	00 d0       	rcall	.+0      	; 0x24d6 <convert_byte_to_string+0x8>
    24d6:	cd b7       	in	r28, 0x3d	; 61
    24d8:	de b7       	in	r29, 0x3e	; 62
    24da:	8a 83       	std	Y+2, r24	; 0x02
    24dc:	7c 83       	std	Y+4, r23	; 0x04
    24de:	6b 83       	std	Y+3, r22	; 0x03
	//since max of 8bits is 255 then we need 3 digits plus null terminator
	STD_ReturnStatus ret = E_OK;
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	89 83       	std	Y+1, r24	; 0x01
	if(str==NULL)
    24e4:	8b 81       	ldd	r24, Y+3	; 0x03
    24e6:	9c 81       	ldd	r25, Y+4	; 0x04
    24e8:	00 97       	sbiw	r24, 0x00	; 0
    24ea:	11 f4       	brne	.+4      	; 0x24f0 <convert_byte_to_string+0x22>
	{
		ret = E_NOT_OK;
    24ec:	19 82       	std	Y+1, r1	; 0x01
    24ee:	25 c0       	rjmp	.+74     	; 0x253a <convert_byte_to_string+0x6c>
	}
	else
	{
		memset(str,'\n',4);
    24f0:	8b 81       	ldd	r24, Y+3	; 0x03
    24f2:	9c 81       	ldd	r25, Y+4	; 0x04
    24f4:	6a e0       	ldi	r22, 0x0A	; 10
    24f6:	70 e0       	ldi	r23, 0x00	; 0
    24f8:	44 e0       	ldi	r20, 0x04	; 4
    24fa:	50 e0       	ldi	r21, 0x00	; 0
    24fc:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <memset>
		sprintf(str,"%i",value);
    2500:	8a 81       	ldd	r24, Y+2	; 0x02
    2502:	28 2f       	mov	r18, r24
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	00 d0       	rcall	.+0      	; 0x2508 <convert_byte_to_string+0x3a>
    2508:	00 d0       	rcall	.+0      	; 0x250a <convert_byte_to_string+0x3c>
    250a:	00 d0       	rcall	.+0      	; 0x250c <convert_byte_to_string+0x3e>
    250c:	ed b7       	in	r30, 0x3d	; 61
    250e:	fe b7       	in	r31, 0x3e	; 62
    2510:	31 96       	adiw	r30, 0x01	; 1
    2512:	8b 81       	ldd	r24, Y+3	; 0x03
    2514:	9c 81       	ldd	r25, Y+4	; 0x04
    2516:	91 83       	std	Z+1, r25	; 0x01
    2518:	80 83       	st	Z, r24
    251a:	80 e6       	ldi	r24, 0x60	; 96
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	93 83       	std	Z+3, r25	; 0x03
    2520:	82 83       	std	Z+2, r24	; 0x02
    2522:	35 83       	std	Z+5, r19	; 0x05
    2524:	24 83       	std	Z+4, r18	; 0x04
    2526:	0e 94 ef 1a 	call	0x35de	; 0x35de <sprintf>
    252a:	8d b7       	in	r24, 0x3d	; 61
    252c:	9e b7       	in	r25, 0x3e	; 62
    252e:	06 96       	adiw	r24, 0x06	; 6
    2530:	0f b6       	in	r0, 0x3f	; 63
    2532:	f8 94       	cli
    2534:	9e bf       	out	0x3e, r25	; 62
    2536:	0f be       	out	0x3f, r0	; 63
    2538:	8d bf       	out	0x3d, r24	; 61
	}
	return ret;
    253a:	89 81       	ldd	r24, Y+1	; 0x01
}
    253c:	0f 90       	pop	r0
    253e:	0f 90       	pop	r0
    2540:	0f 90       	pop	r0
    2542:	0f 90       	pop	r0
    2544:	cf 91       	pop	r28
    2546:	df 91       	pop	r29
    2548:	08 95       	ret

0000254a <convert_string_to_byte>:
STD_ReturnStatus convert_string_to_byte(uint8 *value,uint8 *str)
{
    254a:	df 93       	push	r29
    254c:	cf 93       	push	r28
    254e:	00 d0       	rcall	.+0      	; 0x2550 <convert_string_to_byte+0x6>
    2550:	00 d0       	rcall	.+0      	; 0x2552 <convert_string_to_byte+0x8>
    2552:	00 d0       	rcall	.+0      	; 0x2554 <convert_string_to_byte+0xa>
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
    2558:	9c 83       	std	Y+4, r25	; 0x04
    255a:	8b 83       	std	Y+3, r24	; 0x03
    255c:	7e 83       	std	Y+6, r23	; 0x06
    255e:	6d 83       	std	Y+5, r22	; 0x05
	STD_ReturnStatus ret = E_OK;
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	8a 83       	std	Y+2, r24	; 0x02
	if(str==NULL||NULL==value)
    2564:	8d 81       	ldd	r24, Y+5	; 0x05
    2566:	9e 81       	ldd	r25, Y+6	; 0x06
    2568:	00 97       	sbiw	r24, 0x00	; 0
    256a:	21 f0       	breq	.+8      	; 0x2574 <convert_string_to_byte+0x2a>
    256c:	8b 81       	ldd	r24, Y+3	; 0x03
    256e:	9c 81       	ldd	r25, Y+4	; 0x04
    2570:	00 97       	sbiw	r24, 0x00	; 0
    2572:	11 f4       	brne	.+4      	; 0x2578 <convert_string_to_byte+0x2e>
	{
		ret = E_NOT_OK;
    2574:	1a 82       	std	Y+2, r1	; 0x02
    2576:	31 c0       	rjmp	.+98     	; 0x25da <convert_string_to_byte+0x90>
	}
	else
	{
		*value=0;
    2578:	eb 81       	ldd	r30, Y+3	; 0x03
    257a:	fc 81       	ldd	r31, Y+4	; 0x04
    257c:	10 82       	st	Z, r1
	    for (uint8 i = 0; str[i] != '\0'; i++) {
    257e:	19 82       	std	Y+1, r1	; 0x01
    2580:	21 c0       	rjmp	.+66     	; 0x25c4 <convert_string_to_byte+0x7a>
	        *value = *value* 10 + (str[i] - 48);
    2582:	eb 81       	ldd	r30, Y+3	; 0x03
    2584:	fc 81       	ldd	r31, Y+4	; 0x04
    2586:	80 81       	ld	r24, Z
    2588:	88 2f       	mov	r24, r24
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	9c 01       	movw	r18, r24
    258e:	22 0f       	add	r18, r18
    2590:	33 1f       	adc	r19, r19
    2592:	c9 01       	movw	r24, r18
    2594:	88 0f       	add	r24, r24
    2596:	99 1f       	adc	r25, r25
    2598:	88 0f       	add	r24, r24
    259a:	99 1f       	adc	r25, r25
    259c:	82 0f       	add	r24, r18
    259e:	93 1f       	adc	r25, r19
    25a0:	48 2f       	mov	r20, r24
    25a2:	89 81       	ldd	r24, Y+1	; 0x01
    25a4:	28 2f       	mov	r18, r24
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	8d 81       	ldd	r24, Y+5	; 0x05
    25aa:	9e 81       	ldd	r25, Y+6	; 0x06
    25ac:	fc 01       	movw	r30, r24
    25ae:	e2 0f       	add	r30, r18
    25b0:	f3 1f       	adc	r31, r19
    25b2:	80 81       	ld	r24, Z
    25b4:	84 0f       	add	r24, r20
    25b6:	80 53       	subi	r24, 0x30	; 48
    25b8:	eb 81       	ldd	r30, Y+3	; 0x03
    25ba:	fc 81       	ldd	r31, Y+4	; 0x04
    25bc:	80 83       	st	Z, r24
		ret = E_NOT_OK;
	}
	else
	{
		*value=0;
	    for (uint8 i = 0; str[i] != '\0'; i++) {
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	8f 5f       	subi	r24, 0xFF	; 255
    25c2:	89 83       	std	Y+1, r24	; 0x01
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	28 2f       	mov	r18, r24
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	8d 81       	ldd	r24, Y+5	; 0x05
    25cc:	9e 81       	ldd	r25, Y+6	; 0x06
    25ce:	fc 01       	movw	r30, r24
    25d0:	e2 0f       	add	r30, r18
    25d2:	f3 1f       	adc	r31, r19
    25d4:	80 81       	ld	r24, Z
    25d6:	88 23       	and	r24, r24
    25d8:	a1 f6       	brne	.-88     	; 0x2582 <convert_string_to_byte+0x38>
	        *value = *value* 10 + (str[i] - 48);
	    }
	}
	return ret;
    25da:	8a 81       	ldd	r24, Y+2	; 0x02
}
    25dc:	26 96       	adiw	r28, 0x06	; 6
    25de:	0f b6       	in	r0, 0x3f	; 63
    25e0:	f8 94       	cli
    25e2:	de bf       	out	0x3e, r29	; 62
    25e4:	0f be       	out	0x3f, r0	; 63
    25e6:	cd bf       	out	0x3d, r28	; 61
    25e8:	cf 91       	pop	r28
    25ea:	df 91       	pop	r29
    25ec:	08 95       	ret

000025ee <convert_short_to_string>:


STD_ReturnStatus convert_short_to_string(uint16 value,uint8 *str)
{
    25ee:	df 93       	push	r29
    25f0:	cf 93       	push	r28
    25f2:	00 d0       	rcall	.+0      	; 0x25f4 <convert_short_to_string+0x6>
    25f4:	00 d0       	rcall	.+0      	; 0x25f6 <convert_short_to_string+0x8>
    25f6:	0f 92       	push	r0
    25f8:	cd b7       	in	r28, 0x3d	; 61
    25fa:	de b7       	in	r29, 0x3e	; 62
    25fc:	9b 83       	std	Y+3, r25	; 0x03
    25fe:	8a 83       	std	Y+2, r24	; 0x02
    2600:	7d 83       	std	Y+5, r23	; 0x05
    2602:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_OK;
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	89 83       	std	Y+1, r24	; 0x01
	if(str==NULL)
    2608:	8c 81       	ldd	r24, Y+4	; 0x04
    260a:	9d 81       	ldd	r25, Y+5	; 0x05
    260c:	00 97       	sbiw	r24, 0x00	; 0
    260e:	11 f4       	brne	.+4      	; 0x2614 <convert_short_to_string+0x26>
	{
		ret = E_NOT_OK;
    2610:	19 82       	std	Y+1, r1	; 0x01
    2612:	24 c0       	rjmp	.+72     	; 0x265c <convert_short_to_string+0x6e>
	}
	else
	{
		memset(str,'\n',6);
    2614:	8c 81       	ldd	r24, Y+4	; 0x04
    2616:	9d 81       	ldd	r25, Y+5	; 0x05
    2618:	6a e0       	ldi	r22, 0x0A	; 10
    261a:	70 e0       	ldi	r23, 0x00	; 0
    261c:	46 e0       	ldi	r20, 0x06	; 6
    261e:	50 e0       	ldi	r21, 0x00	; 0
    2620:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <memset>
		sprintf(str,"%i",value);
    2624:	00 d0       	rcall	.+0      	; 0x2626 <convert_short_to_string+0x38>
    2626:	00 d0       	rcall	.+0      	; 0x2628 <convert_short_to_string+0x3a>
    2628:	00 d0       	rcall	.+0      	; 0x262a <convert_short_to_string+0x3c>
    262a:	ed b7       	in	r30, 0x3d	; 61
    262c:	fe b7       	in	r31, 0x3e	; 62
    262e:	31 96       	adiw	r30, 0x01	; 1
    2630:	8c 81       	ldd	r24, Y+4	; 0x04
    2632:	9d 81       	ldd	r25, Y+5	; 0x05
    2634:	91 83       	std	Z+1, r25	; 0x01
    2636:	80 83       	st	Z, r24
    2638:	80 e6       	ldi	r24, 0x60	; 96
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	93 83       	std	Z+3, r25	; 0x03
    263e:	82 83       	std	Z+2, r24	; 0x02
    2640:	8a 81       	ldd	r24, Y+2	; 0x02
    2642:	9b 81       	ldd	r25, Y+3	; 0x03
    2644:	95 83       	std	Z+5, r25	; 0x05
    2646:	84 83       	std	Z+4, r24	; 0x04
    2648:	0e 94 ef 1a 	call	0x35de	; 0x35de <sprintf>
    264c:	8d b7       	in	r24, 0x3d	; 61
    264e:	9e b7       	in	r25, 0x3e	; 62
    2650:	06 96       	adiw	r24, 0x06	; 6
    2652:	0f b6       	in	r0, 0x3f	; 63
    2654:	f8 94       	cli
    2656:	9e bf       	out	0x3e, r25	; 62
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	8d bf       	out	0x3d, r24	; 61
	}
	return ret;
    265c:	89 81       	ldd	r24, Y+1	; 0x01
}
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	0f 90       	pop	r0
    2668:	cf 91       	pop	r28
    266a:	df 91       	pop	r29
    266c:	08 95       	ret

0000266e <convert_int_to_string>:
STD_ReturnStatus convert_int_to_string(uint32 value,uint8 *str)
{
    266e:	df 93       	push	r29
    2670:	cf 93       	push	r28
    2672:	00 d0       	rcall	.+0      	; 0x2674 <convert_int_to_string+0x6>
    2674:	00 d0       	rcall	.+0      	; 0x2676 <convert_int_to_string+0x8>
    2676:	0f 92       	push	r0
    2678:	cd b7       	in	r28, 0x3d	; 61
    267a:	de b7       	in	r29, 0x3e	; 62
    267c:	9b 83       	std	Y+3, r25	; 0x03
    267e:	8a 83       	std	Y+2, r24	; 0x02
    2680:	7d 83       	std	Y+5, r23	; 0x05
    2682:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_OK;
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	89 83       	std	Y+1, r24	; 0x01
	if(str==NULL)
    2688:	8c 81       	ldd	r24, Y+4	; 0x04
    268a:	9d 81       	ldd	r25, Y+5	; 0x05
    268c:	00 97       	sbiw	r24, 0x00	; 0
    268e:	11 f4       	brne	.+4      	; 0x2694 <convert_int_to_string+0x26>
	{
		ret = E_NOT_OK;
    2690:	19 82       	std	Y+1, r1	; 0x01
    2692:	24 c0       	rjmp	.+72     	; 0x26dc <convert_int_to_string+0x6e>
	}
	else
	{
		memset(str,'\n',11);
    2694:	8c 81       	ldd	r24, Y+4	; 0x04
    2696:	9d 81       	ldd	r25, Y+5	; 0x05
    2698:	6a e0       	ldi	r22, 0x0A	; 10
    269a:	70 e0       	ldi	r23, 0x00	; 0
    269c:	4b e0       	ldi	r20, 0x0B	; 11
    269e:	50 e0       	ldi	r21, 0x00	; 0
    26a0:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <memset>
		sprintf(str,"%i",value);
    26a4:	00 d0       	rcall	.+0      	; 0x26a6 <convert_int_to_string+0x38>
    26a6:	00 d0       	rcall	.+0      	; 0x26a8 <convert_int_to_string+0x3a>
    26a8:	00 d0       	rcall	.+0      	; 0x26aa <convert_int_to_string+0x3c>
    26aa:	ed b7       	in	r30, 0x3d	; 61
    26ac:	fe b7       	in	r31, 0x3e	; 62
    26ae:	31 96       	adiw	r30, 0x01	; 1
    26b0:	8c 81       	ldd	r24, Y+4	; 0x04
    26b2:	9d 81       	ldd	r25, Y+5	; 0x05
    26b4:	91 83       	std	Z+1, r25	; 0x01
    26b6:	80 83       	st	Z, r24
    26b8:	80 e6       	ldi	r24, 0x60	; 96
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	93 83       	std	Z+3, r25	; 0x03
    26be:	82 83       	std	Z+2, r24	; 0x02
    26c0:	8a 81       	ldd	r24, Y+2	; 0x02
    26c2:	9b 81       	ldd	r25, Y+3	; 0x03
    26c4:	95 83       	std	Z+5, r25	; 0x05
    26c6:	84 83       	std	Z+4, r24	; 0x04
    26c8:	0e 94 ef 1a 	call	0x35de	; 0x35de <sprintf>
    26cc:	8d b7       	in	r24, 0x3d	; 61
    26ce:	9e b7       	in	r25, 0x3e	; 62
    26d0:	06 96       	adiw	r24, 0x06	; 6
    26d2:	0f b6       	in	r0, 0x3f	; 63
    26d4:	f8 94       	cli
    26d6:	9e bf       	out	0x3e, r25	; 62
    26d8:	0f be       	out	0x3f, r0	; 63
    26da:	8d bf       	out	0x3d, r24	; 61
	}
	return ret;
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
    26e6:	0f 90       	pop	r0
    26e8:	cf 91       	pop	r28
    26ea:	df 91       	pop	r29
    26ec:	08 95       	ret

000026ee <lcd_send_4bits>:

static STD_ReturnStatus lcd_send_4bits(const chr_lcd_4bit_t *lcd,uint8 _data_command)
{
    26ee:	df 93       	push	r29
    26f0:	cf 93       	push	r28
    26f2:	00 d0       	rcall	.+0      	; 0x26f4 <lcd_send_4bits+0x6>
    26f4:	00 d0       	rcall	.+0      	; 0x26f6 <lcd_send_4bits+0x8>
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62
    26fa:	9b 83       	std	Y+3, r25	; 0x03
    26fc:	8a 83       	std	Y+2, r24	; 0x02
    26fe:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_OK;
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	89 83       	std	Y+1, r24	; 0x01
	ret = gpio_pin_write_logic(&(lcd->lcd_data[0]), (_data_command >> 0) & (uint8)0x01);
    2704:	8a 81       	ldd	r24, Y+2	; 0x02
    2706:	9b 81       	ldd	r25, Y+3	; 0x03
    2708:	9c 01       	movw	r18, r24
    270a:	2e 5f       	subi	r18, 0xFE	; 254
    270c:	3f 4f       	sbci	r19, 0xFF	; 255
    270e:	8c 81       	ldd	r24, Y+4	; 0x04
    2710:	48 2f       	mov	r20, r24
    2712:	41 70       	andi	r20, 0x01	; 1
    2714:	c9 01       	movw	r24, r18
    2716:	64 2f       	mov	r22, r20
    2718:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
    271c:	89 83       	std	Y+1, r24	; 0x01
	ret = gpio_pin_write_logic(&(lcd->lcd_data[1]), (_data_command >> 1) & (uint8)0x01);
    271e:	8a 81       	ldd	r24, Y+2	; 0x02
    2720:	9b 81       	ldd	r25, Y+3	; 0x03
    2722:	9c 01       	movw	r18, r24
    2724:	2d 5f       	subi	r18, 0xFD	; 253
    2726:	3f 4f       	sbci	r19, 0xFF	; 255
    2728:	8c 81       	ldd	r24, Y+4	; 0x04
    272a:	86 95       	lsr	r24
    272c:	48 2f       	mov	r20, r24
    272e:	41 70       	andi	r20, 0x01	; 1
    2730:	c9 01       	movw	r24, r18
    2732:	64 2f       	mov	r22, r20
    2734:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
    2738:	89 83       	std	Y+1, r24	; 0x01
	ret = gpio_pin_write_logic(&(lcd->lcd_data[2]), (_data_command >> 2) & (uint8)0x01);
    273a:	8a 81       	ldd	r24, Y+2	; 0x02
    273c:	9b 81       	ldd	r25, Y+3	; 0x03
    273e:	9c 01       	movw	r18, r24
    2740:	2c 5f       	subi	r18, 0xFC	; 252
    2742:	3f 4f       	sbci	r19, 0xFF	; 255
    2744:	8c 81       	ldd	r24, Y+4	; 0x04
    2746:	86 95       	lsr	r24
    2748:	86 95       	lsr	r24
    274a:	48 2f       	mov	r20, r24
    274c:	41 70       	andi	r20, 0x01	; 1
    274e:	c9 01       	movw	r24, r18
    2750:	64 2f       	mov	r22, r20
    2752:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
    2756:	89 83       	std	Y+1, r24	; 0x01
	ret = gpio_pin_write_logic(&(lcd->lcd_data[3]), (_data_command >> 3) & (uint8)0x01);
    2758:	8a 81       	ldd	r24, Y+2	; 0x02
    275a:	9b 81       	ldd	r25, Y+3	; 0x03
    275c:	9c 01       	movw	r18, r24
    275e:	2b 5f       	subi	r18, 0xFB	; 251
    2760:	3f 4f       	sbci	r19, 0xFF	; 255
    2762:	8c 81       	ldd	r24, Y+4	; 0x04
    2764:	86 95       	lsr	r24
    2766:	86 95       	lsr	r24
    2768:	86 95       	lsr	r24
    276a:	48 2f       	mov	r20, r24
    276c:	41 70       	andi	r20, 0x01	; 1
    276e:	c9 01       	movw	r24, r18
    2770:	64 2f       	mov	r22, r20
    2772:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
    2776:	89 83       	std	Y+1, r24	; 0x01
	return ret;
    2778:	89 81       	ldd	r24, Y+1	; 0x01
}
    277a:	0f 90       	pop	r0
    277c:	0f 90       	pop	r0
    277e:	0f 90       	pop	r0
    2780:	0f 90       	pop	r0
    2782:	cf 91       	pop	r28
    2784:	df 91       	pop	r29
    2786:	08 95       	ret

00002788 <lcd_4bit_send_enable>:

static STD_ReturnStatus lcd_4bit_send_enable(const chr_lcd_4bit_t *lcd)
{
    2788:	df 93       	push	r29
    278a:	cf 93       	push	r28
    278c:	cd b7       	in	r28, 0x3d	; 61
    278e:	de b7       	in	r29, 0x3e	; 62
    2790:	61 97       	sbiw	r28, 0x11	; 17
    2792:	0f b6       	in	r0, 0x3f	; 63
    2794:	f8 94       	cli
    2796:	de bf       	out	0x3e, r29	; 62
    2798:	0f be       	out	0x3f, r0	; 63
    279a:	cd bf       	out	0x3d, r28	; 61
    279c:	99 8b       	std	Y+17, r25	; 0x11
    279e:	88 8b       	std	Y+16, r24	; 0x10
	STD_ReturnStatus ret = E_OK;
    27a0:	81 e0       	ldi	r24, 0x01	; 1
    27a2:	8f 87       	std	Y+15, r24	; 0x0f
	ret = gpio_pin_write_logic(&(lcd->lcd_en),GPIO_HIGH);
    27a4:	88 89       	ldd	r24, Y+16	; 0x10
    27a6:	99 89       	ldd	r25, Y+17	; 0x11
    27a8:	01 96       	adiw	r24, 0x01	; 1
    27aa:	61 e0       	ldi	r22, 0x01	; 1
    27ac:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
    27b0:	8f 87       	std	Y+15, r24	; 0x0f
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	a0 ea       	ldi	r26, 0xA0	; 160
    27b8:	b0 e4       	ldi	r27, 0x40	; 64
    27ba:	8b 87       	std	Y+11, r24	; 0x0b
    27bc:	9c 87       	std	Y+12, r25	; 0x0c
    27be:	ad 87       	std	Y+13, r26	; 0x0d
    27c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    27c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    27c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	4a ef       	ldi	r20, 0xFA	; 250
    27d0:	54 e4       	ldi	r21, 0x44	; 68
    27d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	8f 83       	std	Y+7, r24	; 0x07
    27dc:	98 87       	std	Y+8, r25	; 0x08
    27de:	a9 87       	std	Y+9, r26	; 0x09
    27e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27e2:	6f 81       	ldd	r22, Y+7	; 0x07
    27e4:	78 85       	ldd	r23, Y+8	; 0x08
    27e6:	89 85       	ldd	r24, Y+9	; 0x09
    27e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	40 e8       	ldi	r20, 0x80	; 128
    27f0:	5f e3       	ldi	r21, 0x3F	; 63
    27f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27f6:	88 23       	and	r24, r24
    27f8:	2c f4       	brge	.+10     	; 0x2804 <lcd_4bit_send_enable+0x7c>
		__ticks = 1;
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	9e 83       	std	Y+6, r25	; 0x06
    2800:	8d 83       	std	Y+5, r24	; 0x05
    2802:	3f c0       	rjmp	.+126    	; 0x2882 <lcd_4bit_send_enable+0xfa>
	else if (__tmp > 65535)
    2804:	6f 81       	ldd	r22, Y+7	; 0x07
    2806:	78 85       	ldd	r23, Y+8	; 0x08
    2808:	89 85       	ldd	r24, Y+9	; 0x09
    280a:	9a 85       	ldd	r25, Y+10	; 0x0a
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	3f ef       	ldi	r19, 0xFF	; 255
    2810:	4f e7       	ldi	r20, 0x7F	; 127
    2812:	57 e4       	ldi	r21, 0x47	; 71
    2814:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2818:	18 16       	cp	r1, r24
    281a:	4c f5       	brge	.+82     	; 0x286e <lcd_4bit_send_enable+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    281c:	6b 85       	ldd	r22, Y+11	; 0x0b
    281e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2820:	8d 85       	ldd	r24, Y+13	; 0x0d
    2822:	9e 85       	ldd	r25, Y+14	; 0x0e
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	40 e2       	ldi	r20, 0x20	; 32
    282a:	51 e4       	ldi	r21, 0x41	; 65
    282c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	bc 01       	movw	r22, r24
    2836:	cd 01       	movw	r24, r26
    2838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    283c:	dc 01       	movw	r26, r24
    283e:	cb 01       	movw	r24, r22
    2840:	9e 83       	std	Y+6, r25	; 0x06
    2842:	8d 83       	std	Y+5, r24	; 0x05
    2844:	0f c0       	rjmp	.+30     	; 0x2864 <lcd_4bit_send_enable+0xdc>
    2846:	88 ec       	ldi	r24, 0xC8	; 200
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	9c 83       	std	Y+4, r25	; 0x04
    284c:	8b 83       	std	Y+3, r24	; 0x03
    284e:	8b 81       	ldd	r24, Y+3	; 0x03
    2850:	9c 81       	ldd	r25, Y+4	; 0x04
    2852:	01 97       	sbiw	r24, 0x01	; 1
    2854:	f1 f7       	brne	.-4      	; 0x2852 <lcd_4bit_send_enable+0xca>
    2856:	9c 83       	std	Y+4, r25	; 0x04
    2858:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    285a:	8d 81       	ldd	r24, Y+5	; 0x05
    285c:	9e 81       	ldd	r25, Y+6	; 0x06
    285e:	01 97       	sbiw	r24, 0x01	; 1
    2860:	9e 83       	std	Y+6, r25	; 0x06
    2862:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2864:	8d 81       	ldd	r24, Y+5	; 0x05
    2866:	9e 81       	ldd	r25, Y+6	; 0x06
    2868:	00 97       	sbiw	r24, 0x00	; 0
    286a:	69 f7       	brne	.-38     	; 0x2846 <lcd_4bit_send_enable+0xbe>
    286c:	14 c0       	rjmp	.+40     	; 0x2896 <lcd_4bit_send_enable+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    286e:	6f 81       	ldd	r22, Y+7	; 0x07
    2870:	78 85       	ldd	r23, Y+8	; 0x08
    2872:	89 85       	ldd	r24, Y+9	; 0x09
    2874:	9a 85       	ldd	r25, Y+10	; 0x0a
    2876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	9e 83       	std	Y+6, r25	; 0x06
    2880:	8d 83       	std	Y+5, r24	; 0x05
    2882:	8d 81       	ldd	r24, Y+5	; 0x05
    2884:	9e 81       	ldd	r25, Y+6	; 0x06
    2886:	9a 83       	std	Y+2, r25	; 0x02
    2888:	89 83       	std	Y+1, r24	; 0x01
    288a:	89 81       	ldd	r24, Y+1	; 0x01
    288c:	9a 81       	ldd	r25, Y+2	; 0x02
    288e:	01 97       	sbiw	r24, 0x01	; 1
    2890:	f1 f7       	brne	.-4      	; 0x288e <lcd_4bit_send_enable+0x106>
    2892:	9a 83       	std	Y+2, r25	; 0x02
    2894:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	ret = gpio_pin_write_logic(&(lcd->lcd_en),GPIO_LOW);
    2896:	88 89       	ldd	r24, Y+16	; 0x10
    2898:	99 89       	ldd	r25, Y+17	; 0x11
    289a:	01 96       	adiw	r24, 0x01	; 1
    289c:	60 e0       	ldi	r22, 0x00	; 0
    289e:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
    28a2:	8f 87       	std	Y+15, r24	; 0x0f
	return ret;
    28a4:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    28a6:	61 96       	adiw	r28, 0x11	; 17
    28a8:	0f b6       	in	r0, 0x3f	; 63
    28aa:	f8 94       	cli
    28ac:	de bf       	out	0x3e, r29	; 62
    28ae:	0f be       	out	0x3f, r0	; 63
    28b0:	cd bf       	out	0x3d, r28	; 61
    28b2:	cf 91       	pop	r28
    28b4:	df 91       	pop	r29
    28b6:	08 95       	ret

000028b8 <lcd_8bit_send_enable>:


static STD_ReturnStatus lcd_8bit_send_enable(const chr_lcd_8bit_t *lcd)
{
    28b8:	df 93       	push	r29
    28ba:	cf 93       	push	r28
    28bc:	cd b7       	in	r28, 0x3d	; 61
    28be:	de b7       	in	r29, 0x3e	; 62
    28c0:	61 97       	sbiw	r28, 0x11	; 17
    28c2:	0f b6       	in	r0, 0x3f	; 63
    28c4:	f8 94       	cli
    28c6:	de bf       	out	0x3e, r29	; 62
    28c8:	0f be       	out	0x3f, r0	; 63
    28ca:	cd bf       	out	0x3d, r28	; 61
    28cc:	99 8b       	std	Y+17, r25	; 0x11
    28ce:	88 8b       	std	Y+16, r24	; 0x10
	STD_ReturnStatus ret = E_OK;
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	8f 87       	std	Y+15, r24	; 0x0f
	ret = gpio_pin_write_logic(&(lcd->lcd_en),GPIO_HIGH);
    28d4:	88 89       	ldd	r24, Y+16	; 0x10
    28d6:	99 89       	ldd	r25, Y+17	; 0x11
    28d8:	01 96       	adiw	r24, 0x01	; 1
    28da:	61 e0       	ldi	r22, 0x01	; 1
    28dc:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
    28e0:	8f 87       	std	Y+15, r24	; 0x0f
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	a0 ea       	ldi	r26, 0xA0	; 160
    28e8:	b0 e4       	ldi	r27, 0x40	; 64
    28ea:	8b 87       	std	Y+11, r24	; 0x0b
    28ec:	9c 87       	std	Y+12, r25	; 0x0c
    28ee:	ad 87       	std	Y+13, r26	; 0x0d
    28f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    28f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    28f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	4a ef       	ldi	r20, 0xFA	; 250
    2900:	54 e4       	ldi	r21, 0x44	; 68
    2902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	8f 83       	std	Y+7, r24	; 0x07
    290c:	98 87       	std	Y+8, r25	; 0x08
    290e:	a9 87       	std	Y+9, r26	; 0x09
    2910:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2912:	6f 81       	ldd	r22, Y+7	; 0x07
    2914:	78 85       	ldd	r23, Y+8	; 0x08
    2916:	89 85       	ldd	r24, Y+9	; 0x09
    2918:	9a 85       	ldd	r25, Y+10	; 0x0a
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	40 e8       	ldi	r20, 0x80	; 128
    2920:	5f e3       	ldi	r21, 0x3F	; 63
    2922:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2926:	88 23       	and	r24, r24
    2928:	2c f4       	brge	.+10     	; 0x2934 <lcd_8bit_send_enable+0x7c>
		__ticks = 1;
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	9e 83       	std	Y+6, r25	; 0x06
    2930:	8d 83       	std	Y+5, r24	; 0x05
    2932:	3f c0       	rjmp	.+126    	; 0x29b2 <lcd_8bit_send_enable+0xfa>
	else if (__tmp > 65535)
    2934:	6f 81       	ldd	r22, Y+7	; 0x07
    2936:	78 85       	ldd	r23, Y+8	; 0x08
    2938:	89 85       	ldd	r24, Y+9	; 0x09
    293a:	9a 85       	ldd	r25, Y+10	; 0x0a
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	3f ef       	ldi	r19, 0xFF	; 255
    2940:	4f e7       	ldi	r20, 0x7F	; 127
    2942:	57 e4       	ldi	r21, 0x47	; 71
    2944:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2948:	18 16       	cp	r1, r24
    294a:	4c f5       	brge	.+82     	; 0x299e <lcd_8bit_send_enable+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    294c:	6b 85       	ldd	r22, Y+11	; 0x0b
    294e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2950:	8d 85       	ldd	r24, Y+13	; 0x0d
    2952:	9e 85       	ldd	r25, Y+14	; 0x0e
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	40 e2       	ldi	r20, 0x20	; 32
    295a:	51 e4       	ldi	r21, 0x41	; 65
    295c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	bc 01       	movw	r22, r24
    2966:	cd 01       	movw	r24, r26
    2968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    296c:	dc 01       	movw	r26, r24
    296e:	cb 01       	movw	r24, r22
    2970:	9e 83       	std	Y+6, r25	; 0x06
    2972:	8d 83       	std	Y+5, r24	; 0x05
    2974:	0f c0       	rjmp	.+30     	; 0x2994 <lcd_8bit_send_enable+0xdc>
    2976:	88 ec       	ldi	r24, 0xC8	; 200
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	9c 83       	std	Y+4, r25	; 0x04
    297c:	8b 83       	std	Y+3, r24	; 0x03
    297e:	8b 81       	ldd	r24, Y+3	; 0x03
    2980:	9c 81       	ldd	r25, Y+4	; 0x04
    2982:	01 97       	sbiw	r24, 0x01	; 1
    2984:	f1 f7       	brne	.-4      	; 0x2982 <lcd_8bit_send_enable+0xca>
    2986:	9c 83       	std	Y+4, r25	; 0x04
    2988:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    298a:	8d 81       	ldd	r24, Y+5	; 0x05
    298c:	9e 81       	ldd	r25, Y+6	; 0x06
    298e:	01 97       	sbiw	r24, 0x01	; 1
    2990:	9e 83       	std	Y+6, r25	; 0x06
    2992:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2994:	8d 81       	ldd	r24, Y+5	; 0x05
    2996:	9e 81       	ldd	r25, Y+6	; 0x06
    2998:	00 97       	sbiw	r24, 0x00	; 0
    299a:	69 f7       	brne	.-38     	; 0x2976 <lcd_8bit_send_enable+0xbe>
    299c:	14 c0       	rjmp	.+40     	; 0x29c6 <lcd_8bit_send_enable+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    299e:	6f 81       	ldd	r22, Y+7	; 0x07
    29a0:	78 85       	ldd	r23, Y+8	; 0x08
    29a2:	89 85       	ldd	r24, Y+9	; 0x09
    29a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	9e 83       	std	Y+6, r25	; 0x06
    29b0:	8d 83       	std	Y+5, r24	; 0x05
    29b2:	8d 81       	ldd	r24, Y+5	; 0x05
    29b4:	9e 81       	ldd	r25, Y+6	; 0x06
    29b6:	9a 83       	std	Y+2, r25	; 0x02
    29b8:	89 83       	std	Y+1, r24	; 0x01
    29ba:	89 81       	ldd	r24, Y+1	; 0x01
    29bc:	9a 81       	ldd	r25, Y+2	; 0x02
    29be:	01 97       	sbiw	r24, 0x01	; 1
    29c0:	f1 f7       	brne	.-4      	; 0x29be <lcd_8bit_send_enable+0x106>
    29c2:	9a 83       	std	Y+2, r25	; 0x02
    29c4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	ret = gpio_pin_write_logic(&(lcd->lcd_en),GPIO_LOW);
    29c6:	88 89       	ldd	r24, Y+16	; 0x10
    29c8:	99 89       	ldd	r25, Y+17	; 0x11
    29ca:	01 96       	adiw	r24, 0x01	; 1
    29cc:	60 e0       	ldi	r22, 0x00	; 0
    29ce:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
    29d2:	8f 87       	std	Y+15, r24	; 0x0f
	return ret;
    29d4:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    29d6:	61 96       	adiw	r28, 0x11	; 17
    29d8:	0f b6       	in	r0, 0x3f	; 63
    29da:	f8 94       	cli
    29dc:	de bf       	out	0x3e, r29	; 62
    29de:	0f be       	out	0x3f, r0	; 63
    29e0:	cd bf       	out	0x3d, r28	; 61
    29e2:	cf 91       	pop	r28
    29e4:	df 91       	pop	r29
    29e6:	08 95       	ret

000029e8 <lcd_8bit_set_cursor>:

static STD_ReturnStatus lcd_8bit_set_cursor(const chr_lcd_8bit_t *lcd,uint8 row,uint8 column)
{
    29e8:	df 93       	push	r29
    29ea:	cf 93       	push	r28
    29ec:	cd b7       	in	r28, 0x3d	; 61
    29ee:	de b7       	in	r29, 0x3e	; 62
    29f0:	27 97       	sbiw	r28, 0x07	; 7
    29f2:	0f b6       	in	r0, 0x3f	; 63
    29f4:	f8 94       	cli
    29f6:	de bf       	out	0x3e, r29	; 62
    29f8:	0f be       	out	0x3f, r0	; 63
    29fa:	cd bf       	out	0x3d, r28	; 61
    29fc:	9b 83       	std	Y+3, r25	; 0x03
    29fe:	8a 83       	std	Y+2, r24	; 0x02
    2a00:	6c 83       	std	Y+4, r22	; 0x04
    2a02:	4d 83       	std	Y+5, r20	; 0x05
	STD_ReturnStatus ret = E_OK;
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	89 83       	std	Y+1, r24	; 0x01
	column--;
    2a08:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0a:	81 50       	subi	r24, 0x01	; 1
    2a0c:	8d 83       	std	Y+5, r24	; 0x05
	switch(row)
    2a0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a10:	28 2f       	mov	r18, r24
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	3f 83       	std	Y+7, r19	; 0x07
    2a16:	2e 83       	std	Y+6, r18	; 0x06
    2a18:	8e 81       	ldd	r24, Y+6	; 0x06
    2a1a:	9f 81       	ldd	r25, Y+7	; 0x07
    2a1c:	81 30       	cpi	r24, 0x01	; 1
    2a1e:	91 05       	cpc	r25, r1
    2a20:	31 f0       	breq	.+12     	; 0x2a2e <lcd_8bit_set_cursor+0x46>
    2a22:	2e 81       	ldd	r18, Y+6	; 0x06
    2a24:	3f 81       	ldd	r19, Y+7	; 0x07
    2a26:	22 30       	cpi	r18, 0x02	; 2
    2a28:	31 05       	cpc	r19, r1
    2a2a:	59 f0       	breq	.+22     	; 0x2a42 <lcd_8bit_set_cursor+0x5a>
    2a2c:	13 c0       	rjmp	.+38     	; 0x2a54 <lcd_8bit_set_cursor+0x6c>
	{
	case ROW1 : ret = lcd_8bit_send_command(lcd,0x80+column);break;
    2a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a30:	28 2f       	mov	r18, r24
    2a32:	20 58       	subi	r18, 0x80	; 128
    2a34:	8a 81       	ldd	r24, Y+2	; 0x02
    2a36:	9b 81       	ldd	r25, Y+3	; 0x03
    2a38:	62 2f       	mov	r22, r18
    2a3a:	0e 94 d7 10 	call	0x21ae	; 0x21ae <lcd_8bit_send_command>
    2a3e:	89 83       	std	Y+1, r24	; 0x01
    2a40:	09 c0       	rjmp	.+18     	; 0x2a54 <lcd_8bit_set_cursor+0x6c>
	case ROW2 : ret = lcd_8bit_send_command(lcd,0xC0+column);break;
    2a42:	8d 81       	ldd	r24, Y+5	; 0x05
    2a44:	28 2f       	mov	r18, r24
    2a46:	20 54       	subi	r18, 0x40	; 64
    2a48:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a4c:	62 2f       	mov	r22, r18
    2a4e:	0e 94 d7 10 	call	0x21ae	; 0x21ae <lcd_8bit_send_command>
    2a52:	89 83       	std	Y+1, r24	; 0x01
	default : ;
	}
	return ret;
    2a54:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a56:	27 96       	adiw	r28, 0x07	; 7
    2a58:	0f b6       	in	r0, 0x3f	; 63
    2a5a:	f8 94       	cli
    2a5c:	de bf       	out	0x3e, r29	; 62
    2a5e:	0f be       	out	0x3f, r0	; 63
    2a60:	cd bf       	out	0x3d, r28	; 61
    2a62:	cf 91       	pop	r28
    2a64:	df 91       	pop	r29
    2a66:	08 95       	ret

00002a68 <lcd_4bit_set_cursor>:
static STD_ReturnStatus lcd_4bit_set_cursor(const chr_lcd_4bit_t *lcd,uint8 row,uint8 column)
{
    2a68:	df 93       	push	r29
    2a6a:	cf 93       	push	r28
    2a6c:	cd b7       	in	r28, 0x3d	; 61
    2a6e:	de b7       	in	r29, 0x3e	; 62
    2a70:	27 97       	sbiw	r28, 0x07	; 7
    2a72:	0f b6       	in	r0, 0x3f	; 63
    2a74:	f8 94       	cli
    2a76:	de bf       	out	0x3e, r29	; 62
    2a78:	0f be       	out	0x3f, r0	; 63
    2a7a:	cd bf       	out	0x3d, r28	; 61
    2a7c:	9b 83       	std	Y+3, r25	; 0x03
    2a7e:	8a 83       	std	Y+2, r24	; 0x02
    2a80:	6c 83       	std	Y+4, r22	; 0x04
    2a82:	4d 83       	std	Y+5, r20	; 0x05
	STD_ReturnStatus ret = E_OK;
    2a84:	81 e0       	ldi	r24, 0x01	; 1
    2a86:	89 83       	std	Y+1, r24	; 0x01
	column--;
    2a88:	8d 81       	ldd	r24, Y+5	; 0x05
    2a8a:	81 50       	subi	r24, 0x01	; 1
    2a8c:	8d 83       	std	Y+5, r24	; 0x05
	switch(row)
    2a8e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a90:	28 2f       	mov	r18, r24
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	3f 83       	std	Y+7, r19	; 0x07
    2a96:	2e 83       	std	Y+6, r18	; 0x06
    2a98:	8e 81       	ldd	r24, Y+6	; 0x06
    2a9a:	9f 81       	ldd	r25, Y+7	; 0x07
    2a9c:	81 30       	cpi	r24, 0x01	; 1
    2a9e:	91 05       	cpc	r25, r1
    2aa0:	31 f0       	breq	.+12     	; 0x2aae <lcd_4bit_set_cursor+0x46>
    2aa2:	2e 81       	ldd	r18, Y+6	; 0x06
    2aa4:	3f 81       	ldd	r19, Y+7	; 0x07
    2aa6:	22 30       	cpi	r18, 0x02	; 2
    2aa8:	31 05       	cpc	r19, r1
    2aaa:	59 f0       	breq	.+22     	; 0x2ac2 <lcd_4bit_set_cursor+0x5a>
    2aac:	13 c0       	rjmp	.+38     	; 0x2ad4 <lcd_4bit_set_cursor+0x6c>
	{
	case ROW1 : ret = lcd_4bit_send_command(lcd,0x80+column);break;
    2aae:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab0:	28 2f       	mov	r18, r24
    2ab2:	20 58       	subi	r18, 0x80	; 128
    2ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ab8:	62 2f       	mov	r22, r18
    2aba:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <lcd_4bit_send_command>
    2abe:	89 83       	std	Y+1, r24	; 0x01
    2ac0:	09 c0       	rjmp	.+18     	; 0x2ad4 <lcd_4bit_set_cursor+0x6c>
	case ROW2 : ret = lcd_4bit_send_command(lcd,0xC0+column);break;
    2ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac4:	28 2f       	mov	r18, r24
    2ac6:	20 54       	subi	r18, 0x40	; 64
    2ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aca:	9b 81       	ldd	r25, Y+3	; 0x03
    2acc:	62 2f       	mov	r22, r18
    2ace:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <lcd_4bit_send_command>
    2ad2:	89 83       	std	Y+1, r24	; 0x01
	default : ;
	}
	return ret;
    2ad4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ad6:	27 96       	adiw	r28, 0x07	; 7
    2ad8:	0f b6       	in	r0, 0x3f	; 63
    2ada:	f8 94       	cli
    2adc:	de bf       	out	0x3e, r29	; 62
    2ade:	0f be       	out	0x3f, r0	; 63
    2ae0:	cd bf       	out	0x3d, r28	; 61
    2ae2:	cf 91       	pop	r28
    2ae4:	df 91       	pop	r29
    2ae6:	08 95       	ret

00002ae8 <keypad_initialize>:
 *
 * @param _keypad_obj
 * @return
 */
STD_ReturnStatus keypad_initialize(const keypad_t *_keypad_obj)
{
    2ae8:	df 93       	push	r29
    2aea:	cf 93       	push	r28
    2aec:	00 d0       	rcall	.+0      	; 0x2aee <keypad_initialize+0x6>
    2aee:	00 d0       	rcall	.+0      	; 0x2af0 <keypad_initialize+0x8>
    2af0:	0f 92       	push	r0
    2af2:	cd b7       	in	r28, 0x3d	; 61
    2af4:	de b7       	in	r29, 0x3e	; 62
    2af6:	9d 83       	std	Y+5, r25	; 0x05
    2af8:	8c 83       	std	Y+4, r24	; 0x04
	STD_ReturnStatus ret = E_OK;
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	8b 83       	std	Y+3, r24	; 0x03
	uint8 rows_counter=ZERO_INIT,columns_counter=ZERO_INIT;
    2afe:	1a 82       	std	Y+2, r1	; 0x02
    2b00:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==_keypad_obj)
    2b02:	8c 81       	ldd	r24, Y+4	; 0x04
    2b04:	9d 81       	ldd	r25, Y+5	; 0x05
    2b06:	00 97       	sbiw	r24, 0x00	; 0
    2b08:	11 f4       	brne	.+4      	; 0x2b0e <keypad_initialize+0x26>
	{
		ret = E_NOT_OK;
    2b0a:	1b 82       	std	Y+3, r1	; 0x03
    2b0c:	27 c0       	rjmp	.+78     	; 0x2b5c <keypad_initialize+0x74>
	}
	else
	{
		for(rows_counter=ZERO_INIT;rows_counter<ECU_KEYPAD_ROWS;rows_counter++)
    2b0e:	1a 82       	std	Y+2, r1	; 0x02
    2b10:	0d c0       	rjmp	.+26     	; 0x2b2c <keypad_initialize+0x44>
		{
			ret = gpio_pin_initialize(&(_keypad_obj->keypad_row_pins[rows_counter]));
    2b12:	2c 81       	ldd	r18, Y+4	; 0x04
    2b14:	3d 81       	ldd	r19, Y+5	; 0x05
    2b16:	8a 81       	ldd	r24, Y+2	; 0x02
    2b18:	88 2f       	mov	r24, r24
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	82 0f       	add	r24, r18
    2b1e:	93 1f       	adc	r25, r19
    2b20:	0e 94 c5 07 	call	0xf8a	; 0xf8a <gpio_pin_initialize>
    2b24:	8b 83       	std	Y+3, r24	; 0x03
	{
		ret = E_NOT_OK;
	}
	else
	{
		for(rows_counter=ZERO_INIT;rows_counter<ECU_KEYPAD_ROWS;rows_counter++)
    2b26:	8a 81       	ldd	r24, Y+2	; 0x02
    2b28:	8f 5f       	subi	r24, 0xFF	; 255
    2b2a:	8a 83       	std	Y+2, r24	; 0x02
    2b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2e:	84 30       	cpi	r24, 0x04	; 4
    2b30:	80 f3       	brcs	.-32     	; 0x2b12 <keypad_initialize+0x2a>
		{
			ret = gpio_pin_initialize(&(_keypad_obj->keypad_row_pins[rows_counter]));
		}

		for(columns_counter=ZERO_INIT;columns_counter<ECU_KEYPAD_COLUMNS;columns_counter++)
    2b32:	19 82       	std	Y+1, r1	; 0x01
    2b34:	10 c0       	rjmp	.+32     	; 0x2b56 <keypad_initialize+0x6e>
		{
			ret = gpio_pin_direction_initialize(&(_keypad_obj->keypad_columns_pins[columns_counter]));
    2b36:	8c 81       	ldd	r24, Y+4	; 0x04
    2b38:	9d 81       	ldd	r25, Y+5	; 0x05
    2b3a:	9c 01       	movw	r18, r24
    2b3c:	2c 5f       	subi	r18, 0xFC	; 252
    2b3e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b40:	89 81       	ldd	r24, Y+1	; 0x01
    2b42:	88 2f       	mov	r24, r24
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	82 0f       	add	r24, r18
    2b48:	93 1f       	adc	r25, r19
    2b4a:	0e 94 a3 05 	call	0xb46	; 0xb46 <gpio_pin_direction_initialize>
    2b4e:	8b 83       	std	Y+3, r24	; 0x03
		for(rows_counter=ZERO_INIT;rows_counter<ECU_KEYPAD_ROWS;rows_counter++)
		{
			ret = gpio_pin_initialize(&(_keypad_obj->keypad_row_pins[rows_counter]));
		}

		for(columns_counter=ZERO_INIT;columns_counter<ECU_KEYPAD_COLUMNS;columns_counter++)
    2b50:	89 81       	ldd	r24, Y+1	; 0x01
    2b52:	8f 5f       	subi	r24, 0xFF	; 255
    2b54:	89 83       	std	Y+1, r24	; 0x01
    2b56:	89 81       	ldd	r24, Y+1	; 0x01
    2b58:	84 30       	cpi	r24, 0x04	; 4
    2b5a:	68 f3       	brcs	.-38     	; 0x2b36 <keypad_initialize+0x4e>
		{
			ret = gpio_pin_direction_initialize(&(_keypad_obj->keypad_columns_pins[columns_counter]));
		}
	}
	return ret;
    2b5c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2b5e:	0f 90       	pop	r0
    2b60:	0f 90       	pop	r0
    2b62:	0f 90       	pop	r0
    2b64:	0f 90       	pop	r0
    2b66:	0f 90       	pop	r0
    2b68:	cf 91       	pop	r28
    2b6a:	df 91       	pop	r29
    2b6c:	08 95       	ret

00002b6e <keypad_get_value>:
 * @param _keypad_obj
 * @param value
 * @return
 */
STD_ReturnStatus keypad_get_value(const keypad_t *_keypad_obj,uint8 *value,uint8 *Key_pressed)
{
    2b6e:	df 93       	push	r29
    2b70:	cf 93       	push	r28
    2b72:	cd b7       	in	r28, 0x3d	; 61
    2b74:	de b7       	in	r29, 0x3e	; 62
    2b76:	69 97       	sbiw	r28, 0x19	; 25
    2b78:	0f b6       	in	r0, 0x3f	; 63
    2b7a:	f8 94       	cli
    2b7c:	de bf       	out	0x3e, r29	; 62
    2b7e:	0f be       	out	0x3f, r0	; 63
    2b80:	cd bf       	out	0x3d, r28	; 61
    2b82:	9d 8b       	std	Y+21, r25	; 0x15
    2b84:	8c 8b       	std	Y+20, r24	; 0x14
    2b86:	7f 8b       	std	Y+23, r23	; 0x17
    2b88:	6e 8b       	std	Y+22, r22	; 0x16
    2b8a:	59 8f       	std	Y+25, r21	; 0x19
    2b8c:	48 8f       	std	Y+24, r20	; 0x18
	STD_ReturnStatus ret = E_NOT_OK;
    2b8e:	1a 8a       	std	Y+18, r1	; 0x12
	*Key_pressed=KEY_NOT_PRESSED;
    2b90:	e8 8d       	ldd	r30, Y+24	; 0x18
    2b92:	f9 8d       	ldd	r31, Y+25	; 0x19
    2b94:	10 82       	st	Z, r1
	uint8 l_rows_counter=ZERO_INIT,l_columns_counter=ZERO_INIT,l_counter=ZERO_INIT;
    2b96:	19 8a       	std	Y+17, r1	; 0x11
    2b98:	18 8a       	std	Y+16, r1	; 0x10
    2b9a:	1f 86       	std	Y+15, r1	; 0x0f
	uint8 column_logic=ZERO_INIT;
    2b9c:	1b 8a       	std	Y+19, r1	; 0x13
	if((NULL==_keypad_obj)||(NULL==value))
    2b9e:	8c 89       	ldd	r24, Y+20	; 0x14
    2ba0:	9d 89       	ldd	r25, Y+21	; 0x15
    2ba2:	00 97       	sbiw	r24, 0x00	; 0
    2ba4:	21 f0       	breq	.+8      	; 0x2bae <keypad_get_value+0x40>
    2ba6:	8e 89       	ldd	r24, Y+22	; 0x16
    2ba8:	9f 89       	ldd	r25, Y+23	; 0x17
    2baa:	00 97       	sbiw	r24, 0x00	; 0
    2bac:	11 f4       	brne	.+4      	; 0x2bb2 <keypad_get_value+0x44>
	{
		ret = E_NOT_OK;
    2bae:	1a 8a       	std	Y+18, r1	; 0x12
    2bb0:	cf c0       	rjmp	.+414    	; 0x2d50 <keypad_get_value+0x1e2>
	}
	else
	{
		for(l_rows_counter=ZERO_INIT;l_rows_counter<ECU_KEYPAD_ROWS;l_rows_counter++)
    2bb2:	19 8a       	std	Y+17, r1	; 0x11
    2bb4:	c7 c0       	rjmp	.+398    	; 0x2d44 <keypad_get_value+0x1d6>
		{
			//3ayzen nekhaly kol el rows 3aleha zero volt ela awel wahd bas 3shan ne-check 3aleh
			//fa el awel hankhaly kol el kolo zero ba3daha nekhaly 5volt 3ala R1 w hakaza
			for(l_counter=ZERO_INIT;l_counter<ECU_KEYPAD_ROWS;l_counter++){
    2bb6:	1f 86       	std	Y+15, r1	; 0x0f
    2bb8:	0e c0       	rjmp	.+28     	; 0x2bd6 <keypad_get_value+0x68>
						ret = gpio_pin_write_logic(&(_keypad_obj->keypad_row_pins[l_counter]),GPIO_LOW);
    2bba:	2c 89       	ldd	r18, Y+20	; 0x14
    2bbc:	3d 89       	ldd	r19, Y+21	; 0x15
    2bbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bc0:	88 2f       	mov	r24, r24
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	82 0f       	add	r24, r18
    2bc6:	93 1f       	adc	r25, r19
    2bc8:	60 e0       	ldi	r22, 0x00	; 0
    2bca:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
    2bce:	8a 8b       	std	Y+18, r24	; 0x12
	{
		for(l_rows_counter=ZERO_INIT;l_rows_counter<ECU_KEYPAD_ROWS;l_rows_counter++)
		{
			//3ayzen nekhaly kol el rows 3aleha zero volt ela awel wahd bas 3shan ne-check 3aleh
			//fa el awel hankhaly kol el kolo zero ba3daha nekhaly 5volt 3ala R1 w hakaza
			for(l_counter=ZERO_INIT;l_counter<ECU_KEYPAD_ROWS;l_counter++){
    2bd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bd2:	8f 5f       	subi	r24, 0xFF	; 255
    2bd4:	8f 87       	std	Y+15, r24	; 0x0f
    2bd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bd8:	84 30       	cpi	r24, 0x04	; 4
    2bda:	78 f3       	brcs	.-34     	; 0x2bba <keypad_get_value+0x4c>
						ret = gpio_pin_write_logic(&(_keypad_obj->keypad_row_pins[l_counter]),GPIO_LOW);
					}
			//ba3d ma khalet kolo zero, hakhaly wahd wahd be 5 volt bel tarteeb 3shan keda akhat l_rows_counter fel loop el bara
			ret = gpio_pin_write_logic(&(_keypad_obj->keypad_row_pins[l_rows_counter]),GPIO_HIGH);
    2bdc:	2c 89       	ldd	r18, Y+20	; 0x14
    2bde:	3d 89       	ldd	r19, Y+21	; 0x15
    2be0:	89 89       	ldd	r24, Y+17	; 0x11
    2be2:	88 2f       	mov	r24, r24
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	82 0f       	add	r24, r18
    2be8:	93 1f       	adc	r25, r19
    2bea:	61 e0       	ldi	r22, 0x01	; 1
    2bec:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
    2bf0:	8a 8b       	std	Y+18, r24	; 0x12
    2bf2:	80 e0       	ldi	r24, 0x00	; 0
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	a0 e8       	ldi	r26, 0x80	; 128
    2bf8:	bf e3       	ldi	r27, 0x3F	; 63
    2bfa:	8b 87       	std	Y+11, r24	; 0x0b
    2bfc:	9c 87       	std	Y+12, r25	; 0x0c
    2bfe:	ad 87       	std	Y+13, r26	; 0x0d
    2c00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c02:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c04:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c08:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c0a:	20 e0       	ldi	r18, 0x00	; 0
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	4a ef       	ldi	r20, 0xFA	; 250
    2c10:	54 e4       	ldi	r21, 0x44	; 68
    2c12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c16:	dc 01       	movw	r26, r24
    2c18:	cb 01       	movw	r24, r22
    2c1a:	8f 83       	std	Y+7, r24	; 0x07
    2c1c:	98 87       	std	Y+8, r25	; 0x08
    2c1e:	a9 87       	std	Y+9, r26	; 0x09
    2c20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c22:	6f 81       	ldd	r22, Y+7	; 0x07
    2c24:	78 85       	ldd	r23, Y+8	; 0x08
    2c26:	89 85       	ldd	r24, Y+9	; 0x09
    2c28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c2a:	20 e0       	ldi	r18, 0x00	; 0
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	40 e8       	ldi	r20, 0x80	; 128
    2c30:	5f e3       	ldi	r21, 0x3F	; 63
    2c32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c36:	88 23       	and	r24, r24
    2c38:	2c f4       	brge	.+10     	; 0x2c44 <keypad_get_value+0xd6>
		__ticks = 1;
    2c3a:	81 e0       	ldi	r24, 0x01	; 1
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	9e 83       	std	Y+6, r25	; 0x06
    2c40:	8d 83       	std	Y+5, r24	; 0x05
    2c42:	3f c0       	rjmp	.+126    	; 0x2cc2 <keypad_get_value+0x154>
	else if (__tmp > 65535)
    2c44:	6f 81       	ldd	r22, Y+7	; 0x07
    2c46:	78 85       	ldd	r23, Y+8	; 0x08
    2c48:	89 85       	ldd	r24, Y+9	; 0x09
    2c4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	3f ef       	ldi	r19, 0xFF	; 255
    2c50:	4f e7       	ldi	r20, 0x7F	; 127
    2c52:	57 e4       	ldi	r21, 0x47	; 71
    2c54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c58:	18 16       	cp	r1, r24
    2c5a:	4c f5       	brge	.+82     	; 0x2cae <keypad_get_value+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c60:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c62:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	40 e2       	ldi	r20, 0x20	; 32
    2c6a:	51 e4       	ldi	r21, 0x41	; 65
    2c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	bc 01       	movw	r22, r24
    2c76:	cd 01       	movw	r24, r26
    2c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7c:	dc 01       	movw	r26, r24
    2c7e:	cb 01       	movw	r24, r22
    2c80:	9e 83       	std	Y+6, r25	; 0x06
    2c82:	8d 83       	std	Y+5, r24	; 0x05
    2c84:	0f c0       	rjmp	.+30     	; 0x2ca4 <keypad_get_value+0x136>
    2c86:	88 ec       	ldi	r24, 0xC8	; 200
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	9c 83       	std	Y+4, r25	; 0x04
    2c8c:	8b 83       	std	Y+3, r24	; 0x03
    2c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c90:	9c 81       	ldd	r25, Y+4	; 0x04
    2c92:	01 97       	sbiw	r24, 0x01	; 1
    2c94:	f1 f7       	brne	.-4      	; 0x2c92 <keypad_get_value+0x124>
    2c96:	9c 83       	std	Y+4, r25	; 0x04
    2c98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c9e:	01 97       	sbiw	r24, 0x01	; 1
    2ca0:	9e 83       	std	Y+6, r25	; 0x06
    2ca2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca8:	00 97       	sbiw	r24, 0x00	; 0
    2caa:	69 f7       	brne	.-38     	; 0x2c86 <keypad_get_value+0x118>
    2cac:	14 c0       	rjmp	.+40     	; 0x2cd6 <keypad_get_value+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cae:	6f 81       	ldd	r22, Y+7	; 0x07
    2cb0:	78 85       	ldd	r23, Y+8	; 0x08
    2cb2:	89 85       	ldd	r24, Y+9	; 0x09
    2cb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cba:	dc 01       	movw	r26, r24
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	9e 83       	std	Y+6, r25	; 0x06
    2cc0:	8d 83       	std	Y+5, r24	; 0x05
    2cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc6:	9a 83       	std	Y+2, r25	; 0x02
    2cc8:	89 83       	std	Y+1, r24	; 0x01
    2cca:	89 81       	ldd	r24, Y+1	; 0x01
    2ccc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cce:	01 97       	sbiw	r24, 0x01	; 1
    2cd0:	f1 f7       	brne	.-4      	; 0x2cce <keypad_get_value+0x160>
    2cd2:	9a 83       	std	Y+2, r25	; 0x02
    2cd4:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1);
			//columns Check
			for(l_columns_counter=ZERO_INIT;l_columns_counter<ECU_KEYPAD_COLUMNS;l_columns_counter++)
    2cd6:	18 8a       	std	Y+16, r1	; 0x10
    2cd8:	2f c0       	rjmp	.+94     	; 0x2d38 <keypad_get_value+0x1ca>
			{
				ret = gpio_pin_read_logic(&(_keypad_obj->keypad_columns_pins[l_columns_counter]),&column_logic);
    2cda:	8c 89       	ldd	r24, Y+20	; 0x14
    2cdc:	9d 89       	ldd	r25, Y+21	; 0x15
    2cde:	9c 01       	movw	r18, r24
    2ce0:	2c 5f       	subi	r18, 0xFC	; 252
    2ce2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ce4:	88 89       	ldd	r24, Y+16	; 0x10
    2ce6:	88 2f       	mov	r24, r24
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	82 0f       	add	r24, r18
    2cec:	93 1f       	adc	r25, r19
    2cee:	9e 01       	movw	r18, r28
    2cf0:	2d 5e       	subi	r18, 0xED	; 237
    2cf2:	3f 4f       	sbci	r19, 0xFF	; 255
    2cf4:	b9 01       	movw	r22, r18
    2cf6:	0e 94 25 07 	call	0xe4a	; 0xe4a <gpio_pin_read_logic>
    2cfa:	8a 8b       	std	Y+18, r24	; 0x12
				if(GPIO_HIGH==column_logic)
    2cfc:	8b 89       	ldd	r24, Y+19	; 0x13
    2cfe:	81 30       	cpi	r24, 0x01	; 1
    2d00:	c1 f4       	brne	.+48     	; 0x2d32 <keypad_get_value+0x1c4>
				{
					*value=btn_values_int[l_rows_counter][l_columns_counter];
    2d02:	89 89       	ldd	r24, Y+17	; 0x11
    2d04:	48 2f       	mov	r20, r24
    2d06:	50 e0       	ldi	r21, 0x00	; 0
    2d08:	88 89       	ldd	r24, Y+16	; 0x10
    2d0a:	28 2f       	mov	r18, r24
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	ca 01       	movw	r24, r20
    2d10:	88 0f       	add	r24, r24
    2d12:	99 1f       	adc	r25, r25
    2d14:	88 0f       	add	r24, r24
    2d16:	99 1f       	adc	r25, r25
    2d18:	82 0f       	add	r24, r18
    2d1a:	93 1f       	adc	r25, r19
    2d1c:	fc 01       	movw	r30, r24
    2d1e:	ed 51       	subi	r30, 0x1D	; 29
    2d20:	ff 4f       	sbci	r31, 0xFF	; 255
    2d22:	80 81       	ld	r24, Z
    2d24:	ee 89       	ldd	r30, Y+22	; 0x16
    2d26:	ff 89       	ldd	r31, Y+23	; 0x17
    2d28:	80 83       	st	Z, r24
					*Key_pressed=KEY_PRESSED;
    2d2a:	e8 8d       	ldd	r30, Y+24	; 0x18
    2d2c:	f9 8d       	ldd	r31, Y+25	; 0x19
    2d2e:	81 e0       	ldi	r24, 0x01	; 1
    2d30:	80 83       	st	Z, r24
					}
			//ba3d ma khalet kolo zero, hakhaly wahd wahd be 5 volt bel tarteeb 3shan keda akhat l_rows_counter fel loop el bara
			ret = gpio_pin_write_logic(&(_keypad_obj->keypad_row_pins[l_rows_counter]),GPIO_HIGH);
			_delay_ms(1);
			//columns Check
			for(l_columns_counter=ZERO_INIT;l_columns_counter<ECU_KEYPAD_COLUMNS;l_columns_counter++)
    2d32:	88 89       	ldd	r24, Y+16	; 0x10
    2d34:	8f 5f       	subi	r24, 0xFF	; 255
    2d36:	88 8b       	std	Y+16, r24	; 0x10
    2d38:	88 89       	ldd	r24, Y+16	; 0x10
    2d3a:	84 30       	cpi	r24, 0x04	; 4
    2d3c:	70 f2       	brcs	.-100    	; 0x2cda <keypad_get_value+0x16c>
	{
		ret = E_NOT_OK;
	}
	else
	{
		for(l_rows_counter=ZERO_INIT;l_rows_counter<ECU_KEYPAD_ROWS;l_rows_counter++)
    2d3e:	89 89       	ldd	r24, Y+17	; 0x11
    2d40:	8f 5f       	subi	r24, 0xFF	; 255
    2d42:	89 8b       	std	Y+17, r24	; 0x11
    2d44:	89 89       	ldd	r24, Y+17	; 0x11
    2d46:	84 30       	cpi	r24, 0x04	; 4
    2d48:	08 f4       	brcc	.+2      	; 0x2d4c <keypad_get_value+0x1de>
    2d4a:	35 cf       	rjmp	.-406    	; 0x2bb6 <keypad_get_value+0x48>
					*value=btn_values_int[l_rows_counter][l_columns_counter];
					*Key_pressed=KEY_PRESSED;
				}
			}
		}
		ret = E_OK;
    2d4c:	81 e0       	ldi	r24, 0x01	; 1
    2d4e:	8a 8b       	std	Y+18, r24	; 0x12
	}
	return ret;
    2d50:	8a 89       	ldd	r24, Y+18	; 0x12
}
    2d52:	69 96       	adiw	r28, 0x19	; 25
    2d54:	0f b6       	in	r0, 0x3f	; 63
    2d56:	f8 94       	cli
    2d58:	de bf       	out	0x3e, r29	; 62
    2d5a:	0f be       	out	0x3f, r0	; 63
    2d5c:	cd bf       	out	0x3d, r28	; 61
    2d5e:	cf 91       	pop	r28
    2d60:	df 91       	pop	r29
    2d62:	08 95       	ret

00002d64 <seven_segment_initialize>:

#include "ECU_SEVEN_SEG.h"


STD_ReturnStatus seven_segment_initialize(const segment_t *seg)
{
    2d64:	df 93       	push	r29
    2d66:	cf 93       	push	r28
    2d68:	00 d0       	rcall	.+0      	; 0x2d6a <seven_segment_initialize+0x6>
    2d6a:	0f 92       	push	r0
    2d6c:	cd b7       	in	r28, 0x3d	; 61
    2d6e:	de b7       	in	r29, 0x3e	; 62
    2d70:	9b 83       	std	Y+3, r25	; 0x03
    2d72:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_OK;
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==seg)
    2d78:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d7c:	00 97       	sbiw	r24, 0x00	; 0
    2d7e:	11 f4       	brne	.+4      	; 0x2d84 <seven_segment_initialize+0x20>
	{
		ret = E_NOT_OK;
    2d80:	19 82       	std	Y+1, r1	; 0x01
    2d82:	22 c0       	rjmp	.+68     	; 0x2dc8 <seven_segment_initialize+0x64>
	}
	else
	{
	gpio_pin_initialize(&(seg->segment_pins[0]));
    2d84:	8a 81       	ldd	r24, Y+2	; 0x02
    2d86:	9b 81       	ldd	r25, Y+3	; 0x03
    2d88:	0e 94 c5 07 	call	0xf8a	; 0xf8a <gpio_pin_initialize>
	gpio_pin_initialize(&(seg->segment_pins[1]));
    2d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d90:	01 96       	adiw	r24, 0x01	; 1
    2d92:	0e 94 c5 07 	call	0xf8a	; 0xf8a <gpio_pin_initialize>
	gpio_pin_initialize(&(seg->segment_pins[2]));
    2d96:	8a 81       	ldd	r24, Y+2	; 0x02
    2d98:	9b 81       	ldd	r25, Y+3	; 0x03
    2d9a:	02 96       	adiw	r24, 0x02	; 2
    2d9c:	0e 94 c5 07 	call	0xf8a	; 0xf8a <gpio_pin_initialize>
	gpio_pin_initialize(&(seg->segment_pins[3]));
    2da0:	8a 81       	ldd	r24, Y+2	; 0x02
    2da2:	9b 81       	ldd	r25, Y+3	; 0x03
    2da4:	03 96       	adiw	r24, 0x03	; 3
    2da6:	0e 94 c5 07 	call	0xf8a	; 0xf8a <gpio_pin_initialize>
	gpio_pin_initialize(&(seg->segment_pins[4]));
    2daa:	8a 81       	ldd	r24, Y+2	; 0x02
    2dac:	9b 81       	ldd	r25, Y+3	; 0x03
    2dae:	04 96       	adiw	r24, 0x04	; 4
    2db0:	0e 94 c5 07 	call	0xf8a	; 0xf8a <gpio_pin_initialize>
	gpio_pin_initialize(&(seg->segment_pins[5]));
    2db4:	8a 81       	ldd	r24, Y+2	; 0x02
    2db6:	9b 81       	ldd	r25, Y+3	; 0x03
    2db8:	05 96       	adiw	r24, 0x05	; 5
    2dba:	0e 94 c5 07 	call	0xf8a	; 0xf8a <gpio_pin_initialize>
	gpio_pin_initialize(&(seg->segment_pins[6]));
    2dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc0:	9b 81       	ldd	r25, Y+3	; 0x03
    2dc2:	06 96       	adiw	r24, 0x06	; 6
    2dc4:	0e 94 c5 07 	call	0xf8a	; 0xf8a <gpio_pin_initialize>
	}
	return ret;
    2dc8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dca:	0f 90       	pop	r0
    2dcc:	0f 90       	pop	r0
    2dce:	0f 90       	pop	r0
    2dd0:	cf 91       	pop	r28
    2dd2:	df 91       	pop	r29
    2dd4:	08 95       	ret

00002dd6 <seven_segment_write_number>:
STD_ReturnStatus seven_segment_write_number(const segment_t *seg,uint8 num)
{
    2dd6:	df 93       	push	r29
    2dd8:	cf 93       	push	r28
    2dda:	00 d0       	rcall	.+0      	; 0x2ddc <seven_segment_write_number+0x6>
    2ddc:	00 d0       	rcall	.+0      	; 0x2dde <seven_segment_write_number+0x8>
    2dde:	cd b7       	in	r28, 0x3d	; 61
    2de0:	de b7       	in	r29, 0x3e	; 62
    2de2:	9b 83       	std	Y+3, r25	; 0x03
    2de4:	8a 83       	std	Y+2, r24	; 0x02
    2de6:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnStatus ret = E_OK;
    2de8:	81 e0       	ldi	r24, 0x01	; 1
    2dea:	89 83       	std	Y+1, r24	; 0x01
	if((NULL==seg)&&(num>9))
    2dec:	8a 81       	ldd	r24, Y+2	; 0x02
    2dee:	9b 81       	ldd	r25, Y+3	; 0x03
    2df0:	00 97       	sbiw	r24, 0x00	; 0
    2df2:	29 f4       	brne	.+10     	; 0x2dfe <seven_segment_write_number+0x28>
    2df4:	8c 81       	ldd	r24, Y+4	; 0x04
    2df6:	8a 30       	cpi	r24, 0x0A	; 10
    2df8:	10 f0       	brcs	.+4      	; 0x2dfe <seven_segment_write_number+0x28>
	{
		ret = E_NOT_OK;
    2dfa:	19 82       	std	Y+1, r1	; 0x01
    2dfc:	8a c0       	rjmp	.+276    	; 0x2f12 <seven_segment_write_number+0x13c>
	}
	else
	{
		gpio_pin_write_logic(&(seg->segment_pins[0]),CommCathArr[num]&0x01);
    2dfe:	4a 81       	ldd	r20, Y+2	; 0x02
    2e00:	5b 81       	ldd	r21, Y+3	; 0x03
    2e02:	8c 81       	ldd	r24, Y+4	; 0x04
    2e04:	88 2f       	mov	r24, r24
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	fc 01       	movw	r30, r24
    2e0a:	e5 56       	subi	r30, 0x65	; 101
    2e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0e:	80 81       	ld	r24, Z
    2e10:	28 2f       	mov	r18, r24
    2e12:	21 70       	andi	r18, 0x01	; 1
    2e14:	ca 01       	movw	r24, r20
    2e16:	62 2f       	mov	r22, r18
    2e18:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
		gpio_pin_write_logic(&(seg->segment_pins[1]),(CommCathArr[num]>>1)&0x01);
    2e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e20:	ac 01       	movw	r20, r24
    2e22:	4f 5f       	subi	r20, 0xFF	; 255
    2e24:	5f 4f       	sbci	r21, 0xFF	; 255
    2e26:	8c 81       	ldd	r24, Y+4	; 0x04
    2e28:	88 2f       	mov	r24, r24
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	fc 01       	movw	r30, r24
    2e2e:	e5 56       	subi	r30, 0x65	; 101
    2e30:	ff 4f       	sbci	r31, 0xFF	; 255
    2e32:	80 81       	ld	r24, Z
    2e34:	86 95       	lsr	r24
    2e36:	28 2f       	mov	r18, r24
    2e38:	21 70       	andi	r18, 0x01	; 1
    2e3a:	ca 01       	movw	r24, r20
    2e3c:	62 2f       	mov	r22, r18
    2e3e:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
		gpio_pin_write_logic(&(seg->segment_pins[2]),(CommCathArr[num]>>2)&0x01);
    2e42:	8a 81       	ldd	r24, Y+2	; 0x02
    2e44:	9b 81       	ldd	r25, Y+3	; 0x03
    2e46:	ac 01       	movw	r20, r24
    2e48:	4e 5f       	subi	r20, 0xFE	; 254
    2e4a:	5f 4f       	sbci	r21, 0xFF	; 255
    2e4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e4e:	88 2f       	mov	r24, r24
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	fc 01       	movw	r30, r24
    2e54:	e5 56       	subi	r30, 0x65	; 101
    2e56:	ff 4f       	sbci	r31, 0xFF	; 255
    2e58:	80 81       	ld	r24, Z
    2e5a:	86 95       	lsr	r24
    2e5c:	86 95       	lsr	r24
    2e5e:	28 2f       	mov	r18, r24
    2e60:	21 70       	andi	r18, 0x01	; 1
    2e62:	ca 01       	movw	r24, r20
    2e64:	62 2f       	mov	r22, r18
    2e66:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
		gpio_pin_write_logic(&(seg->segment_pins[3]),(CommCathArr[num]>>3)&0x01);
    2e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e6e:	ac 01       	movw	r20, r24
    2e70:	4d 5f       	subi	r20, 0xFD	; 253
    2e72:	5f 4f       	sbci	r21, 0xFF	; 255
    2e74:	8c 81       	ldd	r24, Y+4	; 0x04
    2e76:	88 2f       	mov	r24, r24
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	fc 01       	movw	r30, r24
    2e7c:	e5 56       	subi	r30, 0x65	; 101
    2e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e80:	80 81       	ld	r24, Z
    2e82:	86 95       	lsr	r24
    2e84:	86 95       	lsr	r24
    2e86:	86 95       	lsr	r24
    2e88:	28 2f       	mov	r18, r24
    2e8a:	21 70       	andi	r18, 0x01	; 1
    2e8c:	ca 01       	movw	r24, r20
    2e8e:	62 2f       	mov	r22, r18
    2e90:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
		gpio_pin_write_logic(&(seg->segment_pins[4]),(CommCathArr[num]>>4)&0x01);
    2e94:	8a 81       	ldd	r24, Y+2	; 0x02
    2e96:	9b 81       	ldd	r25, Y+3	; 0x03
    2e98:	ac 01       	movw	r20, r24
    2e9a:	4c 5f       	subi	r20, 0xFC	; 252
    2e9c:	5f 4f       	sbci	r21, 0xFF	; 255
    2e9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2ea0:	88 2f       	mov	r24, r24
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	fc 01       	movw	r30, r24
    2ea6:	e5 56       	subi	r30, 0x65	; 101
    2ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eaa:	80 81       	ld	r24, Z
    2eac:	82 95       	swap	r24
    2eae:	8f 70       	andi	r24, 0x0F	; 15
    2eb0:	28 2f       	mov	r18, r24
    2eb2:	21 70       	andi	r18, 0x01	; 1
    2eb4:	ca 01       	movw	r24, r20
    2eb6:	62 2f       	mov	r22, r18
    2eb8:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
		gpio_pin_write_logic(&(seg->segment_pins[5]),(CommCathArr[num]>>5)&0x01);
    2ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ebe:	9b 81       	ldd	r25, Y+3	; 0x03
    2ec0:	ac 01       	movw	r20, r24
    2ec2:	4b 5f       	subi	r20, 0xFB	; 251
    2ec4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ec6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ec8:	88 2f       	mov	r24, r24
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	fc 01       	movw	r30, r24
    2ece:	e5 56       	subi	r30, 0x65	; 101
    2ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed2:	80 81       	ld	r24, Z
    2ed4:	82 95       	swap	r24
    2ed6:	86 95       	lsr	r24
    2ed8:	87 70       	andi	r24, 0x07	; 7
    2eda:	28 2f       	mov	r18, r24
    2edc:	21 70       	andi	r18, 0x01	; 1
    2ede:	ca 01       	movw	r24, r20
    2ee0:	62 2f       	mov	r22, r18
    2ee2:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
		gpio_pin_write_logic(&(seg->segment_pins[6]),(CommCathArr[num]>>6)&0x01);
    2ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee8:	9b 81       	ldd	r25, Y+3	; 0x03
    2eea:	ac 01       	movw	r20, r24
    2eec:	4a 5f       	subi	r20, 0xFA	; 250
    2eee:	5f 4f       	sbci	r21, 0xFF	; 255
    2ef0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ef2:	88 2f       	mov	r24, r24
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	fc 01       	movw	r30, r24
    2ef8:	e5 56       	subi	r30, 0x65	; 101
    2efa:	ff 4f       	sbci	r31, 0xFF	; 255
    2efc:	80 81       	ld	r24, Z
    2efe:	82 95       	swap	r24
    2f00:	86 95       	lsr	r24
    2f02:	86 95       	lsr	r24
    2f04:	83 70       	andi	r24, 0x03	; 3
    2f06:	28 2f       	mov	r18, r24
    2f08:	21 70       	andi	r18, 0x01	; 1
    2f0a:	ca 01       	movw	r24, r20
    2f0c:	62 2f       	mov	r22, r18
    2f0e:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
	}
	return ret;
    2f12:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f14:	0f 90       	pop	r0
    2f16:	0f 90       	pop	r0
    2f18:	0f 90       	pop	r0
    2f1a:	0f 90       	pop	r0
    2f1c:	cf 91       	pop	r28
    2f1e:	df 91       	pop	r29
    2f20:	08 95       	ret

00002f22 <dc_motor_initialize>:
 *
 * @param _dc_motor
 * @return
 */
STD_ReturnStatus dc_motor_initialize(const dc_motor_t *_dc_motor)
{
    2f22:	df 93       	push	r29
    2f24:	cf 93       	push	r28
    2f26:	00 d0       	rcall	.+0      	; 0x2f28 <dc_motor_initialize+0x6>
    2f28:	0f 92       	push	r0
    2f2a:	cd b7       	in	r28, 0x3d	; 61
    2f2c:	de b7       	in	r29, 0x3e	; 62
    2f2e:	9b 83       	std	Y+3, r25	; 0x03
    2f30:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_OK;
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==_dc_motor)
    2f36:	8a 81       	ldd	r24, Y+2	; 0x02
    2f38:	9b 81       	ldd	r25, Y+3	; 0x03
    2f3a:	00 97       	sbiw	r24, 0x00	; 0
    2f3c:	11 f4       	brne	.+4      	; 0x2f42 <dc_motor_initialize+0x20>
	{
		ret=E_NOT_OK;
    2f3e:	19 82       	std	Y+1, r1	; 0x01
    2f40:	09 c0       	rjmp	.+18     	; 0x2f54 <dc_motor_initialize+0x32>
	}
	else
	{


		gpio_pin_initialize(&(_dc_motor->dc_motor_pin[0]));
    2f42:	8a 81       	ldd	r24, Y+2	; 0x02
    2f44:	9b 81       	ldd	r25, Y+3	; 0x03
    2f46:	0e 94 c5 07 	call	0xf8a	; 0xf8a <gpio_pin_initialize>
		gpio_pin_initialize(&(_dc_motor->dc_motor_pin[1]));
    2f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f4e:	01 96       	adiw	r24, 0x01	; 1
    2f50:	0e 94 c5 07 	call	0xf8a	; 0xf8a <gpio_pin_initialize>
	}
	return ret;
    2f54:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f56:	0f 90       	pop	r0
    2f58:	0f 90       	pop	r0
    2f5a:	0f 90       	pop	r0
    2f5c:	cf 91       	pop	r28
    2f5e:	df 91       	pop	r29
    2f60:	08 95       	ret

00002f62 <dc_motor_move_right>:
 *
 * @param _dc_motor
 * @return
 */
STD_ReturnStatus dc_motor_move_right(const dc_motor_t *_dc_motor)
{
    2f62:	df 93       	push	r29
    2f64:	cf 93       	push	r28
    2f66:	00 d0       	rcall	.+0      	; 0x2f68 <dc_motor_move_right+0x6>
    2f68:	0f 92       	push	r0
    2f6a:	cd b7       	in	r28, 0x3d	; 61
    2f6c:	de b7       	in	r29, 0x3e	; 62
    2f6e:	9b 83       	std	Y+3, r25	; 0x03
    2f70:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_OK;
    2f72:	81 e0       	ldi	r24, 0x01	; 1
    2f74:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==_dc_motor)
    2f76:	8a 81       	ldd	r24, Y+2	; 0x02
    2f78:	9b 81       	ldd	r25, Y+3	; 0x03
    2f7a:	00 97       	sbiw	r24, 0x00	; 0
    2f7c:	11 f4       	brne	.+4      	; 0x2f82 <dc_motor_move_right+0x20>
	{
		ret=E_NOT_OK;
    2f7e:	19 82       	std	Y+1, r1	; 0x01
    2f80:	0b c0       	rjmp	.+22     	; 0x2f98 <dc_motor_move_right+0x36>
	}
	else
	{
		gpio_pin_write_logic(&(_dc_motor->dc_motor_pin[0]),GPIO_HIGH);
    2f82:	8a 81       	ldd	r24, Y+2	; 0x02
    2f84:	9b 81       	ldd	r25, Y+3	; 0x03
    2f86:	61 e0       	ldi	r22, 0x01	; 1
    2f88:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
		gpio_pin_write_logic(&(_dc_motor->dc_motor_pin[1]),GPIO_LOW);
    2f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f90:	01 96       	adiw	r24, 0x01	; 1
    2f92:	60 e0       	ldi	r22, 0x00	; 0
    2f94:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
	}
	return ret;
    2f98:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f9a:	0f 90       	pop	r0
    2f9c:	0f 90       	pop	r0
    2f9e:	0f 90       	pop	r0
    2fa0:	cf 91       	pop	r28
    2fa2:	df 91       	pop	r29
    2fa4:	08 95       	ret

00002fa6 <dc_motor_move_left>:
 *
 * @param _dc_motor
 * @return
 */
STD_ReturnStatus dc_motor_move_left(const dc_motor_t *_dc_motor)
{
    2fa6:	df 93       	push	r29
    2fa8:	cf 93       	push	r28
    2faa:	00 d0       	rcall	.+0      	; 0x2fac <dc_motor_move_left+0x6>
    2fac:	0f 92       	push	r0
    2fae:	cd b7       	in	r28, 0x3d	; 61
    2fb0:	de b7       	in	r29, 0x3e	; 62
    2fb2:	9b 83       	std	Y+3, r25	; 0x03
    2fb4:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_OK;
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==_dc_motor)
    2fba:	8a 81       	ldd	r24, Y+2	; 0x02
    2fbc:	9b 81       	ldd	r25, Y+3	; 0x03
    2fbe:	00 97       	sbiw	r24, 0x00	; 0
    2fc0:	11 f4       	brne	.+4      	; 0x2fc6 <dc_motor_move_left+0x20>
	{
		ret=E_NOT_OK;
    2fc2:	19 82       	std	Y+1, r1	; 0x01
    2fc4:	0b c0       	rjmp	.+22     	; 0x2fdc <dc_motor_move_left+0x36>
	}
	else
	{
		gpio_pin_write_logic(&(_dc_motor->dc_motor_pin[0]),GPIO_LOW);
    2fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc8:	9b 81       	ldd	r25, Y+3	; 0x03
    2fca:	60 e0       	ldi	r22, 0x00	; 0
    2fcc:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
		gpio_pin_write_logic(&(_dc_motor->dc_motor_pin[1]),GPIO_HIGH);
    2fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd2:	9b 81       	ldd	r25, Y+3	; 0x03
    2fd4:	01 96       	adiw	r24, 0x01	; 1
    2fd6:	61 e0       	ldi	r22, 0x01	; 1
    2fd8:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
	}
	return ret;
    2fdc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fde:	0f 90       	pop	r0
    2fe0:	0f 90       	pop	r0
    2fe2:	0f 90       	pop	r0
    2fe4:	cf 91       	pop	r28
    2fe6:	df 91       	pop	r29
    2fe8:	08 95       	ret

00002fea <dc_motor_stop>:
 *
 * @param _dc_motor
 * @return
 */
STD_ReturnStatus dc_motor_stop(const dc_motor_t *_dc_motor)
{
    2fea:	df 93       	push	r29
    2fec:	cf 93       	push	r28
    2fee:	00 d0       	rcall	.+0      	; 0x2ff0 <dc_motor_stop+0x6>
    2ff0:	0f 92       	push	r0
    2ff2:	cd b7       	in	r28, 0x3d	; 61
    2ff4:	de b7       	in	r29, 0x3e	; 62
    2ff6:	9b 83       	std	Y+3, r25	; 0x03
    2ff8:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnStatus ret = E_OK;
    2ffa:	81 e0       	ldi	r24, 0x01	; 1
    2ffc:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==_dc_motor)
    2ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    3000:	9b 81       	ldd	r25, Y+3	; 0x03
    3002:	00 97       	sbiw	r24, 0x00	; 0
    3004:	11 f4       	brne	.+4      	; 0x300a <dc_motor_stop+0x20>
	{
		ret=E_NOT_OK;
    3006:	19 82       	std	Y+1, r1	; 0x01
    3008:	0b c0       	rjmp	.+22     	; 0x3020 <dc_motor_stop+0x36>
	}
	else
	{
		gpio_pin_write_logic(&(_dc_motor->dc_motor_pin[0]),GPIO_LOW);
    300a:	8a 81       	ldd	r24, Y+2	; 0x02
    300c:	9b 81       	ldd	r25, Y+3	; 0x03
    300e:	60 e0       	ldi	r22, 0x00	; 0
    3010:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
		gpio_pin_write_logic(&(_dc_motor->dc_motor_pin[1]),GPIO_LOW);
    3014:	8a 81       	ldd	r24, Y+2	; 0x02
    3016:	9b 81       	ldd	r25, Y+3	; 0x03
    3018:	01 96       	adiw	r24, 0x01	; 1
    301a:	60 e0       	ldi	r22, 0x00	; 0
    301c:	0e 94 8f 06 	call	0xd1e	; 0xd1e <gpio_pin_write_logic>
	}
	return ret;
    3020:	89 81       	ldd	r24, Y+1	; 0x01
}
    3022:	0f 90       	pop	r0
    3024:	0f 90       	pop	r0
    3026:	0f 90       	pop	r0
    3028:	cf 91       	pop	r28
    302a:	df 91       	pop	r29
    302c:	08 95       	ret

0000302e <ecu_layer_initialize>:
		.lcd_data[7].direction=DIRECTION_OUTPUT,
		.lcd_data[7].logic=GPIO_LOW
};

void ecu_layer_initialize()
{
    302e:	df 93       	push	r29
    3030:	cf 93       	push	r28
    3032:	0f 92       	push	r0
    3034:	cd b7       	in	r28, 0x3d	; 61
    3036:	de b7       	in	r29, 0x3e	; 62
	STD_ReturnStatus ret = E_NOT_OK;
    3038:	19 82       	std	Y+1, r1	; 0x01
	ret = lcd_4bit_initialize(&lcd1);
    303a:	87 eb       	ldi	r24, 0xB7	; 183
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	0e 94 8f 0b 	call	0x171e	; 0x171e <lcd_4bit_initialize>
    3042:	89 83       	std	Y+1, r24	; 0x01
	ret = keypad_initialize(&keypad1);
    3044:	8f ea       	ldi	r24, 0xAF	; 175
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <keypad_initialize>
    304c:	89 83       	std	Y+1, r24	; 0x01
	//ret = lcd_8bit_initialize(&lcd2);
}
    304e:	0f 90       	pop	r0
    3050:	cf 91       	pop	r28
    3052:	df 91       	pop	r29
    3054:	08 95       	ret

00003056 <welcome_message>:

void welcome_message()
{
    3056:	df 93       	push	r29
    3058:	cf 93       	push	r28
    305a:	cd b7       	in	r28, 0x3d	; 61
    305c:	de b7       	in	r29, 0x3e	; 62
    305e:	6d 97       	sbiw	r28, 0x1d	; 29
    3060:	0f b6       	in	r0, 0x3f	; 63
    3062:	f8 94       	cli
    3064:	de bf       	out	0x3e, r29	; 62
    3066:	0f be       	out	0x3f, r0	; 63
    3068:	cd bf       	out	0x3d, r28	; 61
	for(uint8 i=0;i<=2;i++)
    306a:	1d 8e       	std	Y+29, r1	; 0x1d
    306c:	f7 c0       	rjmp	.+494    	; 0x325c <welcome_message+0x206>
	{
		lcd_4bit_send_string_pos(&lcd1,1,3, "Calculator");
    306e:	87 eb       	ldi	r24, 0xB7	; 183
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	23 e6       	ldi	r18, 0x63	; 99
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	61 e0       	ldi	r22, 0x01	; 1
    3078:	43 e0       	ldi	r20, 0x03	; 3
    307a:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <lcd_4bit_send_string_pos>
    307e:	80 e0       	ldi	r24, 0x00	; 0
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	a8 e4       	ldi	r26, 0x48	; 72
    3084:	b3 e4       	ldi	r27, 0x43	; 67
    3086:	89 8f       	std	Y+25, r24	; 0x19
    3088:	9a 8f       	std	Y+26, r25	; 0x1a
    308a:	ab 8f       	std	Y+27, r26	; 0x1b
    308c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    308e:	69 8d       	ldd	r22, Y+25	; 0x19
    3090:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3092:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3094:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3096:	20 e0       	ldi	r18, 0x00	; 0
    3098:	30 e0       	ldi	r19, 0x00	; 0
    309a:	4a ef       	ldi	r20, 0xFA	; 250
    309c:	54 e4       	ldi	r21, 0x44	; 68
    309e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a2:	dc 01       	movw	r26, r24
    30a4:	cb 01       	movw	r24, r22
    30a6:	8d 8b       	std	Y+21, r24	; 0x15
    30a8:	9e 8b       	std	Y+22, r25	; 0x16
    30aa:	af 8b       	std	Y+23, r26	; 0x17
    30ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30ae:	6d 89       	ldd	r22, Y+21	; 0x15
    30b0:	7e 89       	ldd	r23, Y+22	; 0x16
    30b2:	8f 89       	ldd	r24, Y+23	; 0x17
    30b4:	98 8d       	ldd	r25, Y+24	; 0x18
    30b6:	20 e0       	ldi	r18, 0x00	; 0
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	40 e8       	ldi	r20, 0x80	; 128
    30bc:	5f e3       	ldi	r21, 0x3F	; 63
    30be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30c2:	88 23       	and	r24, r24
    30c4:	2c f4       	brge	.+10     	; 0x30d0 <welcome_message+0x7a>
		__ticks = 1;
    30c6:	81 e0       	ldi	r24, 0x01	; 1
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	9c 8b       	std	Y+20, r25	; 0x14
    30cc:	8b 8b       	std	Y+19, r24	; 0x13
    30ce:	3f c0       	rjmp	.+126    	; 0x314e <welcome_message+0xf8>
	else if (__tmp > 65535)
    30d0:	6d 89       	ldd	r22, Y+21	; 0x15
    30d2:	7e 89       	ldd	r23, Y+22	; 0x16
    30d4:	8f 89       	ldd	r24, Y+23	; 0x17
    30d6:	98 8d       	ldd	r25, Y+24	; 0x18
    30d8:	20 e0       	ldi	r18, 0x00	; 0
    30da:	3f ef       	ldi	r19, 0xFF	; 255
    30dc:	4f e7       	ldi	r20, 0x7F	; 127
    30de:	57 e4       	ldi	r21, 0x47	; 71
    30e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30e4:	18 16       	cp	r1, r24
    30e6:	4c f5       	brge	.+82     	; 0x313a <welcome_message+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30e8:	69 8d       	ldd	r22, Y+25	; 0x19
    30ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30f0:	20 e0       	ldi	r18, 0x00	; 0
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	40 e2       	ldi	r20, 0x20	; 32
    30f6:	51 e4       	ldi	r21, 0x41	; 65
    30f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30fc:	dc 01       	movw	r26, r24
    30fe:	cb 01       	movw	r24, r22
    3100:	bc 01       	movw	r22, r24
    3102:	cd 01       	movw	r24, r26
    3104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3108:	dc 01       	movw	r26, r24
    310a:	cb 01       	movw	r24, r22
    310c:	9c 8b       	std	Y+20, r25	; 0x14
    310e:	8b 8b       	std	Y+19, r24	; 0x13
    3110:	0f c0       	rjmp	.+30     	; 0x3130 <welcome_message+0xda>
    3112:	88 ec       	ldi	r24, 0xC8	; 200
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	9a 8b       	std	Y+18, r25	; 0x12
    3118:	89 8b       	std	Y+17, r24	; 0x11
    311a:	89 89       	ldd	r24, Y+17	; 0x11
    311c:	9a 89       	ldd	r25, Y+18	; 0x12
    311e:	01 97       	sbiw	r24, 0x01	; 1
    3120:	f1 f7       	brne	.-4      	; 0x311e <welcome_message+0xc8>
    3122:	9a 8b       	std	Y+18, r25	; 0x12
    3124:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3126:	8b 89       	ldd	r24, Y+19	; 0x13
    3128:	9c 89       	ldd	r25, Y+20	; 0x14
    312a:	01 97       	sbiw	r24, 0x01	; 1
    312c:	9c 8b       	std	Y+20, r25	; 0x14
    312e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3130:	8b 89       	ldd	r24, Y+19	; 0x13
    3132:	9c 89       	ldd	r25, Y+20	; 0x14
    3134:	00 97       	sbiw	r24, 0x00	; 0
    3136:	69 f7       	brne	.-38     	; 0x3112 <welcome_message+0xbc>
    3138:	14 c0       	rjmp	.+40     	; 0x3162 <welcome_message+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    313a:	6d 89       	ldd	r22, Y+21	; 0x15
    313c:	7e 89       	ldd	r23, Y+22	; 0x16
    313e:	8f 89       	ldd	r24, Y+23	; 0x17
    3140:	98 8d       	ldd	r25, Y+24	; 0x18
    3142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3146:	dc 01       	movw	r26, r24
    3148:	cb 01       	movw	r24, r22
    314a:	9c 8b       	std	Y+20, r25	; 0x14
    314c:	8b 8b       	std	Y+19, r24	; 0x13
    314e:	8b 89       	ldd	r24, Y+19	; 0x13
    3150:	9c 89       	ldd	r25, Y+20	; 0x14
    3152:	98 8b       	std	Y+16, r25	; 0x10
    3154:	8f 87       	std	Y+15, r24	; 0x0f
    3156:	8f 85       	ldd	r24, Y+15	; 0x0f
    3158:	98 89       	ldd	r25, Y+16	; 0x10
    315a:	01 97       	sbiw	r24, 0x01	; 1
    315c:	f1 f7       	brne	.-4      	; 0x315a <welcome_message+0x104>
    315e:	98 8b       	std	Y+16, r25	; 0x10
    3160:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200	);
		lcd_4bit_send_string_pos(&lcd1,1,3, "           ");
    3162:	87 eb       	ldi	r24, 0xB7	; 183
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	2e e6       	ldi	r18, 0x6E	; 110
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	61 e0       	ldi	r22, 0x01	; 1
    316c:	43 e0       	ldi	r20, 0x03	; 3
    316e:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <lcd_4bit_send_string_pos>
    3172:	80 e0       	ldi	r24, 0x00	; 0
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	a8 ec       	ldi	r26, 0xC8	; 200
    3178:	b2 e4       	ldi	r27, 0x42	; 66
    317a:	8b 87       	std	Y+11, r24	; 0x0b
    317c:	9c 87       	std	Y+12, r25	; 0x0c
    317e:	ad 87       	std	Y+13, r26	; 0x0d
    3180:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3182:	6b 85       	ldd	r22, Y+11	; 0x0b
    3184:	7c 85       	ldd	r23, Y+12	; 0x0c
    3186:	8d 85       	ldd	r24, Y+13	; 0x0d
    3188:	9e 85       	ldd	r25, Y+14	; 0x0e
    318a:	20 e0       	ldi	r18, 0x00	; 0
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	4a ef       	ldi	r20, 0xFA	; 250
    3190:	54 e4       	ldi	r21, 0x44	; 68
    3192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3196:	dc 01       	movw	r26, r24
    3198:	cb 01       	movw	r24, r22
    319a:	8f 83       	std	Y+7, r24	; 0x07
    319c:	98 87       	std	Y+8, r25	; 0x08
    319e:	a9 87       	std	Y+9, r26	; 0x09
    31a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31a2:	6f 81       	ldd	r22, Y+7	; 0x07
    31a4:	78 85       	ldd	r23, Y+8	; 0x08
    31a6:	89 85       	ldd	r24, Y+9	; 0x09
    31a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    31aa:	20 e0       	ldi	r18, 0x00	; 0
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	40 e8       	ldi	r20, 0x80	; 128
    31b0:	5f e3       	ldi	r21, 0x3F	; 63
    31b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31b6:	88 23       	and	r24, r24
    31b8:	2c f4       	brge	.+10     	; 0x31c4 <welcome_message+0x16e>
		__ticks = 1;
    31ba:	81 e0       	ldi	r24, 0x01	; 1
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	9e 83       	std	Y+6, r25	; 0x06
    31c0:	8d 83       	std	Y+5, r24	; 0x05
    31c2:	3f c0       	rjmp	.+126    	; 0x3242 <welcome_message+0x1ec>
	else if (__tmp > 65535)
    31c4:	6f 81       	ldd	r22, Y+7	; 0x07
    31c6:	78 85       	ldd	r23, Y+8	; 0x08
    31c8:	89 85       	ldd	r24, Y+9	; 0x09
    31ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    31cc:	20 e0       	ldi	r18, 0x00	; 0
    31ce:	3f ef       	ldi	r19, 0xFF	; 255
    31d0:	4f e7       	ldi	r20, 0x7F	; 127
    31d2:	57 e4       	ldi	r21, 0x47	; 71
    31d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31d8:	18 16       	cp	r1, r24
    31da:	4c f5       	brge	.+82     	; 0x322e <welcome_message+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    31de:	7c 85       	ldd	r23, Y+12	; 0x0c
    31e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    31e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    31e4:	20 e0       	ldi	r18, 0x00	; 0
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	40 e2       	ldi	r20, 0x20	; 32
    31ea:	51 e4       	ldi	r21, 0x41	; 65
    31ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f0:	dc 01       	movw	r26, r24
    31f2:	cb 01       	movw	r24, r22
    31f4:	bc 01       	movw	r22, r24
    31f6:	cd 01       	movw	r24, r26
    31f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31fc:	dc 01       	movw	r26, r24
    31fe:	cb 01       	movw	r24, r22
    3200:	9e 83       	std	Y+6, r25	; 0x06
    3202:	8d 83       	std	Y+5, r24	; 0x05
    3204:	0f c0       	rjmp	.+30     	; 0x3224 <welcome_message+0x1ce>
    3206:	88 ec       	ldi	r24, 0xC8	; 200
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	9c 83       	std	Y+4, r25	; 0x04
    320c:	8b 83       	std	Y+3, r24	; 0x03
    320e:	8b 81       	ldd	r24, Y+3	; 0x03
    3210:	9c 81       	ldd	r25, Y+4	; 0x04
    3212:	01 97       	sbiw	r24, 0x01	; 1
    3214:	f1 f7       	brne	.-4      	; 0x3212 <welcome_message+0x1bc>
    3216:	9c 83       	std	Y+4, r25	; 0x04
    3218:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    321a:	8d 81       	ldd	r24, Y+5	; 0x05
    321c:	9e 81       	ldd	r25, Y+6	; 0x06
    321e:	01 97       	sbiw	r24, 0x01	; 1
    3220:	9e 83       	std	Y+6, r25	; 0x06
    3222:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3224:	8d 81       	ldd	r24, Y+5	; 0x05
    3226:	9e 81       	ldd	r25, Y+6	; 0x06
    3228:	00 97       	sbiw	r24, 0x00	; 0
    322a:	69 f7       	brne	.-38     	; 0x3206 <welcome_message+0x1b0>
    322c:	14 c0       	rjmp	.+40     	; 0x3256 <welcome_message+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    322e:	6f 81       	ldd	r22, Y+7	; 0x07
    3230:	78 85       	ldd	r23, Y+8	; 0x08
    3232:	89 85       	ldd	r24, Y+9	; 0x09
    3234:	9a 85       	ldd	r25, Y+10	; 0x0a
    3236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    323a:	dc 01       	movw	r26, r24
    323c:	cb 01       	movw	r24, r22
    323e:	9e 83       	std	Y+6, r25	; 0x06
    3240:	8d 83       	std	Y+5, r24	; 0x05
    3242:	8d 81       	ldd	r24, Y+5	; 0x05
    3244:	9e 81       	ldd	r25, Y+6	; 0x06
    3246:	9a 83       	std	Y+2, r25	; 0x02
    3248:	89 83       	std	Y+1, r24	; 0x01
    324a:	89 81       	ldd	r24, Y+1	; 0x01
    324c:	9a 81       	ldd	r25, Y+2	; 0x02
    324e:	01 97       	sbiw	r24, 0x01	; 1
    3250:	f1 f7       	brne	.-4      	; 0x324e <welcome_message+0x1f8>
    3252:	9a 83       	std	Y+2, r25	; 0x02
    3254:	89 83       	std	Y+1, r24	; 0x01
	//ret = lcd_8bit_initialize(&lcd2);
}

void welcome_message()
{
	for(uint8 i=0;i<=2;i++)
    3256:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3258:	8f 5f       	subi	r24, 0xFF	; 255
    325a:	8d 8f       	std	Y+29, r24	; 0x1d
    325c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    325e:	83 30       	cpi	r24, 0x03	; 3
    3260:	08 f4       	brcc	.+2      	; 0x3264 <welcome_message+0x20e>
    3262:	05 cf       	rjmp	.-502    	; 0x306e <welcome_message+0x18>
		lcd_4bit_send_string_pos(&lcd1,1,3, "Calculator");
		_delay_ms(200	);
		lcd_4bit_send_string_pos(&lcd1,1,3, "           ");
		_delay_ms(100);
	}
}
    3264:	6d 96       	adiw	r28, 0x1d	; 29
    3266:	0f b6       	in	r0, 0x3f	; 63
    3268:	f8 94       	cli
    326a:	de bf       	out	0x3e, r29	; 62
    326c:	0f be       	out	0x3f, r0	; 63
    326e:	cd bf       	out	0x3d, r28	; 61
    3270:	cf 91       	pop	r28
    3272:	df 91       	pop	r29
    3274:	08 95       	ret

00003276 <main>:
//		};



int main()
{
    3276:	df 93       	push	r29
    3278:	cf 93       	push	r28
    327a:	cd b7       	in	r28, 0x3d	; 61
    327c:	de b7       	in	r29, 0x3e	; 62
	Application_initialize();
    327e:	0e 94 88 1a 	call	0x3510	; 0x3510 <Application_initialize>
//	}


	while(1)
	{
		flag=1;
    3282:	81 e0       	ldi	r24, 0x01	; 1
    3284:	80 93 d1 00 	sts	0x00D1, r24
		do{
			do{
				keypad_get_value(&keypad1,&value,&keypressed);
    3288:	8f ea       	ldi	r24, 0xAF	; 175
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	27 e0       	ldi	r18, 0x07	; 7
    328e:	31 e0       	ldi	r19, 0x01	; 1
    3290:	41 e0       	ldi	r20, 0x01	; 1
    3292:	51 e0       	ldi	r21, 0x01	; 1
    3294:	b9 01       	movw	r22, r18
    3296:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <keypad_get_value>
			}while(keypressed==KEY_NOT_PRESSED);
    329a:	80 91 01 01 	lds	r24, 0x0101
    329e:	88 23       	and	r24, r24
    32a0:	99 f3       	breq	.-26     	; 0x3288 <main+0x12>
			if(((value!='/')&&(value!='+')&&(value!='-')&&(value!='*')))
    32a2:	80 91 07 01 	lds	r24, 0x0107
    32a6:	8f 32       	cpi	r24, 0x2F	; 47
    32a8:	81 f1       	breq	.+96     	; 0x330a <main+0x94>
    32aa:	80 91 07 01 	lds	r24, 0x0107
    32ae:	8b 32       	cpi	r24, 0x2B	; 43
    32b0:	61 f1       	breq	.+88     	; 0x330a <main+0x94>
    32b2:	80 91 07 01 	lds	r24, 0x0107
    32b6:	8d 32       	cpi	r24, 0x2D	; 45
    32b8:	41 f1       	breq	.+80     	; 0x330a <main+0x94>
    32ba:	80 91 07 01 	lds	r24, 0x0107
    32be:	8a 32       	cpi	r24, 0x2A	; 42
    32c0:	21 f1       	breq	.+72     	; 0x330a <main+0x94>
			{
				num1=num1*10+value;
    32c2:	80 91 f7 00 	lds	r24, 0x00F7
    32c6:	88 2f       	mov	r24, r24
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	9c 01       	movw	r18, r24
    32cc:	22 0f       	add	r18, r18
    32ce:	33 1f       	adc	r19, r19
    32d0:	c9 01       	movw	r24, r18
    32d2:	88 0f       	add	r24, r24
    32d4:	99 1f       	adc	r25, r25
    32d6:	88 0f       	add	r24, r24
    32d8:	99 1f       	adc	r25, r25
    32da:	82 0f       	add	r24, r18
    32dc:	93 1f       	adc	r25, r19
    32de:	98 2f       	mov	r25, r24
    32e0:	80 91 07 01 	lds	r24, 0x0107
    32e4:	89 0f       	add	r24, r25
    32e6:	80 93 f7 00 	sts	0x00F7, r24
				lcd_4bit_send_int_pos(&lcd1,1,1,num1);
    32ea:	80 91 f7 00 	lds	r24, 0x00F7
    32ee:	28 2f       	mov	r18, r24
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	87 eb       	ldi	r24, 0xB7	; 183
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	61 e0       	ldi	r22, 0x01	; 1
    32f8:	41 e0       	ldi	r20, 0x01	; 1
    32fa:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <lcd_4bit_send_int_pos>
				col++;
    32fe:	80 91 d2 00 	lds	r24, 0x00D2
    3302:	8f 5f       	subi	r24, 0xFF	; 255
    3304:	80 93 d2 00 	sts	0x00D2, r24
    3308:	02 c0       	rjmp	.+4      	; 0x330e <main+0x98>
			}
			else
			{
				flag=0;
    330a:	10 92 d1 00 	sts	0x00D1, r1
			}
		}while((flag==1));
    330e:	80 91 d1 00 	lds	r24, 0x00D1
    3312:	81 30       	cpi	r24, 0x01	; 1
    3314:	09 f4       	brne	.+2      	; 0x3318 <main+0xa2>
    3316:	b8 cf       	rjmp	.-144    	; 0x3288 <main+0x12>
	//	lcd_4bit_send_string_pos(&lcd1,2,1,"Done");
		/* -------------------------------- */
		lcd_4bit_send_char_data_pos(&lcd1,1,col++,value);
    3318:	80 91 d2 00 	lds	r24, 0x00D2
    331c:	38 2f       	mov	r19, r24
    331e:	8f 5f       	subi	r24, 0xFF	; 255
    3320:	80 93 d2 00 	sts	0x00D2, r24
    3324:	20 91 07 01 	lds	r18, 0x0107
    3328:	87 eb       	ldi	r24, 0xB7	; 183
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	61 e0       	ldi	r22, 0x01	; 1
    332e:	43 2f       	mov	r20, r19
    3330:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <lcd_4bit_send_char_data_pos>
		sym=value;
    3334:	80 91 07 01 	lds	r24, 0x0107
    3338:	80 93 06 01 	sts	0x0106, r24
		lcd_4bit_send_string_pos(&lcd1,2,1,"");
    333c:	87 eb       	ldi	r24, 0xB7	; 183
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	2a e7       	ldi	r18, 0x7A	; 122
    3342:	30 e0       	ldi	r19, 0x00	; 0
    3344:	62 e0       	ldi	r22, 0x02	; 2
    3346:	41 e0       	ldi	r20, 0x01	; 1
    3348:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <lcd_4bit_send_string_pos>
		flag=1;
    334c:	81 e0       	ldi	r24, 0x01	; 1
    334e:	80 93 d1 00 	sts	0x00D1, r24
		l_col=col;
    3352:	80 91 d2 00 	lds	r24, 0x00D2
    3356:	80 93 f9 00 	sts	0x00F9, r24
		do{
		do{
			keypad_get_value(&keypad1,&value,&keypressed);
    335a:	8f ea       	ldi	r24, 0xAF	; 175
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	27 e0       	ldi	r18, 0x07	; 7
    3360:	31 e0       	ldi	r19, 0x01	; 1
    3362:	41 e0       	ldi	r20, 0x01	; 1
    3364:	51 e0       	ldi	r21, 0x01	; 1
    3366:	b9 01       	movw	r22, r18
    3368:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <keypad_get_value>
		}while(keypressed==KEY_NOT_PRESSED);
    336c:	80 91 01 01 	lds	r24, 0x0101
    3370:	88 23       	and	r24, r24
    3372:	99 f3       	breq	.-26     	; 0x335a <main+0xe4>
		if(((value!='/')&&(value!='+')&&(value!='-')&&(value!='*')&&(value!='=')))
    3374:	80 91 07 01 	lds	r24, 0x0107
    3378:	8f 32       	cpi	r24, 0x2F	; 47
    337a:	a9 f1       	breq	.+106    	; 0x33e6 <main+0x170>
    337c:	80 91 07 01 	lds	r24, 0x0107
    3380:	8b 32       	cpi	r24, 0x2B	; 43
    3382:	89 f1       	breq	.+98     	; 0x33e6 <main+0x170>
    3384:	80 91 07 01 	lds	r24, 0x0107
    3388:	8d 32       	cpi	r24, 0x2D	; 45
    338a:	69 f1       	breq	.+90     	; 0x33e6 <main+0x170>
    338c:	80 91 07 01 	lds	r24, 0x0107
    3390:	8a 32       	cpi	r24, 0x2A	; 42
    3392:	49 f1       	breq	.+82     	; 0x33e6 <main+0x170>
    3394:	80 91 07 01 	lds	r24, 0x0107
    3398:	8d 33       	cpi	r24, 0x3D	; 61
    339a:	29 f1       	breq	.+74     	; 0x33e6 <main+0x170>
		{
			num2=num2*10+value;
    339c:	80 91 f8 00 	lds	r24, 0x00F8
    33a0:	88 2f       	mov	r24, r24
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	9c 01       	movw	r18, r24
    33a6:	22 0f       	add	r18, r18
    33a8:	33 1f       	adc	r19, r19
    33aa:	c9 01       	movw	r24, r18
    33ac:	88 0f       	add	r24, r24
    33ae:	99 1f       	adc	r25, r25
    33b0:	88 0f       	add	r24, r24
    33b2:	99 1f       	adc	r25, r25
    33b4:	82 0f       	add	r24, r18
    33b6:	93 1f       	adc	r25, r19
    33b8:	98 2f       	mov	r25, r24
    33ba:	80 91 07 01 	lds	r24, 0x0107
    33be:	89 0f       	add	r24, r25
    33c0:	80 93 f8 00 	sts	0x00F8, r24
			lcd_4bit_send_int_pos(&lcd1,1,l_col,num2);
    33c4:	40 91 f9 00 	lds	r20, 0x00F9
    33c8:	80 91 f8 00 	lds	r24, 0x00F8
    33cc:	28 2f       	mov	r18, r24
    33ce:	30 e0       	ldi	r19, 0x00	; 0
    33d0:	87 eb       	ldi	r24, 0xB7	; 183
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	61 e0       	ldi	r22, 0x01	; 1
    33d6:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <lcd_4bit_send_int_pos>
			col++;
    33da:	80 91 d2 00 	lds	r24, 0x00D2
    33de:	8f 5f       	subi	r24, 0xFF	; 255
    33e0:	80 93 d2 00 	sts	0x00D2, r24
    33e4:	02 c0       	rjmp	.+4      	; 0x33ea <main+0x174>
		}
		else
		{
			flag=0;
    33e6:	10 92 d1 00 	sts	0x00D1, r1
		}
		}while((flag==1));
    33ea:	80 91 d1 00 	lds	r24, 0x00D1
    33ee:	81 30       	cpi	r24, 0x01	; 1
    33f0:	09 f4       	brne	.+2      	; 0x33f4 <main+0x17e>
    33f2:	b3 cf       	rjmp	.-154    	; 0x335a <main+0xe4>
		lcd_4bit_send_char_data_pos(&lcd1,1,col++,value);
    33f4:	80 91 d2 00 	lds	r24, 0x00D2
    33f8:	38 2f       	mov	r19, r24
    33fa:	8f 5f       	subi	r24, 0xFF	; 255
    33fc:	80 93 d2 00 	sts	0x00D2, r24
    3400:	20 91 07 01 	lds	r18, 0x0107
    3404:	87 eb       	ldi	r24, 0xB7	; 183
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	61 e0       	ldi	r22, 0x01	; 1
    340a:	43 2f       	mov	r20, r19
    340c:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <lcd_4bit_send_char_data_pos>

		if(sym=='+')
    3410:	80 91 06 01 	lds	r24, 0x0106
    3414:	8b 32       	cpi	r24, 0x2B	; 43
    3416:	d1 f4       	brne	.+52     	; 0x344c <main+0x1d6>
		{
			val=num1+num2;
    3418:	80 91 f7 00 	lds	r24, 0x00F7
    341c:	28 2f       	mov	r18, r24
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	80 91 f8 00 	lds	r24, 0x00F8
    3424:	88 2f       	mov	r24, r24
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	82 0f       	add	r24, r18
    342a:	93 1f       	adc	r25, r19
    342c:	90 93 00 01 	sts	0x0100, r25
    3430:	80 93 ff 00 	sts	0x00FF, r24
			lcd_4bit_send_int_pos(&lcd1,1,col,val);
    3434:	40 91 d2 00 	lds	r20, 0x00D2
    3438:	20 91 ff 00 	lds	r18, 0x00FF
    343c:	30 91 00 01 	lds	r19, 0x0100
    3440:	87 eb       	ldi	r24, 0xB7	; 183
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	61 e0       	ldi	r22, 0x01	; 1
    3446:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <lcd_4bit_send_int_pos>
    344a:	1b cf       	rjmp	.-458    	; 0x3282 <main+0xc>
		}
		else if(sym=='-')
    344c:	80 91 06 01 	lds	r24, 0x0106
    3450:	8d 32       	cpi	r24, 0x2D	; 45
    3452:	e1 f4       	brne	.+56     	; 0x348c <main+0x216>
		{
			val=num1-num2;
    3454:	80 91 f7 00 	lds	r24, 0x00F7
    3458:	28 2f       	mov	r18, r24
    345a:	30 e0       	ldi	r19, 0x00	; 0
    345c:	80 91 f8 00 	lds	r24, 0x00F8
    3460:	88 2f       	mov	r24, r24
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	a9 01       	movw	r20, r18
    3466:	48 1b       	sub	r20, r24
    3468:	59 0b       	sbc	r21, r25
    346a:	ca 01       	movw	r24, r20
    346c:	90 93 00 01 	sts	0x0100, r25
    3470:	80 93 ff 00 	sts	0x00FF, r24
			lcd_4bit_send_int_pos(&lcd1,1,col,val);
    3474:	40 91 d2 00 	lds	r20, 0x00D2
    3478:	20 91 ff 00 	lds	r18, 0x00FF
    347c:	30 91 00 01 	lds	r19, 0x0100
    3480:	87 eb       	ldi	r24, 0xB7	; 183
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	61 e0       	ldi	r22, 0x01	; 1
    3486:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <lcd_4bit_send_int_pos>
    348a:	fb ce       	rjmp	.-522    	; 0x3282 <main+0xc>
		}
		else if(sym=='*')
    348c:	80 91 06 01 	lds	r24, 0x0106
    3490:	8a 32       	cpi	r24, 0x2A	; 42
    3492:	01 f5       	brne	.+64     	; 0x34d4 <main+0x25e>
		{
			val=num1*num2;
    3494:	80 91 f7 00 	lds	r24, 0x00F7
    3498:	28 2f       	mov	r18, r24
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	80 91 f8 00 	lds	r24, 0x00F8
    34a0:	88 2f       	mov	r24, r24
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	ac 01       	movw	r20, r24
    34a6:	24 9f       	mul	r18, r20
    34a8:	c0 01       	movw	r24, r0
    34aa:	25 9f       	mul	r18, r21
    34ac:	90 0d       	add	r25, r0
    34ae:	34 9f       	mul	r19, r20
    34b0:	90 0d       	add	r25, r0
    34b2:	11 24       	eor	r1, r1
    34b4:	90 93 00 01 	sts	0x0100, r25
    34b8:	80 93 ff 00 	sts	0x00FF, r24
			lcd_4bit_send_int_pos(&lcd1,1,col,val);
    34bc:	40 91 d2 00 	lds	r20, 0x00D2
    34c0:	20 91 ff 00 	lds	r18, 0x00FF
    34c4:	30 91 00 01 	lds	r19, 0x0100
    34c8:	87 eb       	ldi	r24, 0xB7	; 183
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	61 e0       	ldi	r22, 0x01	; 1
    34ce:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <lcd_4bit_send_int_pos>
    34d2:	d7 ce       	rjmp	.-594    	; 0x3282 <main+0xc>
		}
		else if(sym=='/')
    34d4:	80 91 06 01 	lds	r24, 0x0106
    34d8:	8f 32       	cpi	r24, 0x2F	; 47
    34da:	09 f0       	breq	.+2      	; 0x34de <main+0x268>
    34dc:	d2 ce       	rjmp	.-604    	; 0x3282 <main+0xc>
		{
			val=num1/num2;
    34de:	80 91 f7 00 	lds	r24, 0x00F7
    34e2:	90 91 f8 00 	lds	r25, 0x00F8
    34e6:	69 2f       	mov	r22, r25
    34e8:	0e 94 91 1a 	call	0x3522	; 0x3522 <__udivmodqi4>
    34ec:	88 2f       	mov	r24, r24
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	90 93 00 01 	sts	0x0100, r25
    34f4:	80 93 ff 00 	sts	0x00FF, r24
			lcd_4bit_send_int_pos(&lcd1,1,col,val);
    34f8:	40 91 d2 00 	lds	r20, 0x00D2
    34fc:	20 91 ff 00 	lds	r18, 0x00FF
    3500:	30 91 00 01 	lds	r19, 0x0100
    3504:	87 eb       	ldi	r24, 0xB7	; 183
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	61 e0       	ldi	r22, 0x01	; 1
    350a:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <lcd_4bit_send_int_pos>
    350e:	b9 ce       	rjmp	.-654    	; 0x3282 <main+0xc>

00003510 <Application_initialize>:
	}

}

void Application_initialize()
{
    3510:	df 93       	push	r29
    3512:	cf 93       	push	r28
    3514:	cd b7       	in	r28, 0x3d	; 61
    3516:	de b7       	in	r29, 0x3e	; 62
	ecu_layer_initialize();
    3518:	0e 94 17 18 	call	0x302e	; 0x302e <ecu_layer_initialize>
}
    351c:	cf 91       	pop	r28
    351e:	df 91       	pop	r29
    3520:	08 95       	ret

00003522 <__udivmodqi4>:
    3522:	99 1b       	sub	r25, r25
    3524:	79 e0       	ldi	r23, 0x09	; 9
    3526:	04 c0       	rjmp	.+8      	; 0x3530 <__udivmodqi4_ep>

00003528 <__udivmodqi4_loop>:
    3528:	99 1f       	adc	r25, r25
    352a:	96 17       	cp	r25, r22
    352c:	08 f0       	brcs	.+2      	; 0x3530 <__udivmodqi4_ep>
    352e:	96 1b       	sub	r25, r22

00003530 <__udivmodqi4_ep>:
    3530:	88 1f       	adc	r24, r24
    3532:	7a 95       	dec	r23
    3534:	c9 f7       	brne	.-14     	; 0x3528 <__udivmodqi4_loop>
    3536:	80 95       	com	r24
    3538:	08 95       	ret

0000353a <__udivmodhi4>:
    353a:	aa 1b       	sub	r26, r26
    353c:	bb 1b       	sub	r27, r27
    353e:	51 e1       	ldi	r21, 0x11	; 17
    3540:	07 c0       	rjmp	.+14     	; 0x3550 <__udivmodhi4_ep>

00003542 <__udivmodhi4_loop>:
    3542:	aa 1f       	adc	r26, r26
    3544:	bb 1f       	adc	r27, r27
    3546:	a6 17       	cp	r26, r22
    3548:	b7 07       	cpc	r27, r23
    354a:	10 f0       	brcs	.+4      	; 0x3550 <__udivmodhi4_ep>
    354c:	a6 1b       	sub	r26, r22
    354e:	b7 0b       	sbc	r27, r23

00003550 <__udivmodhi4_ep>:
    3550:	88 1f       	adc	r24, r24
    3552:	99 1f       	adc	r25, r25
    3554:	5a 95       	dec	r21
    3556:	a9 f7       	brne	.-22     	; 0x3542 <__udivmodhi4_loop>
    3558:	80 95       	com	r24
    355a:	90 95       	com	r25
    355c:	bc 01       	movw	r22, r24
    355e:	cd 01       	movw	r24, r26
    3560:	08 95       	ret

00003562 <__prologue_saves__>:
    3562:	2f 92       	push	r2
    3564:	3f 92       	push	r3
    3566:	4f 92       	push	r4
    3568:	5f 92       	push	r5
    356a:	6f 92       	push	r6
    356c:	7f 92       	push	r7
    356e:	8f 92       	push	r8
    3570:	9f 92       	push	r9
    3572:	af 92       	push	r10
    3574:	bf 92       	push	r11
    3576:	cf 92       	push	r12
    3578:	df 92       	push	r13
    357a:	ef 92       	push	r14
    357c:	ff 92       	push	r15
    357e:	0f 93       	push	r16
    3580:	1f 93       	push	r17
    3582:	cf 93       	push	r28
    3584:	df 93       	push	r29
    3586:	cd b7       	in	r28, 0x3d	; 61
    3588:	de b7       	in	r29, 0x3e	; 62
    358a:	ca 1b       	sub	r28, r26
    358c:	db 0b       	sbc	r29, r27
    358e:	0f b6       	in	r0, 0x3f	; 63
    3590:	f8 94       	cli
    3592:	de bf       	out	0x3e, r29	; 62
    3594:	0f be       	out	0x3f, r0	; 63
    3596:	cd bf       	out	0x3d, r28	; 61
    3598:	09 94       	ijmp

0000359a <__epilogue_restores__>:
    359a:	2a 88       	ldd	r2, Y+18	; 0x12
    359c:	39 88       	ldd	r3, Y+17	; 0x11
    359e:	48 88       	ldd	r4, Y+16	; 0x10
    35a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    35a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    35a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    35a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    35a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    35aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    35ac:	b9 84       	ldd	r11, Y+9	; 0x09
    35ae:	c8 84       	ldd	r12, Y+8	; 0x08
    35b0:	df 80       	ldd	r13, Y+7	; 0x07
    35b2:	ee 80       	ldd	r14, Y+6	; 0x06
    35b4:	fd 80       	ldd	r15, Y+5	; 0x05
    35b6:	0c 81       	ldd	r16, Y+4	; 0x04
    35b8:	1b 81       	ldd	r17, Y+3	; 0x03
    35ba:	aa 81       	ldd	r26, Y+2	; 0x02
    35bc:	b9 81       	ldd	r27, Y+1	; 0x01
    35be:	ce 0f       	add	r28, r30
    35c0:	d1 1d       	adc	r29, r1
    35c2:	0f b6       	in	r0, 0x3f	; 63
    35c4:	f8 94       	cli
    35c6:	de bf       	out	0x3e, r29	; 62
    35c8:	0f be       	out	0x3f, r0	; 63
    35ca:	cd bf       	out	0x3d, r28	; 61
    35cc:	ed 01       	movw	r28, r26
    35ce:	08 95       	ret

000035d0 <memset>:
    35d0:	dc 01       	movw	r26, r24
    35d2:	01 c0       	rjmp	.+2      	; 0x35d6 <memset+0x6>
    35d4:	6d 93       	st	X+, r22
    35d6:	41 50       	subi	r20, 0x01	; 1
    35d8:	50 40       	sbci	r21, 0x00	; 0
    35da:	e0 f7       	brcc	.-8      	; 0x35d4 <memset+0x4>
    35dc:	08 95       	ret

000035de <sprintf>:
    35de:	ae e0       	ldi	r26, 0x0E	; 14
    35e0:	b0 e0       	ldi	r27, 0x00	; 0
    35e2:	e5 ef       	ldi	r30, 0xF5	; 245
    35e4:	fa e1       	ldi	r31, 0x1A	; 26
    35e6:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__prologue_saves__+0x1c>
    35ea:	0d 89       	ldd	r16, Y+21	; 0x15
    35ec:	1e 89       	ldd	r17, Y+22	; 0x16
    35ee:	86 e0       	ldi	r24, 0x06	; 6
    35f0:	8c 83       	std	Y+4, r24	; 0x04
    35f2:	1a 83       	std	Y+2, r17	; 0x02
    35f4:	09 83       	std	Y+1, r16	; 0x01
    35f6:	8f ef       	ldi	r24, 0xFF	; 255
    35f8:	9f e7       	ldi	r25, 0x7F	; 127
    35fa:	9e 83       	std	Y+6, r25	; 0x06
    35fc:	8d 83       	std	Y+5, r24	; 0x05
    35fe:	9e 01       	movw	r18, r28
    3600:	27 5e       	subi	r18, 0xE7	; 231
    3602:	3f 4f       	sbci	r19, 0xFF	; 255
    3604:	ce 01       	movw	r24, r28
    3606:	01 96       	adiw	r24, 0x01	; 1
    3608:	6f 89       	ldd	r22, Y+23	; 0x17
    360a:	78 8d       	ldd	r23, Y+24	; 0x18
    360c:	a9 01       	movw	r20, r18
    360e:	0e 94 13 1b 	call	0x3626	; 0x3626 <vfprintf>
    3612:	2f 81       	ldd	r18, Y+7	; 0x07
    3614:	38 85       	ldd	r19, Y+8	; 0x08
    3616:	02 0f       	add	r16, r18
    3618:	13 1f       	adc	r17, r19
    361a:	f8 01       	movw	r30, r16
    361c:	10 82       	st	Z, r1
    361e:	2e 96       	adiw	r28, 0x0e	; 14
    3620:	e4 e0       	ldi	r30, 0x04	; 4
    3622:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__epilogue_restores__+0x1c>

00003626 <vfprintf>:
    3626:	ab e0       	ldi	r26, 0x0B	; 11
    3628:	b0 e0       	ldi	r27, 0x00	; 0
    362a:	e9 e1       	ldi	r30, 0x19	; 25
    362c:	fb e1       	ldi	r31, 0x1B	; 27
    362e:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__prologue_saves__>
    3632:	3c 01       	movw	r6, r24
    3634:	2b 01       	movw	r4, r22
    3636:	5a 01       	movw	r10, r20
    3638:	fc 01       	movw	r30, r24
    363a:	17 82       	std	Z+7, r1	; 0x07
    363c:	16 82       	std	Z+6, r1	; 0x06
    363e:	83 81       	ldd	r24, Z+3	; 0x03
    3640:	81 fd       	sbrc	r24, 1
    3642:	03 c0       	rjmp	.+6      	; 0x364a <vfprintf+0x24>
    3644:	6f ef       	ldi	r22, 0xFF	; 255
    3646:	7f ef       	ldi	r23, 0xFF	; 255
    3648:	c6 c1       	rjmp	.+908    	; 0x39d6 <vfprintf+0x3b0>
    364a:	9a e0       	ldi	r25, 0x0A	; 10
    364c:	89 2e       	mov	r8, r25
    364e:	1e 01       	movw	r2, r28
    3650:	08 94       	sec
    3652:	21 1c       	adc	r2, r1
    3654:	31 1c       	adc	r3, r1
    3656:	f3 01       	movw	r30, r6
    3658:	23 81       	ldd	r18, Z+3	; 0x03
    365a:	f2 01       	movw	r30, r4
    365c:	23 fd       	sbrc	r18, 3
    365e:	85 91       	lpm	r24, Z+
    3660:	23 ff       	sbrs	r18, 3
    3662:	81 91       	ld	r24, Z+
    3664:	2f 01       	movw	r4, r30
    3666:	88 23       	and	r24, r24
    3668:	09 f4       	brne	.+2      	; 0x366c <vfprintf+0x46>
    366a:	b2 c1       	rjmp	.+868    	; 0x39d0 <vfprintf+0x3aa>
    366c:	85 32       	cpi	r24, 0x25	; 37
    366e:	39 f4       	brne	.+14     	; 0x367e <vfprintf+0x58>
    3670:	23 fd       	sbrc	r18, 3
    3672:	85 91       	lpm	r24, Z+
    3674:	23 ff       	sbrs	r18, 3
    3676:	81 91       	ld	r24, Z+
    3678:	2f 01       	movw	r4, r30
    367a:	85 32       	cpi	r24, 0x25	; 37
    367c:	29 f4       	brne	.+10     	; 0x3688 <vfprintf+0x62>
    367e:	90 e0       	ldi	r25, 0x00	; 0
    3680:	b3 01       	movw	r22, r6
    3682:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <fputc>
    3686:	e7 cf       	rjmp	.-50     	; 0x3656 <vfprintf+0x30>
    3688:	98 2f       	mov	r25, r24
    368a:	ff 24       	eor	r15, r15
    368c:	ee 24       	eor	r14, r14
    368e:	99 24       	eor	r9, r9
    3690:	ff e1       	ldi	r31, 0x1F	; 31
    3692:	ff 15       	cp	r31, r15
    3694:	d0 f0       	brcs	.+52     	; 0x36ca <vfprintf+0xa4>
    3696:	9b 32       	cpi	r25, 0x2B	; 43
    3698:	69 f0       	breq	.+26     	; 0x36b4 <vfprintf+0x8e>
    369a:	9c 32       	cpi	r25, 0x2C	; 44
    369c:	28 f4       	brcc	.+10     	; 0x36a8 <vfprintf+0x82>
    369e:	90 32       	cpi	r25, 0x20	; 32
    36a0:	59 f0       	breq	.+22     	; 0x36b8 <vfprintf+0x92>
    36a2:	93 32       	cpi	r25, 0x23	; 35
    36a4:	91 f4       	brne	.+36     	; 0x36ca <vfprintf+0xa4>
    36a6:	0e c0       	rjmp	.+28     	; 0x36c4 <vfprintf+0x9e>
    36a8:	9d 32       	cpi	r25, 0x2D	; 45
    36aa:	49 f0       	breq	.+18     	; 0x36be <vfprintf+0x98>
    36ac:	90 33       	cpi	r25, 0x30	; 48
    36ae:	69 f4       	brne	.+26     	; 0x36ca <vfprintf+0xa4>
    36b0:	41 e0       	ldi	r20, 0x01	; 1
    36b2:	24 c0       	rjmp	.+72     	; 0x36fc <vfprintf+0xd6>
    36b4:	52 e0       	ldi	r21, 0x02	; 2
    36b6:	f5 2a       	or	r15, r21
    36b8:	84 e0       	ldi	r24, 0x04	; 4
    36ba:	f8 2a       	or	r15, r24
    36bc:	28 c0       	rjmp	.+80     	; 0x370e <vfprintf+0xe8>
    36be:	98 e0       	ldi	r25, 0x08	; 8
    36c0:	f9 2a       	or	r15, r25
    36c2:	25 c0       	rjmp	.+74     	; 0x370e <vfprintf+0xe8>
    36c4:	e0 e1       	ldi	r30, 0x10	; 16
    36c6:	fe 2a       	or	r15, r30
    36c8:	22 c0       	rjmp	.+68     	; 0x370e <vfprintf+0xe8>
    36ca:	f7 fc       	sbrc	r15, 7
    36cc:	29 c0       	rjmp	.+82     	; 0x3720 <vfprintf+0xfa>
    36ce:	89 2f       	mov	r24, r25
    36d0:	80 53       	subi	r24, 0x30	; 48
    36d2:	8a 30       	cpi	r24, 0x0A	; 10
    36d4:	70 f4       	brcc	.+28     	; 0x36f2 <vfprintf+0xcc>
    36d6:	f6 fe       	sbrs	r15, 6
    36d8:	05 c0       	rjmp	.+10     	; 0x36e4 <vfprintf+0xbe>
    36da:	98 9c       	mul	r9, r8
    36dc:	90 2c       	mov	r9, r0
    36de:	11 24       	eor	r1, r1
    36e0:	98 0e       	add	r9, r24
    36e2:	15 c0       	rjmp	.+42     	; 0x370e <vfprintf+0xe8>
    36e4:	e8 9c       	mul	r14, r8
    36e6:	e0 2c       	mov	r14, r0
    36e8:	11 24       	eor	r1, r1
    36ea:	e8 0e       	add	r14, r24
    36ec:	f0 e2       	ldi	r31, 0x20	; 32
    36ee:	ff 2a       	or	r15, r31
    36f0:	0e c0       	rjmp	.+28     	; 0x370e <vfprintf+0xe8>
    36f2:	9e 32       	cpi	r25, 0x2E	; 46
    36f4:	29 f4       	brne	.+10     	; 0x3700 <vfprintf+0xda>
    36f6:	f6 fc       	sbrc	r15, 6
    36f8:	6b c1       	rjmp	.+726    	; 0x39d0 <vfprintf+0x3aa>
    36fa:	40 e4       	ldi	r20, 0x40	; 64
    36fc:	f4 2a       	or	r15, r20
    36fe:	07 c0       	rjmp	.+14     	; 0x370e <vfprintf+0xe8>
    3700:	9c 36       	cpi	r25, 0x6C	; 108
    3702:	19 f4       	brne	.+6      	; 0x370a <vfprintf+0xe4>
    3704:	50 e8       	ldi	r21, 0x80	; 128
    3706:	f5 2a       	or	r15, r21
    3708:	02 c0       	rjmp	.+4      	; 0x370e <vfprintf+0xe8>
    370a:	98 36       	cpi	r25, 0x68	; 104
    370c:	49 f4       	brne	.+18     	; 0x3720 <vfprintf+0xfa>
    370e:	f2 01       	movw	r30, r4
    3710:	23 fd       	sbrc	r18, 3
    3712:	95 91       	lpm	r25, Z+
    3714:	23 ff       	sbrs	r18, 3
    3716:	91 91       	ld	r25, Z+
    3718:	2f 01       	movw	r4, r30
    371a:	99 23       	and	r25, r25
    371c:	09 f0       	breq	.+2      	; 0x3720 <vfprintf+0xfa>
    371e:	b8 cf       	rjmp	.-144    	; 0x3690 <vfprintf+0x6a>
    3720:	89 2f       	mov	r24, r25
    3722:	85 54       	subi	r24, 0x45	; 69
    3724:	83 30       	cpi	r24, 0x03	; 3
    3726:	18 f0       	brcs	.+6      	; 0x372e <vfprintf+0x108>
    3728:	80 52       	subi	r24, 0x20	; 32
    372a:	83 30       	cpi	r24, 0x03	; 3
    372c:	38 f4       	brcc	.+14     	; 0x373c <vfprintf+0x116>
    372e:	44 e0       	ldi	r20, 0x04	; 4
    3730:	50 e0       	ldi	r21, 0x00	; 0
    3732:	a4 0e       	add	r10, r20
    3734:	b5 1e       	adc	r11, r21
    3736:	5f e3       	ldi	r21, 0x3F	; 63
    3738:	59 83       	std	Y+1, r21	; 0x01
    373a:	0f c0       	rjmp	.+30     	; 0x375a <vfprintf+0x134>
    373c:	93 36       	cpi	r25, 0x63	; 99
    373e:	31 f0       	breq	.+12     	; 0x374c <vfprintf+0x126>
    3740:	93 37       	cpi	r25, 0x73	; 115
    3742:	79 f0       	breq	.+30     	; 0x3762 <vfprintf+0x13c>
    3744:	93 35       	cpi	r25, 0x53	; 83
    3746:	09 f0       	breq	.+2      	; 0x374a <vfprintf+0x124>
    3748:	56 c0       	rjmp	.+172    	; 0x37f6 <vfprintf+0x1d0>
    374a:	20 c0       	rjmp	.+64     	; 0x378c <vfprintf+0x166>
    374c:	f5 01       	movw	r30, r10
    374e:	80 81       	ld	r24, Z
    3750:	89 83       	std	Y+1, r24	; 0x01
    3752:	42 e0       	ldi	r20, 0x02	; 2
    3754:	50 e0       	ldi	r21, 0x00	; 0
    3756:	a4 0e       	add	r10, r20
    3758:	b5 1e       	adc	r11, r21
    375a:	61 01       	movw	r12, r2
    375c:	01 e0       	ldi	r16, 0x01	; 1
    375e:	10 e0       	ldi	r17, 0x00	; 0
    3760:	12 c0       	rjmp	.+36     	; 0x3786 <vfprintf+0x160>
    3762:	f5 01       	movw	r30, r10
    3764:	c0 80       	ld	r12, Z
    3766:	d1 80       	ldd	r13, Z+1	; 0x01
    3768:	f6 fc       	sbrc	r15, 6
    376a:	03 c0       	rjmp	.+6      	; 0x3772 <vfprintf+0x14c>
    376c:	6f ef       	ldi	r22, 0xFF	; 255
    376e:	7f ef       	ldi	r23, 0xFF	; 255
    3770:	02 c0       	rjmp	.+4      	; 0x3776 <vfprintf+0x150>
    3772:	69 2d       	mov	r22, r9
    3774:	70 e0       	ldi	r23, 0x00	; 0
    3776:	42 e0       	ldi	r20, 0x02	; 2
    3778:	50 e0       	ldi	r21, 0x00	; 0
    377a:	a4 0e       	add	r10, r20
    377c:	b5 1e       	adc	r11, r21
    377e:	c6 01       	movw	r24, r12
    3780:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <strnlen>
    3784:	8c 01       	movw	r16, r24
    3786:	5f e7       	ldi	r21, 0x7F	; 127
    3788:	f5 22       	and	r15, r21
    378a:	14 c0       	rjmp	.+40     	; 0x37b4 <vfprintf+0x18e>
    378c:	f5 01       	movw	r30, r10
    378e:	c0 80       	ld	r12, Z
    3790:	d1 80       	ldd	r13, Z+1	; 0x01
    3792:	f6 fc       	sbrc	r15, 6
    3794:	03 c0       	rjmp	.+6      	; 0x379c <vfprintf+0x176>
    3796:	6f ef       	ldi	r22, 0xFF	; 255
    3798:	7f ef       	ldi	r23, 0xFF	; 255
    379a:	02 c0       	rjmp	.+4      	; 0x37a0 <vfprintf+0x17a>
    379c:	69 2d       	mov	r22, r9
    379e:	70 e0       	ldi	r23, 0x00	; 0
    37a0:	42 e0       	ldi	r20, 0x02	; 2
    37a2:	50 e0       	ldi	r21, 0x00	; 0
    37a4:	a4 0e       	add	r10, r20
    37a6:	b5 1e       	adc	r11, r21
    37a8:	c6 01       	movw	r24, r12
    37aa:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <strnlen_P>
    37ae:	8c 01       	movw	r16, r24
    37b0:	50 e8       	ldi	r21, 0x80	; 128
    37b2:	f5 2a       	or	r15, r21
    37b4:	f3 fe       	sbrs	r15, 3
    37b6:	07 c0       	rjmp	.+14     	; 0x37c6 <vfprintf+0x1a0>
    37b8:	1a c0       	rjmp	.+52     	; 0x37ee <vfprintf+0x1c8>
    37ba:	80 e2       	ldi	r24, 0x20	; 32
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	b3 01       	movw	r22, r6
    37c0:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <fputc>
    37c4:	ea 94       	dec	r14
    37c6:	8e 2d       	mov	r24, r14
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	08 17       	cp	r16, r24
    37cc:	19 07       	cpc	r17, r25
    37ce:	a8 f3       	brcs	.-22     	; 0x37ba <vfprintf+0x194>
    37d0:	0e c0       	rjmp	.+28     	; 0x37ee <vfprintf+0x1c8>
    37d2:	f6 01       	movw	r30, r12
    37d4:	f7 fc       	sbrc	r15, 7
    37d6:	85 91       	lpm	r24, Z+
    37d8:	f7 fe       	sbrs	r15, 7
    37da:	81 91       	ld	r24, Z+
    37dc:	6f 01       	movw	r12, r30
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	b3 01       	movw	r22, r6
    37e2:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <fputc>
    37e6:	e1 10       	cpse	r14, r1
    37e8:	ea 94       	dec	r14
    37ea:	01 50       	subi	r16, 0x01	; 1
    37ec:	10 40       	sbci	r17, 0x00	; 0
    37ee:	01 15       	cp	r16, r1
    37f0:	11 05       	cpc	r17, r1
    37f2:	79 f7       	brne	.-34     	; 0x37d2 <vfprintf+0x1ac>
    37f4:	ea c0       	rjmp	.+468    	; 0x39ca <vfprintf+0x3a4>
    37f6:	94 36       	cpi	r25, 0x64	; 100
    37f8:	11 f0       	breq	.+4      	; 0x37fe <vfprintf+0x1d8>
    37fa:	99 36       	cpi	r25, 0x69	; 105
    37fc:	69 f5       	brne	.+90     	; 0x3858 <vfprintf+0x232>
    37fe:	f7 fe       	sbrs	r15, 7
    3800:	08 c0       	rjmp	.+16     	; 0x3812 <vfprintf+0x1ec>
    3802:	f5 01       	movw	r30, r10
    3804:	20 81       	ld	r18, Z
    3806:	31 81       	ldd	r19, Z+1	; 0x01
    3808:	42 81       	ldd	r20, Z+2	; 0x02
    380a:	53 81       	ldd	r21, Z+3	; 0x03
    380c:	84 e0       	ldi	r24, 0x04	; 4
    380e:	90 e0       	ldi	r25, 0x00	; 0
    3810:	0a c0       	rjmp	.+20     	; 0x3826 <vfprintf+0x200>
    3812:	f5 01       	movw	r30, r10
    3814:	80 81       	ld	r24, Z
    3816:	91 81       	ldd	r25, Z+1	; 0x01
    3818:	9c 01       	movw	r18, r24
    381a:	44 27       	eor	r20, r20
    381c:	37 fd       	sbrc	r19, 7
    381e:	40 95       	com	r20
    3820:	54 2f       	mov	r21, r20
    3822:	82 e0       	ldi	r24, 0x02	; 2
    3824:	90 e0       	ldi	r25, 0x00	; 0
    3826:	a8 0e       	add	r10, r24
    3828:	b9 1e       	adc	r11, r25
    382a:	9f e6       	ldi	r25, 0x6F	; 111
    382c:	f9 22       	and	r15, r25
    382e:	57 ff       	sbrs	r21, 7
    3830:	09 c0       	rjmp	.+18     	; 0x3844 <vfprintf+0x21e>
    3832:	50 95       	com	r21
    3834:	40 95       	com	r20
    3836:	30 95       	com	r19
    3838:	21 95       	neg	r18
    383a:	3f 4f       	sbci	r19, 0xFF	; 255
    383c:	4f 4f       	sbci	r20, 0xFF	; 255
    383e:	5f 4f       	sbci	r21, 0xFF	; 255
    3840:	e0 e8       	ldi	r30, 0x80	; 128
    3842:	fe 2a       	or	r15, r30
    3844:	ca 01       	movw	r24, r20
    3846:	b9 01       	movw	r22, r18
    3848:	a1 01       	movw	r20, r2
    384a:	2a e0       	ldi	r18, 0x0A	; 10
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <__ultoa_invert>
    3852:	d8 2e       	mov	r13, r24
    3854:	d2 18       	sub	r13, r2
    3856:	40 c0       	rjmp	.+128    	; 0x38d8 <vfprintf+0x2b2>
    3858:	95 37       	cpi	r25, 0x75	; 117
    385a:	29 f4       	brne	.+10     	; 0x3866 <vfprintf+0x240>
    385c:	1f 2d       	mov	r17, r15
    385e:	1f 7e       	andi	r17, 0xEF	; 239
    3860:	2a e0       	ldi	r18, 0x0A	; 10
    3862:	30 e0       	ldi	r19, 0x00	; 0
    3864:	1d c0       	rjmp	.+58     	; 0x38a0 <vfprintf+0x27a>
    3866:	1f 2d       	mov	r17, r15
    3868:	19 7f       	andi	r17, 0xF9	; 249
    386a:	9f 36       	cpi	r25, 0x6F	; 111
    386c:	61 f0       	breq	.+24     	; 0x3886 <vfprintf+0x260>
    386e:	90 37       	cpi	r25, 0x70	; 112
    3870:	20 f4       	brcc	.+8      	; 0x387a <vfprintf+0x254>
    3872:	98 35       	cpi	r25, 0x58	; 88
    3874:	09 f0       	breq	.+2      	; 0x3878 <vfprintf+0x252>
    3876:	ac c0       	rjmp	.+344    	; 0x39d0 <vfprintf+0x3aa>
    3878:	0f c0       	rjmp	.+30     	; 0x3898 <vfprintf+0x272>
    387a:	90 37       	cpi	r25, 0x70	; 112
    387c:	39 f0       	breq	.+14     	; 0x388c <vfprintf+0x266>
    387e:	98 37       	cpi	r25, 0x78	; 120
    3880:	09 f0       	breq	.+2      	; 0x3884 <vfprintf+0x25e>
    3882:	a6 c0       	rjmp	.+332    	; 0x39d0 <vfprintf+0x3aa>
    3884:	04 c0       	rjmp	.+8      	; 0x388e <vfprintf+0x268>
    3886:	28 e0       	ldi	r18, 0x08	; 8
    3888:	30 e0       	ldi	r19, 0x00	; 0
    388a:	0a c0       	rjmp	.+20     	; 0x38a0 <vfprintf+0x27a>
    388c:	10 61       	ori	r17, 0x10	; 16
    388e:	14 fd       	sbrc	r17, 4
    3890:	14 60       	ori	r17, 0x04	; 4
    3892:	20 e1       	ldi	r18, 0x10	; 16
    3894:	30 e0       	ldi	r19, 0x00	; 0
    3896:	04 c0       	rjmp	.+8      	; 0x38a0 <vfprintf+0x27a>
    3898:	14 fd       	sbrc	r17, 4
    389a:	16 60       	ori	r17, 0x06	; 6
    389c:	20 e1       	ldi	r18, 0x10	; 16
    389e:	32 e0       	ldi	r19, 0x02	; 2
    38a0:	17 ff       	sbrs	r17, 7
    38a2:	08 c0       	rjmp	.+16     	; 0x38b4 <vfprintf+0x28e>
    38a4:	f5 01       	movw	r30, r10
    38a6:	60 81       	ld	r22, Z
    38a8:	71 81       	ldd	r23, Z+1	; 0x01
    38aa:	82 81       	ldd	r24, Z+2	; 0x02
    38ac:	93 81       	ldd	r25, Z+3	; 0x03
    38ae:	44 e0       	ldi	r20, 0x04	; 4
    38b0:	50 e0       	ldi	r21, 0x00	; 0
    38b2:	08 c0       	rjmp	.+16     	; 0x38c4 <vfprintf+0x29e>
    38b4:	f5 01       	movw	r30, r10
    38b6:	80 81       	ld	r24, Z
    38b8:	91 81       	ldd	r25, Z+1	; 0x01
    38ba:	bc 01       	movw	r22, r24
    38bc:	80 e0       	ldi	r24, 0x00	; 0
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	42 e0       	ldi	r20, 0x02	; 2
    38c2:	50 e0       	ldi	r21, 0x00	; 0
    38c4:	a4 0e       	add	r10, r20
    38c6:	b5 1e       	adc	r11, r21
    38c8:	a1 01       	movw	r20, r2
    38ca:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <__ultoa_invert>
    38ce:	d8 2e       	mov	r13, r24
    38d0:	d2 18       	sub	r13, r2
    38d2:	8f e7       	ldi	r24, 0x7F	; 127
    38d4:	f8 2e       	mov	r15, r24
    38d6:	f1 22       	and	r15, r17
    38d8:	f6 fe       	sbrs	r15, 6
    38da:	0b c0       	rjmp	.+22     	; 0x38f2 <vfprintf+0x2cc>
    38dc:	5e ef       	ldi	r21, 0xFE	; 254
    38de:	f5 22       	and	r15, r21
    38e0:	d9 14       	cp	r13, r9
    38e2:	38 f4       	brcc	.+14     	; 0x38f2 <vfprintf+0x2cc>
    38e4:	f4 fe       	sbrs	r15, 4
    38e6:	07 c0       	rjmp	.+14     	; 0x38f6 <vfprintf+0x2d0>
    38e8:	f2 fc       	sbrc	r15, 2
    38ea:	05 c0       	rjmp	.+10     	; 0x38f6 <vfprintf+0x2d0>
    38ec:	8f ee       	ldi	r24, 0xEF	; 239
    38ee:	f8 22       	and	r15, r24
    38f0:	02 c0       	rjmp	.+4      	; 0x38f6 <vfprintf+0x2d0>
    38f2:	1d 2d       	mov	r17, r13
    38f4:	01 c0       	rjmp	.+2      	; 0x38f8 <vfprintf+0x2d2>
    38f6:	19 2d       	mov	r17, r9
    38f8:	f4 fe       	sbrs	r15, 4
    38fa:	0d c0       	rjmp	.+26     	; 0x3916 <vfprintf+0x2f0>
    38fc:	fe 01       	movw	r30, r28
    38fe:	ed 0d       	add	r30, r13
    3900:	f1 1d       	adc	r31, r1
    3902:	80 81       	ld	r24, Z
    3904:	80 33       	cpi	r24, 0x30	; 48
    3906:	19 f4       	brne	.+6      	; 0x390e <vfprintf+0x2e8>
    3908:	99 ee       	ldi	r25, 0xE9	; 233
    390a:	f9 22       	and	r15, r25
    390c:	08 c0       	rjmp	.+16     	; 0x391e <vfprintf+0x2f8>
    390e:	1f 5f       	subi	r17, 0xFF	; 255
    3910:	f2 fe       	sbrs	r15, 2
    3912:	05 c0       	rjmp	.+10     	; 0x391e <vfprintf+0x2f8>
    3914:	03 c0       	rjmp	.+6      	; 0x391c <vfprintf+0x2f6>
    3916:	8f 2d       	mov	r24, r15
    3918:	86 78       	andi	r24, 0x86	; 134
    391a:	09 f0       	breq	.+2      	; 0x391e <vfprintf+0x2f8>
    391c:	1f 5f       	subi	r17, 0xFF	; 255
    391e:	0f 2d       	mov	r16, r15
    3920:	f3 fc       	sbrc	r15, 3
    3922:	14 c0       	rjmp	.+40     	; 0x394c <vfprintf+0x326>
    3924:	f0 fe       	sbrs	r15, 0
    3926:	0f c0       	rjmp	.+30     	; 0x3946 <vfprintf+0x320>
    3928:	1e 15       	cp	r17, r14
    392a:	10 f0       	brcs	.+4      	; 0x3930 <vfprintf+0x30a>
    392c:	9d 2c       	mov	r9, r13
    392e:	0b c0       	rjmp	.+22     	; 0x3946 <vfprintf+0x320>
    3930:	9d 2c       	mov	r9, r13
    3932:	9e 0c       	add	r9, r14
    3934:	91 1a       	sub	r9, r17
    3936:	1e 2d       	mov	r17, r14
    3938:	06 c0       	rjmp	.+12     	; 0x3946 <vfprintf+0x320>
    393a:	80 e2       	ldi	r24, 0x20	; 32
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	b3 01       	movw	r22, r6
    3940:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <fputc>
    3944:	1f 5f       	subi	r17, 0xFF	; 255
    3946:	1e 15       	cp	r17, r14
    3948:	c0 f3       	brcs	.-16     	; 0x393a <vfprintf+0x314>
    394a:	04 c0       	rjmp	.+8      	; 0x3954 <vfprintf+0x32e>
    394c:	1e 15       	cp	r17, r14
    394e:	10 f4       	brcc	.+4      	; 0x3954 <vfprintf+0x32e>
    3950:	e1 1a       	sub	r14, r17
    3952:	01 c0       	rjmp	.+2      	; 0x3956 <vfprintf+0x330>
    3954:	ee 24       	eor	r14, r14
    3956:	04 ff       	sbrs	r16, 4
    3958:	0f c0       	rjmp	.+30     	; 0x3978 <vfprintf+0x352>
    395a:	80 e3       	ldi	r24, 0x30	; 48
    395c:	90 e0       	ldi	r25, 0x00	; 0
    395e:	b3 01       	movw	r22, r6
    3960:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <fputc>
    3964:	02 ff       	sbrs	r16, 2
    3966:	1d c0       	rjmp	.+58     	; 0x39a2 <vfprintf+0x37c>
    3968:	01 fd       	sbrc	r16, 1
    396a:	03 c0       	rjmp	.+6      	; 0x3972 <vfprintf+0x34c>
    396c:	88 e7       	ldi	r24, 0x78	; 120
    396e:	90 e0       	ldi	r25, 0x00	; 0
    3970:	0e c0       	rjmp	.+28     	; 0x398e <vfprintf+0x368>
    3972:	88 e5       	ldi	r24, 0x58	; 88
    3974:	90 e0       	ldi	r25, 0x00	; 0
    3976:	0b c0       	rjmp	.+22     	; 0x398e <vfprintf+0x368>
    3978:	80 2f       	mov	r24, r16
    397a:	86 78       	andi	r24, 0x86	; 134
    397c:	91 f0       	breq	.+36     	; 0x39a2 <vfprintf+0x37c>
    397e:	01 ff       	sbrs	r16, 1
    3980:	02 c0       	rjmp	.+4      	; 0x3986 <vfprintf+0x360>
    3982:	8b e2       	ldi	r24, 0x2B	; 43
    3984:	01 c0       	rjmp	.+2      	; 0x3988 <vfprintf+0x362>
    3986:	80 e2       	ldi	r24, 0x20	; 32
    3988:	f7 fc       	sbrc	r15, 7
    398a:	8d e2       	ldi	r24, 0x2D	; 45
    398c:	90 e0       	ldi	r25, 0x00	; 0
    398e:	b3 01       	movw	r22, r6
    3990:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <fputc>
    3994:	06 c0       	rjmp	.+12     	; 0x39a2 <vfprintf+0x37c>
    3996:	80 e3       	ldi	r24, 0x30	; 48
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	b3 01       	movw	r22, r6
    399c:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <fputc>
    39a0:	9a 94       	dec	r9
    39a2:	d9 14       	cp	r13, r9
    39a4:	c0 f3       	brcs	.-16     	; 0x3996 <vfprintf+0x370>
    39a6:	da 94       	dec	r13
    39a8:	f1 01       	movw	r30, r2
    39aa:	ed 0d       	add	r30, r13
    39ac:	f1 1d       	adc	r31, r1
    39ae:	80 81       	ld	r24, Z
    39b0:	90 e0       	ldi	r25, 0x00	; 0
    39b2:	b3 01       	movw	r22, r6
    39b4:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <fputc>
    39b8:	dd 20       	and	r13, r13
    39ba:	a9 f7       	brne	.-22     	; 0x39a6 <vfprintf+0x380>
    39bc:	06 c0       	rjmp	.+12     	; 0x39ca <vfprintf+0x3a4>
    39be:	80 e2       	ldi	r24, 0x20	; 32
    39c0:	90 e0       	ldi	r25, 0x00	; 0
    39c2:	b3 01       	movw	r22, r6
    39c4:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <fputc>
    39c8:	ea 94       	dec	r14
    39ca:	ee 20       	and	r14, r14
    39cc:	c1 f7       	brne	.-16     	; 0x39be <vfprintf+0x398>
    39ce:	43 ce       	rjmp	.-890    	; 0x3656 <vfprintf+0x30>
    39d0:	f3 01       	movw	r30, r6
    39d2:	66 81       	ldd	r22, Z+6	; 0x06
    39d4:	77 81       	ldd	r23, Z+7	; 0x07
    39d6:	cb 01       	movw	r24, r22
    39d8:	2b 96       	adiw	r28, 0x0b	; 11
    39da:	e2 e1       	ldi	r30, 0x12	; 18
    39dc:	0c 94 cd 1a 	jmp	0x359a	; 0x359a <__epilogue_restores__>

000039e0 <strnlen_P>:
    39e0:	fc 01       	movw	r30, r24
    39e2:	05 90       	lpm	r0, Z+
    39e4:	61 50       	subi	r22, 0x01	; 1
    39e6:	70 40       	sbci	r23, 0x00	; 0
    39e8:	01 10       	cpse	r0, r1
    39ea:	d8 f7       	brcc	.-10     	; 0x39e2 <strnlen_P+0x2>
    39ec:	80 95       	com	r24
    39ee:	90 95       	com	r25
    39f0:	8e 0f       	add	r24, r30
    39f2:	9f 1f       	adc	r25, r31
    39f4:	08 95       	ret

000039f6 <strnlen>:
    39f6:	fc 01       	movw	r30, r24
    39f8:	61 50       	subi	r22, 0x01	; 1
    39fa:	70 40       	sbci	r23, 0x00	; 0
    39fc:	01 90       	ld	r0, Z+
    39fe:	01 10       	cpse	r0, r1
    3a00:	d8 f7       	brcc	.-10     	; 0x39f8 <strnlen+0x2>
    3a02:	80 95       	com	r24
    3a04:	90 95       	com	r25
    3a06:	8e 0f       	add	r24, r30
    3a08:	9f 1f       	adc	r25, r31
    3a0a:	08 95       	ret

00003a0c <fputc>:
    3a0c:	0f 93       	push	r16
    3a0e:	1f 93       	push	r17
    3a10:	cf 93       	push	r28
    3a12:	df 93       	push	r29
    3a14:	8c 01       	movw	r16, r24
    3a16:	eb 01       	movw	r28, r22
    3a18:	8b 81       	ldd	r24, Y+3	; 0x03
    3a1a:	81 ff       	sbrs	r24, 1
    3a1c:	1b c0       	rjmp	.+54     	; 0x3a54 <fputc+0x48>
    3a1e:	82 ff       	sbrs	r24, 2
    3a20:	0d c0       	rjmp	.+26     	; 0x3a3c <fputc+0x30>
    3a22:	2e 81       	ldd	r18, Y+6	; 0x06
    3a24:	3f 81       	ldd	r19, Y+7	; 0x07
    3a26:	8c 81       	ldd	r24, Y+4	; 0x04
    3a28:	9d 81       	ldd	r25, Y+5	; 0x05
    3a2a:	28 17       	cp	r18, r24
    3a2c:	39 07       	cpc	r19, r25
    3a2e:	64 f4       	brge	.+24     	; 0x3a48 <fputc+0x3c>
    3a30:	e8 81       	ld	r30, Y
    3a32:	f9 81       	ldd	r31, Y+1	; 0x01
    3a34:	01 93       	st	Z+, r16
    3a36:	f9 83       	std	Y+1, r31	; 0x01
    3a38:	e8 83       	st	Y, r30
    3a3a:	06 c0       	rjmp	.+12     	; 0x3a48 <fputc+0x3c>
    3a3c:	e8 85       	ldd	r30, Y+8	; 0x08
    3a3e:	f9 85       	ldd	r31, Y+9	; 0x09
    3a40:	80 2f       	mov	r24, r16
    3a42:	09 95       	icall
    3a44:	89 2b       	or	r24, r25
    3a46:	31 f4       	brne	.+12     	; 0x3a54 <fputc+0x48>
    3a48:	8e 81       	ldd	r24, Y+6	; 0x06
    3a4a:	9f 81       	ldd	r25, Y+7	; 0x07
    3a4c:	01 96       	adiw	r24, 0x01	; 1
    3a4e:	9f 83       	std	Y+7, r25	; 0x07
    3a50:	8e 83       	std	Y+6, r24	; 0x06
    3a52:	02 c0       	rjmp	.+4      	; 0x3a58 <fputc+0x4c>
    3a54:	0f ef       	ldi	r16, 0xFF	; 255
    3a56:	1f ef       	ldi	r17, 0xFF	; 255
    3a58:	c8 01       	movw	r24, r16
    3a5a:	df 91       	pop	r29
    3a5c:	cf 91       	pop	r28
    3a5e:	1f 91       	pop	r17
    3a60:	0f 91       	pop	r16
    3a62:	08 95       	ret

00003a64 <__ultoa_invert>:
    3a64:	fa 01       	movw	r30, r20
    3a66:	aa 27       	eor	r26, r26
    3a68:	28 30       	cpi	r18, 0x08	; 8
    3a6a:	51 f1       	breq	.+84     	; 0x3ac0 <__ultoa_invert+0x5c>
    3a6c:	20 31       	cpi	r18, 0x10	; 16
    3a6e:	81 f1       	breq	.+96     	; 0x3ad0 <__ultoa_invert+0x6c>
    3a70:	e8 94       	clt
    3a72:	6f 93       	push	r22
    3a74:	6e 7f       	andi	r22, 0xFE	; 254
    3a76:	6e 5f       	subi	r22, 0xFE	; 254
    3a78:	7f 4f       	sbci	r23, 0xFF	; 255
    3a7a:	8f 4f       	sbci	r24, 0xFF	; 255
    3a7c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a7e:	af 4f       	sbci	r26, 0xFF	; 255
    3a80:	b1 e0       	ldi	r27, 0x01	; 1
    3a82:	3e d0       	rcall	.+124    	; 0x3b00 <__ultoa_invert+0x9c>
    3a84:	b4 e0       	ldi	r27, 0x04	; 4
    3a86:	3c d0       	rcall	.+120    	; 0x3b00 <__ultoa_invert+0x9c>
    3a88:	67 0f       	add	r22, r23
    3a8a:	78 1f       	adc	r23, r24
    3a8c:	89 1f       	adc	r24, r25
    3a8e:	9a 1f       	adc	r25, r26
    3a90:	a1 1d       	adc	r26, r1
    3a92:	68 0f       	add	r22, r24
    3a94:	79 1f       	adc	r23, r25
    3a96:	8a 1f       	adc	r24, r26
    3a98:	91 1d       	adc	r25, r1
    3a9a:	a1 1d       	adc	r26, r1
    3a9c:	6a 0f       	add	r22, r26
    3a9e:	71 1d       	adc	r23, r1
    3aa0:	81 1d       	adc	r24, r1
    3aa2:	91 1d       	adc	r25, r1
    3aa4:	a1 1d       	adc	r26, r1
    3aa6:	20 d0       	rcall	.+64     	; 0x3ae8 <__ultoa_invert+0x84>
    3aa8:	09 f4       	brne	.+2      	; 0x3aac <__ultoa_invert+0x48>
    3aaa:	68 94       	set
    3aac:	3f 91       	pop	r19
    3aae:	2a e0       	ldi	r18, 0x0A	; 10
    3ab0:	26 9f       	mul	r18, r22
    3ab2:	11 24       	eor	r1, r1
    3ab4:	30 19       	sub	r19, r0
    3ab6:	30 5d       	subi	r19, 0xD0	; 208
    3ab8:	31 93       	st	Z+, r19
    3aba:	de f6       	brtc	.-74     	; 0x3a72 <__ultoa_invert+0xe>
    3abc:	cf 01       	movw	r24, r30
    3abe:	08 95       	ret
    3ac0:	46 2f       	mov	r20, r22
    3ac2:	47 70       	andi	r20, 0x07	; 7
    3ac4:	40 5d       	subi	r20, 0xD0	; 208
    3ac6:	41 93       	st	Z+, r20
    3ac8:	b3 e0       	ldi	r27, 0x03	; 3
    3aca:	0f d0       	rcall	.+30     	; 0x3aea <__ultoa_invert+0x86>
    3acc:	c9 f7       	brne	.-14     	; 0x3ac0 <__ultoa_invert+0x5c>
    3ace:	f6 cf       	rjmp	.-20     	; 0x3abc <__ultoa_invert+0x58>
    3ad0:	46 2f       	mov	r20, r22
    3ad2:	4f 70       	andi	r20, 0x0F	; 15
    3ad4:	40 5d       	subi	r20, 0xD0	; 208
    3ad6:	4a 33       	cpi	r20, 0x3A	; 58
    3ad8:	18 f0       	brcs	.+6      	; 0x3ae0 <__ultoa_invert+0x7c>
    3ada:	49 5d       	subi	r20, 0xD9	; 217
    3adc:	31 fd       	sbrc	r19, 1
    3ade:	40 52       	subi	r20, 0x20	; 32
    3ae0:	41 93       	st	Z+, r20
    3ae2:	02 d0       	rcall	.+4      	; 0x3ae8 <__ultoa_invert+0x84>
    3ae4:	a9 f7       	brne	.-22     	; 0x3ad0 <__ultoa_invert+0x6c>
    3ae6:	ea cf       	rjmp	.-44     	; 0x3abc <__ultoa_invert+0x58>
    3ae8:	b4 e0       	ldi	r27, 0x04	; 4
    3aea:	a6 95       	lsr	r26
    3aec:	97 95       	ror	r25
    3aee:	87 95       	ror	r24
    3af0:	77 95       	ror	r23
    3af2:	67 95       	ror	r22
    3af4:	ba 95       	dec	r27
    3af6:	c9 f7       	brne	.-14     	; 0x3aea <__ultoa_invert+0x86>
    3af8:	00 97       	sbiw	r24, 0x00	; 0
    3afa:	61 05       	cpc	r22, r1
    3afc:	71 05       	cpc	r23, r1
    3afe:	08 95       	ret
    3b00:	9b 01       	movw	r18, r22
    3b02:	ac 01       	movw	r20, r24
    3b04:	0a 2e       	mov	r0, r26
    3b06:	06 94       	lsr	r0
    3b08:	57 95       	ror	r21
    3b0a:	47 95       	ror	r20
    3b0c:	37 95       	ror	r19
    3b0e:	27 95       	ror	r18
    3b10:	ba 95       	dec	r27
    3b12:	c9 f7       	brne	.-14     	; 0x3b06 <__ultoa_invert+0xa2>
    3b14:	62 0f       	add	r22, r18
    3b16:	73 1f       	adc	r23, r19
    3b18:	84 1f       	adc	r24, r20
    3b1a:	95 1f       	adc	r25, r21
    3b1c:	a0 1d       	adc	r26, r0
    3b1e:	08 95       	ret

00003b20 <_exit>:
    3b20:	f8 94       	cli

00003b22 <__stop_program>:
    3b22:	ff cf       	rjmp	.-2      	; 0x3b22 <__stop_program>
